{
  "address": "0x8692936017a757A5a220313B56153472bF740EC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressesProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stableToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "variableToken",
          "type": "address"
        }
      ],
      "name": "deployedContracts",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        }
      ],
      "name": "initDeployment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setOracleBorrowRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "setOracleOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94226dd8dbfc1376d6c4196b433eb3ba63e366673718c9407daed255b6a9b4b8",
  "receipt": {
    "to": null,
    "from": "0x4Ae0010e604b1E0096aE95C0fd3e2DC768e76BEa",
    "contractAddress": "0x8692936017a757A5a220313B56153472bF740EC5",
    "transactionIndex": 36,
    "gasUsed": "3814827",
    "logsBloom": "0x
    "blockHash": "0x73dddacd09ed45380418e5eaeb65b8d6efd3f4e407269c022e75c47058b93225",
    "transactionHash": "0x94226dd8dbfc1376d6c4196b433eb3ba63e366673718c9407daed255b6a9b4b8",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 8976851,
        "transactionHash": "0x94226dd8dbfc1376d6c4196b433eb3ba63e366673718c9407daed255b6a9b4b8",
        "address": "0x8692936017a757A5a220313B56153472bF740EC5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ae0010e604b1e0096ae95c0fd3e2dc768e76bea"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x73dddacd09ed45380418e5eaeb65b8d6efd3f4e407269c022e75c47058b93225"
      }
    ],
    "blockNumber": 8976851,
    "cumulativeGasUsed": "8120541",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2c8f396924403abe6E93c7A252c906BD95D4bD4a",
    "0xc156E15ca721277879b4fC40f3613757210d811a"
  ],
  "numDeployments": 1,
  "solcInputHash": "d20862d9a7051998216c9f1f22667b5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableToken\",\"type\":\"address\"}],\"name\":\"deployedContracts\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"initDeployment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracleBorrowRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setOracleOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/StableAndVariableTokensHelper.sol\":\"StableAndVariableTokensHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3f4f6004978f9125f99d6bdd40665f465d85451045737942370f43417cc0696f\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ICreditDelegationToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface ICreditDelegationToken {\\n\\tevent BorrowAllowanceDelegated(address indexed fromUser, address indexed toUser, address asset, uint256 amount);\\n\\n\\t/**\\n\\t * @dev delegates borrowing power to a user on the specific debt token\\n\\t * @param delegatee the address receiving the delegated borrowing power\\n\\t * @param amount the maximum amount being delegated. Delegation will still\\n\\t * respect the liquidation constraints (even if delegated, a delegatee cannot\\n\\t * force a delegator HF to go below 1)\\n\\t **/\\n\\tfunction approveDelegation(address delegatee, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev returns the borrow allowance of the user\\n\\t * @param fromUser The user to giving allowance\\n\\t * @param toUser The user to give allowance to\\n\\t * @return the current allowance of toUser\\n\\t **/\\n\\tfunction borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1c8afa6074ed03139523f9e4f8cb28b254723737b3f6a3062e232bd790c6a07\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xbc2d79250445e87d578cefb23cd0876e1f29a7a4e611b2c18e082681985a7181\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title ILendingRateOracle interface\\n * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\\n **/\\n\\ninterface ILendingRateOracle {\\n\\t/**\\n    @dev returns the market borrow rate in ray\\n    **/\\n\\tfunction getMarketBorrowRate(address asset) external view returns (uint256);\\n\\n\\t/**\\n    @dev sets the market borrow rate. Rate value must be in ray\\n    **/\\n\\tfunction setMarketBorrowRate(address asset, uint256 rate) external;\\n}\\n\",\"keccak256\":\"0x7b83336fd8eadbfc0eed4d899ebbb2a0603a4ea2d6a24e7aab4a7b7c048bfaa1\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/************\\n@title IPriceOracle interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracle {\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\t/***********\\n    @dev sets the asset price, in wei\\n     */\\n\\tfunction setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x32f9bd3f20d9a2d6ae07470a1fa9f30b33323b74880c85e44339f05e91aecb2c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when new stable debt is minted\\n\\t * @param user The address of the user who triggered the minting\\n\\t * @param onBehalfOf The recipient of stable debt tokens\\n\\t * @param amount The amount minted\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The increase in balance since the last action of the user\\n\\t * @param newRate The rate of the debt after the minting\\n\\t * @param avgStableRate The new average stable rate after the minting\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Mint(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 newRate,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when new stable debt is burned\\n\\t * @param user The address of the user\\n\\t * @param amount The amount being burned\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The the increase in balance since the last action of the user\\n\\t * @param avgStableRate The new average stable rate after the burning\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Burn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the average rate of all the stable rate loans.\\n\\t * @return The average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user debt\\n\\t * @return The stable rate of the user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the user\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the principal, the total supply and the average stable rate\\n\\t **/\\n\\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the total supply\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0xed20abf39da70863a5fd49d173c907cea1acc2fd09c255c4903990c82fc302e0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param onBehalfOf The address of the user on which behalf minting has been performed\\n\\t * @param value The amount to be minted\\n\\t * @param index The last index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when variable debt is burnt\\n\\t * @param user The user which debt has been burned\\n\\t * @param amount The amount of debt being burned\\n\\t * @param index The index of the user\\n\\t **/\\n\\tevent Burn(address indexed user, uint256 amount, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * @param user The user which debt is burnt\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0x45c38c0244862161745e30c52156a7d37ccce31d20eded4ee6538696ccec7aab\",\"license\":\"agpl-3.0\"},\"contracts/lending/StableAndVariableTokensHelper.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {StableDebtToken} from \\\"./tokenization/StableDebtToken.sol\\\";\\nimport {VariableDebtToken} from \\\"./tokenization/VariableDebtToken.sol\\\";\\nimport {LendingRateOracle} from \\\"../test/oracle/LendingRateOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StableAndVariableTokensHelper is Ownable {\\n\\taddress payable private pool;\\n\\taddress private addressesProvider;\\n\\tevent deployedContracts(address stableToken, address variableToken);\\n\\n\\tconstructor(address payable _pool, address _addressesProvider) {\\n\\t\\tpool = _pool;\\n\\t\\taddressesProvider = _addressesProvider;\\n\\t}\\n\\n\\tfunction initDeployment(address[] calldata tokens, string[] calldata symbols) external onlyOwner {\\n\\t\\trequire(tokens.length == symbols.length, \\\"Arrays not same length\\\");\\n\\t\\trequire(pool != address(0), \\\"Pool can not be zero address\\\");\\n\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\temit deployedContracts(address(new StableDebtToken()), address(new VariableDebtToken()));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOracleBorrowRates(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata rates,\\n\\t\\taddress oracle\\n\\t) external onlyOwner {\\n\\t\\trequire(assets.length == rates.length, \\\"Arrays not same length\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < assets.length; i++) {\\n\\t\\t\\t// LendingRateOracle owner must be this contract\\n\\t\\t\\tLendingRateOracle(oracle).setMarketBorrowRate(assets[i], rates[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setOracleOwnership(address oracle, address admin) external onlyOwner {\\n\\t\\trequire(admin != address(0), \\\"owner can not be zero\\\");\\n\\t\\trequire(LendingRateOracle(oracle).owner() == address(this), \\\"helper is not owner\\\");\\n\\t\\tLendingRateOracle(oracle).transferOwnership(admin);\\n\\t}\\n}\\n\",\"keccak256\":\"0x86231db19551b6f64b74f0521f24702883bdc1c9f81e7c43d30fa0fdcb9807a3\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tuint256 private lastInitializedRevision = 0;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\tuint256 revision = getRevision();\\n\\t\\trequire(\\n\\t\\t\\tinitializing || isConstructor() || revision > lastInitializedRevision,\\n\\t\\t\\t\\\"Contract instance has already been initialized\\\"\\n\\t\\t);\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tlastInitializedRevision = revision;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the revision number of the contract\\n\\t * Needs to be defined in the inherited class as a constant.\\n\\t **/\\n\\tfunction getRevision() internal pure virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns true if and only if the function is running in the constructor\\n\\t **/\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9981ca9b65d7d096711bda22b7951e5cf078576ab5cd7b843c8546c8a79db5bb\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd8247701ad40f24d3bbba25e050a8b4e10f9fcecce670a92e6f6d1ca0a4fdb04\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\n\\t/// @dev Ignoring leap years\\n\\tuint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate linearly accumulated during the timeDelta, in ray\\n\\t **/\\n\\n\\tfunction calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\treturn (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest using a compounded interest rate formula\\n\\t * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n\\t *\\n\\t *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n\\t *\\n\\t * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n\\t * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n\\t *\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate compounded during the timeDelta, in ray\\n\\t **/\\n\\tfunction calculateCompoundedInterest(\\n\\t\\tuint256 rate,\\n\\t\\tuint40 lastUpdateTimestamp,\\n\\t\\tuint256 currentTimestamp\\n\\t) internal pure returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\tif (exp == 0) {\\n\\t\\t\\treturn WadRayMath.ray();\\n\\t\\t}\\n\\n\\t\\tuint256 expMinusOne = exp - 1;\\n\\n\\t\\tuint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n\\t\\tuint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n\\t\\tuint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n\\t\\tuint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n\\t\\tuint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n\\t\\tuint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n\\t\\treturn WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n\\t * @param rate The interest rate (in ray)\\n\\t * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n\\t **/\\n\\tfunction calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\treturn calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n\\t}\\n}\\n\",\"keccak256\":\"0x728dec21d8ebdb00ed3324e9822f99f3176a782b04551457a0c570c35a6f45f3\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant halfWAD = WAD / 2;\\n\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant halfRAY = RAY / 2;\\n\\n\\tuint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n\\t/**\\n\\t * @return One ray, 1e27\\n\\t **/\\n\\tfunction ray() internal pure returns (uint256) {\\n\\t\\treturn RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return One wad, 1e18\\n\\t **/\\n\\n\\tfunction wad() internal pure returns (uint256) {\\n\\t\\treturn WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e27/2\\n\\t **/\\n\\tfunction halfRay() internal pure returns (uint256) {\\n\\t\\treturn halfRAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e18/2\\n\\t **/\\n\\tfunction halfWad() internal pure returns (uint256) {\\n\\t\\treturn halfWAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a*b, in wad\\n\\t **/\\n\\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfWAD) / WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a/b, in wad\\n\\t **/\\n\\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * WAD + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a*b, in ray\\n\\t **/\\n\\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfRAY) / RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a/b, in ray\\n\\t **/\\n\\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * RAY + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Casts ray down to wad\\n\\t * @param a Ray\\n\\t * @return a casted to wad, rounded half up to the nearest wad\\n\\t **/\\n\\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\t\\tuint256 result = halfRatio + a;\\n\\t\\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n\\t\\treturn result / WAD_RAY_RATIO;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts wad up to ray\\n\\t * @param a Wad\\n\\t * @return a converted in ray\\n\\t **/\\n\\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 result = a * WAD_RAY_RATIO;\\n\\t\\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0xde61bc24a6eddf507673b7d09f917098b985ff38db433153e96437764415e138\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/lending/tokenization/IncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Context} from \\\"../../dependencies/openzeppelin/contracts/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\n **/\\nabstract contract IncentivizedERC20 is Context, IERC20, IERC20Metadata {\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tuint256 internal _totalSupply;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\tuint8 private _decimals;\\n\\n\\tILendingPool internal _pool;\\n\\taddress internal _underlyingAsset;\\n\\n\\tconstructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_decimals = decimals_;\\n\\t}\\n\\n\\t/**\\n\\t * @return The name of the token\\n\\t **/\\n\\tfunction name() public view override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @return The symbol of the token\\n\\t **/\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @return The decimals of the token\\n\\t **/\\n\\tfunction decimals() public view override returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n\\n\\t/**\\n\\t * @return The total supply of the token\\n\\t **/\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @return The balance of the token\\n\\t **/\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @return Abstract function implemented by the child aToken/debtToken.\\n\\t * Done this way in order to not break compatibility with previous versions of aTokens/debtTokens\\n\\t **/\\n\\tfunction _getIncentivesController() internal view virtual returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Executes a transfer of tokens from _msgSender() to recipient\\n\\t * @param recipient The recipient of the tokens\\n\\t * @param amount The amount of tokens being transferred\\n\\t * @return `true` if the transfer succeeds, `false` otherwise\\n\\t **/\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\temit Transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the allowance of spender on the tokens owned by owner\\n\\t * @param owner The owner of the tokens\\n\\t * @param spender The user allowed to spend the owner's tokens\\n\\t * @return The amount of owner's tokens spender is allowed to spend\\n\\t **/\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows `spender` to spend the tokens owned by _msgSender()\\n\\t * @param spender The user allowed to spend _msgSender() tokens\\n\\t * @return `true`\\n\\t **/\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\\n\\t * @param sender The owner of the tokens\\n\\t * @param recipient The recipient of the tokens\\n\\t * @param amount The amount of tokens being transferred\\n\\t * @return `true` if the transfer succeeds, `false` otherwise\\n\\t **/\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tsender,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n\\t\\t);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Increases the allowance of spender to spend _msgSender() tokens\\n\\t * @param spender The user allowed to spend on behalf of _msgSender()\\n\\t * @param addedValue The amount being added to the allowance\\n\\t * @return `true`\\n\\t **/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Decreases the allowance of spender to spend _msgSender() tokens\\n\\t * @param spender The user allowed to spend on behalf of _msgSender()\\n\\t * @param subtractedValue The amount being subtracted to the allowance\\n\\t * @return `true`\\n\\t **/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\tuint256 senderBalance = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t// uint256 currentTotalSupply = _totalSupply;\\n\\t\\t\\t_getIncentivesController().handleActionBefore(sender);\\n\\t\\t\\tif (sender != recipient) {\\n\\t\\t\\t\\t_getIncentivesController().handleActionBefore(recipient);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_balances[sender] = senderBalance;\\n\\t\\tuint256 recipientBalance = _balances[recipient].add(amount);\\n\\t\\t_balances[recipient] = recipientBalance;\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\tuint256 currentTotalSupply = _totalSupply;\\n\\t\\t\\t_getIncentivesController().handleActionAfter(sender, _balances[sender], currentTotalSupply);\\n\\t\\t\\tif (sender != recipient) {\\n\\t\\t\\t\\t_getIncentivesController().handleActionAfter(recipient, _balances[recipient], currentTotalSupply);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\tuint256 currentTotalSupply = _totalSupply.add(amount);\\n\\t\\tuint256 accountBalance = _balances[account].add(amount);\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionBefore(account);\\n\\t\\t}\\n\\t\\t_totalSupply = currentTotalSupply;\\n\\t\\t_balances[account] = accountBalance;\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tuint256 currentTotalSupply = _totalSupply.sub(amount);\\n\\t\\tuint256 accountBalance = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionBefore(account);\\n\\t\\t}\\n\\n\\t\\t_totalSupply = currentTotalSupply;\\n\\t\\t_balances[account] = accountBalance;\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _setName(string memory newName) internal {\\n\\t\\t_name = newName;\\n\\t}\\n\\n\\tfunction _setSymbol(string memory newSymbol) internal {\\n\\t\\t_symbol = newSymbol;\\n\\t}\\n\\n\\tfunction _setDecimals(uint8 newDecimals) internal {\\n\\t\\t_decimals = newDecimals;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n\\tfunction getAssetPrice() external view returns (uint256) {\\n\\t\\tILendingPoolAddressesProvider provider = _pool.getAddressesProvider();\\n\\t\\taddress oracle = provider.getPriceOracle();\\n\\t\\treturn IPriceOracle(oracle).getAssetPrice(_underlyingAsset);\\n\\t}\\n}\\n\",\"keccak256\":\"0x050e6f2c7b49a53bf7a30ea4eafe54620c27077c35cc86556e32a8d676f90a1b\",\"license\":\"agpl-3.0\"},\"contracts/lending/tokenization/StableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {DebtTokenBase} from \\\"./base/DebtTokenBase.sol\\\";\\nimport {MathUtils} from \\\"../libraries/math/MathUtils.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {IStableDebtToken} from \\\"../../interfaces/IStableDebtToken.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title StableDebtToken\\n * @notice Implements a stable debt token to track the borrowing positions of users\\n * at stable rate mode\\n * @author Aave\\n **/\\ncontract StableDebtToken is IStableDebtToken, DebtTokenBase {\\n\\tusing WadRayMath for uint256;\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n\\tuint256 internal _avgStableRate;\\n\\tmapping(address => uint40) internal _timestamps;\\n\\tmapping(address => uint256) internal _usersStableRate;\\n\\tuint40 internal _totalSupplyTimestamp;\\n\\n\\tIAaveIncentivesController internal _incentivesController;\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) public override initializer {\\n\\t\\t_setName(debtTokenName);\\n\\t\\t_setSymbol(debtTokenSymbol);\\n\\t\\t_setDecimals(debtTokenDecimals);\\n\\n\\t\\t_pool = pool;\\n\\t\\t_underlyingAsset = underlyingAsset;\\n\\t\\t_incentivesController = incentivesController;\\n\\n\\t\\temit Initialized(\\n\\t\\t\\tunderlyingAsset,\\n\\t\\t\\taddress(pool),\\n\\t\\t\\taddress(incentivesController),\\n\\t\\t\\tdebtTokenDecimals,\\n\\t\\t\\tdebtTokenName,\\n\\t\\t\\tdebtTokenSymbol,\\n\\t\\t\\tparams\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the revision of the stable debt token implementation\\n\\t * @return The debt token implementation revision\\n\\t **/\\n\\tfunction getRevision() internal pure virtual override returns (uint256) {\\n\\t\\treturn DEBT_TOKEN_REVISION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the average stable rate across all the stable rate debt\\n\\t * @return the average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view virtual override returns (uint256) {\\n\\t\\treturn _avgStableRate;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last user action\\n\\t * @return The last update timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view virtual override returns (uint40) {\\n\\t\\treturn _timestamps[user];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user\\n\\t * @param user The address of the user\\n\\t * @return The stable rate of user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view virtual override returns (uint256) {\\n\\t\\treturn _usersStableRate[user];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the current user debt balance\\n\\t * @return The accumulated debt of the user\\n\\t **/\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\tuint256 accountBalance = super.balanceOf(account);\\n\\t\\tuint256 stableRate = _usersStableRate[account];\\n\\t\\tif (accountBalance == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(stableRate, _timestamps[account]);\\n\\t\\treturn accountBalance.rayMul(cumulatedInterest);\\n\\t}\\n\\n\\tstruct MintLocalVars {\\n\\t\\tuint256 previousSupply;\\n\\t\\tuint256 nextSupply;\\n\\t\\tuint256 amountInRay;\\n\\t\\tuint256 newStableRate;\\n\\t\\tuint256 currentAvgStableRate;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * -  Only callable by the LendingPool\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(\\n\\t\\taddress user,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 rate\\n\\t) external override onlyLendingPool returns (bool) {\\n\\t\\tMintLocalVars memory vars;\\n\\n\\t\\tif (user != onBehalfOf) {\\n\\t\\t\\t_decreaseBorrowAllowance(onBehalfOf, user, amount);\\n\\t\\t}\\n\\n\\t\\t(, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(onBehalfOf);\\n\\n\\t\\tvars.previousSupply = totalSupply();\\n\\t\\tvars.currentAvgStableRate = _avgStableRate;\\n\\t\\tvars.nextSupply = _totalSupply = vars.previousSupply.add(amount);\\n\\n\\t\\tvars.amountInRay = amount.wadToRay();\\n\\n\\t\\tvars.newStableRate = _usersStableRate[onBehalfOf]\\n\\t\\t\\t.rayMul(currentBalance.wadToRay())\\n\\t\\t\\t.add(vars.amountInRay.rayMul(rate))\\n\\t\\t\\t.rayDiv(currentBalance.add(amount).wadToRay());\\n\\n\\t\\trequire(vars.newStableRate <= type(uint128).max, Errors.SDT_STABLE_DEBT_OVERFLOW);\\n\\t\\t_usersStableRate[onBehalfOf] = vars.newStableRate;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\t_totalSupplyTimestamp = _timestamps[onBehalfOf] = uint40(block.timestamp);\\n\\n\\t\\t// Calculates the updated average stable rate\\n\\t\\tvars.currentAvgStableRate = _avgStableRate = vars\\n\\t\\t\\t.currentAvgStableRate\\n\\t\\t\\t.rayMul(vars.previousSupply.wadToRay())\\n\\t\\t\\t.add(rate.rayMul(vars.amountInRay))\\n\\t\\t\\t.rayDiv(vars.nextSupply.wadToRay());\\n\\n\\t\\t_mint(onBehalfOf, amount.add(balanceIncrease), vars.previousSupply);\\n\\n\\t\\temit Transfer(address(0), onBehalfOf, amount);\\n\\n\\t\\temit Mint(\\n\\t\\t\\tuser,\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tamount,\\n\\t\\t\\tcurrentBalance,\\n\\t\\t\\tbalanceIncrease,\\n\\t\\t\\tvars.newStableRate,\\n\\t\\t\\tvars.currentAvgStableRate,\\n\\t\\t\\tvars.nextSupply\\n\\t\\t);\\n\\n\\t\\treturn currentBalance == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external override onlyLendingPool {\\n\\t\\t(, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(user);\\n\\n\\t\\tuint256 previousSupply = totalSupply();\\n\\t\\tuint256 newAvgStableRate = 0;\\n\\t\\tuint256 nextSupply = 0;\\n\\t\\tuint256 userStableRate = _usersStableRate[user];\\n\\n\\t\\t// Since the total supply and each single user debt accrue separately,\\n\\t\\t// there might be accumulation errors so that the last borrower repaying\\n\\t\\t// mght actually try to repay more than the available debt supply.\\n\\t\\t// In this case we simply set the total supply and the avg stable rate to 0\\n\\t\\tif (previousSupply <= amount) {\\n\\t\\t\\t_avgStableRate = 0;\\n\\t\\t\\t_totalSupply = 0;\\n\\t\\t} else {\\n\\t\\t\\tnextSupply = _totalSupply = previousSupply.sub(amount);\\n\\t\\t\\tuint256 firstTerm = _avgStableRate.rayMul(previousSupply.wadToRay());\\n\\t\\t\\tuint256 secondTerm = userStableRate.rayMul(amount.wadToRay());\\n\\n\\t\\t\\t// For the same reason described above, when the last user is repaying it might\\n\\t\\t\\t// happen that user rate * user balance > avg rate * total supply. In that case,\\n\\t\\t\\t// we simply set the avg rate to 0\\n\\t\\t\\tif (secondTerm >= firstTerm) {\\n\\t\\t\\t\\tnewAvgStableRate = _avgStableRate = _totalSupply = 0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnewAvgStableRate = _avgStableRate = firstTerm.sub(secondTerm).rayDiv(nextSupply.wadToRay());\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (amount == currentBalance) {\\n\\t\\t\\t_usersStableRate[user] = 0;\\n\\t\\t\\t_timestamps[user] = 0;\\n\\t\\t} else {\\n\\t\\t\\t//solium-disable-next-line\\n\\t\\t\\t_timestamps[user] = uint40(block.timestamp);\\n\\t\\t}\\n\\t\\t//solium-disable-next-line\\n\\t\\t_totalSupplyTimestamp = uint40(block.timestamp);\\n\\n\\t\\tif (balanceIncrease > amount) {\\n\\t\\t\\tuint256 amountToMint = balanceIncrease.sub(amount);\\n\\t\\t\\t_mint(user, amountToMint, previousSupply);\\n\\t\\t\\temit Mint(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tamountToMint,\\n\\t\\t\\t\\tcurrentBalance,\\n\\t\\t\\t\\tbalanceIncrease,\\n\\t\\t\\t\\tuserStableRate,\\n\\t\\t\\t\\tnewAvgStableRate,\\n\\t\\t\\t\\tnextSupply\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuint256 amountToBurn = amount.sub(balanceIncrease);\\n\\t\\t\\t_burn(user, amountToBurn, previousSupply);\\n\\t\\t\\temit Burn(user, amountToBurn, currentBalance, balanceIncrease, newAvgStableRate, nextSupply);\\n\\t\\t}\\n\\n\\t\\temit Transfer(user, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the increase in balance since the last user interaction\\n\\t * @param user The address of the user for which the interest is being accumulated\\n\\t * @return The previous principal balance, the new principal balance and the balance increase\\n\\t **/\\n\\tfunction _calculateBalanceIncrease(address user) internal view returns (uint256, uint256, uint256) {\\n\\t\\tuint256 previousPrincipalBalance = super.balanceOf(user);\\n\\n\\t\\tif (previousPrincipalBalance == 0) {\\n\\t\\t\\treturn (0, 0, 0);\\n\\t\\t}\\n\\n\\t\\t// Calculation of the accrued interest since the last accumulation\\n\\t\\tuint256 balanceIncrease = balanceOf(user).sub(previousPrincipalBalance);\\n\\n\\t\\treturn (previousPrincipalBalance, previousPrincipalBalance.add(balanceIncrease), balanceIncrease);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the principal and total supply, the average borrow rate and the last supply update timestamp\\n\\t **/\\n\\tfunction getSupplyData() public view override returns (uint256, uint256, uint256, uint40) {\\n\\t\\tuint256 avgRate = _avgStableRate;\\n\\t\\treturn (super.totalSupply(), _calcTotalSupply(avgRate), avgRate, _totalSupplyTimestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() public view override returns (uint256, uint256) {\\n\\t\\tuint256 avgRate = _avgStableRate;\\n\\t\\treturn (_calcTotalSupply(avgRate), avgRate);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the total supply\\n\\t **/\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _calcTotalSupply(_avgStableRate);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the timestamp at which the total supply was updated\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() public view override returns (uint40) {\\n\\t\\treturn _totalSupplyTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user from\\n\\t * @param user The user's address\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view virtual override returns (uint256) {\\n\\t\\treturn super.balanceOf(user);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() public view returns (address) {\\n\\t\\treturn _underlyingAsset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the lending pool where this aToken is used\\n\\t **/\\n\\tfunction POOL() public view returns (ILendingPool) {\\n\\t\\treturn _pool;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view override returns (IAaveIncentivesController) {\\n\\t\\treturn _getIncentivesController();\\n\\t}\\n\\n\\t/**\\n\\t * @dev For internal usage in the logic of the parent contracts\\n\\t **/\\n\\tfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) {\\n\\t\\treturn _incentivesController;\\n\\t}\\n\\n\\t/**\\n\\t * @dev For internal usage in the logic of the parent contracts\\n\\t **/\\n\\tfunction _getUnderlyingAssetAddress() internal view override returns (address) {\\n\\t\\treturn _underlyingAsset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev For internal usage in the logic of the parent contracts\\n\\t **/\\n\\tfunction _getLendingPool() internal view override returns (ILendingPool) {\\n\\t\\treturn _pool;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the total supply\\n\\t * @param avgRate The average rate at which the total supply increases\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction _calcTotalSupply(uint256 avgRate) internal view virtual returns (uint256) {\\n\\t\\tuint256 principalSupply = super.totalSupply();\\n\\n\\t\\tif (principalSupply == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(avgRate, _totalSupplyTimestamp);\\n\\n\\t\\treturn principalSupply.rayMul(cumulatedInterest);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints stable debt tokens to an user\\n\\t * @param account The account receiving the debt tokens\\n\\t * @param amount The amount being minted\\n\\t * @param oldTotalSupply the total supply before the minting event\\n\\t **/\\n\\tfunction _mint(address account, uint256 amount, uint256 oldTotalSupply) internal {\\n\\t\\tuint256 oldAccountBalance = _balances[account];\\n\\t\\tif (address(_incentivesController) != address(0)) {\\n\\t\\t\\t_incentivesController.handleActionBefore(account);\\n\\t\\t}\\n\\t\\t_balances[account] = oldAccountBalance.add(amount);\\n\\t\\tif (address(_incentivesController) != address(0)) {\\n\\t\\t\\t_incentivesController.handleActionAfter(account, oldAccountBalance, oldTotalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns stable debt tokens of an user\\n\\t * @param account The user getting his debt burned\\n\\t * @param amount The amount being burned\\n\\t * @param oldTotalSupply The total supply before the burning event\\n\\t **/\\n\\tfunction _burn(address account, uint256 amount, uint256 oldTotalSupply) internal {\\n\\t\\tuint256 oldAccountBalance = _balances[account];\\n\\t\\tif (address(_incentivesController) != address(0)) {\\n\\t\\t\\t_incentivesController.handleActionBefore(account);\\n\\t\\t}\\n\\t\\t_balances[account] = oldAccountBalance.sub(amount, Errors.SDT_BURN_EXCEEDS_BALANCE);\\n\\t\\tif (address(_incentivesController) != address(0)) {\\n\\t\\t\\t_incentivesController.handleActionAfter(account, oldAccountBalance, oldTotalSupply);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2549a6299df9d6017bacd0341bc4150a71136f5ab3a4ed413d0f64b340c23d13\",\"license\":\"agpl-3.0\"},\"contracts/lending/tokenization/VariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IVariableDebtToken} from \\\"../../interfaces/IVariableDebtToken.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {DebtTokenBase} from \\\"./base/DebtTokenBase.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title VariableDebtToken\\n * @notice Implements a variable debt token to track the borrowing positions of users\\n * at variable rate mode\\n * @author Aave\\n **/\\ncontract VariableDebtToken is DebtTokenBase, IVariableDebtToken {\\n\\tusing WadRayMath for uint256;\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n\\tIAaveIncentivesController internal _incentivesController;\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) public override initializer {\\n\\t\\t_setName(debtTokenName);\\n\\t\\t_setSymbol(debtTokenSymbol);\\n\\t\\t_setDecimals(debtTokenDecimals);\\n\\n\\t\\t_pool = pool;\\n\\t\\t_underlyingAsset = underlyingAsset;\\n\\t\\t_incentivesController = incentivesController;\\n\\n\\t\\temit Initialized(\\n\\t\\t\\tunderlyingAsset,\\n\\t\\t\\taddress(pool),\\n\\t\\t\\taddress(incentivesController),\\n\\t\\t\\tdebtTokenDecimals,\\n\\t\\t\\tdebtTokenName,\\n\\t\\t\\tdebtTokenSymbol,\\n\\t\\t\\tparams\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the revision of the stable debt token implementation\\n\\t * @return The debt token implementation revision\\n\\t **/\\n\\tfunction getRevision() internal pure virtual override returns (uint256) {\\n\\t\\treturn DEBT_TOKEN_REVISION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the accumulated debt balance of the user\\n\\t * @return The debt balance of the user\\n\\t **/\\n\\tfunction balanceOf(address user) public view virtual override returns (uint256) {\\n\\t\\tuint256 scaledBalance = super.balanceOf(user);\\n\\n\\t\\tif (scaledBalance == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn scaledBalance.rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * -  Only callable by the LendingPool\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(\\n\\t\\taddress user,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 index\\n\\t) external override onlyLendingPool returns (bool) {\\n\\t\\tif (user != onBehalfOf) {\\n\\t\\t\\t_decreaseBorrowAllowance(onBehalfOf, user, amount);\\n\\t\\t}\\n\\n\\t\\tuint256 previousBalance = super.balanceOf(onBehalfOf);\\n\\t\\tuint256 amountScaled = amount.rayDiv(index);\\n\\t\\trequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\n\\t\\t_mint(onBehalfOf, amountScaled);\\n\\n\\t\\temit Transfer(address(0), onBehalfOf, amount);\\n\\t\\temit Mint(user, onBehalfOf, amount, index);\\n\\n\\t\\treturn previousBalance == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * - Only callable by the LendingPool\\n\\t * @param user The user whose debt is getting burned\\n\\t * @param amount The amount getting burned\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external override onlyLendingPool {\\n\\t\\tuint256 amountScaled = amount.rayDiv(index);\\n\\t\\trequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n\\n\\t\\t_burn(user, amountScaled);\\n\\n\\t\\temit Transfer(user, address(0), amount);\\n\\t\\temit Burn(user, amount, index);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user from\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) public view virtual override returns (uint256) {\\n\\t\\treturn super.balanceOf(user);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the total supply of the variable debt token. Represents the total debt accrued by the users\\n\\t * @return The total supply\\n\\t **/\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn super.totalSupply().rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return the scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn super.totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the principal balance of the user and principal total supply.\\n\\t * @param user The address of the user\\n\\t * @return The principal balance of the user\\n\\t * @return The principal total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\\n\\t\\treturn (super.balanceOf(user), super.totalSupply());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() public view returns (address) {\\n\\t\\treturn _underlyingAsset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view override returns (IAaveIncentivesController) {\\n\\t\\treturn _getIncentivesController();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the lending pool where this aToken is used\\n\\t **/\\n\\tfunction POOL() public view returns (ILendingPool) {\\n\\t\\treturn _pool;\\n\\t}\\n\\n\\tfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) {\\n\\t\\treturn _incentivesController;\\n\\t}\\n\\n\\tfunction _getUnderlyingAssetAddress() internal view override returns (address) {\\n\\t\\treturn _underlyingAsset;\\n\\t}\\n\\n\\tfunction _getLendingPool() internal view override returns (ILendingPool) {\\n\\t\\treturn _pool;\\n\\t}\\n}\\n\",\"keccak256\":\"0xca2e19c92848fd7b1ea99220f1727480073a077220f9a53bad82b95211cebb40\",\"license\":\"agpl-3.0\"},\"contracts/lending/tokenization/base/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"../../../interfaces/ILendingPool.sol\\\";\\nimport {ICreditDelegationToken} from \\\"../../../interfaces/ICreditDelegationToken.sol\\\";\\nimport {VersionedInitializable} from \\\"../../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {IncentivizedERC20} from \\\"../IncentivizedERC20.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title DebtTokenBase\\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\\n * @author Aave\\n */\\n\\nabstract contract DebtTokenBase is\\n\\tIncentivizedERC20(\\\"DEBTTOKEN_IMPL\\\", \\\"DEBTTOKEN_IMPL\\\", 0),\\n\\tVersionedInitializable,\\n\\tICreditDelegationToken\\n{\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n\\t/**\\n\\t * @dev Only lending pool can call functions marked by this modifier\\n\\t **/\\n\\tmodifier onlyLendingPool() {\\n\\t\\trequire(_msgSender() == address(_getLendingPool()), Errors.CT_CALLER_MUST_BE_LENDING_POOL);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev delegates borrowing power to a user on the specific debt token\\n\\t * @param delegatee the address receiving the delegated borrowing power\\n\\t * @param amount the maximum amount being delegated. Delegation will still\\n\\t * respect the liquidation constraints (even if delegated, a delegatee cannot\\n\\t * force a delegator HF to go below 1)\\n\\t **/\\n\\tfunction approveDelegation(address delegatee, uint256 amount) external override {\\n\\t\\t_borrowAllowances[_msgSender()][delegatee] = amount;\\n\\t\\temit BorrowAllowanceDelegated(_msgSender(), delegatee, _getUnderlyingAssetAddress(), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the borrow allowance of the user\\n\\t * @param fromUser The user to giving allowance\\n\\t * @param toUser The user to give allowance to\\n\\t * @return the current allowance of toUser\\n\\t **/\\n\\tfunction borrowAllowance(address fromUser, address toUser) external view override returns (uint256) {\\n\\t\\treturn _borrowAllowances[fromUser][toUser];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Being non transferrable, the debt token does not implement any of the\\n\\t * standard ERC20 functions for transfer and allowance.\\n\\t **/\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\trecipient;\\n\\t\\tamount;\\n\\t\\trevert(\\\"TRANSFER_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\towner;\\n\\t\\tspender;\\n\\t\\trevert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\tspender;\\n\\t\\tamount;\\n\\t\\trevert(\\\"APPROVAL_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\tsender;\\n\\t\\trecipient;\\n\\t\\tamount;\\n\\t\\trevert(\\\"TRANSFER_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\\n\\t\\tspender;\\n\\t\\taddedValue;\\n\\t\\trevert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\\n\\t\\tspender;\\n\\t\\tsubtractedValue;\\n\\t\\trevert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n\\t}\\n\\n\\tfunction _decreaseBorrowAllowance(address delegator, address delegatee, uint256 amount) internal {\\n\\t\\tuint256 newAllowance = _borrowAllowances[delegator][delegatee].sub(amount, Errors.BORROW_ALLOWANCE_NOT_ENOUGH);\\n\\n\\t\\t_borrowAllowances[delegator][delegatee] = newAllowance;\\n\\n\\t\\temit BorrowAllowanceDelegated(delegator, delegatee, _getUnderlyingAssetAddress(), newAllowance);\\n\\t}\\n\\n\\tfunction _getUnderlyingAssetAddress() internal view virtual returns (address);\\n\\n\\tfunction _getLendingPool() internal view virtual returns (ILendingPool);\\n}\\n\",\"keccak256\":\"0x74f8813a3695b30d887884113a81242a54082e1d7fd4fac42f4092ee2b3fe914\",\"license\":\"agpl-3.0\"},\"contracts/test/oracle/LendingRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingRateOracle} from \\\"../../interfaces/ILendingRateOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LendingRateOracle is ILendingRateOracle, Ownable {\\n\\tmapping(address => uint256) borrowRates;\\n\\tmapping(address => uint256) liquidityRates;\\n\\n\\tfunction getMarketBorrowRate(address _asset) external view override returns (uint256) {\\n\\t\\treturn borrowRates[_asset];\\n\\t}\\n\\n\\tfunction setMarketBorrowRate(address _asset, uint256 _rate) external override onlyOwner {\\n\\t\\tborrowRates[_asset] = _rate;\\n\\t}\\n\\n\\tfunction getMarketLiquidityRate(address _asset) external view returns (uint256) {\\n\\t\\treturn liquidityRates[_asset];\\n\\t}\\n\\n\\tfunction setMarketLiquidityRate(address _asset, uint256 _rate) external onlyOwner {\\n\\t\\tliquidityRates[_asset] = _rate;\\n\\t}\\n}\\n\",\"keccak256\":\"0x18070ef731d40627d00b0a72e1d92ee30917f900428d544f80ecda533dd2ce74\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3669,
        "contract": "contracts/lending/StableAndVariableTokensHelper.sol:StableAndVariableTokensHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20656,
        "contract": "contracts/lending/StableAndVariableTokensHelper.sol:StableAndVariableTokensHelper",
        "label": "pool",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 20658,
        "contract": "contracts/lending/StableAndVariableTokensHelper.sol:StableAndVariableTokensHelper",
        "label": "addressesProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      }
    }
  }
}