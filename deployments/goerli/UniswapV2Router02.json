{
  "address": "0x961fB561f052365bfBEa25feA97D14Aa0288d4e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x03cfa07cedbc627f009cab2fcfe77810fc31224184c9c1ec218459cdbadd0a35",
  "receipt": {
    "to": null,
    "from": "0x4Ae0010e604b1E0096aE95C0fd3e2DC768e76BEa",
    "contractAddress": "0x961fB561f052365bfBEa25feA97D14Aa0288d4e4",
    "transactionIndex": 28,
    "gasUsed": "3020761",
    "logsBloom": "0x
    "blockHash": "0x24c132869a65d734656e0debbc2c296a15d8d42a5d2d8a912a91bb5c7878f143",
    "transactionHash": "0x03cfa07cedbc627f009cab2fcfe77810fc31224184c9c1ec218459cdbadd0a35",
    "logs": [],
    "blockNumber": 8976774,
    "cumulativeGasUsed": "6610876",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x588C5AF54e99b6b03AbCE8e2D9BF5DE1c0aD9E4D",
    "0x6785707D26f650D8FD74d6ca7CC0Eb8afb69d05C"
  ],
  "numDeployments": 1,
  "solcInputHash": "d20862d9a7051998216c9f1f22667b5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/uniswap/periphery/UniswapV2Router02.sol\":\"UniswapV2Router02\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/test/uniswap/core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n\\n\\tfunction getInitHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x61e8190510f1350937d94b875745972827a0a7ff5a7f2efc82c8250a2214e431\",\"license\":\"agpl-3.0\"},\"contracts/test/uniswap/periphery/UniswapV2Router02.sol\":{\"content\":\"pragma solidity ^0.8.12;\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract UniswapV2Router02 is IUniswapV2Router02 {\\n\\tusing SafeMath for uint;\\n\\n\\taddress public immutable factory;\\n\\taddress public immutable WETH;\\n\\n\\tmodifier ensure(uint deadline) {\\n\\t\\trequire(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _factory, address _WETH) public {\\n\\t\\tfactory = _factory;\\n\\t\\tWETH = _WETH;\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tassert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n\\t}\\n\\n\\t// **** ADD LIQUIDITY ****\\n\\tfunction _addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin\\n\\t) internal virtual returns (uint amountA, uint amountB) {\\n\\t\\t// create the pair if it doesn't exist yet\\n\\t\\tif (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n\\t\\t\\tIUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n\\t\\t}\\n\\t\\t(uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n\\t\\tif (reserveA == 0 && reserveB == 0) {\\n\\t\\t\\t(amountA, amountB) = (amountADesired, amountBDesired);\\n\\t\\t} else {\\n\\t\\t\\tuint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\\n\\t\\t\\tif (amountBOptimal <= amountBDesired) {\\n\\t\\t\\t\\trequire(amountBOptimal >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n\\t\\t\\t\\t(amountA, amountB) = (amountADesired, amountBOptimal);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\\n\\t\\t\\t\\tassert(amountAOptimal <= amountADesired);\\n\\t\\t\\t\\trequire(amountAOptimal >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n\\t\\t\\t\\t(amountA, amountB) = (amountAOptimal, amountBDesired);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n\\t\\t(amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n\\t\\taddress pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n\\n\\t\\tTransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n\\t\\tTransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n\\n\\t\\tliquidity = IUniswapV2Pair(pair).mint(to);\\n\\t}\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable virtual override ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n\\t\\t(amountToken, amountETH) = _addLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\tWETH,\\n\\t\\t\\tamountTokenDesired,\\n\\t\\t\\tmsg.value,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin\\n\\t\\t);\\n\\t\\taddress pair = UniswapV2Library.pairFor(factory, token, WETH);\\n\\t\\tTransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n\\t\\tIWETH(WETH).deposit{value: amountETH}();\\n\\t\\tassert(IWETH(WETH).transfer(pair, amountETH));\\n\\t\\tliquidity = IUniswapV2Pair(pair).mint(to);\\n\\t\\t// refund dust eth, if any\\n\\t\\tif (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n\\t}\\n\\n\\t// **** REMOVE LIQUIDITY ****\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n\\t\\taddress pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n\\t\\tIUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n\\t\\t(uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\\n\\t\\t(address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\\n\\t\\t(amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n\\t\\trequire(amountA >= amountAMin, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n\\t\\trequire(amountB >= amountBMin, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n\\t}\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\n\\t\\t(amountToken, amountETH) = removeLiquidity(\\n\\t\\t\\ttoken,\\n\\t\\t\\tWETH,\\n\\t\\t\\tliquidity,\\n\\t\\t\\tamountTokenMin,\\n\\t\\t\\tamountETHMin,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tdeadline\\n\\t\\t);\\n\\t\\tTransferHelper.safeTransfer(token, to, amountToken);\\n\\t\\tIWETH(WETH).withdraw(amountETH);\\n\\t\\tTransferHelper.safeTransferETH(to, amountETH);\\n\\t}\\n\\n\\t// **** SWAP ****\\n\\t// requires the initial amount to have already been sent to the first pair\\n\\tfunction _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(address input, address output) = (path[i], path[i + 1]);\\n\\t\\t\\t(address token0, ) = UniswapV2Library.sortTokens(input, output);\\n\\t\\t\\tuint amountOut = amounts[i + 1];\\n\\t\\t\\t(uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n\\t\\t\\taddress to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\\n\\t\\t\\tIUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\\n\\t\\t\\t\\tamount0Out,\\n\\t\\t\\t\\tamount1Out,\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tnew bytes(0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\tamounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n\\t\\trequire(amounts[amounts.length - 1] >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tUniswapV2Library.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\tamounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n\\t\\trequire(amounts[0] <= amountInMax, \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tUniswapV2Library.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\trequire(path[0] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n\\t\\tamounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\\n\\t\\trequire(amounts[amounts.length - 1] >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tIWETH(WETH).deposit{value: amounts[0]}();\\n\\t\\tassert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\\n\\t\\t_swap(amounts, path, to);\\n\\t}\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\trequire(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n\\t\\tamounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n\\t\\trequire(amounts[0] <= amountInMax, \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tUniswapV2Library.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, address(this));\\n\\t\\tIWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n\\t\\tTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\t}\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\trequire(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n\\t\\tamounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n\\t\\trequire(amounts[amounts.length - 1] >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\tTransferHelper.safeTransferFrom(\\n\\t\\t\\tpath[0],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tUniswapV2Library.pairFor(factory, path[0], path[1]),\\n\\t\\t\\tamounts[0]\\n\\t\\t);\\n\\t\\t_swap(amounts, path, address(this));\\n\\t\\tIWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n\\t\\tTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\t}\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable virtual override ensure(deadline) returns (uint[] memory amounts) {\\n\\t\\trequire(path[0] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n\\t\\tamounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n\\t\\trequire(amounts[0] <= msg.value, \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\t\\tIWETH(WETH).deposit{value: amounts[0]}();\\n\\t\\tassert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\\n\\t\\t_swap(amounts, path, to);\\n\\t\\t// refund dust eth, if any\\n\\t\\tif (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n\\t}\\n\\n\\t// **** LIBRARY FUNCTIONS ****\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\n\\t\\treturn UniswapV2Library.quote(amountA, reserveA, reserveB);\\n\\t}\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint amountIn,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) public pure virtual override returns (uint amountOut) {\\n\\t\\treturn UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint amountOut,\\n\\t\\tuint reserveIn,\\n\\t\\tuint reserveOut\\n\\t) public pure virtual override returns (uint amountIn) {\\n\\t\\treturn UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\\n\\t}\\n\\n\\tfunction getAmountsOut(\\n\\t\\tuint amountIn,\\n\\t\\taddress[] memory path\\n\\t) public view virtual override returns (uint[] memory amounts) {\\n\\t\\treturn UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n\\t}\\n\\n\\tfunction getAmountsIn(\\n\\t\\tuint amountOut,\\n\\t\\taddress[] memory path\\n\\t) public view virtual override returns (uint[] memory amounts) {\\n\\t\\treturn UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n\\t}\\n}\\n\",\"keccak256\":\"0xffa4eb90ea4fcf50a1a4e64689cf8e2ec0f8f4fd9ce5ccbb876dcc851092c23b\"},\"contracts/test/uniswap/periphery/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\n\\n\\tfunction approve(address spender, uint value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbbb4afeaa29979d936753f9ef19f4eb30161357746e5c6be06695062812bd14e\",\"license\":\"agpl-3.0\"},\"contracts/test/uniswap/periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction WETH() external view returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountToken, uint amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint[] memory amounts);\\n\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x4cd0983f7067427148f74723afa1d0ac970052217d43298785d4e82029b6ea41\",\"license\":\"agpl-3.0\"},\"contracts/test/uniswap/periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\\n\",\"keccak256\":\"0x6a179f1a4c881a33bede138bbbf121a0d0e2640a732bd98a09c10b81a3cfbae3\",\"license\":\"agpl-3.0\"},\"contracts/test/uniswap/periphery/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction withdraw(uint) external;\\n\\n\\tfunction balanceOf(address guy) external returns (uint);\\n}\\n\",\"keccak256\":\"0x423d14c56c156d6c8a25623ca5555011f231936262244dc3d2d67344d3abbfb3\",\"license\":\"agpl-3.0\"},\"contracts/test/uniswap/periphery/libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n\\tfunction add(uint x, uint y) internal pure returns (uint z) {\\n\\t\\trequire((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n\\t}\\n\\n\\tfunction sub(uint x, uint y) internal pure returns (uint z) {\\n\\t\\trequire((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n\\t}\\n\\n\\tfunction mul(uint x, uint y) internal pure returns (uint z) {\\n\\t\\trequire(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x954ea35c68e03146a243ea4df2dd6a64036c63f1bf487e2cf605853bf3dfee3b\"},\"contracts/test/uniswap/periphery/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n\\tfunction safeApprove(address token, address to, uint256 value) internal {\\n\\t\\t// bytes4(keccak256(bytes('approve(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n\\t\\trequire(\\n\\t\\t\\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\\n\\t\\t\\t\\\"TransferHelper::safeApprove: approve failed\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeTransfer(address token, address to, uint256 value) internal {\\n\\t\\t// bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n\\t\\trequire(\\n\\t\\t\\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\\n\\t\\t\\t\\\"TransferHelper::safeTransfer: transfer failed\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n\\t\\t// bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n\\t\\t(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n\\t\\trequire(\\n\\t\\t\\tsuccess && (data.length == 0 || abi.decode(data, (bool))),\\n\\t\\t\\t\\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x955de47b60a6db3308ee48acafa194bf258e6fe65b143423065d0239e12bdc9a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/test/uniswap/periphery/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity ^0.8.12;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n// import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport \\\"../../core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n\\tusing SafeMath for uint;\\n\\n\\t// returns sorted token addresses, used to handle return values from pairs sorted in this order\\n\\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n\\t\\trequire(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\t// calculates the CREATE2 address for a pair without making any external calls\\n\\tfunction pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\\n\\t\\t(address token0, address token1) = sortTokens(tokenA, tokenB);\\n\\t\\tpair = address(\\n\\t\\t\\tuint160(\\n\\t\\t\\t\\tuint(\\n\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\thex\\\"ff\\\",\\n\\t\\t\\t\\t\\t\\t\\tfactory,\\n\\t\\t\\t\\t\\t\\t\\tkeccak256(abi.encodePacked(token0, token1)),\\n\\t\\t\\t\\t\\t\\t\\tIUniswapV2Factory(factory).getInitHash()\\n\\t\\t\\t\\t\\t\\t\\t// hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a pair\\n\\tfunction getReserves(\\n\\t\\taddress factory,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint reserveA, uint reserveB) {\\n\\t\\t(address token0, ) = sortTokens(tokenA, tokenB);\\n\\t\\t(uint reserve0, uint reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = amountA.mul(reserveB) / reserveA;\\n\\t}\\n\\n\\t// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\trequire(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tuint amountInWithFee = amountIn.mul(997);\\n\\t\\tuint numerator = amountInWithFee.mul(reserveOut);\\n\\t\\tuint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\t// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\trequire(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tuint numerator = reserveIn.mul(amountOut).mul(1000);\\n\\t\\tuint denominator = reserveOut.sub(amountOut).mul(997);\\n\\t\\tamountIn = (numerator / denominator).add(1);\\n\\t}\\n\\n\\t// performs chained getAmountOut calculations on any number of pairs\\n\\tfunction getAmountsOut(\\n\\t\\taddress factory,\\n\\t\\tuint amountIn,\\n\\t\\taddress[] memory path\\n\\t) internal view returns (uint[] memory amounts) {\\n\\t\\trequire(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[0] = amountIn;\\n\\t\\tfor (uint i; i < path.length - 1; i++) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n\\t\\t\\tamounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n\\n\\t// performs chained getAmountIn calculations on any number of pairs\\n\\tfunction getAmountsIn(\\n\\t\\taddress factory,\\n\\t\\tuint amountOut,\\n\\t\\taddress[] memory path\\n\\t) internal view returns (uint[] memory amounts) {\\n\\t\\trequire(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n\\t\\tamounts = new uint[](path.length);\\n\\t\\tamounts[amounts.length - 1] = amountOut;\\n\\t\\tfor (uint i = path.length - 1; i > 0; i--) {\\n\\t\\t\\t(uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n\\t\\t\\tamounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xb15e69d82ab018cf9857d77c4c8daf0de1466719e16d643a7ec9572ed8a59777\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200379238038062003792833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a0516135d6620001bc60003960008181610122015281816102b001528181610439015281816104a1015281816105880152818161081f01528181610b1901528181610cea01528181610e7c01528181610f0a015281816115f3015281816116490152818161167d0152818161171201528181611876015281816119f80152611a8601526000818161033c015281816106340152818161074a015281816109050152818161098701528181610bc501528181610d9501528181610f3c015281816110da015281816112120152818161144d015281816114de015281816116270152818161192101528181611ab801528181612478015281816124c801528181612a9901528181612b550152612bcc01526135d66000f3fe6080604052600436106101125760003560e01c80638803dbee116100a5578063c45a015511610074578063e8e3370011610059578063e8e337001461037e578063f305d719146103b9578063fb3bdb41146103cc57600080fd5b8063c45a01551461032a578063d06ca61f1461035e57600080fd5b80638803dbee1461027e578063ad5c46481461029e578063ad615dec146102ea578063baa2abde1461030a57600080fd5b806338ed1739116100e157806338ed17391461020b5780634a25d94a1461022b5780637ff36ab51461024b57806385f8c2591461025e57600080fd5b806302751cec14610156578063054d50d41461019057806318cbafe5146101be5780631f00ca74146101eb57600080fd5b3661015157336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461014f5761014f612f2b565b005b600080fd5b34801561016257600080fd5b50610176610171366004612f69565b6103df565b604080519283526020830191909152015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004612fc7565b61051b565b604051908152602001610187565b3480156101ca57600080fd5b506101de6101d9366004613038565b610530565b60405161018791906130ab565b3480156101f757600080fd5b506101de610206366004613105565b6108fe565b34801561021757600080fd5b506101de610226366004613038565b610934565b34801561023757600080fd5b506101de610246366004613038565b610ac1565b6101de6102593660046131d6565b610c9a565b34801561026a57600080fd5b506101b0610279366004612fc7565b61107a565b34801561028a57600080fd5b506101de610299366004613038565b611087565b3480156102aa57600080fd5b506102d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610187565b3480156102f657600080fd5b506101b0610305366004612fc7565b6111af565b34801561031657600080fd5b5061017661032536600461323d565b6111bc565b34801561033657600080fd5b506102d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561036a57600080fd5b506101de610379366004613105565b611446565b34801561038a57600080fd5b5061039e6103993660046132af565b611473565b60408051938452602084019290925290820152606001610187565b61039e6103c7366004612f69565b61159c565b6101de6103da3660046131d6565b611826565b60008082428110156104335760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b60448201526064015b60405180910390fd5b610462897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6111bc565b9093509150610472898685611c10565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156104ed57600080fd5b505af1158015610501573d6000803e3d6000fd5b5050505061050f8583611d66565b50965096945050505050565b6000610528848484611e4e565b949350505050565b6060814281101561057e5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866105b5600182613341565b8181106105c4576105c4613358565b90506020020160208101906105d9919061336e565b6001600160a01b03161461062f5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b61068d7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b915086826001845161069f9190613341565b815181106106af576106af613358565b602002602001015110156107195760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b6107de8686600081811061072f5761072f613358565b9050602002016020810190610744919061336e565b336107be7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061077c5761077c613358565b9050602002016020810190610791919061336e565b8b8b60018181106107a4576107a4613358565b90506020020160208101906107b9919061336e565b61210a565b856000815181106107d1576107d1613358565b6020026020010151612236565b61081d82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612395915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161085b9190613341565b8151811061086b5761086b613358565b60200260200101516040518263ffffffff1660e01b815260040161089191815260200190565b600060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b505050506108f38483600185516108d69190613341565b815181106108e6576108e6613358565b6020026020010151611d66565b509695505050505050565b606061092b7f0000000000000000000000000000000000000000000000000000000000000000848461259d565b90505b92915050565b606081428110156109825760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6109e07f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b91508682600184516109f29190613341565b81518110610a0257610a02613358565b60200260200101511015610a6c5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b610a828686600081811061072f5761072f613358565b6108f382878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b60608142811015610b0f5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610b46600182613341565b818110610b5557610b55613358565b9050602002016020810190610b6a919061336e565b6001600160a01b031614610bc05760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b610c1e7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b91508682600081518110610c3457610c34613358565b602002602001015111156107195760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b60608142811015610ce85760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610d2557610d25613358565b9050602002016020810190610d3a919061336e565b6001600160a01b031614610d905760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b610dee7f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b9150868260018451610e009190613341565b81518110610e1057610e10613358565b60200260200101511015610e7a5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610ebc57610ebc613358565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610f967f000000000000000000000000000000000000000000000000000000000000000089896000818110610f6e57610f6e613358565b9050602002016020810190610f83919061336e565b8a8a60018181106107a4576107a4613358565b84600081518110610fa957610fa9613358565b60200260200101516040518363ffffffff1660e01b8152600401610fe29291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613392565b61103157611031612f2b565b61107082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b5095945050505050565b600061052884848461271e565b606081428110156110d55760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6111337f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b9150868260008151811061114957611149613358565b60200260200101511115610a6c5760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b6000610528848484612849565b600080824281101561120b5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b60006112387f00000000000000000000000000000000000000000000000000000000000000008c8c61210a565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af115801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190613392565b506040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c91906133b4565b91509150600061134c8e8e612942565b509050806001600160a01b03168e6001600160a01b03161461136f578183611372565b82825b90975095508a8710156113d65760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161042a565b898610156114355760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161042a565b505050505097509795505050505050565b606061092b7f00000000000000000000000000000000000000000000000000000000000000008484611f7f565b600080600083428110156114c45760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6114d28c8c8c8c8c8c612a52565b909450925060006115047f00000000000000000000000000000000000000000000000000000000000000008e8e61210a565b90506115128d338388612236565b61151e8c338387612236565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a91906133d8565b92505050985098509895505050505050565b600080600083428110156115ed5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b61161b8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c612a52565b9094509250600061166d7f00000000000000000000000000000000000000000000000000000000000000008c7f000000000000000000000000000000000000000000000000000000000000000061210a565b905061167b8b338388612236565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561175f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117839190613392565b61178f5761178f612f2b565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb91906133d8565b92508334111561181857611818336118138634613341565b611d66565b505096509650969350505050565b606081428110156118745760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106118b1576118b1613358565b90506020020160208101906118c6919061336e565b6001600160a01b03161461191c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b61197a7f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b9150348260008151811061199057611990613358565b602002602001015111156119f65760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110611a3857611a38613358565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611a6b57600080fd5b505af1158015611a7f573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611aea7f000000000000000000000000000000000000000000000000000000000000000089896000818110610f6e57610f6e613358565b84600081518110611afd57611afd613358565b60200260200101516040518363ffffffff1660e01b8152600401611b369291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190613392565b611b8557611b85612f2b565b611bc482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b81600081518110611bd757611bd7613358565b6020026020010151341115611070576110703383600081518110611bfd57611bfd613358565b6020026020010151346118139190613341565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611c81919061341d565b6000604051808303816000865af19150503d8060008114611cbe576040519150601f19603f3d011682016040523d82523d6000602084013e611cc3565b606091505b5091509150818015611ced575080511580611ced575080806020019051810190611ced9190613392565b611d5f5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161042a565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611d90919061341d565b60006040518083038185875af1925050503d8060008114611dcd576040519150601f19603f3d011682016040523d82523d6000602084013e611dd2565b606091505b5050905080611e495760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840161042a565b505050565b6000808411611ec55760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161042a565b600083118015611ed55750600082115b611f325760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b6000611f40856103e5612d27565b90506000611f4e8285612d27565b90506000611f6883611f62886103e8612d27565b90612d97565b9050611f748183613439565b979650505050505050565b6060600282511015611fd35760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161042a565b815167ffffffffffffffff811115611fed57611fed6130ef565b604051908082528060200260200182016040528015612016578160200160208202803683370190505b509050828160008151811061202d5761202d613358565b60200260200101818152505060005b6001835161204a9190613341565b8110156121025760008061209d8786858151811061206a5761206a613358565b602002602001015187866001612080919061345b565b8151811061209057612090613358565b6020026020010151612df5565b915091506120c58484815181106120b6576120b6613358565b60200260200101518383611e4e565b846120d185600161345b565b815181106120e1576120e1613358565b602002602001018181525050505080806120fa90613473565b91505061203c565b509392505050565b60008060006121198585612942565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150869060480160405160208183030381529060405280519060200120876001600160a01b0316633c9de1b86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c191906133d8565b6040517fff00000000000000000000000000000000000000000000000000000000000000602082015260609390931b6bffffffffffffffffffffffff191660218401526035830191909152605582015260750160408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916122af919061341d565b6000604051808303816000865af19150503d80600081146122ec576040519150601f19603f3d011682016040523d82523d6000602084013e6122f1565b606091505b509150915081801561231b57508051158061231b57508080602001905181019061231b9190613392565b61238d5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840161042a565b505050505050565b60005b600183516123a69190613341565b811015612597576000808483815181106123c2576123c2613358565b6020026020010151858460016123d8919061345b565b815181106123e8576123e8613358565b60200260200101519150915060006124008383612942565b50905060008761241186600161345b565b8151811061242157612421613358565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461244f57826000612453565b6000835b91509150600060028a516124679190613341565b881061247357886124c1565b6124c17f0000000000000000000000000000000000000000000000000000000000000000878c6124a48c600261345b565b815181106124b4576124b4613358565b602002602001015161210a565b90506124ee7f0000000000000000000000000000000000000000000000000000000000000000888861210a565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f19166020018201604052801561252b576020820181803683370190505b506040518563ffffffff1660e01b815260040161254b949392919061348e565b600060405180830381600087803b15801561256557600080fd5b505af1158015612579573d6000803e3d6000fd5b5050505050505050505050808061258f90613473565b915050612398565b50505050565b60606002825110156125f15760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161042a565b815167ffffffffffffffff81111561260b5761260b6130ef565b604051908082528060200260200182016040528015612634578160200160208202803683370190505b5090508281600183516126479190613341565b8151811061265757612657613358565b6020026020010181815250506000600183516126739190613341565b90505b8015612102576000806126b9878661268f600187613341565b8151811061269f5761269f613358565b602002602001015187868151811061209057612090613358565b915091506126e18484815181106126d2576126d2613358565b6020026020010151838361271e565b846126ed600186613341565b815181106126fd576126fd613358565b60200260200101818152505050508080612716906134df565b915050612676565b60008084116127955760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161042a565b6000831180156127a55750600082115b6128025760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b600061281a6103e86128148688612d27565b90612d27565b9050600061282e6103e56128148689612ecd565b905061283f6001611f628385613439565b9695505050505050565b60008084116128c05760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e54000000000000000000000000000000000000000000000000000000606482015260840161042a565b6000831180156128d05750600082115b61292d5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b826129388584612d27565b6105289190613439565b600080826001600160a01b0316846001600160a01b031614156129cd5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161042a565b826001600160a01b0316846001600160a01b0316106129ed5782846129f0565b83835b90925090506001600160a01b038216612a4b5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161042a565b9250929050565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0691906134f6565b6001600160a01b03161415612bc4576040517fc9c653960000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af1158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc291906134f6565b505b600080612bf27f00000000000000000000000000000000000000000000000000000000000000008b8b612df5565b91509150816000148015612c04575080155b15612c1457879350869250612d1a565b6000612c21898484612849565b9050878111612c945785811015612c895760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161042a565b889450925082612d18565b6000612ca1898486612849565b905089811115612cb357612cb3612f2b565b87811015612d125760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161042a565b94508793505b505b5050965096945050505050565b6000811580612d4b57508282612d3d8183613513565b9250612d499083613439565b145b61092e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015260640161042a565b600082612da4838261345b565b915081101561092e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161042a565b6000806000612e048585612942565b509050600080612e1588888861210a565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e769190613550565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614612ebb578082612ebe565b81815b90999098509650505050505050565b600082612eda8382613341565b915081111561092e5760405162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015260640161042a565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114612f5657600080fd5b50565b8035612f6481612f41565b919050565b60008060008060008060c08789031215612f8257600080fd5b8635612f8d81612f41565b95506020870135945060408701359350606087013592506080870135612fb281612f41565b8092505060a087013590509295509295509295565b600080600060608486031215612fdc57600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261300557600080fd5b50813567ffffffffffffffff81111561301d57600080fd5b6020830191508360208260051b8501011115612a4b57600080fd5b60008060008060008060a0878903121561305157600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561307657600080fd5b61308289828a01612ff3565b909550935050606087013561309681612f41565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156130e3578351835292840192918401916001016130c7565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561311857600080fd5b8235915060208084013567ffffffffffffffff8082111561313857600080fd5b818601915086601f83011261314c57600080fd5b81358181111561315e5761315e6130ef565b8060051b604051601f19603f83011681018181108582111715613183576131836130ef565b6040529182528482019250838101850191898311156131a157600080fd5b938501935b828510156131c6576131b785612f59565b845293850193928501926131a6565b8096505050505050509250929050565b6000806000806000608086880312156131ee57600080fd5b85359450602086013567ffffffffffffffff81111561320c57600080fd5b61321888828901612ff3565b909550935050604086013561322c81612f41565b949793965091946060013592915050565b600080600080600080600060e0888a03121561325857600080fd5b873561326381612f41565b9650602088013561327381612f41565b955060408801359450606088013593506080880135925060a088013561329881612f41565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b0312156132cc57600080fd5b88356132d781612f41565b975060208901356132e781612f41565b965060408901359550606089013594506080890135935060a0890135925060c089013561331381612f41565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b6000828210156133535761335361332b565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561338057600080fd5b813561338b81612f41565b9392505050565b6000602082840312156133a457600080fd5b8151801515811461338b57600080fd5b600080604083850312156133c757600080fd5b505080516020909101519092909150565b6000602082840312156133ea57600080fd5b5051919050565b60005b8381101561340c5781810151838201526020016133f4565b838111156125975750506000910152565b6000825161342f8184602087016133f1565b9190910192915050565b60008261345657634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561346e5761346e61332b565b500190565b60006000198214156134875761348761332b565b5060010190565b8481528360208201526001600160a01b038316604082015260806060820152600082518060808401526134c88160a08501602087016133f1565b601f01601f19169190910160a00195945050505050565b6000816134ee576134ee61332b565b506000190190565b60006020828403121561350857600080fd5b815161338b81612f41565b600081600019048311821515161561352d5761352d61332b565b500290565b80516dffffffffffffffffffffffffffff81168114612f6457600080fd5b60008060006060848603121561356557600080fd5b61356e84613532565b925061357c60208501613532565b9150604084015163ffffffff8116811461359557600080fd5b80915050925092509256fea26469706673582212206ddc5c2d47a2594b1f270e799a4838266da4b1e5f72615e225abe0d1b6a9325964736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101125760003560e01c80638803dbee116100a5578063c45a015511610074578063e8e3370011610059578063e8e337001461037e578063f305d719146103b9578063fb3bdb41146103cc57600080fd5b8063c45a01551461032a578063d06ca61f1461035e57600080fd5b80638803dbee1461027e578063ad5c46481461029e578063ad615dec146102ea578063baa2abde1461030a57600080fd5b806338ed1739116100e157806338ed17391461020b5780634a25d94a1461022b5780637ff36ab51461024b57806385f8c2591461025e57600080fd5b806302751cec14610156578063054d50d41461019057806318cbafe5146101be5780631f00ca74146101eb57600080fd5b3661015157336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461014f5761014f612f2b565b005b600080fd5b34801561016257600080fd5b50610176610171366004612f69565b6103df565b604080519283526020830191909152015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004612fc7565b61051b565b604051908152602001610187565b3480156101ca57600080fd5b506101de6101d9366004613038565b610530565b60405161018791906130ab565b3480156101f757600080fd5b506101de610206366004613105565b6108fe565b34801561021757600080fd5b506101de610226366004613038565b610934565b34801561023757600080fd5b506101de610246366004613038565b610ac1565b6101de6102593660046131d6565b610c9a565b34801561026a57600080fd5b506101b0610279366004612fc7565b61107a565b34801561028a57600080fd5b506101de610299366004613038565b611087565b3480156102aa57600080fd5b506102d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610187565b3480156102f657600080fd5b506101b0610305366004612fc7565b6111af565b34801561031657600080fd5b5061017661032536600461323d565b6111bc565b34801561033657600080fd5b506102d27f000000000000000000000000000000000000000000000000000000000000000081565b34801561036a57600080fd5b506101de610379366004613105565b611446565b34801561038a57600080fd5b5061039e6103993660046132af565b611473565b60408051938452602084019290925290820152606001610187565b61039e6103c7366004612f69565b61159c565b6101de6103da3660046131d6565b611826565b60008082428110156104335760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b60448201526064015b60405180910390fd5b610462897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6111bc565b9093509150610472898685611c10565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156104ed57600080fd5b505af1158015610501573d6000803e3d6000fd5b5050505061050f8583611d66565b50965096945050505050565b6000610528848484611e4e565b949350505050565b6060814281101561057e5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866105b5600182613341565b8181106105c4576105c4613358565b90506020020160208101906105d9919061336e565b6001600160a01b03161461062f5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b61068d7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b915086826001845161069f9190613341565b815181106106af576106af613358565b602002602001015110156107195760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b6107de8686600081811061072f5761072f613358565b9050602002016020810190610744919061336e565b336107be7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061077c5761077c613358565b9050602002016020810190610791919061336e565b8b8b60018181106107a4576107a4613358565b90506020020160208101906107b9919061336e565b61210a565b856000815181106107d1576107d1613358565b6020026020010151612236565b61081d82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612395915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161085b9190613341565b8151811061086b5761086b613358565b60200260200101516040518263ffffffff1660e01b815260040161089191815260200190565b600060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b505050506108f38483600185516108d69190613341565b815181106108e6576108e6613358565b6020026020010151611d66565b509695505050505050565b606061092b7f0000000000000000000000000000000000000000000000000000000000000000848461259d565b90505b92915050565b606081428110156109825760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6109e07f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b91508682600184516109f29190613341565b81518110610a0257610a02613358565b60200260200101511015610a6c5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b610a828686600081811061072f5761072f613358565b6108f382878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b60608142811015610b0f5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610b46600182613341565b818110610b5557610b55613358565b9050602002016020810190610b6a919061336e565b6001600160a01b031614610bc05760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b610c1e7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b91508682600081518110610c3457610c34613358565b602002602001015111156107195760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b60608142811015610ce85760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610d2557610d25613358565b9050602002016020810190610d3a919061336e565b6001600160a01b031614610d905760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b610dee7f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f7f92505050565b9150868260018451610e009190613341565b81518110610e1057610e10613358565b60200260200101511015610e7a5760405162461bcd60e51b815260206004820152602b60248201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560448201526a1514155517d05353d5539560aa1b606482015260840161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610ebc57610ebc613358565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610f967f000000000000000000000000000000000000000000000000000000000000000089896000818110610f6e57610f6e613358565b9050602002016020810190610f83919061336e565b8a8a60018181106107a4576107a4613358565b84600081518110610fa957610fa9613358565b60200260200101516040518363ffffffff1660e01b8152600401610fe29291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613392565b61103157611031612f2b565b61107082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b5095945050505050565b600061052884848461271e565b606081428110156110d55760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6111337f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b9150868260008151811061114957611149613358565b60200260200101511115610a6c5760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b6000610528848484612849565b600080824281101561120b5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b60006112387f00000000000000000000000000000000000000000000000000000000000000008c8c61210a565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af115801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190613392565b506040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c91906133b4565b91509150600061134c8e8e612942565b509050806001600160a01b03168e6001600160a01b03161461136f578183611372565b82825b90975095508a8710156113d65760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161042a565b898610156114355760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161042a565b505050505097509795505050505050565b606061092b7f00000000000000000000000000000000000000000000000000000000000000008484611f7f565b600080600083428110156114c45760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b6114d28c8c8c8c8c8c612a52565b909450925060006115047f00000000000000000000000000000000000000000000000000000000000000008e8e61210a565b90506115128d338388612236565b61151e8c338387612236565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a91906133d8565b92505050985098509895505050505050565b600080600083428110156115ed5760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b61161b8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c612a52565b9094509250600061166d7f00000000000000000000000000000000000000000000000000000000000000008c7f000000000000000000000000000000000000000000000000000000000000000061210a565b905061167b8b338388612236565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af115801561175f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117839190613392565b61178f5761178f612f2b565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156117d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fb91906133d8565b92508334111561181857611818336118138634613341565b611d66565b505096509650969350505050565b606081428110156118745760405162461bcd60e51b8152602060048201526018602482015277155b9a5cddd85c158c949bdd5d195c8e881156141254915160421b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106118b1576118b1613358565b90506020020160208101906118c6919061336e565b6001600160a01b03161461191c5760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015260640161042a565b61197a7f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061259d92505050565b9150348260008151811061199057611990613358565b602002602001015111156119f65760405162461bcd60e51b815260206004820152602760248201527f556e69737761705632526f757465723a204558434553534956455f494e50555460448201526617d05353d5539560ca1b606482015260840161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110611a3857611a38613358565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015611a6b57600080fd5b505af1158015611a7f573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611aea7f000000000000000000000000000000000000000000000000000000000000000089896000818110610f6e57610f6e613358565b84600081518110611afd57611afd613358565b60200260200101516040518363ffffffff1660e01b8152600401611b369291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190613392565b611b8557611b85612f2b565b611bc482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612395915050565b81600081518110611bd757611bd7613358565b6020026020010151341115611070576110703383600081518110611bfd57611bfd613358565b6020026020010151346118139190613341565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611c81919061341d565b6000604051808303816000865af19150503d8060008114611cbe576040519150601f19603f3d011682016040523d82523d6000602084013e611cc3565b606091505b5091509150818015611ced575080511580611ced575080806020019051810190611ced9190613392565b611d5f5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161042a565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611d90919061341d565b60006040518083038185875af1925050503d8060008114611dcd576040519150601f19603f3d011682016040523d82523d6000602084013e611dd2565b606091505b5050905080611e495760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c6564000000000000000000000000606482015260840161042a565b505050565b6000808411611ec55760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161042a565b600083118015611ed55750600082115b611f325760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b6000611f40856103e5612d27565b90506000611f4e8285612d27565b90506000611f6883611f62886103e8612d27565b90612d97565b9050611f748183613439565b979650505050505050565b6060600282511015611fd35760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161042a565b815167ffffffffffffffff811115611fed57611fed6130ef565b604051908082528060200260200182016040528015612016578160200160208202803683370190505b509050828160008151811061202d5761202d613358565b60200260200101818152505060005b6001835161204a9190613341565b8110156121025760008061209d8786858151811061206a5761206a613358565b602002602001015187866001612080919061345b565b8151811061209057612090613358565b6020026020010151612df5565b915091506120c58484815181106120b6576120b6613358565b60200260200101518383611e4e565b846120d185600161345b565b815181106120e1576120e1613358565b602002602001018181525050505080806120fa90613473565b91505061203c565b509392505050565b60008060006121198585612942565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150869060480160405160208183030381529060405280519060200120876001600160a01b0316633c9de1b86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561219d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c191906133d8565b6040517fff00000000000000000000000000000000000000000000000000000000000000602082015260609390931b6bffffffffffffffffffffffff191660218401526035830191909152605582015260750160408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916122af919061341d565b6000604051808303816000865af19150503d80600081146122ec576040519150601f19603f3d011682016040523d82523d6000602084013e6122f1565b606091505b509150915081801561231b57508051158061231b57508080602001905181019061231b9190613392565b61238d5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840161042a565b505050505050565b60005b600183516123a69190613341565b811015612597576000808483815181106123c2576123c2613358565b6020026020010151858460016123d8919061345b565b815181106123e8576123e8613358565b60200260200101519150915060006124008383612942565b50905060008761241186600161345b565b8151811061242157612421613358565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461244f57826000612453565b6000835b91509150600060028a516124679190613341565b881061247357886124c1565b6124c17f0000000000000000000000000000000000000000000000000000000000000000878c6124a48c600261345b565b815181106124b4576124b4613358565b602002602001015161210a565b90506124ee7f0000000000000000000000000000000000000000000000000000000000000000888861210a565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f19166020018201604052801561252b576020820181803683370190505b506040518563ffffffff1660e01b815260040161254b949392919061348e565b600060405180830381600087803b15801561256557600080fd5b505af1158015612579573d6000803e3d6000fd5b5050505050505050505050808061258f90613473565b915050612398565b50505050565b60606002825110156125f15760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161042a565b815167ffffffffffffffff81111561260b5761260b6130ef565b604051908082528060200260200182016040528015612634578160200160208202803683370190505b5090508281600183516126479190613341565b8151811061265757612657613358565b6020026020010181815250506000600183516126739190613341565b90505b8015612102576000806126b9878661268f600187613341565b8151811061269f5761269f613358565b602002602001015187868151811061209057612090613358565b915091506126e18484815181106126d2576126d2613358565b6020026020010151838361271e565b846126ed600186613341565b815181106126fd576126fd613358565b60200260200101818152505050508080612716906134df565b915050612676565b60008084116127955760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161042a565b6000831180156127a55750600082115b6128025760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b600061281a6103e86128148688612d27565b90612d27565b9050600061282e6103e56128148689612ecd565b905061283f6001611f628385613439565b9695505050505050565b60008084116128c05760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e54000000000000000000000000000000000000000000000000000000606482015260840161042a565b6000831180156128d05750600082115b61292d5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161042a565b826129388584612d27565b6105289190613439565b600080826001600160a01b0316846001600160a01b031614156129cd5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161042a565b826001600160a01b0316846001600160a01b0316106129ed5782846129f0565b83835b90925090506001600160a01b038216612a4b5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161042a565b9250929050565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0691906134f6565b6001600160a01b03161415612bc4576040517fc9c653960000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af1158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc291906134f6565b505b600080612bf27f00000000000000000000000000000000000000000000000000000000000000008b8b612df5565b91509150816000148015612c04575080155b15612c1457879350869250612d1a565b6000612c21898484612849565b9050878111612c945785811015612c895760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604482015265105353d5539560d21b606482015260840161042a565b889450925082612d18565b6000612ca1898486612849565b905089811115612cb357612cb3612f2b565b87811015612d125760405162461bcd60e51b815260206004820152602660248201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604482015265105353d5539560d21b606482015260840161042a565b94508793505b505b5050965096945050505050565b6000811580612d4b57508282612d3d8183613513565b9250612d499083613439565b145b61092e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015260640161042a565b600082612da4838261345b565b915081101561092e5760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161042a565b6000806000612e048585612942565b509050600080612e1588888861210a565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e769190613550565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b031614612ebb578082612ebe565b81815b90999098509650505050505050565b600082612eda8382613341565b915081111561092e5760405162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015260640161042a565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114612f5657600080fd5b50565b8035612f6481612f41565b919050565b60008060008060008060c08789031215612f8257600080fd5b8635612f8d81612f41565b95506020870135945060408701359350606087013592506080870135612fb281612f41565b8092505060a087013590509295509295509295565b600080600060608486031215612fdc57600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261300557600080fd5b50813567ffffffffffffffff81111561301d57600080fd5b6020830191508360208260051b8501011115612a4b57600080fd5b60008060008060008060a0878903121561305157600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561307657600080fd5b61308289828a01612ff3565b909550935050606087013561309681612f41565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156130e3578351835292840192918401916001016130c7565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561311857600080fd5b8235915060208084013567ffffffffffffffff8082111561313857600080fd5b818601915086601f83011261314c57600080fd5b81358181111561315e5761315e6130ef565b8060051b604051601f19603f83011681018181108582111715613183576131836130ef565b6040529182528482019250838101850191898311156131a157600080fd5b938501935b828510156131c6576131b785612f59565b845293850193928501926131a6565b8096505050505050509250929050565b6000806000806000608086880312156131ee57600080fd5b85359450602086013567ffffffffffffffff81111561320c57600080fd5b61321888828901612ff3565b909550935050604086013561322c81612f41565b949793965091946060013592915050565b600080600080600080600060e0888a03121561325857600080fd5b873561326381612f41565b9650602088013561327381612f41565b955060408801359450606088013593506080880135925060a088013561329881612f41565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b0312156132cc57600080fd5b88356132d781612f41565b975060208901356132e781612f41565b965060408901359550606089013594506080890135935060a0890135925060c089013561331381612f41565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b6000828210156133535761335361332b565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561338057600080fd5b813561338b81612f41565b9392505050565b6000602082840312156133a457600080fd5b8151801515811461338b57600080fd5b600080604083850312156133c757600080fd5b505080516020909101519092909150565b6000602082840312156133ea57600080fd5b5051919050565b60005b8381101561340c5781810151838201526020016133f4565b838111156125975750506000910152565b6000825161342f8184602087016133f1565b9190910192915050565b60008261345657634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561346e5761346e61332b565b500190565b60006000198214156134875761348761332b565b5060010190565b8481528360208201526001600160a01b038316604082015260806060820152600082518060808401526134c88160a08501602087016133f1565b601f01601f19169190910160a00195945050505050565b6000816134ee576134ee61332b565b506000190190565b60006020828403121561350857600080fd5b815161338b81612f41565b600081600019048311821515161561352d5761352d61332b565b500290565b80516dffffffffffffffffffffffffffff81168114612f6457600080fd5b60008060006060848603121561356557600080fd5b61356e84613532565b925061357c60208501613532565b9150604084015163ffffffff8116811461359557600080fd5b80915050925092509256fea26469706673582212206ddc5c2d47a2594b1f270e799a4838266da4b1e5f72615e225abe0d1b6a9325964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}