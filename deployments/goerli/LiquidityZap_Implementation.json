{
  "address": "0x2ea4a508a85D4CC0f09F8F400831F3C385fFDD1a",
  "abi": [
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermision",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZapExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenWETHPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidityETHOnly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidityWETHOnly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmt",
          "type": "uint256"
        }
      ],
      "name": "getLPTokenPerEthUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenWethPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_helper",
          "type": "address"
        }
      ],
      "name": "initLiquidityZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalWETHAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmt",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "standardAdd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_onBehalf",
          "type": "address"
        }
      ],
      "name": "zapETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1641dad35d5d65bdcd4892eb836f2391141f6b843f339a8b816abc98d060f9d",
  "receipt": {
    "to": null,
    "from": "0x4Ae0010e604b1E0096aE95C0fd3e2DC768e76BEa",
    "contractAddress": "0x2ea4a508a85D4CC0f09F8F400831F3C385fFDD1a",
    "transactionIndex": 33,
    "gasUsed": "1511416",
    "logsBloom": "0x
    "blockHash": "0xb773dbda5642e26d6fd1c000137fb9d36873c74a4be84c6d727e12e371df3d69",
    "transactionHash": "0xd1641dad35d5d65bdcd4892eb836f2391141f6b843f339a8b816abc98d060f9d",
    "logs": [],
    "blockNumber": 8976857,
    "cumulativeGasUsed": "5251999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d20862d9a7051998216c9f1f22667b5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermision\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZapExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidityETHOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidityWETHOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"getLPTokenPerEthUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenWethPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"name\":\"initLiquidityZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalWETHAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"standardAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_onBehalf\",\"type\":\"address\"}],\"name\":\"zapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant Devs\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"addLiquidityETHOnly(address)\":{\"params\":{\"to\":\"address of lp token\"},\"returns\":{\"_0\":\"liquidity lp amount\"}},\"addLiquidityWETHOnly(uint256,address)\":{\"params\":{\"_amount\":\"of WETH\",\"to\":\"address of lp token\"},\"returns\":{\"_0\":\"liquidity lp amount\"}},\"getLPTokenPerEthUnit(uint256)\":{\"params\":{\"ethAmt\":\"ETH amount\"},\"returns\":{\"liquidity\":\"LP amount\"}},\"initLiquidityZap(address,address,address,address)\":{\"params\":{\"_helper\":\"Pool helper contract\",\"_weth\":\"WETH address\",\"token\":\"RDNT address\",\"tokenWethPair\":\"LP pair\"}},\"quote(uint256)\":{\"params\":{\"wethAmount\":\"RDNT amount\"},\"returns\":{\"optimalTokenAmount\":\"Output RDNT amount\"}},\"quoteFromToken(uint256)\":{\"params\":{\"tokenAmount\":\"RDNT amount\"},\"returns\":{\"optimalWETHAmount\":\"Output WETH amount\"}},\"standardAdd(uint256,uint256,address)\":{\"details\":\"use with quote\",\"params\":{\"_wethAmt\":\"WETH amount\",\"to\":\"LP address to be transfered\",\"tokenAmount\":\"RDNT amount\"},\"returns\":{\"_0\":\"liquidity LP amount\"}},\"zapETH(address)\":{\"params\":{\"_onBehalf\":\"of the user\"},\"returns\":{\"_0\":\"liquidity lp amount\"}}},\"title\":\"Radiant token contract with OFT integration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityETHOnly(address)\":{\"notice\":\"Add liquidity with ETH\"},\"addLiquidityWETHOnly(uint256,address)\":{\"notice\":\"Add liquidity with WETH\"},\"getLPTokenPerEthUnit(uint256)\":{\"notice\":\"LP token amount entitled with ETH\"},\"initLiquidityZap(address,address,address,address)\":{\"notice\":\"Initialize liquidity zap param\"},\"initialize()\":{\"notice\":\"Initialize\"},\"quote(uint256)\":{\"notice\":\"Quote RDNT amount from WETH\"},\"quoteFromToken(uint256)\":{\"notice\":\"Quote WETH amount from RDNT\"},\"standardAdd(uint256,uint256,address)\":{\"notice\":\"Add liquidity with RDNT and WETH\"},\"zapETH(address)\":{\"notice\":\"Zap ethereum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/zap/helpers/LiquidityZap.sol\":\"LiquidityZap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x334d8f0222053d99b649322eb9e3c4f53968522d982d194013c0d760ac25b195\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x8f463e545529ddac7b9b1e7b9bdb3dba5a6a10a19f1d0a66db8edf7e4119be58\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\n//solhint-disable reason-string\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"443533a897cfad2762695078bf6ee9b78b4edcda64ec31e1c83066cee4c90a7e\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d738418ad985add26cfceb81c014d7fb859f92e9d1d8c1be3f284433dcdb96\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n\\tfunction __Context_init() internal onlyInitializing {}\\n\\n\\tfunction __Context_init_unchained() internal onlyInitializing {}\\n\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis;\\n\\t\\treturn msg.data;\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x320bed7499f85b69a3406a7500006a1798f9b3dcf1807af3669bbb33eb3c4099\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private initialized;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\trequire(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tinitialized = true;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns true if and only if the function is running in the constructor\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\tmodifier onlyInitializing() {\\n\\t\\trequire(initializing, \\\"Initializable: contract is not initializing\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xd7107a791a9598ec939c22a977e324f3521367a7a447f2875ab48829317e4a07\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction __Ownable_init() internal onlyInitializing {\\n\\t\\t__Ownable_init_unchained();\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained() internal onlyInitializing {\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf4467e9c77539c1294e57ca516fc329ecad0489f2868730c54c6bcaeea5f588e\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x81802458b401654d7b326cc74c7589fc1ca979ba7f4762684f1c28d775a291f6\",\"license\":\"agpl-3.0\"},\"contracts/radiant/zap/helpers/LiquidityZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n//\\n// LiquidityZAP takes ETH and converts to  liquidity tokens.\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program.\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// Attribution: CORE / cvault.finance\\n//  https://github.com/cVault-finance/CORE-periphery/blob/master/contracts/COREv1Router.sol\\n//\\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n//----------------------------------------------------------------------------------\\n//    I n s t a n t\\n//\\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.\\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'\\n//\\n//----------------------------------------------------------------------------------\\n\\nimport {IUniswapV2Pair} from \\\"@uniswap/lib/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2Library} from \\\"@uniswap/lib/contracts/libraries/UniswapV2Library.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\nimport {Initializable} from \\\"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\n\\n/// @title Radiant token contract with OFT integration\\n/// @author Radiant Devs\\n/// @dev All function calls are currently implemented without side effects\\ncontract LiquidityZap is Initializable, OwnableUpgradeable {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\terror ZapExists();\\n\\terror InvalidETHAmount();\\n\\terror AddressZero();\\n\\terror InsufficientPermision();\\n\\n\\taddress public _token;\\n\\taddress public _tokenWETHPair;\\n\\tIWETH public weth;\\n\\tbool private initialized;\\n\\taddress public poolHelper;\\n\\n\\t/**\\n\\t * @notice Initialize\\n\\t */\\n\\tfunction initialize() external initializer {\\n\\t\\t__Ownable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize liquidity zap param\\n\\t * @param token RDNT address\\n\\t * @param _weth WETH address\\n\\t * @param tokenWethPair LP pair\\n\\t * @param _helper Pool helper contract\\n\\t */\\n\\tfunction initLiquidityZap(address token, address _weth, address tokenWethPair, address _helper) external {\\n\\t\\tif (initialized) revert ZapExists();\\n\\t\\t_token = token;\\n\\t\\tweth = IWETH(_weth);\\n\\t\\t_tokenWETHPair = tokenWethPair;\\n\\t\\tinitialized = true;\\n\\t\\tpoolHelper = _helper;\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tif (msg.sender != address(weth)) {\\n\\t\\t\\taddLiquidityETHOnly(payable(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap ethereum\\n\\t * @param _onBehalf of the user\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction zapETH(address payable _onBehalf) external payable returns (uint256) {\\n\\t\\tif (msg.value == 0) revert InvalidETHAmount();\\n\\t\\treturn addLiquidityETHOnly(_onBehalf);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with WETH\\n\\t * @param _amount of WETH\\n\\t * @param to address of lp token\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) public returns (uint256) {\\n\\t\\tif (msg.sender != poolHelper) revert InsufficientPermision();\\n\\t\\tif (to == address(0)) revert AddressZero();\\n\\t\\tuint256 buyAmount = _amount.div(2);\\n\\t\\tif (buyAmount == 0) revert InvalidETHAmount();\\n\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\\n\\n\\t\\tweth.transfer(_tokenWETHPair, buyAmount);\\n\\n\\t\\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), _token);\\n\\t\\tIUniswapV2Pair(_tokenWETHPair).swap(\\n\\t\\t\\t_token == token0 ? outTokens : 0,\\n\\t\\t\\t_token == token1 ? outTokens : 0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\n\\t\\treturn _addLiquidity(outTokens, buyAmount, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with ETH\\n\\t * @param to address of lp token\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction addLiquidityETHOnly(address payable to) public payable returns (uint256) {\\n\\t\\tif (to == address(0)) revert AddressZero();\\n\\t\\tuint256 buyAmount = msg.value.div(2);\\n\\t\\tif (buyAmount == 0) revert InvalidETHAmount();\\n\\t\\tweth.deposit{value: msg.value}();\\n\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\\n\\n\\t\\tweth.transfer(_tokenWETHPair, buyAmount);\\n\\n\\t\\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), _token);\\n\\t\\tIUniswapV2Pair(_tokenWETHPair).swap(\\n\\t\\t\\t_token == token0 ? outTokens : 0,\\n\\t\\t\\t_token == token1 ? outTokens : 0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\n\\t\\treturn _addLiquidity(outTokens, buyAmount, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quote WETH amount from RDNT\\n\\t * @param tokenAmount RDNT amount\\n\\t * @return optimalWETHAmount Output WETH amount\\n\\t */\\n\\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\\n\\t\\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\\n\\t\\toptimalWETHAmount = UniswapV2Library.quote(tokenAmount, tokenReserve, wethReserve);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quote RDNT amount from WETH\\n\\t * @param wethAmount RDNT amount\\n\\t * @return optimalTokenAmount Output RDNT amount\\n\\t */\\n\\tfunction quote(uint256 wethAmount) public view returns (uint256 optimalTokenAmount) {\\n\\t\\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\\n\\t\\toptimalTokenAmount = UniswapV2Library.quote(wethAmount, wethReserve, tokenReserve);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with RDNT and WETH\\n\\t * @dev use with quote\\n\\t * @param tokenAmount RDNT amount\\n\\t * @param _wethAmt WETH amount\\n\\t * @param to LP address to be transfered\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction standardAdd(uint256 tokenAmount, uint256 _wethAmt, address payable to) public returns (uint256) {\\n\\t\\tIERC20(_token).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\t\\tweth.transferFrom(msg.sender, address(this), _wethAmt);\\n\\t\\treturn _addLiquidity(tokenAmount, _wethAmt, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with RDNT and WETH\\n\\t * @dev use with quote\\n\\t * @param tokenAmount RDNT amount\\n\\t * @param wethAmount WETH amount\\n\\t * @param to LP address to be transfered\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction _addLiquidity(\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 wethAmount,\\n\\t\\taddress payable to\\n\\t) internal returns (uint256 liquidity) {\\n\\t\\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\\n\\n\\t\\tuint256 optimalTokenAmount = UniswapV2Library.quote(wethAmount, wethReserve, tokenReserve);\\n\\n\\t\\tuint256 optimalWETHAmount;\\n\\t\\tif (optimalTokenAmount > tokenAmount) {\\n\\t\\t\\toptimalWETHAmount = UniswapV2Library.quote(tokenAmount, tokenReserve, wethReserve);\\n\\t\\t\\toptimalTokenAmount = tokenAmount;\\n\\t\\t} else optimalWETHAmount = wethAmount;\\n\\n\\t\\tassert(weth.transfer(_tokenWETHPair, optimalWETHAmount));\\n\\t\\tIERC20(_token).safeTransfer(_tokenWETHPair, optimalTokenAmount);\\n\\n\\t\\tliquidity = IUniswapV2Pair(_tokenWETHPair).mint(to);\\n\\n\\t\\t//refund dust\\n\\t\\tif (tokenAmount > optimalTokenAmount) IERC20(_token).safeTransfer(to, tokenAmount.sub(optimalTokenAmount));\\n\\t\\tif (wethAmount > optimalWETHAmount) {\\n\\t\\t\\tweth.transfer(to, wethAmount.sub(optimalWETHAmount));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice LP token amount entitled with ETH\\n\\t * @param ethAmt ETH amount\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction getLPTokenPerEthUnit(uint256 ethAmt) public view returns (uint256 liquidity) {\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(ethAmt.div(2), reserveWeth, reserveTokens);\\n\\t\\tuint256 _totalSupply = IUniswapV2Pair(_tokenWETHPair).totalSupply();\\n\\n\\t\\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), _token);\\n\\t\\t(uint256 amount0, uint256 amount1) = token0 == _token ? (outTokens, ethAmt.div(2)) : (ethAmt.div(2), outTokens);\\n\\t\\t(uint256 _reserve0, uint256 _reserve1) = token0 == _token\\n\\t\\t\\t? (reserveTokens, reserveWeth)\\n\\t\\t\\t: (reserveWeth, reserveTokens);\\n\\t\\tliquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get amount of lp reserves\\n\\t * @return wethReserves WETH amount\\n\\t * @return tokenReserves RDNT amount\\n\\t */\\n\\tfunction getPairReserves() internal view returns (uint256 wethReserves, uint256 tokenReserves) {\\n\\t\\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), _token);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_tokenWETHPair).getReserves();\\n\\t\\t(wethReserves, tokenReserves) = token0 == _token ? (reserve1, reserve0) : (reserve0, reserve1);\\n\\t}\\n}\\n\",\"keccak256\":\"0x7cee4e05ae9421e9428de9497ae6ec17dc7b7607e7f6eeaffa81ae30ece71ce3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a6d806100206000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063ed1bd76c11610059578063ed1bd76c1461028b578063edabc8f6146102ab578063f2fde38b146102cb578063fd706062146102eb576100f3565b80638da5cb5b1461021a578063c269742014610238578063d6b89a031461024b578063ecd0c0c31461026b576100f3565b806355ac8d30116100c657806355ac8d30146101b0578063715018a6146101d05780637c6ba9c1146101e55780638129fc1c14610205576100f3565b806314b0818a14610112578063370c38611461014f5780633fc8cef31461016f578063470e96891461018f575b6099546001600160a01b031633146101105761010e3361030b565b505b005b34801561011e57600080fd5b50609854610132906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015b57600080fd5b5061011061016a366004611782565b610553565b34801561017b57600080fd5b50609954610132906001600160a01b031681565b6101a261019d3660046117de565b61061b565b604051908152602001610146565b3480156101bc57600080fd5b50609a54610132906001600160a01b031681565b3480156101dc57600080fd5b5061011061064a565b3480156101f157600080fd5b506101a26102003660046117fb565b6106b5565b34801561021157600080fd5b5061011061075f565b34801561022657600080fd5b506065546001600160a01b0316610132565b6101a26102463660046117de565b61030b565b34801561025757600080fd5b506101a2610266366004611834565b610833565b34801561027757600080fd5b50609754610132906001600160a01b031681565b34801561029757600080fd5b506101a26102a6366004611834565b6109a3565b3480156102b757600080fd5b506101a26102c636600461184d565b6109bf565b3480156102d757600080fd5b506101106102e63660046117de565b610be4565b3480156102f757600080fd5b506101a2610306366004611834565b610cc3565b60006001600160a01b03821661033457604051639fabe1c160e01b815260040160405180910390fd5b6000610341346002610cdf565b9050806103615760405163090ac0d760e21b815260040160405180910390fd5b609960009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b50505050506000806103d5610cf2565b9150915060006103e6848484610dd6565b60995460985460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610461919061187d565b506099546097546000918291610483916001600160a01b039081169116610f08565b6098546097549294509092506001600160a01b039081169163022c0d9f918086169116146104b25760006104b4565b845b6097546001600160a01b038581169116146104d05760006104d2565b855b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b5050505061054783878a611018565b98975050505050505050565b609954600160a01b900460ff1615610597576040517fd79c090e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609780546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091556099805460988054958816958416959095179094557fffffffffffffffffffffff00000000000000000000000000000000000000000090931693851693909317600160a01b17909155609a8054919093169116179055565b60003461063b5760405163090ac0d760e21b815260040160405180910390fd5b6106448261030b565b92915050565b6065546001600160a01b031633146106a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106b36000611250565b565b6097546000906106d0906001600160a01b03163330876112af565b6099546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b919061187d565b50610757848484611018565b949350505050565b600054610100900460ff16806107745750303b155b80610782575060005460ff16155b6107f45760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a656400000000000000000000000000000000000060648201526084016106a0565b600054610100900460ff16158015610816576000805461ffff19166101011790555b61081e611335565b8015610830576000805461ff00191690555b50565b6000806000610840610cf2565b9092509050600061085c610855866002610cdf565b8484610dd6565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061189f565b6099546097549192506000916108f9916001600160a01b039081169116610f08565b5060975490915060009081906001600160a01b0380851691161461092857610922896002610cdf565b85610934565b846109348a6002610cdf565b609754919350915060009081906001600160a01b0386811691161461095a57888861095d565b87895b90925090506109948261097086896113a8565b61097a91906118ce565b82610985868a6113a8565b61098f91906118ce565b6113b4565b9b9a5050505050505050505050565b60008060006109b0610cf2565b915091506107578483836113ca565b609a546000906001600160a01b03163314610a06576040517f2b8fa89900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610a2d57604051639fabe1c160e01b815260040160405180910390fd5b6000610a3a846002610cdf565b905080610a5a5760405163090ac0d760e21b815260040160405180910390fd5b600080610a65610cf2565b915091506000610a76848484610dd6565b60995460985460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af1158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af1919061187d565b506099546097546000918291610b13916001600160a01b039081169116610f08565b6098546097549294509092506001600160a01b039081169163022c0d9f91808616911614610b42576000610b44565b845b6097546001600160a01b03858116911614610b60576000610b62565b855b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b50505050610bd783878a611018565b9998505050505050505050565b6065546001600160a01b03163314610c3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a0565b6001600160a01b038116610cba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106a0565b61083081611250565b6000806000610cd0610cf2565b915091506107578482846113ca565b6000610ceb82846118ce565b9392505050565b60995460975460009182918291610d15916001600160a01b039182169116610f08565b509050600080609860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190611913565b506097546dffffffffffffffffffffffffffff9283169450911691506001600160a01b03848116911614610dc7578181610dca565b80825b90969095509350505050565b6000808411610e4d5760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e5400000000000000000000000000000000000000000060648201526084016106a0565b600083118015610e5d5750600082115b610eba5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016106a0565b6000610ec8856103e5611958565b90506000610ed68483611958565b9050600082610ee7876103e8611958565b610ef19190611977565b9050610efd81836118ce565b979650505050505050565b600080826001600160a01b0316846001600160a01b03161415610f935760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f455353455300000000000000000000000000000000000000000000000000000060648201526084016106a0565b826001600160a01b0316846001600160a01b031610610fb3578284610fb6565b83835b90925090506001600160a01b0382166110115760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016106a0565b9250929050565b6000806000611025610cf2565b9150915060006110368684846113ca565b90506000878211156110575761104d8884866113ca565b905087915061105a565b50855b60995460985460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156110af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d3919061187d565b6110df576110df61198f565b6098546097546110fc916001600160a01b039182169116846114c3565b6098546040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015290911690636a627842906024016020604051808303816000875af1158015611161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611185919061189f565b9450818811156111b0576111b08661119d8a856114f8565b6097546001600160a01b031691906114c3565b80871115611245576099546001600160a01b031663a9059cbb876111d48a856114f8565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561121f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611243919061187d565b505b505050509392505050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261132f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611504565b50505050565b600054610100900460ff166113a05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106a0565b6106b36115e9565b6000610ceb8284611958565b60008183106113c35781610ceb565b5090919050565b60008084116114415760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e5400000000000000000000000000000000000000000000000000000060648201526084016106a0565b6000831180156114515750600082115b6114ae5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016106a0565b826114b98386611958565b61075791906118ce565b6040516001600160a01b0383166024820152604481018290526114f390849063a9059cbb60e01b906064016112e3565b505050565b6000610ceb82846119a5565b6000611559826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661165d9092919063ffffffff16565b8051909150156114f35780806020019051810190611577919061187d565b6114f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106a0565b600054610100900460ff166116545760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106a0565b6106b333611250565b6060610757848460008585600080866001600160a01b0316858760405161168491906119e8565b60006040518083038185875af1925050503d80600081146116c1576040519150601f19603f3d011682016040523d82523d6000602084013e6116c6565b606091505b5091509150610efd878383876060831561173e578251611737576001600160a01b0385163b6117375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a0565b5081610757565b61075783838151156117535781518083602001fd5b8060405162461bcd60e51b81526004016106a09190611a04565b6001600160a01b038116811461083057600080fd5b6000806000806080858703121561179857600080fd5b84356117a38161176d565b935060208501356117b38161176d565b925060408501356117c38161176d565b915060608501356117d38161176d565b939692955090935050565b6000602082840312156117f057600080fd5b8135610ceb8161176d565b60008060006060848603121561181057600080fd5b833592506020840135915060408401356118298161176d565b809150509250925092565b60006020828403121561184657600080fd5b5035919050565b6000806040838503121561186057600080fd5b8235915060208301356118728161176d565b809150509250929050565b60006020828403121561188f57600080fd5b81518015158114610ceb57600080fd5b6000602082840312156118b157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000826118eb57634e487b7160e01b600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff8116811461190e57600080fd5b919050565b60008060006060848603121561192857600080fd5b611931846118f0565b925061193f602085016118f0565b9150604084015163ffffffff8116811461182957600080fd5b6000816000190483118215151615611972576119726118b8565b500290565b6000821982111561198a5761198a6118b8565b500190565b634e487b7160e01b600052600160045260246000fd5b6000828210156119b7576119b76118b8565b500390565b60005b838110156119d75781810151838201526020016119bf565b8381111561132f5750506000910152565b600082516119fa8184602087016119bc565b9190910192915050565b6020815260008251806020840152611a238160408501602087016119bc565b601f01601f1916919091016040019291505056fea2646970667358221220e6ab23059dc7f607e63184cc32246cee184699cb38c3bf25aa281dfb3ee2a09264736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063ed1bd76c11610059578063ed1bd76c1461028b578063edabc8f6146102ab578063f2fde38b146102cb578063fd706062146102eb576100f3565b80638da5cb5b1461021a578063c269742014610238578063d6b89a031461024b578063ecd0c0c31461026b576100f3565b806355ac8d30116100c657806355ac8d30146101b0578063715018a6146101d05780637c6ba9c1146101e55780638129fc1c14610205576100f3565b806314b0818a14610112578063370c38611461014f5780633fc8cef31461016f578063470e96891461018f575b6099546001600160a01b031633146101105761010e3361030b565b505b005b34801561011e57600080fd5b50609854610132906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015b57600080fd5b5061011061016a366004611782565b610553565b34801561017b57600080fd5b50609954610132906001600160a01b031681565b6101a261019d3660046117de565b61061b565b604051908152602001610146565b3480156101bc57600080fd5b50609a54610132906001600160a01b031681565b3480156101dc57600080fd5b5061011061064a565b3480156101f157600080fd5b506101a26102003660046117fb565b6106b5565b34801561021157600080fd5b5061011061075f565b34801561022657600080fd5b506065546001600160a01b0316610132565b6101a26102463660046117de565b61030b565b34801561025757600080fd5b506101a2610266366004611834565b610833565b34801561027757600080fd5b50609754610132906001600160a01b031681565b34801561029757600080fd5b506101a26102a6366004611834565b6109a3565b3480156102b757600080fd5b506101a26102c636600461184d565b6109bf565b3480156102d757600080fd5b506101106102e63660046117de565b610be4565b3480156102f757600080fd5b506101a2610306366004611834565b610cc3565b60006001600160a01b03821661033457604051639fabe1c160e01b815260040160405180910390fd5b6000610341346002610cdf565b9050806103615760405163090ac0d760e21b815260040160405180910390fd5b609960009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103b157600080fd5b505af11580156103c5573d6000803e3d6000fd5b50505050506000806103d5610cf2565b9150915060006103e6848484610dd6565b60995460985460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610461919061187d565b506099546097546000918291610483916001600160a01b039081169116610f08565b6098546097549294509092506001600160a01b039081169163022c0d9f918086169116146104b25760006104b4565b845b6097546001600160a01b038581169116146104d05760006104d2565b855b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b5050505061054783878a611018565b98975050505050505050565b609954600160a01b900460ff1615610597576040517fd79c090e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609780546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091556099805460988054958816958416959095179094557fffffffffffffffffffffff00000000000000000000000000000000000000000090931693851693909317600160a01b17909155609a8054919093169116179055565b60003461063b5760405163090ac0d760e21b815260040160405180910390fd5b6106448261030b565b92915050565b6065546001600160a01b031633146106a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6106b36000611250565b565b6097546000906106d0906001600160a01b03163330876112af565b6099546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b919061187d565b50610757848484611018565b949350505050565b600054610100900460ff16806107745750303b155b80610782575060005460ff16155b6107f45760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a656400000000000000000000000000000000000060648201526084016106a0565b600054610100900460ff16158015610816576000805461ffff19166101011790555b61081e611335565b8015610830576000805461ff00191690555b50565b6000806000610840610cf2565b9092509050600061085c610855866002610cdf565b8484610dd6565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061189f565b6099546097549192506000916108f9916001600160a01b039081169116610f08565b5060975490915060009081906001600160a01b0380851691161461092857610922896002610cdf565b85610934565b846109348a6002610cdf565b609754919350915060009081906001600160a01b0386811691161461095a57888861095d565b87895b90925090506109948261097086896113a8565b61097a91906118ce565b82610985868a6113a8565b61098f91906118ce565b6113b4565b9b9a5050505050505050505050565b60008060006109b0610cf2565b915091506107578483836113ca565b609a546000906001600160a01b03163314610a06576040517f2b8fa89900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610a2d57604051639fabe1c160e01b815260040160405180910390fd5b6000610a3a846002610cdf565b905080610a5a5760405163090ac0d760e21b815260040160405180910390fd5b600080610a65610cf2565b915091506000610a76848484610dd6565b60995460985460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af1158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af1919061187d565b506099546097546000918291610b13916001600160a01b039081169116610f08565b6098546097549294509092506001600160a01b039081169163022c0d9f91808616911614610b42576000610b44565b845b6097546001600160a01b03858116911614610b60576000610b62565b855b6040516001600160e01b031960e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b50505050610bd783878a611018565b9998505050505050505050565b6065546001600160a01b03163314610c3e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a0565b6001600160a01b038116610cba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106a0565b61083081611250565b6000806000610cd0610cf2565b915091506107578482846113ca565b6000610ceb82846118ce565b9392505050565b60995460975460009182918291610d15916001600160a01b039182169116610f08565b509050600080609860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190611913565b506097546dffffffffffffffffffffffffffff9283169450911691506001600160a01b03848116911614610dc7578181610dca565b80825b90969095509350505050565b6000808411610e4d5760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e5400000000000000000000000000000000000000000060648201526084016106a0565b600083118015610e5d5750600082115b610eba5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016106a0565b6000610ec8856103e5611958565b90506000610ed68483611958565b9050600082610ee7876103e8611958565b610ef19190611977565b9050610efd81836118ce565b979650505050505050565b600080826001600160a01b0316846001600160a01b03161415610f935760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f455353455300000000000000000000000000000000000000000000000000000060648201526084016106a0565b826001600160a01b0316846001600160a01b031610610fb3578284610fb6565b83835b90925090506001600160a01b0382166110115760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016106a0565b9250929050565b6000806000611025610cf2565b9150915060006110368684846113ca565b90506000878211156110575761104d8884866113ca565b905087915061105a565b50855b60995460985460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156110af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d3919061187d565b6110df576110df61198f565b6098546097546110fc916001600160a01b039182169116846114c3565b6098546040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015290911690636a627842906024016020604051808303816000875af1158015611161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611185919061189f565b9450818811156111b0576111b08661119d8a856114f8565b6097546001600160a01b031691906114c3565b80871115611245576099546001600160a01b031663a9059cbb876111d48a856114f8565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561121f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611243919061187d565b505b505050509392505050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261132f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611504565b50505050565b600054610100900460ff166113a05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106a0565b6106b36115e9565b6000610ceb8284611958565b60008183106113c35781610ceb565b5090919050565b60008084116114415760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e5400000000000000000000000000000000000000000000000000000060648201526084016106a0565b6000831180156114515750600082115b6114ae5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016106a0565b826114b98386611958565b61075791906118ce565b6040516001600160a01b0383166024820152604481018290526114f390849063a9059cbb60e01b906064016112e3565b505050565b6000610ceb82846119a5565b6000611559826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661165d9092919063ffffffff16565b8051909150156114f35780806020019051810190611577919061187d565b6114f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106a0565b600054610100900460ff166116545760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106a0565b6106b333611250565b6060610757848460008585600080866001600160a01b0316858760405161168491906119e8565b60006040518083038185875af1925050503d80600081146116c1576040519150601f19603f3d011682016040523d82523d6000602084013e6116c6565b606091505b5091509150610efd878383876060831561173e578251611737576001600160a01b0385163b6117375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a0565b5081610757565b61075783838151156117535781518083602001fd5b8060405162461bcd60e51b81526004016106a09190611a04565b6001600160a01b038116811461083057600080fd5b6000806000806080858703121561179857600080fd5b84356117a38161176d565b935060208501356117b38161176d565b925060408501356117c38161176d565b915060608501356117d38161176d565b939692955090935050565b6000602082840312156117f057600080fd5b8135610ceb8161176d565b60008060006060848603121561181057600080fd5b833592506020840135915060408401356118298161176d565b809150509250925092565b60006020828403121561184657600080fd5b5035919050565b6000806040838503121561186057600080fd5b8235915060208301356118728161176d565b809150509250929050565b60006020828403121561188f57600080fd5b81518015158114610ceb57600080fd5b6000602082840312156118b157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000826118eb57634e487b7160e01b600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff8116811461190e57600080fd5b919050565b60008060006060848603121561192857600080fd5b611931846118f0565b925061193f602085016118f0565b9150604084015163ffffffff8116811461182957600080fd5b6000816000190483118215151615611972576119726118b8565b500290565b6000821982111561198a5761198a6118b8565b500190565b634e487b7160e01b600052600160045260246000fd5b6000828210156119b7576119b76118b8565b500390565b60005b838110156119d75781810151838201526020016119bf565b8381111561132f5750506000910152565b600082516119fa8184602087016119bc565b9190910192915050565b6020815260008251806020840152611a238160408501602087016119bc565b601f01601f1916919091016040019291505056fea2646970667358221220e6ab23059dc7f607e63184cc32246cee184699cb38c3bf25aa281dfb3ee2a09264736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant Devs",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "addLiquidityETHOnly(address)": {
        "params": {
          "to": "address of lp token"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      },
      "addLiquidityWETHOnly(uint256,address)": {
        "params": {
          "_amount": "of WETH",
          "to": "address of lp token"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      },
      "getLPTokenPerEthUnit(uint256)": {
        "params": {
          "ethAmt": "ETH amount"
        },
        "returns": {
          "liquidity": "LP amount"
        }
      },
      "initLiquidityZap(address,address,address,address)": {
        "params": {
          "_helper": "Pool helper contract",
          "_weth": "WETH address",
          "token": "RDNT address",
          "tokenWethPair": "LP pair"
        }
      },
      "quote(uint256)": {
        "params": {
          "wethAmount": "RDNT amount"
        },
        "returns": {
          "optimalTokenAmount": "Output RDNT amount"
        }
      },
      "quoteFromToken(uint256)": {
        "params": {
          "tokenAmount": "RDNT amount"
        },
        "returns": {
          "optimalWETHAmount": "Output WETH amount"
        }
      },
      "standardAdd(uint256,uint256,address)": {
        "details": "use with quote",
        "params": {
          "_wethAmt": "WETH amount",
          "to": "LP address to be transfered",
          "tokenAmount": "RDNT amount"
        },
        "returns": {
          "_0": "liquidity LP amount"
        }
      },
      "zapETH(address)": {
        "params": {
          "_onBehalf": "of the user"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      }
    },
    "title": "Radiant token contract with OFT integration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityETHOnly(address)": {
        "notice": "Add liquidity with ETH"
      },
      "addLiquidityWETHOnly(uint256,address)": {
        "notice": "Add liquidity with WETH"
      },
      "getLPTokenPerEthUnit(uint256)": {
        "notice": "LP token amount entitled with ETH"
      },
      "initLiquidityZap(address,address,address,address)": {
        "notice": "Initialize liquidity zap param"
      },
      "initialize()": {
        "notice": "Initialize"
      },
      "quote(uint256)": {
        "notice": "Quote RDNT amount from WETH"
      },
      "quoteFromToken(uint256)": {
        "notice": "Quote WETH amount from RDNT"
      },
      "standardAdd(uint256,uint256,address)": {
        "notice": "Add liquidity with RDNT and WETH"
      },
      "zapETH(address)": {
        "notice": "Zap ethereum"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10936,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10939,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11006,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10929,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11151,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 11256,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 54025,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_token",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 54027,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_tokenWETHPair",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 54030,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "weth",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IWETH)18162"
      },
      {
        "astId": 54032,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "initialized",
        "offset": 20,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 54034,
        "contract": "contracts/radiant/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "poolHelper",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWETH)18162": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}