{
  "address": "0xf1dD71F91Ae1aAE19CA04B522AdC16c6cba39B70",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ATokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BorrowingDisabledOnReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "stableRateEnabled",
          "type": "bool"
        }
      ],
      "name": "BorrowingEnabledOnReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationBonus",
          "type": "uint256"
        }
      ],
      "name": "CollateralConfigurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ReserveActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ReserveDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "ReserveDecimalsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "name": "ReserveFactorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ReserveFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "variableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "ReserveInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "ReserveInterestRateStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ReserveUnfrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "StableDebtTokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "StableRateDisabledOnReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "StableRateEnabledOnReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "VariableDebtTokenUpgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "activateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "aTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenImpl",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "underlyingAssetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "underlyingAssetName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "aTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "aTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "variableDebtTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "variableDebtTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stableDebtTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stableDebtTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILendingPoolConfigurator.InitReserveInput[]",
          "name": "input",
          "type": "tuple[]"
        }
      ],
      "name": "batchInitReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationBonus",
          "type": "uint256"
        }
      ],
      "name": "configureReserveAsCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "deactivateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "disableBorrowingOnReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "disableReserveStableRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stableBorrowRateEnabled",
          "type": "bool"
        }
      ],
      "name": "enableBorrowingOnReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "enableReserveStableRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "freezeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setPoolPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactor",
          "type": "uint256"
        }
      ],
      "name": "setReserveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "unfreezeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILendingPoolConfigurator.UpdateATokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateAToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILendingPoolConfigurator.UpdateDebtTokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateStableDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILendingPoolConfigurator.UpdateDebtTokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateVariableDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fc9a0b30de553c05a5d736315cc138fc56794e257acb10c58577ce3521257be",
  "receipt": {
    "to": null,
    "from": "0x4Ae0010e604b1E0096aE95C0fd3e2DC768e76BEa",
    "contractAddress": "0xf1dD71F91Ae1aAE19CA04B522AdC16c6cba39B70",
    "transactionIndex": 42,
    "gasUsed": "3747394",
    "logsBloom": "0x
    "blockHash": "0x1f6a5e0f27ce25f0610169f7053fda1bfa60b86a5fb925ebbbefa5679eb0d46a",
    "transactionHash": "0x1fc9a0b30de553c05a5d736315cc138fc56794e257acb10c58577ce3521257be",
    "logs": [],
    "blockNumber": 8976848,
    "cumulativeGasUsed": "8149624",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d20862d9a7051998216c9f1f22667b5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ATokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stableRateEnabled\",\"type\":\"bool\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"CollateralConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"ReserveDecimalsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StableRateEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"aTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"underlyingAssetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"aTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"aTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.InitReserveInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"batchInitReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"configureReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"disableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"}],\"name\":\"enableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"enableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"freezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unfreezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdateATokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdateDebtTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateStableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ILendingPoolConfigurator.UpdateDebtTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateVariableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"Implements the configuration methods for the Aave protocol*\",\"kind\":\"dev\",\"methods\":{\"activateReserve(address)\":{\"details\":\"Activates a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"batchInitReserve((address,address,address,uint8,address,address,address,address,uint256,string,string,string,string,string,string,string,bytes)[])\":{\"details\":\"Initializes reserves in batch*\"},\"configureReserveAsCollateral(address,uint256,uint256,uint256)\":{\"details\":\"Configures the reserve collateralization parameters all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"liquidationBonus\":\"The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105% means the liquidator will receive a 5% bonus*\",\"liquidationThreshold\":\"The threshold at which loans using this asset as collateral will be considered undercollateralized\",\"ltv\":\"The loan to value of the asset when used as collateral\"}},\"deactivateReserve(address)\":{\"details\":\"Deactivates a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"disableBorrowingOnReserve(address)\":{\"details\":\"Disables borrowing on a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"disableReserveStableRate(address)\":{\"details\":\"Disable stable rate borrowing on a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"enableBorrowingOnReserve(address,bool)\":{\"details\":\"Enables borrowing on a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"stableBorrowRateEnabled\":\"True if stable borrow rate needs to be enabled by default on this reserve*\"}},\"enableReserveStableRate(address)\":{\"details\":\"Enable stable rate borrowing on a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"freezeReserve(address)\":{\"details\":\"Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap  but allows repayments, liquidations, rate rebalances and withdrawals\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"setPoolPause(bool)\":{\"details\":\"pauses or unpauses all the actions of the protocol, including aToken transfers\",\"params\":{\"val\":\"true if protocol needs to be paused, false otherwise*\"}},\"setReserveFactor(address,uint256)\":{\"details\":\"Updates the reserve factor of a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"reserveFactor\":\"The new reserve factor of the reserve*\"}},\"setReserveInterestRateStrategyAddress(address,address)\":{\"details\":\"Sets the interest rate strategy of a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"rateStrategyAddress\":\"The new address of the interest strategy contract*\"}},\"unfreezeReserve(address)\":{\"details\":\"Unfreezes a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve*\"}},\"updateAToken((address,address,address,string,string,address,bytes))\":{\"details\":\"Updates the aToken implementation for the reserve*\"},\"updateStableDebtToken((address,address,string,string,address,bytes))\":{\"details\":\"Updates the stable debt token implementation for the reserve*\"},\"updateVariableDebtToken((address,address,string,string,address,bytes))\":{\"details\":\"Updates the variable debt token implementation for the asset*\"}},\"title\":\"LendingPoolConfigurator contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/lendingpool/LendingPoolConfigurator.sol\":\"LendingPoolConfigurator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n\\t/**\\n\\t * @dev Emitted when the implementation is upgraded.\\n\\t * @param implementation Address of the new implementation.\\n\\t */\\n\\tevent Upgraded(address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Storage slot with the address of the current implementation.\\n\\t * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n\\t * validated in the constructor.\\n\\t */\\n\\tbytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n\\t/**\\n\\t * @dev Returns the current implementation.\\n\\t * @return impl Address of the current implementation\\n\\t */\\n\\tfunction _implementation() internal view override returns (address impl) {\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\timpl := sload(slot)\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrades the proxy to a new implementation.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction _upgradeTo(address newImplementation) internal {\\n\\t\\t_setImplementation(newImplementation);\\n\\t\\temit Upgraded(newImplementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the implementation address of the proxy.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction _setImplementation(address newImplementation) internal {\\n\\t\\trequire(Address.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tsstore(slot, newImplementation)\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe69713d4b8228293c21abc5edd5ab273bdca78d30c4ee8f9aa2801bf788cbcc8\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n\\t/**\\n\\t * @dev Contract initializer.\\n\\t * @param _logic Address of the initial implementation.\\n\\t * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n\\t * It should include the signature and the parameters of the function to be called, as described in\\n\\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n\\t * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n\\t */\\n\\tfunction initialize(address _logic, bytes memory _data) public payable {\\n\\t\\trequire(_implementation() == address(0));\\n\\t\\tassert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n\\t\\t_setImplementation(_logic);\\n\\t\\tif (_data.length > 0) {\\n\\t\\t\\t(bool success, ) = _logic.delegatecall(_data);\\n\\t\\t\\trequire(success);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xac26f733bf59c130367b19e9f994f6eccf78f3be881e36bc398101fe9f4782f9\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n\\t/**\\n\\t * @dev Fallback function.\\n\\t * Implemented entirely in `_fallback`.\\n\\t */\\n\\tfallback() external payable {\\n\\t\\t_fallback();\\n\\t}\\n\\n\\t/**\\n\\t * @return The Address of the implementation.\\n\\t */\\n\\tfunction _implementation() internal view virtual returns (address);\\n\\n\\t/**\\n\\t * @dev Delegates execution to an implementation contract.\\n\\t * This is a low level function that doesn't return to its internal call site.\\n\\t * It will return to the external caller whatever the implementation returns.\\n\\t * @param implementation Address to delegate.\\n\\t */\\n\\tfunction _delegate(address implementation) internal {\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\t// Copy msg.data. We take full control of memory in this inline assembly\\n\\t\\t\\t// block because it will not return to Solidity code. We overwrite the\\n\\t\\t\\t// Solidity scratch pad at memory position 0.\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\n\\t\\t\\t// Call the implementation.\\n\\t\\t\\t// out and outsize are 0 because we don't know the size yet.\\n\\t\\t\\tlet result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n\\t\\t\\t// Copy the returned data.\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\t// delegatecall returns 0 on error.\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that is run as the first thing in the fallback function.\\n\\t * Can be redefined in derived contracts to add functionality.\\n\\t * Redefinitions must call super._willFallback().\\n\\t */\\n\\tfunction _willFallback() internal virtual {}\\n\\n\\t/**\\n\\t * @dev fallback implementation.\\n\\t * Extracted to enable manual triggering.\\n\\t */\\n\\tfunction _fallback() internal {\\n\\t\\t_willFallback();\\n\\t\\t_delegate(_implementation());\\n\\t}\\n}\\n\",\"keccak256\":\"0x2925b8a42c67267f954920af0716485c2dfe30efc888964cdf1fe333ebe54874\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n}\\n\",\"keccak256\":\"0x3f44ee9291069ef7a3b09c70293e745db5fe53b4f1b5ccdf72c97d1aad0f7720\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n}\\n\",\"keccak256\":\"0x9e51ff63313f57e8e7f7587bf1519eb1fed565dda804f0b48b3f25be34b3c1a4\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xbc2d79250445e87d578cefb23cd0876e1f29a7a4e611b2c18e082681985a7181\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILendingPoolConfigurator {\\n\\tstruct InitReserveInput {\\n\\t\\taddress aTokenImpl;\\n\\t\\taddress stableDebtTokenImpl;\\n\\t\\taddress variableDebtTokenImpl;\\n\\t\\tuint8 underlyingAssetDecimals;\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\taddress underlyingAsset;\\n\\t\\taddress treasury;\\n\\t\\taddress incentivesController;\\n\\t\\tuint256 allocPoint;\\n\\t\\tstring underlyingAssetName;\\n\\t\\tstring aTokenName;\\n\\t\\tstring aTokenSymbol;\\n\\t\\tstring variableDebtTokenName;\\n\\t\\tstring variableDebtTokenSymbol;\\n\\t\\tstring stableDebtTokenName;\\n\\t\\tstring stableDebtTokenSymbol;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\tstruct UpdateATokenInput {\\n\\t\\taddress asset;\\n\\t\\taddress treasury;\\n\\t\\taddress incentivesController;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\taddress implementation;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\tstruct UpdateDebtTokenInput {\\n\\t\\taddress asset;\\n\\t\\taddress incentivesController;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\taddress implementation;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is initialized.\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param aToken The address of the associated aToken contract\\n\\t * @param stableDebtToken The address of the associated stable rate debt token\\n\\t * @param variableDebtToken The address of the associated variable rate debt token\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n\\t **/\\n\\tevent ReserveInitialized(\\n\\t\\taddress indexed asset,\\n\\t\\taddress indexed aToken,\\n\\t\\taddress stableDebtToken,\\n\\t\\taddress variableDebtToken,\\n\\t\\taddress interestRateStrategyAddress\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when borrowing is enabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n\\t **/\\n\\tevent BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\\n\\n\\t/**\\n\\t * @dev Emitted when borrowing is disabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent BorrowingDisabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param ltv The loan to value of the asset when used as collateral\\n\\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n\\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n\\t **/\\n\\tevent CollateralConfigurationChanged(\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 ltv,\\n\\t\\tuint256 liquidationThreshold,\\n\\t\\tuint256 liquidationBonus\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when stable rate borrowing is enabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent StableRateEnabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when stable rate borrowing is disabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent StableRateDisabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is activated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveActivated(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is deactivated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveDeactivated(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is frozen\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveFrozen(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is unfrozen\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveUnfrozen(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve factor is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param factor The new reserve factor\\n\\t **/\\n\\tevent ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n\\t/**\\n\\t * @dev Emitted when the reserve decimals are updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param decimals The new decimals\\n\\t **/\\n\\tevent ReserveDecimalsChanged(address indexed asset, uint256 decimals);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve interest strategy contract is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param strategy The new address of the interest strategy contract\\n\\t **/\\n\\tevent ReserveInterestRateStrategyChanged(address indexed asset, address strategy);\\n\\n\\t/**\\n\\t * @dev Emitted when an aToken implementation is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The aToken proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Emitted when the implementation of a stable debt token is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The stable debt token proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Emitted when the implementation of a variable debt token is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The variable debt token proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n}\\n\",\"keccak256\":\"0xfb05d39e691265dee5df29195bc64550a4ac82b41fe25a45dad221f81cf54c0f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1ded3edc23a668c09ddcac690e9bb1233c73581f3554b90defa25e5d772e493c\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/lending/lendingpool/LendingPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \\\"../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {IInitializableDebtToken} from \\\"../../interfaces/IInitializableDebtToken.sol\\\";\\nimport {IInitializableAToken} from \\\"../../interfaces/IInitializableAToken.sol\\\";\\nimport {IChefIncentivesController} from \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport {ILendingPoolConfigurator} from \\\"../../interfaces/ILendingPoolConfigurator.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\n\\n/**\\n * @title LendingPoolConfigurator contract\\n * @author Aave\\n * @dev Implements the configuration methods for the Aave protocol\\n **/\\n\\ncontract LendingPoolConfigurator is VersionedInitializable, ILendingPoolConfigurator {\\n\\tusing SafeMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n\\tILendingPoolAddressesProvider internal addressesProvider;\\n\\tILendingPool internal pool;\\n\\n\\tmodifier onlyPoolAdmin() {\\n\\t\\trequire(addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyEmergencyAdmin() {\\n\\t\\trequire(addressesProvider.getEmergencyAdmin() == msg.sender, Errors.LPC_CALLER_NOT_EMERGENCY_ADMIN);\\n\\t\\t_;\\n\\t}\\n\\n\\tuint256 internal constant CONFIGURATOR_REVISION = 0x1;\\n\\n\\tfunction getRevision() internal pure override returns (uint256) {\\n\\t\\treturn CONFIGURATOR_REVISION;\\n\\t}\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\\n\\t\\taddressesProvider = provider;\\n\\t\\tpool = ILendingPool(addressesProvider.getLendingPool());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes reserves in batch\\n\\t **/\\n\\tfunction batchInitReserve(InitReserveInput[] calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\t\\tfor (uint256 i = 0; i < input.length; i++) {\\n\\t\\t\\t_initReserve(cachedPool, input[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _initReserve(ILendingPool _pool, InitReserveInput calldata input) internal {\\n\\t\\tIChefIncentivesController incentivesController = IChefIncentivesController(input.incentivesController);\\n\\t\\taddress aTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.aTokenImpl,\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tIInitializableAToken.initialize.selector,\\n\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\tinput.treasury,\\n\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\tincentivesController,\\n\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\tinput.aTokenName,\\n\\t\\t\\t\\tinput.aTokenSymbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tincentivesController.addPool(aTokenProxyAddress, input.allocPoint);\\n\\t\\tIMultiFeeDistribution(input.treasury).addReward(aTokenProxyAddress);\\n\\n\\t\\taddress stableDebtTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.stableDebtTokenImpl,\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tIInitializableDebtToken.initialize.selector,\\n\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\tIChefIncentivesController(input.incentivesController),\\n\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\tinput.stableDebtTokenName,\\n\\t\\t\\t\\tinput.stableDebtTokenSymbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\t// stableDebt is not added to incentives controller\\n\\t\\t// GEIST does not support stable lending\\n\\n\\t\\taddress variableDebtTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.variableDebtTokenImpl,\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\tIInitializableDebtToken.initialize.selector,\\n\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\tIChefIncentivesController(input.incentivesController),\\n\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\tinput.variableDebtTokenName,\\n\\t\\t\\t\\tinput.variableDebtTokenSymbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tincentivesController.addPool(variableDebtTokenProxyAddress, input.allocPoint);\\n\\n\\t\\t_pool.initReserve(\\n\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\taTokenProxyAddress,\\n\\t\\t\\tstableDebtTokenProxyAddress,\\n\\t\\t\\tvariableDebtTokenProxyAddress,\\n\\t\\t\\tinput.interestRateStrategyAddress\\n\\t\\t);\\n\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(input.underlyingAsset);\\n\\n\\t\\tcurrentConfig.setDecimals(input.underlyingAssetDecimals);\\n\\n\\t\\tcurrentConfig.setActive(true);\\n\\t\\tcurrentConfig.setFrozen(false);\\n\\n\\t\\tpool.setConfiguration(input.underlyingAsset, currentConfig.data);\\n\\n\\t\\temit ReserveInitialized(\\n\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\taTokenProxyAddress,\\n\\t\\t\\tstableDebtTokenProxyAddress,\\n\\t\\t\\tvariableDebtTokenProxyAddress,\\n\\t\\t\\tinput.interestRateStrategyAddress\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the aToken implementation for the reserve\\n\\t **/\\n\\tfunction updateAToken(UpdateATokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeWithSelector(\\n\\t\\t\\tIInitializableAToken.initialize.selector,\\n\\t\\t\\tcachedPool,\\n\\t\\t\\tinput.treasury,\\n\\t\\t\\tinput.asset,\\n\\t\\t\\tinput.incentivesController,\\n\\t\\t\\tdecimals,\\n\\t\\t\\tinput.name,\\n\\t\\t\\tinput.symbol,\\n\\t\\t\\tinput.params\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.aTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the stable debt token implementation for the reserve\\n\\t **/\\n\\tfunction updateStableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeWithSelector(\\n\\t\\t\\tIInitializableDebtToken.initialize.selector,\\n\\t\\t\\tcachedPool,\\n\\t\\t\\tinput.asset,\\n\\t\\t\\tinput.incentivesController,\\n\\t\\t\\tdecimals,\\n\\t\\t\\tinput.name,\\n\\t\\t\\tinput.symbol,\\n\\t\\t\\tinput.params\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.stableDebtTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit StableDebtTokenUpgraded(input.asset, reserveData.stableDebtTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the variable debt token implementation for the asset\\n\\t **/\\n\\tfunction updateVariableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeWithSelector(\\n\\t\\t\\tIInitializableDebtToken.initialize.selector,\\n\\t\\t\\tcachedPool,\\n\\t\\t\\tinput.asset,\\n\\t\\t\\tinput.incentivesController,\\n\\t\\t\\tdecimals,\\n\\t\\t\\tinput.name,\\n\\t\\t\\tinput.symbol,\\n\\t\\t\\tinput.params\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.variableDebtTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit VariableDebtTokenUpgraded(input.asset, reserveData.variableDebtTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n\\t **/\\n\\tfunction enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setBorrowingEnabled(true);\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(stableBorrowRateEnabled);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit BorrowingEnabledOnReserve(asset, stableBorrowRateEnabled);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Disables borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction disableBorrowingOnReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setBorrowingEnabled(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\t\\temit BorrowingDisabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Configures the reserve collateralization parameters\\n\\t * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param ltv The loan to value of the asset when used as collateral\\n\\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n\\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n\\t * means the liquidator will receive a 5% bonus\\n\\t **/\\n\\tfunction configureReserveAsCollateral(\\n\\t\\taddress asset,\\n\\t\\tuint256 ltv,\\n\\t\\tuint256 liquidationThreshold,\\n\\t\\tuint256 liquidationBonus\\n\\t) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\t//validation of the parameters: the LTV can\\n\\t\\t//only be lower or equal than the liquidation threshold\\n\\t\\t//(otherwise a loan against the asset would cause instantaneous liquidation)\\n\\t\\trequire(ltv <= liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\\n\\n\\t\\tif (liquidationThreshold != 0) {\\n\\t\\t\\t//liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\\n\\t\\t\\t//collateral than needed to cover the debt\\n\\t\\t\\trequire(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.LPC_INVALID_CONFIGURATION);\\n\\n\\t\\t\\t//if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\\n\\t\\t\\t//a loan is taken there is enough collateral available to cover the liquidation bonus\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tliquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,\\n\\t\\t\\t\\tErrors.LPC_INVALID_CONFIGURATION\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trequire(liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\\n\\t\\t\\t//if the liquidation threshold is being set to 0,\\n\\t\\t\\t// the reserve is being disabled as collateral. To do so,\\n\\t\\t\\t//we need to ensure no liquidity is deposited\\n\\t\\t\\t_checkNoLiquidity(asset);\\n\\t\\t}\\n\\n\\t\\tcurrentConfig.setLtv(ltv);\\n\\t\\tcurrentConfig.setLiquidationThreshold(liquidationThreshold);\\n\\t\\tcurrentConfig.setLiquidationBonus(liquidationBonus);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enable stable rate borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction enableReserveStableRate(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit StableRateEnabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Disable stable rate borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction disableReserveStableRate(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit StableRateDisabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Activates a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction activateReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setActive(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveActivated(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deactivates a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction deactivateReserve(address asset) external onlyPoolAdmin {\\n\\t\\t_checkNoLiquidity(asset);\\n\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setActive(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveDeactivated(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\\n\\t *  but allows repayments, liquidations, rate rebalances and withdrawals\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction freezeReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setFrozen(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveFrozen(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unfreezes a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction unfreezeReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setFrozen(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveUnfrozen(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve factor of a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param reserveFactor The new reserve factor of the reserve\\n\\t **/\\n\\tfunction setReserveFactor(address asset, uint256 reserveFactor) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setReserveFactor(reserveFactor);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveFactorChanged(asset, reserveFactor);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the interest rate strategy of a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param rateStrategyAddress The new address of the interest strategy contract\\n\\t **/\\n\\tfunction setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external onlyPoolAdmin {\\n\\t\\tpool.setReserveInterestRateStrategyAddress(asset, rateStrategyAddress);\\n\\t\\temit ReserveInterestRateStrategyChanged(asset, rateStrategyAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev pauses or unpauses all the actions of the protocol, including aToken transfers\\n\\t * @param val true if protocol needs to be paused, false otherwise\\n\\t **/\\n\\tfunction setPoolPause(bool val) external onlyEmergencyAdmin {\\n\\t\\tpool.setPause(val);\\n\\t}\\n\\n\\tfunction _initTokenWithProxy(address implementation, bytes memory initParams) internal returns (address) {\\n\\t\\tInitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\tproxy.initialize(implementation, initParams);\\n\\n\\t\\treturn address(proxy);\\n\\t}\\n\\n\\tfunction _upgradeTokenImplementation(\\n\\t\\taddress proxyAddress,\\n\\t\\taddress implementation,\\n\\t\\tbytes memory initParams\\n\\t) internal {\\n\\t\\tInitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\\n\\t\\t\\tpayable(proxyAddress)\\n\\t\\t);\\n\\n\\t\\tproxy.upgradeToAndCall(implementation, initParams);\\n\\t}\\n\\n\\tfunction _checkNoLiquidity(address asset) internal view {\\n\\t\\tDataTypes.ReserveData memory reserveData = pool.getReserveData(asset);\\n\\n\\t\\tuint256 availableLiquidity = IERC20Metadata(asset).balanceOf(reserveData.aTokenAddress);\\n\\n\\t\\trequire(availableLiquidity == 0 && reserveData.currentLiquidityRate == 0, Errors.LPC_RESERVE_LIQUIDITY_NOT_0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x1d848269f3d77bc32c37345565e66fcb01d4a330355bcb2a3e43e271895606b2\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/aave-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title BaseImmutableAdminUpgradeabilityProxy\\n * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks. The admin role is stored in an immutable, which\\n * helps saving transactions costs\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n\\taddress immutable ADMIN;\\n\\n\\tconstructor(address _admin) {\\n\\t\\tADMIN = _admin;\\n\\t}\\n\\n\\tmodifier ifAdmin() {\\n\\t\\tif (msg.sender == ADMIN) {\\n\\t\\t\\t_;\\n\\t\\t} else {\\n\\t\\t\\t_fallback();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @return _address The address of the proxy admin.\\n\\t */\\n\\tfunction admin() external ifAdmin returns (address _address) {\\n\\t\\treturn ADMIN;\\n\\t}\\n\\n\\t/**\\n\\t * @return _address The address of the implementation.\\n\\t */\\n\\tfunction implementation() external ifAdmin returns (address _address) {\\n\\t\\treturn _implementation();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrade the backing implementation of the proxy.\\n\\t * Only the admin can call this function.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction upgradeTo(address newImplementation) external ifAdmin {\\n\\t\\t_upgradeTo(newImplementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrade the backing implementation of the proxy and call a function\\n\\t * on the new implementation.\\n\\t * This is useful to initialize the proxied contract.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t * @param data Data to send as msg.data in the low level call.\\n\\t * It should include the signature and the parameters of the function to be called, as described in\\n\\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n\\t */\\n\\tfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n\\t\\t_upgradeTo(newImplementation);\\n\\t\\t(bool success, ) = newImplementation.delegatecall(data);\\n\\t\\trequire(success);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Only fall back when the sender is not the admin.\\n\\t */\\n\\tfunction _willFallback() internal virtual override {\\n\\t\\trequire(msg.sender != ADMIN, \\\"Cannot call fallback function from the proxy admin\\\");\\n\\t\\tsuper._willFallback();\\n\\t}\\n}\\n\",\"keccak256\":\"0x6dd4c1ff764ace1077efd88b9e68e47eb0c78bad30bfeda009a2d5ca698d6af1\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./BaseImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\n */\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\n\\tBaseImmutableAdminUpgradeabilityProxy,\\n\\tInitializableUpgradeabilityProxy\\n{\\n\\tconstructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {}\\n\\n\\t/**\\n\\t * @dev Only fall back when the sender is not the admin.\\n\\t */\\n\\tfunction _willFallback() internal override(BaseImmutableAdminUpgradeabilityProxy, Proxy) {\\n\\t\\tBaseImmutableAdminUpgradeabilityProxy._willFallback();\\n\\t}\\n}\\n\",\"keccak256\":\"0x1f76abaf337c1fd85383ca79c0fbc8c4560093302e26feb9af81953c7cfec226\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tuint256 private lastInitializedRevision = 0;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\tuint256 revision = getRevision();\\n\\t\\trequire(\\n\\t\\t\\tinitializing || isConstructor() || revision > lastInitializedRevision,\\n\\t\\t\\t\\\"Contract instance has already been initialized\\\"\\n\\t\\t);\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tlastInitializedRevision = revision;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the revision number of the contract\\n\\t * Needs to be defined in the inherited class as a constant.\\n\\t **/\\n\\tfunction getRevision() internal pure virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns true if and only if the function is running in the constructor\\n\\t **/\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9981ca9b65d7d096711bda22b7951e5cf078576ab5cd7b843c8546c8a79db5bb\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa9757f5232d9c4b5a932277d13c10e6dd3f5885473f1e33911238adc52582d99\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd8247701ad40f24d3bbba25e050a8b4e10f9fcecce670a92e6f6d1ca0a4fdb04\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n\\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n\\t/**\\n\\t * @dev Executes a percentage multiplication\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The percentage of value\\n\\t **/\\n\\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\tif (value == 0 || percentage == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a percentage division\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The value divided the percentage\\n\\t **/\\n\\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfPercentage = percentage / 2;\\n\\n\\t\\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4786d694d972a46d5f573846ebd5f98a026117e5bce85c834a37b158ff53b6f8\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50614314806100246000396000f3fe60806040523480156200001157600080fd5b5060043610620001325760003560e01c8063ab64618611620000c0578063bf344183116200008b578063eede87c1116200006e578063eede87c1146200027b578063ef1f93731462000292578063f53a251514620002a957600080fd5b8063bf344183146200024d578063c4d66de8146200026457600080fd5b8063ab64618614620001f1578063ad4e64321462000208578063b75d6f34146200021f578063bb01c37c146200023657600080fd5b80637641f3d911620001015780637641f3d914620001955780637aca76eb14620001ac5780637c4e560b14620001c3578063a8dc0f4514620001da57600080fd5b80631d2118f914620001375780633e72a45414620001505780634b4e675314620001675780637626cde3146200017e575b600080fd5b6200014e6200014836600462003219565b620002c0565b005b6200014e6200016136600462003257565b62000446565b6200014e620001783660046200327e565b6200062b565b6200014e6200018f366004620032ad565b62000815565b6200014e620001a636600462003301565b62000b5e565b6200014e620001bd36600462003257565b62000cc6565b6200014e620001d43660046200331f565b62000ea0565b6200014e620001eb36600462003257565b620011ce565b6200014e620002023660046200335d565b620013a8565b6200014e62000219366004620032ad565b620014c6565b6200014e6200023036600462003257565b62001772565b6200014e62000247366004620033d7565b6200194c565b6200014e6200025e36600462003257565b62001c0c565b6200014e6200027536600462003257565b62001de6565b6200014e6200028c36600462003415565b62001f83565b6200014e620002a336600462003257565b6200216f565b6200014e620002ba36600462003257565b62002349565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa1580156200030a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033091906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200037f5760405162461bcd60e51b8152600401620003769190620034cc565b60405180910390fd5b506035546040517f1d2118f90000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015290911690631d2118f990604401600060405180830381600087803b158015620003e957600080fd5b505af1158015620003fe573d6000803e3d6000fd5b50506040516001600160a01b038481168252851692507f5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5915060200160405180910390a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000490573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620004fc5760405162461bcd60e51b8152600401620003769190620034cc565b50620005088162002523565b60355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562000554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057a91906200356c565b905062000589816000620026bd565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620005da57600080fd5b505af1158015620005ef573d6000803e3d6000fd5b50506040516001600160a01b03851692507f6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069b91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620006e15760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038481166004830152600092169063c44b11f790602401602060405180830381865afa1580156200072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075491906200356c565b9050620007628183620026ed565b6035548151604051635c69493b60e11b81526001600160a01b038681166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620007b357600080fd5b505af1158015620007c8573d6000803e3d6000fd5b50505050826001600160a01b03167f2694ccb0b585b6a54b8d8b4a47aa874b05c257b43d34e98aee50838be00d3405836040516200080891815260200190565b60405180910390a2505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa1580156200085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088591906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620008cb5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a75620008ef602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa15801562000935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095b9190620035df565b9050600062000a176001600160a01b03841663c44b11f762000981602088018862003257565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620009c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ec91906200356c565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b50935060009250636111764560e11b915085905062000a3a602088018862003257565b62000a4c6040890160208a0162003257565b8562000a5c60408b018b620036e7565b62000a6b60608d018d620036e7565b62000a7a60a08f018f620036e7565b60405160240162000a959a9998979695949392919062003761565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261010084015190915062000aee9062000ae760a088016080890162003257565b8362002762565b62000b0060a086016080870162003257565b6101008401516001600160a01b03918216911662000b22602088018862003257565b6001600160a01b03167f7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc2860405160405180910390a45050505050565b603454604080517fddcaa9ea000000000000000000000000000000000000000000000000000000008152905133926001600160a01b03169163ddcaa9ea9160048083019260209291908290030181865afa15801562000bc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000be791906200345c565b6001600160a01b0316146040518060400160405280600281526020017f37360000000000000000000000000000000000000000000000000000000000008152509062000c485760405162461bcd60e51b8152600401620003769190620034cc565b506035546040517fbedb86fb00000000000000000000000000000000000000000000000000000000815282151560048201526001600160a01b039091169063bedb86fb90602401600060405180830381600087803b15801562000caa57600080fd5b505af115801562000cbf573d6000803e3d6000fd5b5050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000d10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d3691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062000d7c5760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562000dc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000def91906200356c565b905062000dfe816001620027e7565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b15801562000e4f57600080fd5b505af115801562000e64573d6000803e3d6000fd5b50506040516001600160a01b03851692507f85dc710add8a0914461a7dc5a63f6fc529a7700f8c6089a3faf5e93256ccf12a9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000eea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1091906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062000f565760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038681166004830152600092169063c44b11f790602401602060405180830381865afa15801562000fa3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fc991906200356c565b90508284111560405180604001604052806002815260200161373560f01b815250906200100b5760405162461bcd60e51b8152600401620003769190620034cc565b508215620010a657604080518082019091526002815261373560f01b60208201526127108311620010515760405162461bcd60e51b8152600401620003769190620034cc565b5061271062001061848462002817565b111560405180604001604052806002815260200161373560f01b815250906200109f5760405162461bcd60e51b8152600401620003769190620034cc565b50620010ed565b604080518082019091526002815261373560f01b60208201528215620010e15760405162461bcd60e51b8152600401620003769190620034cc565b50620010ed8562002523565b620010f98185620028f6565b6200110581846200295d565b620011118183620029cc565b6035548151604051635c69493b60e11b81526001600160a01b038881166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200116257600080fd5b505af115801562001177573d6000803e3d6000fd5b505060408051878152602081018790529081018590526001600160a01b03881692507f637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995915060600160405180910390a25050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123e91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620012845760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa158015620012d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f791906200356c565b90506200130681600062002a3d565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200135757600080fd5b505af11580156200136c573d6000803e3d6000fd5b50506040516001600160a01b03851692507fe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620013f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200141891906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200145e5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b031660005b82811015620014c057620014ab82858584818110620014915762001491620037db565b9050602002810190620014a59190620037f1565b62002a6d565b80620014b78162003829565b9150506200146e565b50505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200153691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200157c5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a75620015a0602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa158015620015e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200160c9190620035df565b90506000620016326001600160a01b03841663c44b11f762000981602088018862003257565b50935060009250636111764560e11b915085905062001655602088018862003257565b620016676040890160208a0162003257565b856200167760408b018b620036e7565b6200168660608d018d620036e7565b6200169560a08f018f620036e7565b604051602401620016b09a9998979695949392919062003761565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610120840151909150620017029062000ae760a088016080890162003257565b6200171460a086016080870162003257565b6101208401516001600160a01b03918216911662001736602088018862003257565b6001600160a01b03167f9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d8160405160405180910390a45050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620017bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e291906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620018285760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562001875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200189b91906200356c565b9050620018aa816001620026bd565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620018fb57600080fd5b505af115801562001910573d6000803e3d6000fd5b50506040516001600160a01b03851692507f35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001996573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019bc91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062001a025760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a7562001a26602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa15801562001a6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a929190620035df565b9050600062001ab86001600160a01b03841663c44b11f762000981602088018862003257565b5093506000925063183fb41360e01b915085905062001ade604088016020890162003257565b62001aed602089018962003257565b62001aff60608a0160408b0162003257565b8662001b0f60608c018c620036e7565b62001b1e60808e018e620036e7565b8e8060c0019062001b309190620036e7565b60405160240162001b4c9b9a9998979695949392919062003847565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260e084015190915062001b9d9062000ae760c0880160a0890162003257565b62001baf60c0860160a0870162003257565b60e08401516001600160a01b03918216911662001bd0602088018862003257565b6001600160a01b03167fa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb7360405160405180910390a45050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001c56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c7c91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062001cc25760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562001d0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d3591906200356c565b905062001d4481600162003089565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b15801562001d9557600080fd5b505af115801562001daa573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb19150600090a25050565b6001805460ff168062001df85750303b155b8062001e05575060005481115b62001e795760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840162000376565b60015460ff1615801562001e99576001805460ff19168117905560008290555b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516908117909155604080517f0261bf8b0000000000000000000000000000000000000000000000000000000081529051630261bf8b916004808201926020929091908290030181865afa15801562001f19573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f3f91906200345c565b6035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055801562001f7e576001805460ff191690555b505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001fcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ff391906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620020395760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038481166004830152600092169063c44b11f790602401602060405180830381865afa15801562002086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020ac91906200356c565b9050620020bb81600162002a3d565b620020c7818362003089565b6035548151604051635c69493b60e11b81526001600160a01b038681166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200211857600080fd5b505af11580156200212d573d6000803e3d6000fd5b50505050826001600160a01b03167fab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b5088360405162000808911515815260200190565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620021b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021df91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620022255760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562002272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200229891906200356c565b9050620022a7816000620027e7565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620022f857600080fd5b505af11580156200230d573d6000803e3d6000fd5b50506040516001600160a01b03851692507f838ecdc4709a31a26db48b0c853212cedde3f725f07030079d793fb0719647609150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562002393573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023b991906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620023ff5760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa1580156200244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200247291906200356c565b90506200248181600062003089565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620024d257600080fd5b505af1158015620024e7573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e39150600090a25050565b6035546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009216906335ea6a759060240161018060405180830381865afa15801562002589573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025af9190620035df565b60e08101516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152919250600091908416906370a0823190602401602060405180830381865afa1580156200261b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026419190620038cd565b90508015801562002666575060608201516fffffffffffffffffffffffffffffffff16155b6040518060400160405280600281526020017f333400000000000000000000000000000000000000000000000000000000000081525090620014c05760405162461bcd60e51b8152600401620003769190620034cc565b603881620026cd576000620026d0565b60015b8351670100000000000000191660ff9190911690911b1790915250565b60408051808201909152600281527f3731000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620027475760405162461bcd60e51b8152600401620003769190620034cc565b50815169ffff0000000000000000191660409190911b179052565b6040517f4f1ef28600000000000000000000000000000000000000000000000000000000815283906001600160a01b03821690634f1ef28690620027ad9086908690600401620038e7565b600060405180830381600087803b158015620027c857600080fd5b505af1158015620027dd573d6000803e3d6000fd5b5050505050505050565b603981620027f7576000620027fa565b60015b8351670200000000000000191660ff9190911690911b1790915250565b600082158062002825575081155b156200283457506000620028f0565b8162002844600261271062003913565b620028529060001962003936565b6200285e919062003913565b8311156040518060400160405280600281526020017f343800000000000000000000000000000000000000000000000000000000000081525090620028b85760405162461bcd60e51b8152600401620003769190620034cc565b50612710620028c960028262003913565b620028d5848662003950565b620028e1919062003972565b620028ed919062003913565b90505b92915050565b60408051808201909152600281527f3637000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620029505760405162461bcd60e51b8152600401620003769190620034cc565b50815161ffff1916179052565b60408051808201909152600281527f3638000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620029b75760405162461bcd60e51b8152600401620003769190620034cc565b50815163ffff0000191660109190911b179052565b60408051808201909152600281527f3639000000000000000000000000000000000000000000000000000000000000602082015261ffff82111562002a265760405162461bcd60e51b8152600401620003769190620034cc565b50815165ffff00000000191660209190911b179052565b603a8162002a4d57600062002a50565b60015b8351670400000000000000191660ff9190911690911b1790915250565b600062002a82610100830160e0840162003257565b9050600062002b6062002a99602085018562003257565b63183fb41360e01b8662002ab460e0880160c0890162003257565b62002ac660c0890160a08a0162003257565b8762002ad960808b0160608c016200398d565b62002ae96101408c018c620036e7565b62002af96101608e018e620036e7565b8e80610200019062002b0c9190620036e7565b60405160240162002b289b9a99989796959493929190620039ad565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620030b9565b604051631954e55d60e11b81526001600160a01b0380831660048301526101008601356024830152919250908316906332a9caba90604401600060405180830381600087803b15801562002bb357600080fd5b505af115801562002bc8573d6000803e3d6000fd5b5062002bdf9250505060e0840160c0850162003257565b6040517f9c9b2e210000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529190911690639c9b2e2190602401600060405180830381600087803b15801562002c3e57600080fd5b505af115801562002c53573d6000803e3d6000fd5b50505050600062002d0084602001602081019062002c72919062003257565b636111764560e11b8762002c8d60c0890160a08a0162003257565b62002ca06101008a0160e08b0162003257565b62002cb260808b0160608c016200398d565b62002cc26101c08c018c620036e7565b62002cd26101e08e018e620036e7565b8e80610200019062002ce59190620036e7565b60405160240162002b289a99989796959493929190620039f6565b9050600062002d8d62002d1a606087016040880162003257565b636111764560e11b8862002d3560c08a0160a08b0162003257565b62002d486101008b0160e08c0162003257565b62002d5a60808c0160608d016200398d565b62002d6a6101808d018d620036e7565b62002d7a6101a08f018f620036e7565b8f80610200019062002ce59190620036e7565b604051631954e55d60e11b81526001600160a01b0380831660048301526101008801356024830152919250908516906332a9caba90604401600060405180830381600087803b15801562002de057600080fd5b505af115801562002df5573d6000803e3d6000fd5b5050506001600160a01b0387169050637a708e9262002e1b60c0880160a0890162003257565b85858562002e3060a08c0160808d0162003257565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201529385166024850152918416604484015283166064830152909116608482015260a401600060405180830381600087803b15801562002e9157600080fd5b505af115801562002ea6573d6000803e3d6000fd5b506000925050506001600160a01b03871663c44b11f762002ece60c0890160a08a0162003257565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562002f13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f3991906200356c565b905062002f5c62002f5160808801606089016200398d565b829060ff1662003181565b62002f69816001620026bd565b62002f76816000620027e7565b6035546001600160a01b031663b8d2927662002f9960c0890160a08a0162003257565b835160405160e084901b6001600160e01b03191681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801562002fe257600080fd5b505af115801562002ff7573d6000803e3d6000fd5b5050506001600160a01b03851690506200301860c0880160a0890162003257565b6001600160a01b03167f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f85856200305660a08c0160808d0162003257565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190a350505050505050565b603b81620030995760006200309c565b60015b8351670800000000000000191660ff9190911690911b1790915250565b60008030604051620030cb90620031f2565b6001600160a01b039091168152602001604051809103906000f080158015620030f8573d6000803e3d6000fd5b506040517fd1f578940000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063d1f5789490620031459087908790600401620038e7565b600060405180830381600087803b1580156200316057600080fd5b505af115801562003175573d6000803e3d6000fd5b50929695505050505050565b60408051808201909152600281527f3730000000000000000000000000000000000000000000000000000000000000602082015260ff821115620031da5760405162461bcd60e51b8152600401620003769190620034cc565b50815166ff000000000000191660309190911b179052565b6108a88062003a3783390190565b6001600160a01b03811681146200321657600080fd5b50565b600080604083850312156200322d57600080fd5b82356200323a8162003200565b915060208301356200324c8162003200565b809150509250929050565b6000602082840312156200326a57600080fd5b8135620032778162003200565b9392505050565b600080604083850312156200329257600080fd5b82356200329f8162003200565b946020939093013593505050565b600060208284031215620032c057600080fd5b813567ffffffffffffffff811115620032d857600080fd5b820160c081850312156200327757600080fd5b80358015158114620032fc57600080fd5b919050565b6000602082840312156200331457600080fd5b620028ed82620032eb565b600080600080608085870312156200333657600080fd5b8435620033438162003200565b966020860135965060408601359560600135945092505050565b600080602083850312156200337157600080fd5b823567ffffffffffffffff808211156200338a57600080fd5b818501915085601f8301126200339f57600080fd5b813581811115620033af57600080fd5b8660208260051b8501011115620033c557600080fd5b60209290920196919550909350505050565b600060208284031215620033ea57600080fd5b813567ffffffffffffffff8111156200340257600080fd5b820160e081850312156200327757600080fd5b600080604083850312156200342957600080fd5b8235620034368162003200565b91506200344660208401620032eb565b90509250929050565b8051620032fc8162003200565b6000602082840312156200346f57600080fd5b8151620032778162003200565b6000815180845260005b81811015620034a45760208185018101518683018201520162003486565b81811115620034b7576000602083870101525b50601f01601f19169290920160200192915050565b602081526000620028ed60208301846200347c565b604051610180810167ffffffffffffffff811182821017156200351457634e487b7160e01b600052604160045260246000fd5b60405290565b6000602082840312156200352d57600080fd5b6040516020810181811067ffffffffffffffff821117156200355f57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b6000602082840312156200357f57600080fd5b620028ed83836200351a565b80516fffffffffffffffffffffffffffffffff81168114620032fc57600080fd5b805164ffffffffff81168114620032fc57600080fd5b60ff811681146200321657600080fd5b8051620032fc81620035c2565b60006101808284031215620035f357600080fd5b620035fd620034e1565b6200360984846200351a565b815262003619602084016200358b565b60208201526200362c604084016200358b565b60408201526200363f606084016200358b565b606082015262003652608084016200358b565b60808201526200366560a084016200358b565b60a08201526200367860c08401620035ac565b60c08201526200368b60e084016200344f565b60e0820152610100620036a08185016200344f565b90820152610120620036b48482016200344f565b90820152610140620036c88482016200344f565b90820152610160620036dc848201620035d2565b908201529392505050565b6000808335601e19843603018112620036ff57600080fd5b83018035915067ffffffffffffffff8211156200371b57600080fd5b6020019150368190038213156200373157600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006001600160a01b03808d168352808c166020840152808b1660408401525088606083015260e060808301526200379e60e08301888a62003738565b82810360a0840152620037b381878962003738565b905082810360c0840152620037ca81858762003738565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561021e198336030181126200380957600080fd5b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562003840576200384062003813565b5060010190565b60006101006001600160a01b03808f168452808e166020850152808d166040850152808c166060850152508960808401528060a08401526200388d818401898b62003738565b905082810360c0840152620038a481878962003738565b905082810360e0840152620038bb81858762003738565b9e9d5050505050505050505050505050565b600060208284031215620038e057600080fd5b5051919050565b6001600160a01b03831681526040602082015260006200390b60408301846200347c565b949350505050565b6000826200393157634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156200394b576200394b62003813565b500390565b60008160001904831182151516156200396d576200396d62003813565b500290565b6000821982111562003988576200398862003813565b500190565b600060208284031215620039a057600080fd5b81356200327781620035c2565b60006101006001600160a01b03808f168452808e166020850152808d166040850152808c1660608501525060ff8a1660808401528060a08401526200388d818401898b62003738565b60006001600160a01b03808d168352808c166020840152808b1660408401525060ff8916606083015260e060808301526200379e60e08301888a6200373856fe60a060405234801561001057600080fd5b506040516108a83803806108a883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107fa6100ae600039600081816101350152818161017a01528181610233015281816103a9015281816103d2015261051101526107fa6000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b14610097578063d1f57894146100c8578063f851a440146100db5761005a565b80633659cfe6146100645780634f1ef28614610084575b6100626100f0565b005b34801561007057600080fd5b5061006261007f3660046105c1565b61012a565b6100626100923660046105e3565b61016f565b3480156100a357600080fd5b506100ac610226565b6040516001600160a01b03909116815260200160405180910390f35b6100626100d636600461067c565b61028a565b3480156100e757600080fd5b506100ac61039c565b6100f86103f4565b6101286101237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6103fc565b565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101675761016481610420565b50565b6101646100f0565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610219576101a983610420565b6000836001600160a01b031683836040516101c592919061073e565b600060405180830381855af49150503d8060008114610200576040519150601f19603f3d011682016040523d82523d6000602084013e610205565b606091505b505090508061021357600080fd5b50505050565b6102216100f0565b505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561027f57507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102876100f0565b90565b60006102b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b0316146102c757600080fd5b6102f260017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61074e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1461032057610320610773565b61032982610460565b805115610398576000826001600160a01b03168260405161034a9190610789565b600060405180830381855af49150503d8060008114610385576040519150601f19603f3d011682016040523d82523d6000602084013e61038a565b606091505b505090508061022157600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561027f57507f000000000000000000000000000000000000000000000000000000000000000090565b610128610506565b3660008037600080366000845af43d6000803e80801561041b573d6000f35b3d6000fd5b61042981610460565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381163b6104e25760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101285760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527f6f6d207468652070726f78792061646d696e000000000000000000000000000060648201526084016104d9565b80356001600160a01b03811681146105bc57600080fd5b919050565b6000602082840312156105d357600080fd5b6105dc826105a5565b9392505050565b6000806000604084860312156105f857600080fd5b610601846105a5565b9250602084013567ffffffffffffffff8082111561061e57600080fd5b818601915086601f83011261063257600080fd5b81358181111561064157600080fd5b87602082850101111561065357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561068f57600080fd5b610698836105a5565b9150602083013567ffffffffffffffff808211156106b557600080fd5b818501915085601f8301126106c957600080fd5b8135818111156106db576106db610666565b604051601f8201601f19908116603f0116810190838211818310171561070357610703610666565b8160405282815288602084870101111561071c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b60008282101561076e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825160005b818110156107aa5760208186018101518583015201610790565b818111156107b9576000828501525b50919091019291505056fea264697066735822122042e28d728a899bce17dd811b4fea918cccc026ea931fafa4186c5407bbe6da0864736f6c634300080c0033a2646970667358221220564673b9c5fa79cbe8ced61f3e9cc14cef41e5fe0c990f0fc0561ddc1fc7984364736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001325760003560e01c8063ab64618611620000c0578063bf344183116200008b578063eede87c1116200006e578063eede87c1146200027b578063ef1f93731462000292578063f53a251514620002a957600080fd5b8063bf344183146200024d578063c4d66de8146200026457600080fd5b8063ab64618614620001f1578063ad4e64321462000208578063b75d6f34146200021f578063bb01c37c146200023657600080fd5b80637641f3d911620001015780637641f3d914620001955780637aca76eb14620001ac5780637c4e560b14620001c3578063a8dc0f4514620001da57600080fd5b80631d2118f914620001375780633e72a45414620001505780634b4e675314620001675780637626cde3146200017e575b600080fd5b6200014e6200014836600462003219565b620002c0565b005b6200014e6200016136600462003257565b62000446565b6200014e620001783660046200327e565b6200062b565b6200014e6200018f366004620032ad565b62000815565b6200014e620001a636600462003301565b62000b5e565b6200014e620001bd36600462003257565b62000cc6565b6200014e620001d43660046200331f565b62000ea0565b6200014e620001eb36600462003257565b620011ce565b6200014e620002023660046200335d565b620013a8565b6200014e62000219366004620032ad565b620014c6565b6200014e6200023036600462003257565b62001772565b6200014e62000247366004620033d7565b6200194c565b6200014e6200025e36600462003257565b62001c0c565b6200014e6200027536600462003257565b62001de6565b6200014e6200028c36600462003415565b62001f83565b6200014e620002a336600462003257565b6200216f565b6200014e620002ba36600462003257565b62002349565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa1580156200030a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033091906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200037f5760405162461bcd60e51b8152600401620003769190620034cc565b60405180910390fd5b506035546040517f1d2118f90000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015290911690631d2118f990604401600060405180830381600087803b158015620003e957600080fd5b505af1158015620003fe573d6000803e3d6000fd5b50506040516001600160a01b038481168252851692507f5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5915060200160405180910390a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000490573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620004fc5760405162461bcd60e51b8152600401620003769190620034cc565b50620005088162002523565b60355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562000554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057a91906200356c565b905062000589816000620026bd565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620005da57600080fd5b505af1158015620005ef573d6000803e3d6000fd5b50506040516001600160a01b03851692507f6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069b91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620006e15760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038481166004830152600092169063c44b11f790602401602060405180830381865afa1580156200072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075491906200356c565b9050620007628183620026ed565b6035548151604051635c69493b60e11b81526001600160a01b038681166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620007b357600080fd5b505af1158015620007c8573d6000803e3d6000fd5b50505050826001600160a01b03167f2694ccb0b585b6a54b8d8b4a47aa874b05c257b43d34e98aee50838be00d3405836040516200080891815260200190565b60405180910390a2505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa1580156200085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088591906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620008cb5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a75620008ef602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa15801562000935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095b9190620035df565b9050600062000a176001600160a01b03841663c44b11f762000981602088018862003257565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620009c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ec91906200356c565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b50935060009250636111764560e11b915085905062000a3a602088018862003257565b62000a4c6040890160208a0162003257565b8562000a5c60408b018b620036e7565b62000a6b60608d018d620036e7565b62000a7a60a08f018f620036e7565b60405160240162000a959a9998979695949392919062003761565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261010084015190915062000aee9062000ae760a088016080890162003257565b8362002762565b62000b0060a086016080870162003257565b6101008401516001600160a01b03918216911662000b22602088018862003257565b6001600160a01b03167f7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc2860405160405180910390a45050505050565b603454604080517fddcaa9ea000000000000000000000000000000000000000000000000000000008152905133926001600160a01b03169163ddcaa9ea9160048083019260209291908290030181865afa15801562000bc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000be791906200345c565b6001600160a01b0316146040518060400160405280600281526020017f37360000000000000000000000000000000000000000000000000000000000008152509062000c485760405162461bcd60e51b8152600401620003769190620034cc565b506035546040517fbedb86fb00000000000000000000000000000000000000000000000000000000815282151560048201526001600160a01b039091169063bedb86fb90602401600060405180830381600087803b15801562000caa57600080fd5b505af115801562000cbf573d6000803e3d6000fd5b5050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000d10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d3691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062000d7c5760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562000dc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000def91906200356c565b905062000dfe816001620027e7565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b15801562000e4f57600080fd5b505af115801562000e64573d6000803e3d6000fd5b50506040516001600160a01b03851692507f85dc710add8a0914461a7dc5a63f6fc529a7700f8c6089a3faf5e93256ccf12a9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562000eea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1091906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062000f565760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038681166004830152600092169063c44b11f790602401602060405180830381865afa15801562000fa3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fc991906200356c565b90508284111560405180604001604052806002815260200161373560f01b815250906200100b5760405162461bcd60e51b8152600401620003769190620034cc565b508215620010a657604080518082019091526002815261373560f01b60208201526127108311620010515760405162461bcd60e51b8152600401620003769190620034cc565b5061271062001061848462002817565b111560405180604001604052806002815260200161373560f01b815250906200109f5760405162461bcd60e51b8152600401620003769190620034cc565b50620010ed565b604080518082019091526002815261373560f01b60208201528215620010e15760405162461bcd60e51b8152600401620003769190620034cc565b50620010ed8562002523565b620010f98185620028f6565b6200110581846200295d565b620011118183620029cc565b6035548151604051635c69493b60e11b81526001600160a01b038881166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200116257600080fd5b505af115801562001177573d6000803e3d6000fd5b505060408051878152602081018790529081018590526001600160a01b03881692507f637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995915060600160405180910390a25050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123e91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620012845760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa158015620012d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012f791906200356c565b90506200130681600062002a3d565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200135757600080fd5b505af11580156200136c573d6000803e3d6000fd5b50506040516001600160a01b03851692507fe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620013f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200141891906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200145e5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b031660005b82811015620014c057620014ab82858584818110620014915762001491620037db565b9050602002810190620014a59190620037f1565b62002a6d565b80620014b78162003829565b9150506200146e565b50505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200153691906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b815250906200157c5760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a75620015a0602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa158015620015e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200160c9190620035df565b90506000620016326001600160a01b03841663c44b11f762000981602088018862003257565b50935060009250636111764560e11b915085905062001655602088018862003257565b620016676040890160208a0162003257565b856200167760408b018b620036e7565b6200168660608d018d620036e7565b6200169560a08f018f620036e7565b604051602401620016b09a9998979695949392919062003761565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610120840151909150620017029062000ae760a088016080890162003257565b6200171460a086016080870162003257565b6101208401516001600160a01b03918216911662001736602088018862003257565b6001600160a01b03167f9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d8160405160405180910390a45050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620017bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e291906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620018285760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562001875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200189b91906200356c565b9050620018aa816001620026bd565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620018fb57600080fd5b505af115801562001910573d6000803e3d6000fd5b50506040516001600160a01b03851692507f35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c9150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001996573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019bc91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062001a025760405162461bcd60e51b8152600401620003769190620034cc565b506035546001600160a01b03166000816335ea6a7562001a26602086018662003257565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240161018060405180830381865afa15801562001a6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a929190620035df565b9050600062001ab86001600160a01b03841663c44b11f762000981602088018862003257565b5093506000925063183fb41360e01b915085905062001ade604088016020890162003257565b62001aed602089018962003257565b62001aff60608a0160408b0162003257565b8662001b0f60608c018c620036e7565b62001b1e60808e018e620036e7565b8e8060c0019062001b309190620036e7565b60405160240162001b4c9b9a9998979695949392919062003847565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260e084015190915062001b9d9062000ae760c0880160a0890162003257565b62001baf60c0860160a0870162003257565b60e08401516001600160a01b03918216911662001bd0602088018862003257565b6001600160a01b03167fa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb7360405160405180910390a45050505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001c56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c7c91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b8152509062001cc25760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562001d0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d3591906200356c565b905062001d4481600162003089565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b15801562001d9557600080fd5b505af115801562001daa573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb19150600090a25050565b6001805460ff168062001df85750303b155b8062001e05575060005481115b62001e795760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840162000376565b60015460ff1615801562001e99576001805460ff19168117905560008290555b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516908117909155604080517f0261bf8b0000000000000000000000000000000000000000000000000000000081529051630261bf8b916004808201926020929091908290030181865afa15801562001f19573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f3f91906200345c565b6035805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055801562001f7e576001805460ff191690555b505050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562001fcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ff391906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620020395760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038481166004830152600092169063c44b11f790602401602060405180830381865afa15801562002086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020ac91906200356c565b9050620020bb81600162002a3d565b620020c7818362003089565b6035548151604051635c69493b60e11b81526001600160a01b038681166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b1580156200211857600080fd5b505af11580156200212d573d6000803e3d6000fd5b50505050826001600160a01b03167fab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b5088360405162000808911515815260200190565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa158015620021b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021df91906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620022255760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa15801562002272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200229891906200356c565b9050620022a7816000620027e7565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620022f857600080fd5b505af11580156200230d573d6000803e3d6000fd5b50506040516001600160a01b03851692507f838ecdc4709a31a26db48b0c853212cedde3f725f07030079d793fb0719647609150600090a25050565b603454604080516315d9b46f60e31b8152905133926001600160a01b03169163aecda3789160048083019260209291908290030181865afa15801562002393573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023b991906200345c565b6001600160a01b03161460405180604001604052806002815260200161333360f01b81525090620023ff5760405162461bcd60e51b8152600401620003769190620034cc565b5060355460405163c44b11f760e01b81526001600160a01b038381166004830152600092169063c44b11f790602401602060405180830381865afa1580156200244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200247291906200356c565b90506200248181600062003089565b6035548151604051635c69493b60e11b81526001600160a01b038581166004830152602482019290925291169063b8d2927690604401600060405180830381600087803b158015620024d257600080fd5b505af1158015620024e7573d6000803e3d6000fd5b50506040516001600160a01b03851692507f8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e39150600090a25050565b6035546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009216906335ea6a759060240161018060405180830381865afa15801562002589573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025af9190620035df565b60e08101516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152919250600091908416906370a0823190602401602060405180830381865afa1580156200261b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026419190620038cd565b90508015801562002666575060608201516fffffffffffffffffffffffffffffffff16155b6040518060400160405280600281526020017f333400000000000000000000000000000000000000000000000000000000000081525090620014c05760405162461bcd60e51b8152600401620003769190620034cc565b603881620026cd576000620026d0565b60015b8351670100000000000000191660ff9190911690911b1790915250565b60408051808201909152600281527f3731000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620027475760405162461bcd60e51b8152600401620003769190620034cc565b50815169ffff0000000000000000191660409190911b179052565b6040517f4f1ef28600000000000000000000000000000000000000000000000000000000815283906001600160a01b03821690634f1ef28690620027ad9086908690600401620038e7565b600060405180830381600087803b158015620027c857600080fd5b505af1158015620027dd573d6000803e3d6000fd5b5050505050505050565b603981620027f7576000620027fa565b60015b8351670200000000000000191660ff9190911690911b1790915250565b600082158062002825575081155b156200283457506000620028f0565b8162002844600261271062003913565b620028529060001962003936565b6200285e919062003913565b8311156040518060400160405280600281526020017f343800000000000000000000000000000000000000000000000000000000000081525090620028b85760405162461bcd60e51b8152600401620003769190620034cc565b50612710620028c960028262003913565b620028d5848662003950565b620028e1919062003972565b620028ed919062003913565b90505b92915050565b60408051808201909152600281527f3637000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620029505760405162461bcd60e51b8152600401620003769190620034cc565b50815161ffff1916179052565b60408051808201909152600281527f3638000000000000000000000000000000000000000000000000000000000000602082015261ffff821115620029b75760405162461bcd60e51b8152600401620003769190620034cc565b50815163ffff0000191660109190911b179052565b60408051808201909152600281527f3639000000000000000000000000000000000000000000000000000000000000602082015261ffff82111562002a265760405162461bcd60e51b8152600401620003769190620034cc565b50815165ffff00000000191660209190911b179052565b603a8162002a4d57600062002a50565b60015b8351670400000000000000191660ff9190911690911b1790915250565b600062002a82610100830160e0840162003257565b9050600062002b6062002a99602085018562003257565b63183fb41360e01b8662002ab460e0880160c0890162003257565b62002ac660c0890160a08a0162003257565b8762002ad960808b0160608c016200398d565b62002ae96101408c018c620036e7565b62002af96101608e018e620036e7565b8e80610200019062002b0c9190620036e7565b60405160240162002b289b9a99989796959493929190620039ad565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620030b9565b604051631954e55d60e11b81526001600160a01b0380831660048301526101008601356024830152919250908316906332a9caba90604401600060405180830381600087803b15801562002bb357600080fd5b505af115801562002bc8573d6000803e3d6000fd5b5062002bdf9250505060e0840160c0850162003257565b6040517f9c9b2e210000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529190911690639c9b2e2190602401600060405180830381600087803b15801562002c3e57600080fd5b505af115801562002c53573d6000803e3d6000fd5b50505050600062002d0084602001602081019062002c72919062003257565b636111764560e11b8762002c8d60c0890160a08a0162003257565b62002ca06101008a0160e08b0162003257565b62002cb260808b0160608c016200398d565b62002cc26101c08c018c620036e7565b62002cd26101e08e018e620036e7565b8e80610200019062002ce59190620036e7565b60405160240162002b289a99989796959493929190620039f6565b9050600062002d8d62002d1a606087016040880162003257565b636111764560e11b8862002d3560c08a0160a08b0162003257565b62002d486101008b0160e08c0162003257565b62002d5a60808c0160608d016200398d565b62002d6a6101808d018d620036e7565b62002d7a6101a08f018f620036e7565b8f80610200019062002ce59190620036e7565b604051631954e55d60e11b81526001600160a01b0380831660048301526101008801356024830152919250908516906332a9caba90604401600060405180830381600087803b15801562002de057600080fd5b505af115801562002df5573d6000803e3d6000fd5b5050506001600160a01b0387169050637a708e9262002e1b60c0880160a0890162003257565b85858562002e3060a08c0160808d0162003257565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201529385166024850152918416604484015283166064830152909116608482015260a401600060405180830381600087803b15801562002e9157600080fd5b505af115801562002ea6573d6000803e3d6000fd5b506000925050506001600160a01b03871663c44b11f762002ece60c0890160a08a0162003257565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801562002f13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f3991906200356c565b905062002f5c62002f5160808801606089016200398d565b829060ff1662003181565b62002f69816001620026bd565b62002f76816000620027e7565b6035546001600160a01b031663b8d2927662002f9960c0890160a08a0162003257565b835160405160e084901b6001600160e01b03191681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801562002fe257600080fd5b505af115801562002ff7573d6000803e3d6000fd5b5050506001600160a01b03851690506200301860c0880160a0890162003257565b6001600160a01b03167f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f85856200305660a08c0160808d0162003257565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190a350505050505050565b603b81620030995760006200309c565b60015b8351670800000000000000191660ff9190911690911b1790915250565b60008030604051620030cb90620031f2565b6001600160a01b039091168152602001604051809103906000f080158015620030f8573d6000803e3d6000fd5b506040517fd1f578940000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063d1f5789490620031459087908790600401620038e7565b600060405180830381600087803b1580156200316057600080fd5b505af115801562003175573d6000803e3d6000fd5b50929695505050505050565b60408051808201909152600281527f3730000000000000000000000000000000000000000000000000000000000000602082015260ff821115620031da5760405162461bcd60e51b8152600401620003769190620034cc565b50815166ff000000000000191660309190911b179052565b6108a88062003a3783390190565b6001600160a01b03811681146200321657600080fd5b50565b600080604083850312156200322d57600080fd5b82356200323a8162003200565b915060208301356200324c8162003200565b809150509250929050565b6000602082840312156200326a57600080fd5b8135620032778162003200565b9392505050565b600080604083850312156200329257600080fd5b82356200329f8162003200565b946020939093013593505050565b600060208284031215620032c057600080fd5b813567ffffffffffffffff811115620032d857600080fd5b820160c081850312156200327757600080fd5b80358015158114620032fc57600080fd5b919050565b6000602082840312156200331457600080fd5b620028ed82620032eb565b600080600080608085870312156200333657600080fd5b8435620033438162003200565b966020860135965060408601359560600135945092505050565b600080602083850312156200337157600080fd5b823567ffffffffffffffff808211156200338a57600080fd5b818501915085601f8301126200339f57600080fd5b813581811115620033af57600080fd5b8660208260051b8501011115620033c557600080fd5b60209290920196919550909350505050565b600060208284031215620033ea57600080fd5b813567ffffffffffffffff8111156200340257600080fd5b820160e081850312156200327757600080fd5b600080604083850312156200342957600080fd5b8235620034368162003200565b91506200344660208401620032eb565b90509250929050565b8051620032fc8162003200565b6000602082840312156200346f57600080fd5b8151620032778162003200565b6000815180845260005b81811015620034a45760208185018101518683018201520162003486565b81811115620034b7576000602083870101525b50601f01601f19169290920160200192915050565b602081526000620028ed60208301846200347c565b604051610180810167ffffffffffffffff811182821017156200351457634e487b7160e01b600052604160045260246000fd5b60405290565b6000602082840312156200352d57600080fd5b6040516020810181811067ffffffffffffffff821117156200355f57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b6000602082840312156200357f57600080fd5b620028ed83836200351a565b80516fffffffffffffffffffffffffffffffff81168114620032fc57600080fd5b805164ffffffffff81168114620032fc57600080fd5b60ff811681146200321657600080fd5b8051620032fc81620035c2565b60006101808284031215620035f357600080fd5b620035fd620034e1565b6200360984846200351a565b815262003619602084016200358b565b60208201526200362c604084016200358b565b60408201526200363f606084016200358b565b606082015262003652608084016200358b565b60808201526200366560a084016200358b565b60a08201526200367860c08401620035ac565b60c08201526200368b60e084016200344f565b60e0820152610100620036a08185016200344f565b90820152610120620036b48482016200344f565b90820152610140620036c88482016200344f565b90820152610160620036dc848201620035d2565b908201529392505050565b6000808335601e19843603018112620036ff57600080fd5b83018035915067ffffffffffffffff8211156200371b57600080fd5b6020019150368190038213156200373157600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006001600160a01b03808d168352808c166020840152808b1660408401525088606083015260e060808301526200379e60e08301888a62003738565b82810360a0840152620037b381878962003738565b905082810360c0840152620037ca81858762003738565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561021e198336030181126200380957600080fd5b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562003840576200384062003813565b5060010190565b60006101006001600160a01b03808f168452808e166020850152808d166040850152808c166060850152508960808401528060a08401526200388d818401898b62003738565b905082810360c0840152620038a481878962003738565b905082810360e0840152620038bb81858762003738565b9e9d5050505050505050505050505050565b600060208284031215620038e057600080fd5b5051919050565b6001600160a01b03831681526040602082015260006200390b60408301846200347c565b949350505050565b6000826200393157634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156200394b576200394b62003813565b500390565b60008160001904831182151516156200396d576200396d62003813565b500290565b6000821982111562003988576200398862003813565b500190565b600060208284031215620039a057600080fd5b81356200327781620035c2565b60006101006001600160a01b03808f168452808e166020850152808d166040850152808c1660608501525060ff8a1660808401528060a08401526200388d818401898b62003738565b60006001600160a01b03808d168352808c166020840152808b1660408401525060ff8916606083015260e060808301526200379e60e08301888a6200373856fe60a060405234801561001057600080fd5b506040516108a83803806108a883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516107fa6100ae600039600081816101350152818161017a01528181610233015281816103a9015281816103d2015261051101526107fa6000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b14610097578063d1f57894146100c8578063f851a440146100db5761005a565b80633659cfe6146100645780634f1ef28614610084575b6100626100f0565b005b34801561007057600080fd5b5061006261007f3660046105c1565b61012a565b6100626100923660046105e3565b61016f565b3480156100a357600080fd5b506100ac610226565b6040516001600160a01b03909116815260200160405180910390f35b6100626100d636600461067c565b61028a565b3480156100e757600080fd5b506100ac61039c565b6100f86103f4565b6101286101237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6103fc565b565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101675761016481610420565b50565b6101646100f0565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610219576101a983610420565b6000836001600160a01b031683836040516101c592919061073e565b600060405180830381855af49150503d8060008114610200576040519150601f19603f3d011682016040523d82523d6000602084013e610205565b606091505b505090508061021357600080fd5b50505050565b6102216100f0565b505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561027f57507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102876100f0565b90565b60006102b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b0316146102c757600080fd5b6102f260017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61074e565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1461032057610320610773565b61032982610460565b805115610398576000826001600160a01b03168260405161034a9190610789565b600060405180830381855af49150503d8060008114610385576040519150601f19603f3d011682016040523d82523d6000602084013e61038a565b606091505b505090508061022157600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561027f57507f000000000000000000000000000000000000000000000000000000000000000090565b610128610506565b3660008037600080366000845af43d6000803e80801561041b573d6000f35b3d6000fd5b61042981610460565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381163b6104e25760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101285760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527f6f6d207468652070726f78792061646d696e000000000000000000000000000060648201526084016104d9565b80356001600160a01b03811681146105bc57600080fd5b919050565b6000602082840312156105d357600080fd5b6105dc826105a5565b9392505050565b6000806000604084860312156105f857600080fd5b610601846105a5565b9250602084013567ffffffffffffffff8082111561061e57600080fd5b818601915086601f83011261063257600080fd5b81358181111561064157600080fd5b87602082850101111561065357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561068f57600080fd5b610698836105a5565b9150602083013567ffffffffffffffff808211156106b557600080fd5b818501915085601f8301126106c957600080fd5b8135818111156106db576106db610666565b604051601f8201601f19908116603f0116810190838211818310171561070357610703610666565b8160405282815288602084870101111561071c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b60008282101561076e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825160005b818110156107aa5760208186018101518583015201610790565b818111156107b9576000828501525b50919091019291505056fea264697066735822122042e28d728a899bce17dd811b4fea918cccc026ea931fafa4186c5407bbe6da0864736f6c634300080c0033a2646970667358221220564673b9c5fa79cbe8ced61f3e9cc14cef41e5fe0c990f0fc0561ddc1fc7984364736f6c634300080c0033",
  "libraries": {
    "ValidationLogic": "0x12bb140ce68e307A665810a2688F01eCD06350B8",
    "ReserveLogic": "0xC6c7BbF30464c783D451A234DE050e31a8875Ac8"
  },
  "devdoc": {
    "author": "Aave",
    "details": "Implements the configuration methods for the Aave protocol*",
    "kind": "dev",
    "methods": {
      "activateReserve(address)": {
        "details": "Activates a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "batchInitReserve((address,address,address,uint8,address,address,address,address,uint256,string,string,string,string,string,string,string,bytes)[])": {
        "details": "Initializes reserves in batch*"
      },
      "configureReserveAsCollateral(address,uint256,uint256,uint256)": {
        "details": "Configures the reserve collateralization parameters all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "liquidationBonus": "The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105% means the liquidator will receive a 5% bonus*",
          "liquidationThreshold": "The threshold at which loans using this asset as collateral will be considered undercollateralized",
          "ltv": "The loan to value of the asset when used as collateral"
        }
      },
      "deactivateReserve(address)": {
        "details": "Deactivates a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "disableBorrowingOnReserve(address)": {
        "details": "Disables borrowing on a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "disableReserveStableRate(address)": {
        "details": "Disable stable rate borrowing on a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "enableBorrowingOnReserve(address,bool)": {
        "details": "Enables borrowing on a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "stableBorrowRateEnabled": "True if stable borrow rate needs to be enabled by default on this reserve*"
        }
      },
      "enableReserveStableRate(address)": {
        "details": "Enable stable rate borrowing on a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "freezeReserve(address)": {
        "details": "Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap  but allows repayments, liquidations, rate rebalances and withdrawals",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "setPoolPause(bool)": {
        "details": "pauses or unpauses all the actions of the protocol, including aToken transfers",
        "params": {
          "val": "true if protocol needs to be paused, false otherwise*"
        }
      },
      "setReserveFactor(address,uint256)": {
        "details": "Updates the reserve factor of a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "reserveFactor": "The new reserve factor of the reserve*"
        }
      },
      "setReserveInterestRateStrategyAddress(address,address)": {
        "details": "Sets the interest rate strategy of a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "rateStrategyAddress": "The new address of the interest strategy contract*"
        }
      },
      "unfreezeReserve(address)": {
        "details": "Unfreezes a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve*"
        }
      },
      "updateAToken((address,address,address,string,string,address,bytes))": {
        "details": "Updates the aToken implementation for the reserve*"
      },
      "updateStableDebtToken((address,address,string,string,address,bytes))": {
        "details": "Updates the stable debt token implementation for the reserve*"
      },
      "updateVariableDebtToken((address,address,string,string,address,bytes))": {
        "details": "Updates the variable debt token implementation for the asset*"
      }
    },
    "title": "LendingPoolConfigurator contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28655,
        "contract": "contracts/lending/lendingpool/LendingPoolConfigurator.sol:LendingPoolConfigurator",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 28658,
        "contract": "contracts/lending/lendingpool/LendingPoolConfigurator.sol:LendingPoolConfigurator",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 28728,
        "contract": "contracts/lending/lendingpool/LendingPoolConfigurator.sol:LendingPoolConfigurator",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27345,
        "contract": "contracts/lending/lendingpool/LendingPoolConfigurator.sol:LendingPoolConfigurator",
        "label": "addressesProvider",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ILendingPoolAddressesProvider)16380"
      },
      {
        "astId": 27348,
        "contract": "contracts/lending/lendingpool/LendingPoolConfigurator.sol:LendingPoolConfigurator",
        "label": "pool",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(ILendingPool)16219"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILendingPool)16219": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPoolAddressesProvider)16380": {
        "encoding": "inplace",
        "label": "contract ILendingPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}