{
  "address": "0xF942C2054C8Cfd8886a506161edAE9B4168fe390",
  "abi": [
    {
      "inputs": [],
      "name": "ActiveReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEarned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLookback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintersSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockIndex",
          "type": "uint256"
        }
      ],
      "name": "Relocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LOCK_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUART",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHOLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardConverter",
          "type": "address"
        }
      ],
      "name": "addRewardConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autoRelockDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autocompoundEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimBounty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "issueBaseBounty",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalf",
          "type": "address"
        }
      ],
      "name": "claimFromConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFeeDistribution.RewardData[]",
          "name": "rewardsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultLockIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "earnedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            }
          ],
          "internalType": "struct EarnedBalance[]",
          "name": "earningsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlocked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedWithMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earned",
              "type": "uint256"
            }
          ],
          "internalType": "struct Balances",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockMultipliers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentivesController",
      "outputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "individualEarlyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdntToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userlist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsLookback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAutocompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedWithMultiplier",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "lockData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupplyWithMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "middleFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPenalty",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersAreSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requalify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "requalifyFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardConverter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rptStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsLookback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_middleFeeDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAutocompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bounty",
          "type": "address"
        }
      ],
      "name": "setBountyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRelockTypeIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "setLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_lockPeriod",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setLockTypeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lookback",
          "type": "uint256"
        }
      ],
      "name": "setLookback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_minters",
          "type": "address[]"
        }
      ],
      "name": "setMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setRelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startfleetTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userlist",
      "outputs": [
        {
          "internalType": "contract ILockerList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "withdrawExpiredLocksFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ignoreRelock",
          "type": "bool"
        }
      ],
      "name": "withdrawExpiredLocksForWithOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "zapVestingToLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffe2b37d5274d443c701a39e222fb7ebd3f716429a277f7724a2986f61aca6b5",
  "receipt": {
    "to": null,
    "from": "0x4Ae0010e604b1E0096aE95C0fd3e2DC768e76BEa",
    "contractAddress": "0xF942C2054C8Cfd8886a506161edAE9B4168fe390",
    "transactionIndex": 39,
    "gasUsed": "4743484",
    "logsBloom": "0x
    "blockHash": "0x6293cfaa9548291e0233b48144d12ba5e68115561962538a5189e15cb280e0a8",
    "transactionHash": "0xffe2b37d5274d443c701a39e222fb7ebd3f716429a277f7724a2986f61aca6b5",
    "logs": [],
    "blockNumber": 8976883,
    "cumulativeGasUsed": "12199355",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d20862d9a7051998216c9f1f22667b5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEarned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLookback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintersSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_LOCK_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUART\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHOLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardConverter\",\"type\":\"address\"}],\"name\":\"addRewardConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoRelockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autocompoundEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"}],\"name\":\"claimFromConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistribution.RewardData[]\",\"name\":\"rewardsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultLockIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct EarnedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWithMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct Balances\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"individualEarlyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdntToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userlist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsLookback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAutocompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWithMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupplyWithMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersAreSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requalify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"requalifyFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardConverter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rptStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLookback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_middleFeeDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutocompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setDefaultRelockTypeIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lockPeriod\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"setLockTypeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lookback\",\"type\":\"uint256\"}],\"name\":\"setLookback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startfleetTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userlist\",\"outputs\":[{\"internalType\":\"contract ILockerList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawExpiredLocksFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ignoreRelock\",\"type\":\"bool\"}],\"name\":\"withdrawExpiredLocksForWithOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"zapVestingToLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"addReward(address)\":{\"params\":{\"_rewardToken\":\"address\"}},\"addRewardConverter(address)\":{\"params\":{\"_rewardConverter\":\"contract address\"}},\"claimBounty(address,bool)\":{\"details\":\"Remove expired locks\",\"params\":{\"_execute\":\"true if this is actual execution\",\"_user\":\"address\"},\"returns\":{\"issueBaseBounty\":\"true if needs to issue base bounty\"}},\"claimFromConverter(address)\":{\"details\":\"Rewards are transfered to converter.\",\"params\":{\"onBehalf\":\"address to claim.\"}},\"claimableRewards(address)\":{\"params\":{\"account\":\"for rewards\"},\"returns\":{\"rewardsData\":\"array of rewards\"}},\"earnedBalances(address)\":{\"details\":\"Earned balances may be withdrawn immediately for a 50% penalty.\",\"returns\":{\"earningsData\":\"which is an array of all infos\",\"total\":\"earnings\",\"unlocked\":\"earnings\"}},\"exit(bool)\":{\"params\":{\"claimRewards\":\"true to claim rewards when exit\"}},\"getReward(address[])\":{\"params\":{\"_rewardTokens\":\"array of reward tokens\"}},\"getRewardForDuration(address)\":{\"params\":{\"_rewardToken\":\"for the reward\"},\"returns\":{\"_0\":\"reward amount for duration\"}},\"individualEarlyExit(bool,uint256)\":{\"params\":{\"claimRewards\":\"true to claim rewards when exit\",\"unlockTime\":\"of earning\"}},\"initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.\",\"params\":{\"_lockDuration\":\"lock duration\",\"_rdntToken\":\"RDNT token address.\",\"_rewardsDuration\":\"set reward stream time.\",\"_rewardsLookback\":\"reward lookback\"}},\"lastTimeRewardApplicable(address)\":{\"params\":{\"_rewardToken\":\"for the reward\"},\"returns\":{\"_0\":\"end time of reward period\"}},\"lockInfo(address)\":{\"params\":{\"user\":\"address.\"},\"returns\":{\"_0\":\"lockInfo of the user.\"}},\"lockedBalance(address)\":{\"params\":{\"user\":\"address\"},\"returns\":{\"locked\":\"amount\"}},\"lockedBalances(address)\":{\"returns\":{\"_0\":\"total balance of locks\",\"lockData\":\"which is an array of locks\",\"locked\":\"balance\",\"lockedWithMultiplier\":\"lockedWithMultiplier\",\"unlockable\":\"balance\"}},\"mint(address,uint256,bool)\":{\"details\":\"Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before vestDuration has passed.\",\"params\":{\"amount\":\"to vest.\",\"user\":\"vesting owner.\",\"withPenalty\":\"does this bear penalty?\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"to recover.\",\"tokenAmount\":\"to recover.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requalifyFor(address)\":{\"params\":{\"_user\":\"address\"}},\"rewardPerToken(address)\":{\"details\":\"Reward is distributed only for locks.\",\"params\":{\"_rewardToken\":\"for reward\"},\"returns\":{\"rptStored\":\"current RPT with accumulated rewards\"}},\"setAddresses(address,address,address)\":{\"params\":{\"_controller\":\"CIC address\",\"_middleFeeDistribution\":\"address\",\"_treasury\":\"address\"}},\"setAutocompound(bool)\":{\"params\":{\"_status\":\"true if auto compounding is enabled.\"}},\"setBountyManager(address)\":{\"params\":{\"_bounty\":\"contract address\"}},\"setDefaultRelockTypeIndex(uint256)\":{\"params\":{\"_index\":\"of default lock length\"}},\"setLPToken(address)\":{\"params\":{\"_stakingToken\":\"LP token address\"}},\"setLockTypeInfo(uint256[],uint256[])\":{\"params\":{\"_lockPeriod\":\"lock period array\",\"_rewardMultipliers\":\"multipliers per lock period\"}},\"setLookback(uint256)\":{\"params\":{\"_lookback\":\"in seconds\"}},\"setMinters(address[])\":{\"details\":\"Can be called only once\",\"params\":{\"_minters\":\"array of address\"}},\"setRelock(bool)\":{\"params\":{\"_status\":\"true if auto relock is enabled.\"}},\"stake(uint256,address,uint256)\":{\"details\":\"Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\",\"params\":{\"amount\":\"to stake.\",\"onBehalfOf\":\"address for staking.\",\"typeIndex\":\"lock type index.\"}},\"totalBalance(address)\":{\"params\":{\"user\":\"address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances.\",\"params\":{\"amount\":\"for withdraw\"}},\"withdrawExpiredLocksFor(address)\":{\"params\":{\"_address\":\"of the user\"},\"returns\":{\"_0\":\"withdraw amount\"}},\"withdrawExpiredLocksForWithOptions(address,uint256,bool)\":{\"params\":{\"_address\":\"for withdraw\",\"_ignoreRelock\":\"option to ignore relock\",\"_limit\":\"of lock length for withdraw\"},\"returns\":{\"_0\":\"withdraw amount\"}},\"withdrawableBalance(address)\":{\"details\":\"This is earnings, not locks.\",\"params\":{\"user\":\"address.\"},\"returns\":{\"amount\":\"total withdrawable amount.\",\"burnAmount\":\"amount to burn.\",\"penaltyAmount\":\"penalty amount.\"}},\"zapVestingToLp(address)\":{\"params\":{\"_user\":\"address\"},\"returns\":{\"zapped\":\"amount\"}}},\"title\":\"Multi Fee Distribution Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_LOCK_INDEX()\":{\"notice\":\"Default lock index\"},\"addReward(address)\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"addRewardConverter(address)\":{\"notice\":\"Sets reward convert contract.\"},\"bountyManager()\":{\"notice\":\"Bounty manager contract\"},\"burn()\":{\"notice\":\"Proportion of burn amount\"},\"claimBounty(address,bool)\":{\"notice\":\"Claims bounty.\"},\"claimFromConverter(address)\":{\"notice\":\"Claim rewards by converter.\"},\"claimableRewards(address)\":{\"notice\":\"Address and claimable amount of all reward tokens for the given account.\"},\"daoTreasury()\":{\"notice\":\"DAO wallet\"},\"defaultLockDuration()\":{\"notice\":\"Duration of lock/earned penalty period, used for earnings\"},\"earnedBalances(address)\":{\"notice\":\"Earnings which is locked yet\"},\"exit(bool)\":{\"notice\":\"Withdraw full unlocked balance and earnings, optionally claim pending rewards.\"},\"getAllRewards()\":{\"notice\":\"Claim all pending staking rewards.\"},\"getBalances(address)\":{\"notice\":\"Total balance of an account, including unlocked, locked and earned tokens.\"},\"getLockDurations()\":{\"notice\":\"Return lock duration.\"},\"getLockMultipliers()\":{\"notice\":\"Return reward multipliers.\"},\"getPriceProvider()\":{\"notice\":\"Returns price provider address\"},\"getReward(address[])\":{\"notice\":\"Claim all pending staking rewards.\"},\"getRewardForDuration(address)\":{\"notice\":\"Reward amount of the duration.\"},\"incentivesController()\":{\"notice\":\"Address of CIC contract\"},\"individualEarlyExit(bool,uint256)\":{\"notice\":\"Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\"},\"lastClaimTime(address)\":{\"notice\":\"Last claim time of the user\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns reward applicable timestamp.\"},\"lockInfo(address)\":{\"notice\":\"Returns all locks of a user.\"},\"lockedBalance(address)\":{\"notice\":\"Reward locked amount of the user.\"},\"lockedBalances(address)\":{\"notice\":\"Information on a user's lockings\"},\"lockedSupply()\":{\"notice\":\"Total locked value\"},\"lockedSupplyWithMultiplier()\":{\"notice\":\"Total locked value in multipliers\"},\"middleFeeDistribution()\":{\"notice\":\"Address of Middle Fee Distribution Contract\"},\"mint(address,uint256,bool)\":{\"notice\":\"Add to earnings\"},\"minters(address)\":{\"notice\":\"Addresses approved to call mint\"},\"mintersAreSet()\":{\"notice\":\"Flag to prevent more minter addings\"},\"pause()\":{\"notice\":\"Pause MFD functionalities\"},\"rdntToken()\":{\"notice\":\"Address of RDNT\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\"},\"relock()\":{\"notice\":\"Withdraw and restake assets.\"},\"requalify()\":{\"notice\":\"Requalify user\"},\"requalifyFor(address)\":{\"notice\":\"Requalify user for reward elgibility\"},\"rewardConverter()\":{\"notice\":\"Returns reward converter\"},\"rewardData(address)\":{\"notice\":\"Reward data per token\"},\"rewardPerToken(address)\":{\"notice\":\"Reward amount per token\"},\"rewardTokens(uint256)\":{\"notice\":\"Reward tokens being distributed\"},\"rewards(address,address)\":{\"notice\":\"user -> reward token -> amount; used to store reward amount\"},\"rewardsDuration()\":{\"notice\":\"Duration that rewards are streamed over\"},\"rewardsLookback()\":{\"notice\":\"Duration that rewards loop back\"},\"setAddresses(address,address,address)\":{\"notice\":\"Set CIC, MFD and Treasury.\"},\"setAutocompound(bool)\":{\"notice\":\"Sets option if auto compound is enabled.\"},\"setBountyManager(address)\":{\"notice\":\"Sets bounty manager contract.\"},\"setDefaultRelockTypeIndex(uint256)\":{\"notice\":\"Set default lock type index for user relock.\"},\"setLPToken(address)\":{\"notice\":\"Set LP token.\"},\"setLockTypeInfo(uint256[],uint256[])\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"setLookback(uint256)\":{\"notice\":\"Sets the loopback period\"},\"setMinters(address[])\":{\"notice\":\"Set minters\"},\"setRelock(bool)\":{\"notice\":\"Set relock status\"},\"stake(uint256,address,uint256)\":{\"notice\":\"Stake tokens to receive rewards.\"},\"stakingToken()\":{\"notice\":\"Address of LP token\"},\"startfleetTreasury()\":{\"notice\":\"treasury wallet\"},\"totalBalance(address)\":{\"notice\":\"Total balance of an account, including unlocked, locked and earned tokens.\"},\"unpause()\":{\"notice\":\"Resume MFD functionalities\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"user -> reward token -> rpt; RPT for paid amount\"},\"userlist()\":{\"notice\":\"Users list\"},\"vestDuration()\":{\"notice\":\"Duration of vesting RDNT\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw tokens from earnings and unlocked.\"},\"withdrawExpiredLocksFor(address)\":{\"notice\":\"Withdraw all currently locked tokens where the unlock time has passed.\"},\"withdrawExpiredLocksForWithOptions(address,uint256,bool)\":{\"notice\":\"Withdraw expired locks with options\"},\"withdrawableBalance(address)\":{\"notice\":\"Final balance received and penalty balance paid by user upon calling exit.\"},\"zapVestingToLp(address)\":{\"notice\":\"Zap vesting RDNT tokens to LP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/staking/MultiFeeDistribution.sol\":\"MultiFeeDistribution\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IBountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBountyManager {\\n\\tfunction quote(address _param) external returns (uint256 bounty);\\n\\n\\tfunction claim(address _param) external returns (uint256 bounty);\\n\\n\\tfunction minDLPBalance() external view returns (uint256 amt);\\n}\\n\",\"keccak256\":\"0xbde6f9fa73468967b9bf00d65ed2e060e918afb8610e7eb69190ff10e326c7bf\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n}\\n\",\"keccak256\":\"0x3f44ee9291069ef7a3b09c70293e745db5fe53b4f1b5ccdf72c97d1aad0f7720\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n}\\n\",\"keccak256\":\"0x9e51ff63313f57e8e7f7587bf1519eb1fed565dda804f0b48b3f25be34b3c1a4\",\"license\":\"MIT\"},\"contracts/interfaces/ILockerList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface ILockerList {\\n\\tfunction lockersCount() external view returns (uint256);\\n\\n\\tfunction getUsers(uint256 page, uint256 limit) external view returns (address[] memory);\\n\\n\\tfunction addToList(address user) external;\\n\\n\\tfunction removeFromList(address user) external;\\n}\\n\",\"keccak256\":\"0x133d96ce837405afe6787a9da0c9d6558f0ecb4325f6c499961cd92977b67ba0\",\"license\":\"MIT\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getRdntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b3a8c0804f5004639275ac1928dbf8f277ab956be5b8af0dec28b2d08d54c3e\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1ded3edc23a668c09ddcac690e9bb1233c73581f3554b90defa25e5d772e493c\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x06101420297ac4c13dd8b0436e1ff6098e2c21243927d7e762f15929f5a780e1\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/radiant/staking/MultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IChefIncentivesController} from \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport {IMiddleFeeDistribution} from \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport {IBountyManager} from \\\"../../interfaces/IBountyManager.sol\\\";\\nimport {IMultiFeeDistribution, IFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {IMintableToken} from \\\"../../interfaces/IMintableToken.sol\\\";\\nimport {ILockerList} from \\\"../../interfaces/ILockerList.sol\\\";\\nimport {LockedBalance, Balances, Reward, EarnedBalance} from \\\"../../interfaces/LockedBalance.sol\\\";\\nimport {IPriceProvider} from \\\"../../interfaces/IPriceProvider.sol\\\";\\n\\n/// @title Multi Fee Distribution Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract MultiFeeDistribution is IMultiFeeDistribution, Initializable, PausableUpgradeable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IMintableToken;\\n\\n\\taddress private _priceProvider;\\n\\n\\t/********************** Constants ***********************/\\n\\n\\tuint256 public constant QUART = 25000; //  25%\\n\\tuint256 public constant HALF = 65000; //  65%\\n\\tuint256 public constant WHOLE = 100000; // 100%\\n\\n\\t/// @notice Proportion of burn amount\\n\\tuint256 public burn;\\n\\n\\t/// @notice Duration that rewards are streamed over\\n\\tuint256 public rewardsDuration;\\n\\n\\t/// @notice Duration that rewards loop back\\n\\tuint256 public rewardsLookback;\\n\\n\\t/// @notice Multiplier for earnings, fixed to 1\\n\\t// uint256 public constant DEFAULT_MUTLIPLIER = 1;\\n\\n\\t/// @notice Default lock index\\n\\tuint256 public constant DEFAULT_LOCK_INDEX = 1;\\n\\n\\t/// @notice Duration of lock/earned penalty period, used for earnings\\n\\tuint256 public defaultLockDuration;\\n\\n\\t/// @notice Duration of vesting RDNT\\n\\tuint256 public vestDuration;\\n\\n\\t/// @notice Returns reward converter\\n\\taddress public rewardConverter;\\n\\n\\t/********************** Contract Addresses ***********************/\\n\\n\\t/// @notice Address of Middle Fee Distribution Contract\\n\\tIMiddleFeeDistribution public middleFeeDistribution;\\n\\n\\t/// @notice Address of CIC contract\\n\\tIChefIncentivesController public incentivesController;\\n\\n\\t/// @notice Address of RDNT\\n\\tIMintableToken public override rdntToken;\\n\\n\\t/// @notice Address of LP token\\n\\taddress public override stakingToken;\\n\\n\\t// Address of Lock Zapper\\n\\taddress internal lockZap;\\n\\n\\t/********************** Lock & Earn Info ***********************/\\n\\n\\t// Private mappings for balance data\\n\\tmapping(address => Balances) private balances;\\n\\tmapping(address => LockedBalance[]) internal userLocks;\\n\\tmapping(address => LockedBalance[]) private userEarnings;\\n\\tmapping(address => bool) public override autocompoundEnabled;\\n\\tmapping(address => uint256) public lastAutocompound;\\n\\n\\t/// @notice Total locked value\\n\\tuint256 public lockedSupply;\\n\\n\\t/// @notice Total locked value in multipliers\\n\\tuint256 public lockedSupplyWithMultiplier;\\n\\n\\t// Time lengths\\n\\tuint256[] internal lockPeriod;\\n\\n\\t// Multipliers\\n\\tuint256[] internal rewardMultipliers;\\n\\n\\t/********************** Reward Info ***********************/\\n\\n\\t/// @notice Reward tokens being distributed\\n\\taddress[] public rewardTokens;\\n\\n\\t/// @notice Reward data per token\\n\\tmapping(address => Reward) public rewardData;\\n\\n\\t/// @notice user -> reward token -> rpt; RPT for paid amount\\n\\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n\\t/// @notice user -> reward token -> amount; used to store reward amount\\n\\tmapping(address => mapping(address => uint256)) public rewards;\\n\\n\\t/********************** Other Info ***********************/\\n\\n\\t/// @notice DAO wallet\\n\\taddress public override daoTreasury;\\n\\n\\t/// @notice treasury wallet\\n\\taddress public startfleetTreasury;\\n\\n\\t/// @notice Addresses approved to call mint\\n\\tmapping(address => bool) public minters;\\n\\n\\t// Addresses to relock\\n\\tmapping(address => bool) public override autoRelockDisabled;\\n\\n\\t// Default lock index for relock\\n\\tmapping(address => uint256) public override defaultLockIndex;\\n\\n\\t/// @notice Flag to prevent more minter addings\\n\\tbool public mintersAreSet;\\n\\n\\t/// @notice Users list\\n\\tILockerList public userlist;\\n\\n\\t/// @notice Last claim time of the user\\n\\tmapping(address => uint256) public lastClaimTime;\\n\\n\\t/// @notice Bounty manager contract\\n\\taddress public bountyManager;\\n\\n\\t// to prevent unbounded lock length iteration during withdraw/clean\\n\\n\\t/********************** Events ***********************/\\n\\n\\t// event Staked(address indexed user, uint256 amount, bool locked);\\n\\tevent Locked(address indexed user, uint256 amount, uint256 lockedBalance, bool isLP);\\n\\tevent Withdrawn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 receivedAmount,\\n\\t\\tuint256 lockedBalance,\\n\\t\\tuint256 penalty,\\n\\t\\tuint256 burn,\\n\\t\\tbool isLP\\n\\t);\\n\\tevent RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n\\tevent Recovered(address indexed token, uint256 amount);\\n\\tevent Relocked(address indexed user, uint256 amount, uint256 lockIndex);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\terror AmountZero();\\n\\terror InvalidBurn();\\n\\terror InvalidLookback();\\n\\terror MintersSet();\\n\\terror InvalidLockPeriod();\\n\\terror InsufficientPermission();\\n\\terror AlreadyAdded();\\n\\terror InvalidType();\\n\\terror ActiveReward();\\n\\terror InvalidAmount();\\n\\terror InvalidEarned();\\n\\terror InvalidTime();\\n\\terror InvalidPeriod();\\n\\n\\t/**\\n\\t * @dev Constructor\\n\\t *  First reward MUST be the RDNT token or things will break\\n\\t *  related to the 50% penalty and distribution to locked balances.\\n\\t * @param _rdntToken RDNT token address.\\n\\t * @param _rewardsDuration set reward stream time.\\n\\t * @param _rewardsLookback reward lookback\\n\\t * @param _lockDuration lock duration\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _rdntToken,\\n\\t\\taddress _lockZap,\\n\\t\\taddress _dao,\\n\\t\\taddress _userlist,\\n\\t\\taddress priceProvider,\\n\\t\\tuint256 _rewardsDuration,\\n\\t\\tuint256 _rewardsLookback,\\n\\t\\tuint256 _lockDuration,\\n\\t\\tuint256 _burnRatio,\\n\\t\\tuint256 _vestDuration\\n\\t) public initializer {\\n\\t\\tif (_rdntToken == address(0)) revert AddressZero();\\n\\t\\tif (_lockZap == address(0)) revert AddressZero();\\n\\t\\tif (_dao == address(0)) revert AddressZero();\\n\\t\\tif (_userlist == address(0)) revert AddressZero();\\n\\t\\tif (priceProvider == address(0)) revert AddressZero();\\n\\t\\tif (_rewardsDuration == uint256(0)) revert AmountZero();\\n\\t\\tif (_rewardsLookback == uint256(0)) revert AmountZero();\\n\\t\\tif (_lockDuration == uint256(0)) revert AmountZero();\\n\\t\\tif (_vestDuration == uint256(0)) revert AmountZero();\\n\\t\\tif (_burnRatio > WHOLE) revert InvalidBurn();\\n\\t\\tif (_rewardsLookback > _rewardsDuration) revert InvalidLookback();\\n\\n\\t\\t__Pausable_init();\\n\\t\\t__Ownable_init();\\n\\n\\t\\trdntToken = IMintableToken(_rdntToken);\\n\\t\\tlockZap = _lockZap;\\n\\t\\tdaoTreasury = _dao;\\n\\t\\t_priceProvider = priceProvider;\\n\\t\\tuserlist = ILockerList(_userlist);\\n\\t\\trewardTokens.push(_rdntToken);\\n\\t\\trewardData[_rdntToken].lastUpdateTime = block.timestamp;\\n\\n\\t\\trewardsDuration = _rewardsDuration;\\n\\t\\trewardsLookback = _rewardsLookback;\\n\\t\\tdefaultLockDuration = _lockDuration;\\n\\t\\tburn = _burnRatio;\\n\\t\\tvestDuration = _vestDuration;\\n\\t}\\n\\n\\t/********************** Setters ***********************/\\n\\n\\t/**\\n\\t * @notice Set minters\\n\\t * @dev Can be called only once\\n\\t * @param _minters array of address\\n\\t */\\n\\tfunction setMinters(address[] calldata _minters) external onlyOwner {\\n\\t\\tif (mintersAreSet) revert MintersSet();\\n\\t\\tuint256 length = _minters.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (_minters[i] == address(0)) revert AddressZero();\\n\\t\\t\\tminters[_minters[i]] = true;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tmintersAreSet = true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets bounty manager contract.\\n\\t * @param _bounty contract address\\n\\t */\\n\\tfunction setBountyManager(address _bounty) external onlyOwner {\\n\\t\\tif (_bounty == address(0)) revert AddressZero();\\n\\t\\tbountyManager = _bounty;\\n\\t\\tminters[_bounty] = true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets reward convert contract.\\n\\t * @param _rewardConverter contract address\\n\\t */\\n\\tfunction addRewardConverter(address _rewardConverter) external onlyOwner {\\n\\t\\tif (_rewardConverter == address(0)) revert AddressZero();\\n\\t\\trewardConverter = _rewardConverter;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t * @param _lockPeriod lock period array\\n\\t * @param _rewardMultipliers multipliers per lock period\\n\\t */\\n\\tfunction setLockTypeInfo(uint256[] calldata _lockPeriod, uint256[] calldata _rewardMultipliers) external onlyOwner {\\n\\t\\tif (_lockPeriod.length != _rewardMultipliers.length) revert InvalidLockPeriod();\\n\\t\\tdelete lockPeriod;\\n\\t\\tdelete rewardMultipliers;\\n\\t\\tuint256 length = _lockPeriod.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tlockPeriod.push(_lockPeriod[i]);\\n\\t\\t\\trewardMultipliers.push(_rewardMultipliers[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set CIC, MFD and Treasury.\\n\\t * @param _controller CIC address\\n\\t * @param _middleFeeDistribution address\\n\\t * @param _treasury address\\n\\t */\\n\\tfunction setAddresses(\\n\\t\\tIChefIncentivesController _controller,\\n\\t\\tIMiddleFeeDistribution _middleFeeDistribution,\\n\\t\\taddress _treasury\\n\\t) external onlyOwner {\\n\\t\\tif (address(_controller) == address(0)) revert AddressZero();\\n\\t\\tif (address(_middleFeeDistribution) == address(0)) revert AddressZero();\\n\\t\\tincentivesController = _controller;\\n\\t\\tmiddleFeeDistribution = _middleFeeDistribution;\\n\\t\\tstartfleetTreasury = _treasury;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set LP token.\\n\\t * @param _stakingToken LP token address\\n\\t */\\n\\tfunction setLPToken(address _stakingToken) external onlyOwner {\\n\\t\\tif (_stakingToken == address(0)) revert AddressZero();\\n\\t\\tif (stakingToken != address(0)) revert AddressZero();\\n\\t\\tstakingToken = _stakingToken;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t * @param _rewardToken address\\n\\t */\\n\\tfunction addReward(address _rewardToken) external override {\\n\\t\\tif (_rewardToken == address(0)) revert InvalidBurn();\\n\\t\\tif (!minters[msg.sender]) revert InsufficientPermission();\\n\\t\\tif (rewardData[_rewardToken].lastUpdateTime != 0) revert AlreadyAdded();\\n\\t\\trewardTokens.push(_rewardToken);\\n\\n\\t\\tReward storage rewardData = rewardData[_rewardToken];\\n\\t\\trewardData.lastUpdateTime = block.timestamp;\\n\\t\\trewardData.periodFinish = block.timestamp;\\n\\t}\\n\\n\\t/********************** View functions ***********************/\\n\\n\\t/**\\n\\t * @notice Set default lock type index for user relock.\\n\\t * @param _index of default lock length\\n\\t */\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external override {\\n\\t\\tif (_index >= lockPeriod.length) revert InvalidType();\\n\\t\\tdefaultLockIndex[msg.sender] = _index;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets option if auto compound is enabled.\\n\\t * @param _status true if auto compounding is enabled.\\n\\t */\\n\\tfunction setAutocompound(bool _status) external {\\n\\t\\tautocompoundEnabled[msg.sender] = _status;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return lock duration.\\n\\t */\\n\\tfunction getLockDurations() external view returns (uint256[] memory) {\\n\\t\\treturn lockPeriod;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return reward multipliers.\\n\\t */\\n\\tfunction getLockMultipliers() external view returns (uint256[] memory) {\\n\\t\\treturn rewardMultipliers;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set relock status\\n\\t * @param _status true if auto relock is enabled.\\n\\t */\\n\\tfunction setRelock(bool _status) external virtual {\\n\\t\\tautoRelockDisabled[msg.sender] = !_status;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns all locks of a user.\\n\\t * @param user address.\\n\\t * @return lockInfo of the user.\\n\\t */\\n\\tfunction lockInfo(address user) external view override returns (LockedBalance[] memory) {\\n\\t\\treturn userLocks[user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\\n\\t * @param tokenAddress to recover.\\n\\t * @param tokenAmount to recover.\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\tif (rewardData[tokenAddress].lastUpdateTime != 0) revert ActiveReward();\\n\\t\\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw and restake assets.\\n\\t */\\n\\tfunction relock() external virtual {\\n\\t\\tuint256 amount = _withdrawExpiredLocksFor(msg.sender, true, true, userLocks[msg.sender].length);\\n\\t\\t_stake(amount, msg.sender, defaultLockIndex[msg.sender], false);\\n\\t\\temit Relocked(msg.sender, amount, defaultLockIndex[msg.sender]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Total balance of an account, including unlocked, locked and earned tokens.\\n\\t * @param user address.\\n\\t */\\n\\tfunction totalBalance(address user) external view override returns (uint256) {\\n\\t\\tif (stakingToken == address(rdntToken)) {\\n\\t\\t\\treturn balances[user].total;\\n\\t\\t}\\n\\t\\treturn balances[user].locked;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Information on a user's lockings\\n\\t * @return total balance of locks\\n\\t * @return unlockable balance\\n\\t * @return locked balance\\n\\t * @return lockedWithMultiplier\\n\\t * @return lockData which is an array of locks\\n\\t */\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256 unlockable,\\n\\t\\t\\tuint256 locked,\\n\\t\\t\\tuint256 lockedWithMultiplier,\\n\\t\\t\\tLockedBalance[] memory lockData\\n\\t\\t)\\n\\t{\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\t\\tuint256 idx;\\n\\t\\tuint256 length = locks.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (locks[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tlockData = new LockedBalance[](locks.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlockData[idx] = locks[i];\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\tlocked = locked.add(locks[i].amount);\\n\\t\\t\\t\\tlockedWithMultiplier = lockedWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlockable = unlockable.add(locks[i].amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (balances[user].locked, unlockable, locked, lockedWithMultiplier, lockData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reward locked amount of the user.\\n\\t * @param user address\\n\\t * @return locked amount\\n\\t */\\n\\tfunction lockedBalance(address user) public view override returns (uint256 locked) {\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\t\\tuint256 length = locks.length;\\n\\t\\tfor (uint i; i < length; ) {\\n\\t\\t\\tif (locks[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tlocked = locked.add(locks[i].amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Earnings which is locked yet\\n\\t * @dev Earned balances may be withdrawn immediately for a 50% penalty.\\n\\t * @return total earnings\\n\\t * @return unlocked earnings\\n\\t * @return earningsData which is an array of all infos\\n\\t */\\n\\tfunction earnedBalances(\\n\\t\\taddress user\\n\\t) public view returns (uint256 total, uint256 unlocked, EarnedBalance[] memory earningsData) {\\n\\t\\tunlocked = balances[user].unlocked;\\n\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\tuint256 idx;\\n\\t\\tuint256 length = earnings.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (earnings[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tearningsData = new EarnedBalance[](earnings.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t(, uint256 penaltyAmount, , ) = ieeWithdrawableBalances(user, earnings[i].unlockTime);\\n\\t\\t\\t\\tearningsData[idx].amount = earnings[i].amount;\\n\\t\\t\\t\\tearningsData[idx].unlockTime = earnings[i].unlockTime;\\n\\t\\t\\t\\tearningsData[idx].penalty = penaltyAmount;\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\ttotal = total.add(earnings[i].amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlocked = unlocked.add(earnings[i].amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (total, unlocked, earningsData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Total balance of an account, including unlocked, locked and earned tokens.\\n\\t */\\n\\tfunction getBalances(address _user) external view returns (Balances memory) {\\n\\t\\treturn balances[_user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Final balance received and penalty balance paid by user upon calling exit.\\n\\t * @dev This is earnings, not locks.\\n\\t * @param user address.\\n\\t * @return amount total withdrawable amount.\\n\\t * @return penaltyAmount penalty amount.\\n\\t * @return burnAmount amount to burn.\\n\\t */\\n\\tfunction withdrawableBalance(\\n\\t\\taddress user\\n\\t) public view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount) {\\n\\t\\tuint256 earned = balances[user].earned;\\n\\t\\tif (earned > 0) {\\n\\t\\t\\tuint256 length = userEarnings[user].length;\\n\\t\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[user][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, , uint256 newPenaltyAmount, uint256 newBurnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(newPenaltyAmount);\\n\\t\\t\\t\\tburnAmount = burnAmount.add(newBurnAmount);\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tamount = balances[user].unlocked.add(earned).sub(penaltyAmount);\\n\\t\\treturn (amount, penaltyAmount, burnAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Penalty information of individual earning\\n\\t * @param earning earning info.\\n\\t * @return amount of available earning.\\n\\t * @return penaltyFactor penalty rate.\\n\\t * @return penaltyAmount amount of penalty.\\n\\t * @return burnAmount amount to burn.\\n\\t */\\n\\tfunction _penaltyInfo(\\n\\t\\tLockedBalance memory earning\\n\\t) internal view returns (uint256 amount, uint256 penaltyFactor, uint256 penaltyAmount, uint256 burnAmount) {\\n\\t\\tif (earning.unlockTime > block.timestamp) {\\n\\t\\t\\t// 90% on day 1, decays to 25% on day 90\\n\\t\\t\\tpenaltyFactor = earning.unlockTime.sub(block.timestamp).mul(HALF).div(vestDuration).add(QUART); // 25% + timeLeft/vestDuration * 65%\\n\\t\\t}\\n\\t\\tpenaltyAmount = earning.amount.mul(penaltyFactor).div(WHOLE);\\n\\t\\tburnAmount = penaltyAmount.mul(burn).div(WHOLE);\\n\\t\\tamount = earning.amount.sub(penaltyAmount);\\n\\t}\\n\\n\\t/********************** Reward functions ***********************/\\n\\n\\t/**\\n\\t * @notice Reward amount of the duration.\\n\\t * @param _rewardToken for the reward\\n\\t * @return reward amount for duration\\n\\t */\\n\\tfunction getRewardForDuration(address _rewardToken) external view returns (uint256) {\\n\\t\\treturn rewardData[_rewardToken].rewardPerSecond.mul(rewardsDuration).div(1e12);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns reward applicable timestamp.\\n\\t * @param _rewardToken for the reward\\n\\t * @return end time of reward period\\n\\t */\\n\\tfunction lastTimeRewardApplicable(address _rewardToken) public view returns (uint256) {\\n\\t\\tuint256 periodFinish = rewardData[_rewardToken].periodFinish;\\n\\t\\treturn block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reward amount per token\\n\\t * @dev Reward is distributed only for locks.\\n\\t * @param _rewardToken for reward\\n\\t * @return rptStored current RPT with accumulated rewards\\n\\t */\\n\\tfunction rewardPerToken(address _rewardToken) public view returns (uint256 rptStored) {\\n\\t\\trptStored = rewardData[_rewardToken].rewardPerTokenStored;\\n\\t\\tif (lockedSupplyWithMultiplier > 0) {\\n\\t\\t\\tuint256 newReward = lastTimeRewardApplicable(_rewardToken).sub(rewardData[_rewardToken].lastUpdateTime).mul(\\n\\t\\t\\t\\trewardData[_rewardToken].rewardPerSecond\\n\\t\\t\\t);\\n\\t\\t\\trptStored = rptStored.add(newReward.mul(1e18).div(lockedSupplyWithMultiplier));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address and claimable amount of all reward tokens for the given account.\\n\\t * @param account for rewards\\n\\t * @return rewardsData array of rewards\\n\\t */\\n\\tfunction claimableRewards(\\n\\t\\taddress account\\n\\t) public view override returns (IFeeDistribution.RewardData[] memory rewardsData) {\\n\\t\\trewardsData = new IFeeDistribution.RewardData[](rewardTokens.length);\\n\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\trewardsData[i].token = rewardTokens[i];\\n\\t\\t\\trewardsData[i].amount = _earned(\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\trewardsData[i].token,\\n\\t\\t\\t\\tbalances[account].lockedWithMultiplier,\\n\\t\\t\\t\\trewardPerToken(rewardsData[i].token)\\n\\t\\t\\t).div(1e12);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn rewardsData;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim rewards by converter.\\n\\t * @dev Rewards are transfered to converter.\\n\\t * @param onBehalf address to claim.\\n\\t */\\n\\tfunction claimFromConverter(address onBehalf) external override whenNotPaused {\\n\\t\\tif (msg.sender != rewardConverter) revert InsufficientPermission();\\n\\t\\t_updateReward(onBehalf);\\n\\t\\tmiddleFeeDistribution.forwardReward(rewardTokens);\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = rewardTokens[i];\\n\\t\\t\\t_notifyUnseenReward(token);\\n\\t\\t\\tuint256 reward = rewards[onBehalf][token].div(1e12);\\n\\t\\t\\tif (reward > 0) {\\n\\t\\t\\t\\trewards[onBehalf][token] = 0;\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(reward);\\n\\n\\t\\t\\t\\tIERC20(token).safeTransfer(rewardConverter, reward);\\n\\t\\t\\t\\temit RewardPaid(onBehalf, token, reward);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\t\\tlastClaimTime[onBehalf] = block.timestamp;\\n\\t}\\n\\n\\t/********************** Operate functions ***********************/\\n\\n\\t/**\\n\\t * @notice Stake tokens to receive rewards.\\n\\t * @dev Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\\n\\t * @param amount to stake.\\n\\t * @param onBehalfOf address for staking.\\n\\t * @param typeIndex lock type index.\\n\\t */\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external override {\\n\\t\\t_stake(amount, onBehalfOf, typeIndex, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stake tokens to receive rewards.\\n\\t * @dev Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\\n\\t * @param amount to stake.\\n\\t * @param onBehalfOf address for staking.\\n\\t * @param typeIndex lock type index.\\n\\t * @param isRelock true if this is with relock enabled.\\n\\t */\\n\\tfunction _stake(uint256 amount, address onBehalfOf, uint256 typeIndex, bool isRelock) internal whenNotPaused {\\n\\t\\tif (amount == 0) return;\\n\\t\\tif (bountyManager != address(0)) {\\n\\t\\t\\tif (amount < IBountyManager(bountyManager).minDLPBalance()) revert InvalidAmount();\\n\\t\\t}\\n\\t\\tif (typeIndex >= lockPeriod.length) revert InvalidAmount();\\n\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\tuint256 transferAmount = amount;\\n\\t\\tif (userLocks[onBehalfOf].length != 0) {\\n\\t\\t\\t//if user has any locks\\n\\t\\t\\tif (userLocks[onBehalfOf][0].unlockTime <= block.timestamp) {\\n\\t\\t\\t\\t//if users soonest unlock has already elapsed\\n\\t\\t\\t\\tif (onBehalfOf == msg.sender || msg.sender == lockZap) {\\n\\t\\t\\t\\t\\t//if the user is msg.sender or the lockzap contract\\n\\t\\t\\t\\t\\tuint256 withdrawnAmt;\\n\\t\\t\\t\\t\\tif (!autoRelockDisabled[onBehalfOf]) {\\n\\t\\t\\t\\t\\t\\twithdrawnAmt = _withdrawExpiredLocksFor(onBehalfOf, true, false, userLocks[onBehalfOf].length);\\n\\t\\t\\t\\t\\t\\tamount = amount.add(withdrawnAmt);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t_withdrawExpiredLocksFor(onBehalfOf, true, true, userLocks[onBehalfOf].length);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\n\\t\\tbal.locked = bal.locked.add(amount);\\n\\t\\tlockedSupply = lockedSupply.add(amount);\\n\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\n\\t\\t_insertLock(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tLockedBalance({\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tunlockTime: block.timestamp.add(lockPeriod[typeIndex]),\\n\\t\\t\\t\\tmultiplier: rewardMultipliers[typeIndex],\\n\\t\\t\\t\\tduration: lockPeriod[typeIndex]\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\tuserlist.addToList(onBehalfOf);\\n\\n\\t\\tif (!isRelock) {\\n\\t\\t\\tIERC20(stakingToken).safeTransferFrom(msg.sender, address(this), transferAmount);\\n\\t\\t}\\n\\n\\t\\tincentivesController.afterLockUpdate(onBehalfOf);\\n\\t\\temit Locked(onBehalfOf, amount, balances[onBehalfOf].locked, stakingToken != address(rdntToken));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new lockings\\n\\t * @dev We keep the array to be sorted by unlock time.\\n\\t * @param _user address of locker.\\n\\t * @param newLock new lock info.\\n\\t */\\n\\tfunction _insertLock(address _user, LockedBalance memory newLock) internal {\\n\\t\\tLockedBalance[] storage locks = userLocks[_user];\\n\\t\\tuint256 length = locks.length;\\n\\t\\tuint256 i = _binarySearch(locks, length, newLock.unlockTime);\\n\\t\\tlocks.push();\\n\\t\\tfor (uint256 j = length; j > i; j--) {\\n\\t\\t\\tlocks[j] = locks[j - 1];\\n\\t\\t}\\n\\t\\tlocks[i] = newLock;\\n\\t}\\n\\n\\tfunction _binarySearch(\\n\\t\\tLockedBalance[] storage locks,\\n\\t\\tuint256 length,\\n\\t\\tuint256 unlockTime\\n\\t) private view returns (uint256) {\\n\\t\\tuint256 low = 0;\\n\\t\\tuint256 high = length;\\n\\t\\twhile (low < high) {\\n\\t\\t\\tuint256 mid = (low + high) / 2;\\n\\t\\t\\tif (locks[mid].unlockTime < unlockTime) {\\n\\t\\t\\t\\tlow = mid + 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thigh = mid;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn low;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add to earnings\\n\\t * @dev Minted tokens receive rewards normally but incur a 50% penalty when\\n\\t *  withdrawn before vestDuration has passed.\\n\\t * @param user vesting owner.\\n\\t * @param amount to vest.\\n\\t * @param withPenalty does this bear penalty?\\n\\t */\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external override whenNotPaused {\\n\\t\\tif (!minters[msg.sender]) revert InsufficientPermission();\\n\\t\\tif (amount == 0) return;\\n\\n\\t\\tif (user == address(this)) {\\n\\t\\t\\t// minting to this contract adds the new tokens as incentives for lockers\\n\\t\\t\\t_notifyReward(address(rdntToken), amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tBalances storage bal = balances[user];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\t\\tif (withPenalty) {\\n\\t\\t\\tbal.earned = bal.earned.add(amount);\\n\\t\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\t\\tuint256 unlockTime = block.timestamp.add(vestDuration);\\n\\t\\t\\tearnings.push(\\n\\t\\t\\t\\tLockedBalance({amount: amount, unlockTime: unlockTime, multiplier: 1, duration: vestDuration})\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tbal.unlocked = bal.unlocked.add(amount);\\n\\t\\t}\\n\\t\\t//emit Staked(user, amount, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from earnings and unlocked.\\n\\t * @dev First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\\n\\t *  incurs a 50% penalty which is distributed based on locked balances.\\n\\t * @param amount for withdraw\\n\\t */\\n\\tfunction withdraw(uint256 amount) external {\\n\\t\\taddress _address = msg.sender;\\n\\t\\tif (amount == 0) revert InvalidAmount();\\n\\n\\t\\tuint256 penaltyAmount;\\n\\t\\tuint256 burnAmount;\\n\\t\\tBalances storage bal = balances[_address];\\n\\n\\t\\tif (amount <= bal.unlocked) {\\n\\t\\t\\tbal.unlocked = bal.unlocked.sub(amount);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = amount.sub(bal.unlocked);\\n\\t\\t\\tif (bal.earned < remaining) revert InvalidEarned();\\n\\t\\t\\tbal.unlocked = 0;\\n\\t\\t\\tuint256 sumEarned = bal.earned;\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tfor (i = 0; ; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[_address][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, uint256 penaltyFactor, , ) = _penaltyInfo(userEarnings[_address][i]);\\n\\n\\t\\t\\t\\t// Amount required from this lock, taking into account the penalty\\n\\t\\t\\t\\tuint256 requiredAmount = remaining.mul(WHOLE).div(WHOLE.sub(penaltyFactor));\\n\\t\\t\\t\\tif (requiredAmount >= earnedAmount) {\\n\\t\\t\\t\\t\\trequiredAmount = earnedAmount;\\n\\t\\t\\t\\t\\tremaining = remaining.sub(earnedAmount.mul(WHOLE.sub(penaltyFactor)).div(WHOLE)); // remaining -= earned * (1 - pentaltyFactor)\\n\\t\\t\\t\\t\\tif (remaining == 0) i++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuserEarnings[_address][i].amount = earnedAmount.sub(requiredAmount);\\n\\t\\t\\t\\t\\tremaining = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsumEarned = sumEarned.sub(requiredAmount);\\n\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(requiredAmount.mul(penaltyFactor).div(WHOLE)); // penalty += amount * penaltyFactor\\n\\t\\t\\t\\tburnAmount = burnAmount.add(penaltyAmount.mul(burn).div(WHOLE)); // burn += penalty * burnFactor\\n\\n\\t\\t\\t\\tif (remaining == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif (sumEarned == 0) revert InvalidEarned();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tfor (uint256 j = i; j < userEarnings[_address].length; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address][j - i] = userEarnings[_address][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (uint256 j = 0; j < i; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address].pop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbal.earned = sumEarned;\\n\\t\\t}\\n\\n\\t\\t// Update values\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(_address, amount, penaltyAmount, burnAmount, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns withdrawable balances at exact unlock time\\n\\t * @param user address for withdraw\\n\\t * @param unlockTime exact unlock time\\n\\t * @return amount total withdrawable amount\\n\\t * @return penaltyAmount penalty amount\\n\\t * @return burnAmount amount to burn\\n\\t * @return index of earning\\n\\t */\\n\\tfunction ieeWithdrawableBalances(\\n\\t\\taddress user,\\n\\t\\tuint256 unlockTime\\n\\t) internal view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) {\\n\\t\\tuint256 length = userEarnings[user].length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (userEarnings[user][i].unlockTime == unlockTime) {\\n\\t\\t\\t\\t(amount, , penaltyAmount, burnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\\n\\t * @param claimRewards true to claim rewards when exit\\n\\t * @param unlockTime of earning\\n\\t */\\n\\tfunction individualEarlyExit(bool claimRewards, uint256 unlockTime) external {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\tif (unlockTime <= block.timestamp) revert InvalidTime();\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) = ieeWithdrawableBalances(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tunlockTime\\n\\t\\t);\\n\\n\\t\\tif (index >= userEarnings[onBehalfOf].length) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 length = userEarnings[onBehalfOf].length;\\n\\t\\tfor (uint256 i = index + 1; i < length; ) {\\n\\t\\t\\tuserEarnings[onBehalfOf][i - 1] = userEarnings[onBehalfOf][i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuserEarnings[onBehalfOf].pop();\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\t\\tbal.earned = bal.earned.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw full unlocked balance and earnings, optionally claim pending rewards.\\n\\t * @param claimRewards true to claim rewards when exit\\n\\t */\\n\\tfunction exit(bool claimRewards) external override {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount) = withdrawableBalance(onBehalfOf);\\n\\n\\t\\tdelete userEarnings[onBehalfOf];\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t * @param _rewardTokens array of reward tokens\\n\\t */\\n\\tfunction getReward(address[] memory _rewardTokens) public {\\n\\t\\t_updateReward(msg.sender);\\n\\t\\t_getReward(msg.sender, _rewardTokens);\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t */\\n\\tfunction getAllRewards() external {\\n\\t\\treturn getReward(rewardTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate earnings.\\n\\t * @param _user address of earning owner\\n\\t * @param _rewardToken address\\n\\t * @param _balance of the user\\n\\t * @param _currentRewardPerToken current RPT\\n\\t * @return earnings amount\\n\\t */\\n\\tfunction _earned(\\n\\t\\taddress _user,\\n\\t\\taddress _rewardToken,\\n\\t\\tuint256 _balance,\\n\\t\\tuint256 _currentRewardPerToken\\n\\t) internal view returns (uint256 earnings) {\\n\\t\\tearnings = rewards[_user][_rewardToken];\\n\\t\\tuint256 realRPT = _currentRewardPerToken.sub(userRewardPerTokenPaid[_user][_rewardToken]);\\n\\t\\tearnings = earnings.add(_balance.mul(realRPT).div(1e18));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update user reward info.\\n\\t * @param account address\\n\\t */\\n\\tfunction _updateReward(address account) internal {\\n\\t\\tuint256 balance = balances[account].lockedWithMultiplier;\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\taddress token = rewardTokens[i];\\n\\t\\t\\tuint256 rpt = rewardPerToken(token);\\n\\n\\t\\t\\tReward storage r = rewardData[token];\\n\\t\\t\\tr.rewardPerTokenStored = rpt;\\n\\t\\t\\tr.lastUpdateTime = lastTimeRewardApplicable(token);\\n\\n\\t\\t\\tif (account != address(this)) {\\n\\t\\t\\t\\trewards[account][token] = _earned(account, token, balance, rpt);\\n\\t\\t\\t\\tuserRewardPerTokenPaid[account][token] = rpt;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new reward.\\n\\t * @dev If prev reward period is not done, then it resets `rewardPerSecond` and restarts period\\n\\t * @param _rewardToken address\\n\\t * @param reward amount\\n\\t */\\n\\tfunction _notifyReward(address _rewardToken, uint256 reward) internal {\\n\\t\\tReward storage r = rewardData[_rewardToken];\\n\\t\\tif (block.timestamp >= r.periodFinish) {\\n\\t\\t\\tr.rewardPerSecond = reward.mul(1e12).div(rewardsDuration);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = r.periodFinish.sub(block.timestamp);\\n\\t\\t\\tuint256 leftover = remaining.mul(r.rewardPerSecond).div(1e12);\\n\\t\\t\\tr.rewardPerSecond = reward.add(leftover).mul(1e12).div(rewardsDuration);\\n\\t\\t}\\n\\n\\t\\tr.lastUpdateTime = block.timestamp;\\n\\t\\tr.periodFinish = block.timestamp.add(rewardsDuration);\\n\\t\\tr.balance = r.balance.add(reward);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Notify unseen rewards.\\n\\t * @dev for rewards other than stakingToken, every 24 hours we check if new\\n\\t *  rewards were sent to the contract or accrued via aToken interest.\\n\\t * @param token address\\n\\t */\\n\\tfunction _notifyUnseenReward(address token) internal {\\n\\t\\tif (token == address(0)) revert AddressZero();\\n\\t\\tif (token == address(rdntToken)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tReward storage r = rewardData[token];\\n\\t\\tuint256 periodFinish = r.periodFinish;\\n\\t\\tif (periodFinish == 0) revert InvalidPeriod();\\n\\t\\tif (periodFinish < block.timestamp.add(rewardsDuration - rewardsLookback)) {\\n\\t\\t\\tuint256 unseen = IERC20(token).balanceOf(address(this)).sub(r.balance);\\n\\t\\t\\tif (unseen > 0) {\\n\\t\\t\\t\\t_notifyReward(token, unseen);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction onUpgrade() public {}\\n\\n\\t/**\\n\\t * @notice Sets the loopback period\\n\\t * @param _lookback in seconds\\n\\t */\\n\\tfunction setLookback(uint256 _lookback) public onlyOwner {\\n\\t\\trewardsLookback = _lookback;\\n\\t}\\n\\n\\t/**\\n\\t * @notice User gets reward\\n\\t * @param _user address\\n\\t * @param _rewardTokens array of reward tokens\\n\\t */\\n\\tfunction _getReward(address _user, address[] memory _rewardTokens) internal whenNotPaused {\\n\\t\\tmiddleFeeDistribution.forwardReward(_rewardTokens);\\n\\t\\tuint256 length = _rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = _rewardTokens[i];\\n\\t\\t\\t_notifyUnseenReward(token);\\n\\t\\t\\tuint256 reward = rewards[_user][token].div(1e12);\\n\\t\\t\\tif (reward > 0) {\\n\\t\\t\\t\\trewards[_user][token] = 0;\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(reward);\\n\\n\\t\\t\\t\\tIERC20(token).safeTransfer(_user, reward);\\n\\t\\t\\t\\t// TODO: ask if bulk event is possible. Roughly 50% cheaper\\n\\t\\t\\t\\temit RewardPaid(_user, token, reward);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from MFD\\n\\t * @param onBehalfOf address to withdraw\\n\\t * @param amount of withdraw\\n\\t * @param penaltyAmount penalty applied amount\\n\\t * @param burnAmount amount to burn\\n\\t * @param claimRewards option to claim rewards\\n\\t */\\n\\tfunction _withdrawTokens(\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 penaltyAmount,\\n\\t\\tuint256 burnAmount,\\n\\t\\tbool claimRewards\\n\\t) internal {\\n\\t\\tif (onBehalfOf != msg.sender) revert InsufficientPermission();\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\trdntToken.safeTransfer(onBehalfOf, amount);\\n\\t\\tif (penaltyAmount > 0) {\\n\\t\\t\\tif (burnAmount > 0) {\\n\\t\\t\\t\\trdntToken.safeTransfer(startfleetTreasury, burnAmount);\\n\\t\\t\\t}\\n\\t\\t\\trdntToken.safeTransfer(daoTreasury, penaltyAmount.sub(burnAmount));\\n\\t\\t}\\n\\n\\t\\tif (claimRewards) {\\n\\t\\t\\t_getReward(onBehalfOf, rewardTokens);\\n\\t\\t\\tlastClaimTime[onBehalfOf] = block.timestamp;\\n\\t\\t}\\n\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\n\\t\\temit Withdrawn(onBehalfOf, amount, balances[onBehalfOf].locked, penaltyAmount, burnAmount, false);\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @notice Withdraw all lockings tokens where the unlock time has passed\\n\\t * @param user address\\n\\t * @param totalLock total lock amount\\n\\t * @param totalLockWithMultiplier total lock amount that is multiplied\\n\\t * @param limit limit for looping operation\\n\\t * @return lockAmount withdrawable lock amount\\n\\t * @return lockAmountWithMultiplier withdraw amount with multiplier\\n\\t */\\n\\tfunction _cleanWithdrawableLocks(\\n\\t\\taddress user,\\n\\t\\tuint256 totalLock,\\n\\t\\tuint256 totalLockWithMultiplier,\\n\\t\\tuint256 limit\\n\\t) internal returns (uint256 lockAmount, uint256 lockAmountWithMultiplier) {\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\n\\t\\tif (locks.length != 0) {\\n\\t\\t\\tuint256 length = locks.length <= limit ? locks.length : limit;\\n\\t\\t\\tuint256 i;\\n\\t\\t\\twhile (i < length && locks[i].unlockTime <= block.timestamp) {\\n\\t\\t\\t\\tlockAmount = lockAmount.add(locks[i].amount);\\n\\t\\t\\t\\tlockAmountWithMultiplier = lockAmountWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t\\ti = i + 1;\\n\\t\\t\\t}\\n\\t\\t\\tfor (uint256 j = i; j < locks.length; j = j + 1) {\\n\\t\\t\\t\\tlocks[j - i] = locks[j];\\n\\t\\t\\t}\\n\\t\\t\\tfor (uint256 j = 0; j < i; j = j + 1) {\\n\\t\\t\\t\\tlocks.pop();\\n\\t\\t\\t}\\n\\t\\t\\tif (locks.length == 0) {\\n\\t\\t\\t\\tlockAmount = totalLock;\\n\\t\\t\\t\\tlockAmountWithMultiplier = totalLockWithMultiplier;\\n\\t\\t\\t\\tdelete userLocks[user];\\n\\n\\t\\t\\t\\tuserlist.removeFromList(user);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t * @param _address of the user.\\n\\t * @param isRelockAction true if withdraw with relock\\n\\t * @param doTransfer true to transfer tokens to user\\n\\t * @param limit limit for looping operation\\n\\t * @return amount for withdraw\\n\\t */\\n\\tfunction _withdrawExpiredLocksFor(\\n\\t\\taddress _address,\\n\\t\\tbool isRelockAction,\\n\\t\\tbool doTransfer,\\n\\t\\tuint256 limit\\n\\t) internal whenNotPaused returns (uint256 amount) {\\n\\t\\trequire(isRelockAction == false || _address == msg.sender || lockZap == msg.sender);\\n\\t\\t_updateReward(_address);\\n\\n\\t\\tuint256 amountWithMultiplier;\\n\\t\\tBalances storage bal = balances[_address];\\n\\t\\t(amount, amountWithMultiplier) = _cleanWithdrawableLocks(_address, bal.locked, bal.lockedWithMultiplier, limit);\\n\\t\\tbal.locked = bal.locked.sub(amount);\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.sub(amountWithMultiplier);\\n\\t\\tbal.total = bal.total.sub(amount);\\n\\t\\tlockedSupply = lockedSupply.sub(amount);\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.sub(amountWithMultiplier);\\n\\n\\t\\tif (!isRelockAction && !autoRelockDisabled[_address]) {\\n\\t\\t\\t_stake(amount, _address, defaultLockIndex[_address], true);\\n\\t\\t} else {\\n\\t\\t\\tif (doTransfer) {\\n\\t\\t\\t\\tIERC20(stakingToken).safeTransfer(_address, amount);\\n\\t\\t\\t\\tincentivesController.afterLockUpdate(_address);\\n\\t\\t\\t\\temit Withdrawn(_address, amount, balances[_address].locked, 0, 0, stakingToken != address(rdntToken));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t * @param _address of the user\\n\\t * @return withdraw amount\\n\\t */\\n\\tfunction withdrawExpiredLocksFor(address _address) external override returns (uint256) {\\n\\t\\treturn _withdrawExpiredLocksFor(_address, false, true, userLocks[_address].length);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw expired locks with options\\n\\t * @param _address for withdraw\\n\\t * @param _limit of lock length for withdraw\\n\\t * @param _ignoreRelock option to ignore relock\\n\\t * @return withdraw amount\\n\\t */\\n\\tfunction withdrawExpiredLocksForWithOptions(\\n\\t\\taddress _address,\\n\\t\\tuint256 _limit,\\n\\t\\tbool _ignoreRelock\\n\\t) external returns (uint256) {\\n\\t\\tif (_limit == 0) _limit = userLocks[_address].length;\\n\\n\\t\\treturn _withdrawExpiredLocksFor(_address, _ignoreRelock, true, _limit);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap vesting RDNT tokens to LP\\n\\t * @param _user address\\n\\t * @return zapped amount\\n\\t */\\n\\tfunction zapVestingToLp(address _user) external override returns (uint256 zapped) {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\n\\t\\t_updateReward(_user);\\n\\n\\t\\tLockedBalance[] storage earnings = userEarnings[_user];\\n\\t\\tfor (uint256 i = earnings.length; i > 0; i -= 1) {\\n\\t\\t\\tif (earnings[i - 1].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tzapped = zapped.add(earnings[i - 1].amount);\\n\\t\\t\\t\\tearnings.pop();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trdntToken.safeTransfer(lockZap, zapped);\\n\\n\\t\\tBalances storage bal = balances[_user];\\n\\t\\tbal.earned = bal.earned.sub(zapped);\\n\\t\\tbal.total = bal.total.sub(zapped);\\n\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\n\\t\\treturn zapped;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns price provider address\\n\\t */\\n\\tfunction getPriceProvider() external view override returns (address) {\\n\\t\\treturn _priceProvider;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claims bounty.\\n\\t * @dev Remove expired locks\\n\\t * @param _user address\\n\\t * @param _execute true if this is actual execution\\n\\t * @return issueBaseBounty true if needs to issue base bounty\\n\\t */\\n\\tfunction claimBounty(address _user, bool _execute) public whenNotPaused returns (bool issueBaseBounty) {\\n\\t\\tif (msg.sender != address(bountyManager)) revert InsufficientPermission();\\n\\n\\t\\t(, uint256 unlockable, , , ) = lockedBalances(_user);\\n\\t\\tif (unlockable == 0) {\\n\\t\\t\\treturn (false);\\n\\t\\t} else {\\n\\t\\t\\tissueBaseBounty = true;\\n\\t\\t}\\n\\n\\t\\tif (!_execute) {\\n\\t\\t\\treturn (issueBaseBounty);\\n\\t\\t}\\n\\t\\t// Withdraw the user's expried locks\\n\\t\\t_withdrawExpiredLocksFor(_user, false, true, userLocks[_user].length);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause MFD functionalities\\n\\t */\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Resume MFD functionalities\\n\\t */\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Requalify user for reward elgibility\\n\\t * @param _user address\\n\\t */\\n\\tfunction requalifyFor(address _user) public {\\n\\t\\tincentivesController.afterLockUpdate(_user);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Requalify user\\n\\t */\\n\\tfunction requalify() external {\\n\\t\\trequalifyFor(msg.sender);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0605793404a48e4cf67950a223d7a2a01f169a7777ac0f465fd78290dcaaa4ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "addReward(address)": {
        "params": {
          "_rewardToken": "address"
        }
      },
      "addRewardConverter(address)": {
        "params": {
          "_rewardConverter": "contract address"
        }
      },
      "claimBounty(address,bool)": {
        "details": "Remove expired locks",
        "params": {
          "_execute": "true if this is actual execution",
          "_user": "address"
        },
        "returns": {
          "issueBaseBounty": "true if needs to issue base bounty"
        }
      },
      "claimFromConverter(address)": {
        "details": "Rewards are transfered to converter.",
        "params": {
          "onBehalf": "address to claim."
        }
      },
      "claimableRewards(address)": {
        "params": {
          "account": "for rewards"
        },
        "returns": {
          "rewardsData": "array of rewards"
        }
      },
      "earnedBalances(address)": {
        "details": "Earned balances may be withdrawn immediately for a 50% penalty.",
        "returns": {
          "earningsData": "which is an array of all infos",
          "total": "earnings",
          "unlocked": "earnings"
        }
      },
      "exit(bool)": {
        "params": {
          "claimRewards": "true to claim rewards when exit"
        }
      },
      "getReward(address[])": {
        "params": {
          "_rewardTokens": "array of reward tokens"
        }
      },
      "getRewardForDuration(address)": {
        "params": {
          "_rewardToken": "for the reward"
        },
        "returns": {
          "_0": "reward amount for duration"
        }
      },
      "individualEarlyExit(bool,uint256)": {
        "params": {
          "claimRewards": "true to claim rewards when exit",
          "unlockTime": "of earning"
        }
      },
      "initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.",
        "params": {
          "_lockDuration": "lock duration",
          "_rdntToken": "RDNT token address.",
          "_rewardsDuration": "set reward stream time.",
          "_rewardsLookback": "reward lookback"
        }
      },
      "lastTimeRewardApplicable(address)": {
        "params": {
          "_rewardToken": "for the reward"
        },
        "returns": {
          "_0": "end time of reward period"
        }
      },
      "lockInfo(address)": {
        "params": {
          "user": "address."
        },
        "returns": {
          "_0": "lockInfo of the user."
        }
      },
      "lockedBalance(address)": {
        "params": {
          "user": "address"
        },
        "returns": {
          "locked": "amount"
        }
      },
      "lockedBalances(address)": {
        "returns": {
          "_0": "total balance of locks",
          "lockData": "which is an array of locks",
          "locked": "balance",
          "lockedWithMultiplier": "lockedWithMultiplier",
          "unlockable": "balance"
        }
      },
      "mint(address,uint256,bool)": {
        "details": "Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before vestDuration has passed.",
        "params": {
          "amount": "to vest.",
          "user": "vesting owner.",
          "withPenalty": "does this bear penalty?"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "to recover.",
          "tokenAmount": "to recover."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requalifyFor(address)": {
        "params": {
          "_user": "address"
        }
      },
      "rewardPerToken(address)": {
        "details": "Reward is distributed only for locks.",
        "params": {
          "_rewardToken": "for reward"
        },
        "returns": {
          "rptStored": "current RPT with accumulated rewards"
        }
      },
      "setAddresses(address,address,address)": {
        "params": {
          "_controller": "CIC address",
          "_middleFeeDistribution": "address",
          "_treasury": "address"
        }
      },
      "setAutocompound(bool)": {
        "params": {
          "_status": "true if auto compounding is enabled."
        }
      },
      "setBountyManager(address)": {
        "params": {
          "_bounty": "contract address"
        }
      },
      "setDefaultRelockTypeIndex(uint256)": {
        "params": {
          "_index": "of default lock length"
        }
      },
      "setLPToken(address)": {
        "params": {
          "_stakingToken": "LP token address"
        }
      },
      "setLockTypeInfo(uint256[],uint256[])": {
        "params": {
          "_lockPeriod": "lock period array",
          "_rewardMultipliers": "multipliers per lock period"
        }
      },
      "setLookback(uint256)": {
        "params": {
          "_lookback": "in seconds"
        }
      },
      "setMinters(address[])": {
        "details": "Can be called only once",
        "params": {
          "_minters": "array of address"
        }
      },
      "setRelock(bool)": {
        "params": {
          "_status": "true if auto relock is enabled."
        }
      },
      "stake(uint256,address,uint256)": {
        "details": "Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.",
        "params": {
          "amount": "to stake.",
          "onBehalfOf": "address for staking.",
          "typeIndex": "lock type index."
        }
      },
      "totalBalance(address)": {
        "params": {
          "user": "address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances.",
        "params": {
          "amount": "for withdraw"
        }
      },
      "withdrawExpiredLocksFor(address)": {
        "params": {
          "_address": "of the user"
        },
        "returns": {
          "_0": "withdraw amount"
        }
      },
      "withdrawExpiredLocksForWithOptions(address,uint256,bool)": {
        "params": {
          "_address": "for withdraw",
          "_ignoreRelock": "option to ignore relock",
          "_limit": "of lock length for withdraw"
        },
        "returns": {
          "_0": "withdraw amount"
        }
      },
      "withdrawableBalance(address)": {
        "details": "This is earnings, not locks.",
        "params": {
          "user": "address."
        },
        "returns": {
          "amount": "total withdrawable amount.",
          "burnAmount": "amount to burn.",
          "penaltyAmount": "penalty amount."
        }
      },
      "zapVestingToLp(address)": {
        "params": {
          "_user": "address"
        },
        "returns": {
          "zapped": "amount"
        }
      }
    },
    "title": "Multi Fee Distribution Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_LOCK_INDEX()": {
        "notice": "Default lock index"
      },
      "addReward(address)": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "addRewardConverter(address)": {
        "notice": "Sets reward convert contract."
      },
      "bountyManager()": {
        "notice": "Bounty manager contract"
      },
      "burn()": {
        "notice": "Proportion of burn amount"
      },
      "claimBounty(address,bool)": {
        "notice": "Claims bounty."
      },
      "claimFromConverter(address)": {
        "notice": "Claim rewards by converter."
      },
      "claimableRewards(address)": {
        "notice": "Address and claimable amount of all reward tokens for the given account."
      },
      "daoTreasury()": {
        "notice": "DAO wallet"
      },
      "defaultLockDuration()": {
        "notice": "Duration of lock/earned penalty period, used for earnings"
      },
      "earnedBalances(address)": {
        "notice": "Earnings which is locked yet"
      },
      "exit(bool)": {
        "notice": "Withdraw full unlocked balance and earnings, optionally claim pending rewards."
      },
      "getAllRewards()": {
        "notice": "Claim all pending staking rewards."
      },
      "getBalances(address)": {
        "notice": "Total balance of an account, including unlocked, locked and earned tokens."
      },
      "getLockDurations()": {
        "notice": "Return lock duration."
      },
      "getLockMultipliers()": {
        "notice": "Return reward multipliers."
      },
      "getPriceProvider()": {
        "notice": "Returns price provider address"
      },
      "getReward(address[])": {
        "notice": "Claim all pending staking rewards."
      },
      "getRewardForDuration(address)": {
        "notice": "Reward amount of the duration."
      },
      "incentivesController()": {
        "notice": "Address of CIC contract"
      },
      "individualEarlyExit(bool,uint256)": {
        "notice": "Withdraw individual unlocked balance and earnings, optionally claim pending rewards."
      },
      "lastClaimTime(address)": {
        "notice": "Last claim time of the user"
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns reward applicable timestamp."
      },
      "lockInfo(address)": {
        "notice": "Returns all locks of a user."
      },
      "lockedBalance(address)": {
        "notice": "Reward locked amount of the user."
      },
      "lockedBalances(address)": {
        "notice": "Information on a user's lockings"
      },
      "lockedSupply()": {
        "notice": "Total locked value"
      },
      "lockedSupplyWithMultiplier()": {
        "notice": "Total locked value in multipliers"
      },
      "middleFeeDistribution()": {
        "notice": "Address of Middle Fee Distribution Contract"
      },
      "mint(address,uint256,bool)": {
        "notice": "Add to earnings"
      },
      "minters(address)": {
        "notice": "Addresses approved to call mint"
      },
      "mintersAreSet()": {
        "notice": "Flag to prevent more minter addings"
      },
      "pause()": {
        "notice": "Pause MFD functionalities"
      },
      "rdntToken()": {
        "notice": "Address of RDNT"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders."
      },
      "relock()": {
        "notice": "Withdraw and restake assets."
      },
      "requalify()": {
        "notice": "Requalify user"
      },
      "requalifyFor(address)": {
        "notice": "Requalify user for reward elgibility"
      },
      "rewardConverter()": {
        "notice": "Returns reward converter"
      },
      "rewardData(address)": {
        "notice": "Reward data per token"
      },
      "rewardPerToken(address)": {
        "notice": "Reward amount per token"
      },
      "rewardTokens(uint256)": {
        "notice": "Reward tokens being distributed"
      },
      "rewards(address,address)": {
        "notice": "user -> reward token -> amount; used to store reward amount"
      },
      "rewardsDuration()": {
        "notice": "Duration that rewards are streamed over"
      },
      "rewardsLookback()": {
        "notice": "Duration that rewards loop back"
      },
      "setAddresses(address,address,address)": {
        "notice": "Set CIC, MFD and Treasury."
      },
      "setAutocompound(bool)": {
        "notice": "Sets option if auto compound is enabled."
      },
      "setBountyManager(address)": {
        "notice": "Sets bounty manager contract."
      },
      "setDefaultRelockTypeIndex(uint256)": {
        "notice": "Set default lock type index for user relock."
      },
      "setLPToken(address)": {
        "notice": "Set LP token."
      },
      "setLockTypeInfo(uint256[],uint256[])": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "setLookback(uint256)": {
        "notice": "Sets the loopback period"
      },
      "setMinters(address[])": {
        "notice": "Set minters"
      },
      "setRelock(bool)": {
        "notice": "Set relock status"
      },
      "stake(uint256,address,uint256)": {
        "notice": "Stake tokens to receive rewards."
      },
      "stakingToken()": {
        "notice": "Address of LP token"
      },
      "startfleetTreasury()": {
        "notice": "treasury wallet"
      },
      "totalBalance(address)": {
        "notice": "Total balance of an account, including unlocked, locked and earned tokens."
      },
      "unpause()": {
        "notice": "Resume MFD functionalities"
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "user -> reward token -> rpt; RPT for paid amount"
      },
      "userlist()": {
        "notice": "Users list"
      },
      "vestDuration()": {
        "notice": "Duration of vesting RDNT"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw tokens from earnings and unlocked."
      },
      "withdrawExpiredLocksFor(address)": {
        "notice": "Withdraw all currently locked tokens where the unlock time has passed."
      },
      "withdrawExpiredLocksForWithOptions(address,uint256,bool)": {
        "notice": "Withdraw expired locks with options"
      },
      "withdrawableBalance(address)": {
        "notice": "Final balance received and penalty balance paid by user upon calling exit."
      },
      "zapVestingToLp(address)": {
        "notice": "Zap vesting RDNT tokens to LP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3046,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3049,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3660,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3229,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3334,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2918,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3038,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 46543,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_priceProvider",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 46555,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "burn",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 46558,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 46561,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardsLookback",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 46568,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "defaultLockDuration",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 46571,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "vestDuration",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 46574,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardConverter",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 46578,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "middleFeeDistribution",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IMiddleFeeDistribution)16972"
      },
      {
        "astId": 46582,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "incentivesController",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IChefIncentivesController)15470"
      },
      {
        "astId": 46587,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rdntToken",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(IMintableToken)17001"
      },
      {
        "astId": 46591,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "stakingToken",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 46593,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockZap",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 46598,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "balances",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_struct(Balances)18246_storage)"
      },
      {
        "astId": 46604,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userLocks",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)18217_storage)dyn_storage)"
      },
      {
        "astId": 46610,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userEarnings",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)18217_storage)dyn_storage)"
      },
      {
        "astId": 46615,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "autocompoundEnabled",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 46619,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lastAutocompound",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46622,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockedSupply",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 46625,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockedSupplyWithMultiplier",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 46628,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "170",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 46631,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardMultipliers",
        "offset": 0,
        "slot": "171",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 46635,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "172",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 46641,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardData",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_address,t_struct(Reward)18235_storage)"
      },
      {
        "astId": 46648,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 46655,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewards",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 46659,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "daoTreasury",
        "offset": 0,
        "slot": "176",
        "type": "t_address"
      },
      {
        "astId": 46662,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "startfleetTreasury",
        "offset": 0,
        "slot": "177",
        "type": "t_address"
      },
      {
        "astId": 46667,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "minters",
        "offset": 0,
        "slot": "178",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 46672,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "autoRelockDisabled",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 46677,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "defaultLockIndex",
        "offset": 0,
        "slot": "180",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46680,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "mintersAreSet",
        "offset": 0,
        "slot": "181",
        "type": "t_bool"
      },
      {
        "astId": 46684,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userlist",
        "offset": 1,
        "slot": "181",
        "type": "t_contract(ILockerList)16930"
      },
      {
        "astId": 46689,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "182",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46692,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "bountyManager",
        "offset": 0,
        "slot": "183",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockedBalance)18217_storage)dyn_storage": {
        "base": "t_struct(LockedBalance)18217_storage",
        "encoding": "dynamic_array",
        "label": "struct LockedBalance[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChefIncentivesController)15470": {
        "encoding": "inplace",
        "label": "contract IChefIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(ILockerList)16930": {
        "encoding": "inplace",
        "label": "contract ILockerList",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)16972": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)17001": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedBalance)18217_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LockedBalance[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedBalance)18217_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)18246_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)18246_storage"
      },
      "t_mapping(t_address,t_struct(Reward)18235_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)18235_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Balances)18246_storage": {
        "encoding": "inplace",
        "label": "struct Balances",
        "members": [
          {
            "astId": 18237,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18239,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18241,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "locked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18243,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "lockedWithMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18245,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "earned",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockedBalance)18217_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 18210,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18212,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18214,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "multiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18216,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Reward)18235_storage": {
        "encoding": "inplace",
        "label": "struct Reward",
        "members": [
          {
            "astId": 18226,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "periodFinish",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18228,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18230,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18232,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18234,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "balance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}