{
  "address": "0xA4d06c6FF8A3dE930301D6a0F2B95f28B852451F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        }
      ],
      "name": "LockerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        }
      ],
      "name": "LockerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "addToList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24934e7474db60c623044bc974f4a31eb2c612e641bf7f5eb7d0b572f5a28642",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0xA4d06c6FF8A3dE930301D6a0F2B95f28B852451F",
    "transactionIndex": 3,
    "gasUsed": "519580",
    "logsBloom": "0x
    "blockHash": "0x5c4cac26a3e52d82f67deebf8ae2da235e79f53db28383caed8945af7e44ba0b",
    "transactionHash": "0x24934e7474db60c623044bc974f4a31eb2c612e641bf7f5eb7d0b572f5a28642",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27738544,
        "transactionHash": "0x24934e7474db60c623044bc974f4a31eb2c612e641bf7f5eb7d0b572f5a28642",
        "address": "0xA4d06c6FF8A3dE930301D6a0F2B95f28B852451F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3de96858fd006fd978ea2d55efe6b125012f485"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5c4cac26a3e52d82f67deebf8ae2da235e79f53db28383caed8945af7e44ba0b"
      }
    ],
    "blockNumber": 27738544,
    "cumulativeGasUsed": "582580",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Locker List Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUsers(uint256,uint256)\":{\"notice\":\"Return the list of users.\"},\"lockersCount()\":{\"notice\":\"Return the number of users.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/LockerList.sol\":\"LockerList\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xdf8525cd148276c372bf07a4b90630053d76c7a52649c7740df86a1a1a75cc7a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x0b0ab32430f6def166e85816b37c61c175168c96519305001b5a209cfb5856dd\",\"license\":\"MIT\"},\"contracts/libraries/AddressPagination.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nlibrary AddressPagination {\\n    function paginate(\\n        address[] memory array,\\n        uint256 page,\\n        uint256 limit\\n    ) internal pure returns (address[] memory result) {\\n        result = new address[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            if (page * limit + i >= array.length) {\\n                result[i] = address(0);\\n            } else {\\n                result[i] = array[page * limit + i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1f2a7a4603e9515cb037ff82af3a6698d0e8da638a0adb9bbde44811bb49f8a\",\"license\":\"MIT\"},\"contracts/staking/LockerList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/AddressPagination.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/Ownable.sol\\\";\\n\\n\\n/// @title Locker List Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract LockerList is Ownable {\\n    using AddressPagination for address[];\\n\\n    // Users list\\n    address[] internal userlist;\\n    mapping(address => uint256) internal indexOf;\\n    mapping(address => bool) internal inserted;\\n\\n    /********************** Events ***********************/\\n\\n    event LockerAdded(address indexed locker);\\n    event LockerRemoved(address indexed locker);\\n\\n    /**\\n     * @dev Constructor\\n     */\\n    constructor() Ownable() {}\\n\\n    /********************** Lockers list ***********************/\\n    /**\\n     * @notice Return the number of users.\\n     */\\n    function lockersCount() external view returns (uint256) {\\n        return userlist.length;\\n    }\\n\\n    /**\\n     * @notice Return the list of users.\\n     */\\n    function getUsers(uint256 page, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return userlist.paginate(page, limit);\\n    }\\n\\n    function addToList(address user) external onlyOwner {\\n        if (inserted[user] == false) {\\n            inserted[user] = true;\\n            indexOf[user] = userlist.length;\\n            userlist.push(user);\\n        }\\n\\n        emit LockerAdded(user);\\n    }\\n\\n    function removeFromList(address user) external onlyOwner {\\n        assert(inserted[user] == true);\\n\\n        delete inserted[user];\\n\\n        uint256 index = indexOf[user];\\n        uint256 lastIndex = userlist.length - 1;\\n        address lastUser = userlist[lastIndex];\\n\\n        indexOf[lastUser] = index;\\n        delete indexOf[user];\\n\\n        userlist[index] = lastUser;\\n        userlist.pop();\\n\\n        emit LockerRemoved(user);\\n    }\\n}\\n\",\"keccak256\":\"0xd09f385f589f03c73c3b4e33462340e35576da6964e62d31fa0435669b396541\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6108018061007d6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c8063257f9abf1461007257806345982a6614610087578063715018a6146100b05780638da5cb5b146100b857806396fad1e8146100cd578063bd659784146100e2578063f2fde38b146100f5575b600080fd5b6100856100803660046106b3565b610108565b005b61009a6100953660046106da565b6102a7565b6040516100a7919061070f565b60405180910390f35b61008561031f565b6100c06103af565b6040516100a791906106fb565b6100d56103be565b6040516100a7919061075c565b6100856100f03660046106b3565b6103c4565b6100856101033660046106b3565b6104e5565b6101106105cb565b6000546001600160a01b03908116911614610160576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff16151560011461018757fe5b6001600160a01b0381166000908152600360209081526040808320805460ff191690556002909152812054600180549192600019830192909190839081106101cb57fe5b60009182526020808320909101546001600160a01b039081168084526002909252604080842087905590871683528220919091556001805491925082918590811061021257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600180548061024b57fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038616917f95266445d018e5b30f957c915e91b04bb4a19bf0f8f21020a08dad9be7931df491a250505050565b60606103188383600180548060200260200160405190810160405280929190818152602001828054801561030457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102e6575b50505050506105cf9092919063ffffffff16565b9392505050565b6103276105cb565b6000546001600160a01b03908116911614610377576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116906000805160206107ac833981519152908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60015490565b6103cc6105cb565b6000546001600160a01b0390811691161461041c576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff166104ae576001600160a01b0381166000818152600360209081526040808320805460ff191660019081179091558054600290935290832082905581810181559091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03191690911790555b6040516001600160a01b038216907f7c5af8d36d8be103bc583da8e01d3e98f15216cc7ef38832c7550b34e8feb43a90600090a250565b6104ed6105cb565b6000546001600160a01b0390811691161461053d576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b0381166105825760405162461bcd60e51b81526004018080602001828103825260268152602001806107666026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206107ac83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6060816001600160401b03811180156105e757600080fd5b50604051908082528060200260200182016040528015610611578160200160208202803683370190505b50905060005b828110156106ab57845181848602011061065e57600082828151811061063957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506106a3565b8481848602018151811061066e57fe5b602002602001015182828151811061068257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b600101610617565b509392505050565b6000602082840312156106c4578081fd5b81356001600160a01b0381168114610318578182fd5b600080604083850312156106ec578081fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156107505783516001600160a01b03168352928401929184019160010161072b565b50909695505050505050565b9081526020019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220c95eb10cb9eb5a389d8ac9c1f01655ded19fa395dd472cdea3fb9e03d3aa216064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c8063257f9abf1461007257806345982a6614610087578063715018a6146100b05780638da5cb5b146100b857806396fad1e8146100cd578063bd659784146100e2578063f2fde38b146100f5575b600080fd5b6100856100803660046106b3565b610108565b005b61009a6100953660046106da565b6102a7565b6040516100a7919061070f565b60405180910390f35b61008561031f565b6100c06103af565b6040516100a791906106fb565b6100d56103be565b6040516100a7919061075c565b6100856100f03660046106b3565b6103c4565b6100856101033660046106b3565b6104e5565b6101106105cb565b6000546001600160a01b03908116911614610160576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff16151560011461018757fe5b6001600160a01b0381166000908152600360209081526040808320805460ff191690556002909152812054600180549192600019830192909190839081106101cb57fe5b60009182526020808320909101546001600160a01b039081168084526002909252604080842087905590871683528220919091556001805491925082918590811061021257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600180548061024b57fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038616917f95266445d018e5b30f957c915e91b04bb4a19bf0f8f21020a08dad9be7931df491a250505050565b60606103188383600180548060200260200160405190810160405280929190818152602001828054801561030457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102e6575b50505050506105cf9092919063ffffffff16565b9392505050565b6103276105cb565b6000546001600160a01b03908116911614610377576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116906000805160206107ac833981519152908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60015490565b6103cc6105cb565b6000546001600160a01b0390811691161461041c576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526003602052604090205460ff166104ae576001600160a01b0381166000818152600360209081526040808320805460ff191660019081179091558054600290935290832082905581810181559091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03191690911790555b6040516001600160a01b038216907f7c5af8d36d8be103bc583da8e01d3e98f15216cc7ef38832c7550b34e8feb43a90600090a250565b6104ed6105cb565b6000546001600160a01b0390811691161461053d576040805162461bcd60e51b8152602060048201819052602482015260008051602061078c833981519152604482015290519081900360640190fd5b6001600160a01b0381166105825760405162461bcd60e51b81526004018080602001828103825260268152602001806107666026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206107ac83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6060816001600160401b03811180156105e757600080fd5b50604051908082528060200260200182016040528015610611578160200160208202803683370190505b50905060005b828110156106ab57845181848602011061065e57600082828151811061063957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506106a3565b8481848602018151811061066e57fe5b602002602001015182828151811061068257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b600101610617565b509392505050565b6000602082840312156106c4578081fd5b81356001600160a01b0381168114610318578182fd5b600080604083850312156106ec578081fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156107505783516001600160a01b03168352928401929184019160010161072b565b50909695505050505050565b9081526020019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220c95eb10cb9eb5a389d8ac9c1f01655ded19fa395dd472cdea3fb9e03d3aa216064736f6c63430007060033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Locker List Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUsers(uint256,uint256)": {
        "notice": "Return the list of users."
      },
      "lockersCount()": {
        "notice": "Return the number of users."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5437,
        "contract": "contracts/staking/LockerList.sol:LockerList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 40127,
        "contract": "contracts/staking/LockerList.sol:LockerList",
        "label": "userlist",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 40131,
        "contract": "contracts/staking/LockerList.sol:LockerList",
        "label": "indexOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40135,
        "contract": "contracts/staking/LockerList.sol:LockerList",
        "label": "inserted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}