{
  "address": "0x260Bc0d901185acC772a26a65ef8C30A939427b7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "BalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "ChefReserveEmpty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "ChefReserveLow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsRemoved",
          "type": "uint256"
        }
      ],
      "name": "Disqualified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "startTimeOffsets",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardsPerSeconds",
          "type": "uint256[]"
        }
      ],
      "name": "EmissionScheduleAppended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardsPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "persist",
          "type": "bool"
        }
      ],
      "name": "RewardsPerSecondUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ELIGIBILITY_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "afterLockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "allPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocPoints",
          "type": "uint256[]"
        }
      ],
      "name": "batchUpdateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "beforeLockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "bountyForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bountyAmt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "issueBaseBounty",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claimToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastEligibleTime",
          "type": "uint256"
        }
      ],
      "name": "earnedSince",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earnedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eligibilityExempt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDataProvider",
      "outputs": [
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emissionSchedule",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "startTimeOffset",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardsPerSecond",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionScheduleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "handleActionAfter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "handleActionBefore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolConfigurator",
          "type": "address"
        },
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "_eligibleDataProvider",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_rewardMinter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAllPoolUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "persistRewardsPerSecond",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolConfigurator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "onwardIncentives",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "registerRewardDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMinter",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "saveUserRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bountyManager",
          "type": "address"
        }
      ],
      "name": "setBountyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newVal",
          "type": "bool"
        }
      ],
      "name": "setEligibilityEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setEligibilityExempt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_startTimeOffsets",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardsPerSecond",
          "type": "uint256[]"
        }
      ],
      "name": "setEmissionSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentives",
          "type": "address"
        }
      ],
      "name": "setOnwardIncentives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_persist",
          "type": "bool"
        }
      ],
      "name": "setRewardsPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBaseClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enterTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10ad9e8af1eb9f5df4248b2272433fe1475bbf622d81089ede9fa1f97443fb10",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x260Bc0d901185acC772a26a65ef8C30A939427b7",
    "transactionIndex": 9,
    "gasUsed": "4006198",
    "logsBloom": "0x
    "blockHash": "0x5a09576924cd5983ecf5d693357910963f261b18f438c1580fedec9bf6e3438e",
    "transactionHash": "0x10ad9e8af1eb9f5df4248b2272433fe1475bbf622d81089ede9fa1f97443fb10",
    "logs": [],
    "blockNumber": 27738594,
    "cumulativeGasUsed": "4227112",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChefReserveEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChefReserveLow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsRemoved\",\"type\":\"uint256\"}],\"name\":\"Disqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startTimeOffsets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSeconds\",\"type\":\"uint256[]\"}],\"name\":\"EmissionScheduleAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"persist\",\"type\":\"bool\"}],\"name\":\"RewardsPerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ELIGIBILITY_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"afterLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"beforeLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"bountyForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastEligibleTime\",\"type\":\"uint256\"}],\"name\":\"earnedSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibilityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDataProvider\",\"outputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startTimeOffset\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsPerSecond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"handleActionAfter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleActionBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"},{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"_eligibleDataProvider\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_rewardMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAllPoolUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"persistRewardsPerSecond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"onwardIncentives\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registerRewardDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinter\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"saveUserRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newVal\",\"type\":\"bool\"}],\"name\":\"setEligibilityEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setEligibilityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_startTimeOffsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"setEmissionSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"setOnwardIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_persist\",\"type\":\"bool\"}],\"name\":\"setRewardsPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBaseClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"afterLockUpdate(address)\":{\"details\":\"Called by the locking contracts after locking or unlocking happens\"},\"beforeLockUpdate(address)\":{\"details\":\"Called by the locking contracts before locking or unlocking happens\"},\"claimToBase(address,address[])\":{\"details\":\"Rewards are not transferred, just converted into base claimable.\"},\"handleActionAfter(address,uint256,uint256)\":{\"details\":\"important! eligible status can be updated here\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setRewardsPerSecond(uint256,bool)\":{\"details\":\"Its decimals count is ACC_REWARD_PRECISION\",\"params\":{\"_rewardsPerSecond\":\"The amount of reward to be distributed per second.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"afterLockUpdate(address)\":{\"notice\":\"Hook for lock update.\"},\"beforeLockUpdate(address)\":{\"notice\":\"Hook for lock update.\"},\"claimToBase(address,address[])\":{\"notice\":\"Claim pending rewards for one or more pools into base claimable.\"},\"handleActionAfter(address,uint256,uint256)\":{\"notice\":\"`after` Hook for deposit and borrow update.\"},\"handleActionBefore(address)\":{\"notice\":\"`before` Hook for deposit and borrow update.\"},\"setRewardsPerSecond(uint256,bool)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/ChefIncentivesController.sol\":\"ChefIncentivesController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1df359538876049d223fdcb393d0adda56f81763b9ac627e69aca4577a6c1baf\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x0b16a215990b3611c5c352eb914d8320a26f7149d8dcc007b97b40bd4e403565\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xa5f6f100094fd6a02b3f012d94b8bd2cdabb8a5d3d77ba052c4ef965d57684b2\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    \\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n   \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    \\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdaf9847b1b084c0bfc20081e03cc924cc35ca524067067572c475227a6667297\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6c1d4d78f280a84374787cf607a31f56a3428c1a15ae05b08c7e68ee854bb7ec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7887b4b7a2d2907d6f35e84e55e632a6c391d17a345fd47c1cd9f11f04fb30de\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   **/\\n  function handleActionBefore(\\n    address user\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleActionAfter(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8331ccb3d25d999a00e624a2c91988b422af47c9a94a3c3e0e049116e9b52ac9\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBounty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IBounty {\\n    function quote(address _param) external returns (uint256 bounty);\\n    function claim(address _param) external returns(uint256 bounty);\\n    function minDLPBalance() external view returns (uint256 minDLPBalance);\\n    function onRelockUpdate(address _user, bool oldStatus, bool newStatus) external;\\n}\",\"keccak256\":\"0x0a9a6040bb06c8a2eb44c46161319bbaf9dd7e4d93892fa8c1c69c394f6ff871\",\"license\":\"MIT\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n    function refresh(address user) external;\\n\\n    function updatePrice() external;\\n\\n    function requiredEthValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function isEligibleForRewards(address _user)\\n        external\\n        view\\n        returns (bool isEligible);\\n\\n    function lastEligibleTime(address user)\\n        external\\n        view\\n        returns (uint256 lastEligibleTimestamp);\\n\\n    function lockedUsdValue(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requiredUsdValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function lastEligibleStatus(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isMarketDisqualified(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function rewardEligibleAmount(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setDqTime(address _user, uint256 _time) external;\\n    function getDqTime(address _user) external view returns (uint256);\\n    function autoprune() external returns (uint256 processed);\\n    function requiredDepositRatio() external view returns (uint256);\\n    function RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53c7626d11338cffeae8336da94c99dd1894f6838be238e3487205200f4e54ff\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n    function addReward(address rewardsToken) external;\\n    function lockedBalances(address user) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\",\"keccak256\":\"0x34593f732405652613fca6e84a22485acd7851b2a5dcb045773abcb6c512bc24\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x29f3fc61ab3d5a38972809501aba613b89bf2355049a9e59dee3b2d3c89d13b0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositWithAutoDLP(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7394d2e721bb4b2e25c3bf1fddce39667911de9d9db87176548a99c4aeced76b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n\\n  function getLiquidationFeeTo() external view returns (address);\\n\\n  function setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x106ef9420d874acfc948c140b0b4ffff258a8fa664febf805c686fdbff278f62\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n    function forwardReward(address[] memory _rewardTokens) external;\\n    function getMFDstatsAddress () external view returns (address);\\n    function lpLockingRewardRatio () external view returns (uint256);\\n    function getRdntTokenAddress () external view returns (address);\\n    function getLPFeeDistributionAddress () external view returns (address);\\n    function getMultiFeeDistributionAddress () external view returns (address);\\n    function operationExpenseRatio () external view returns (uint256);\\n    function operationExpenses () external view returns (address);\\n    function isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7cd6c42e2cca557d1f47ec97384758c3a751bc48c660938c0f4e2792d4a834e\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n    function exit(bool claimRewards) external;\\n    function stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n    function lockInfo(address user) external view returns (LockedBalance[] memory);\\n    function defaultLockIndex(address _user) external view returns (uint256);\\n    function autoRelockDisabled(address user) external view returns (bool);\\n    function totalBalance(address user) external view returns (uint256);\\n    function zapVestingToLp (address _address) external returns (uint256);\\n    function withdrawExpiredLocksFor(address _address) external returns (uint256);\\n    function claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n    function setDefaultRelockTypeIndex(uint256 _index) external;\\n    function daoTreasury() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n    function getLastClaimTime(address _user) external returns (uint256);\\n    function claimFromConverter(address) external;\\n    function bountyForUser(address _user) external view returns (IFeeDistribution.RewardData[] memory bounties);\\n    function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool issueBaseBounty);\\n    function claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n    function setAutocompound(bool _newVal) external;\\n    function getAutocompoundEnabled(address _user) external view returns(bool);\\n}\",\"keccak256\":\"0x7c16c4e91f717ca13a58bde2ff298128b315d6eaa60571b87926c78b328861b0\",\"license\":\"MIT\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IOnwardIncentivesController {\\n    function handleAction(\\n        address _token,\\n        address _user,\\n        uint256 _balance,\\n        uint256 _totalSupply\\n    ) external;\\n}\\n\",\"keccak256\":\"0x445cd020cce4f84f889164bcaa87ab6b67c675fc14569590bcf83daea6528352\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09ce61e28962584d42a99b05380b629c8a696b1cd5f987837a51740457070922\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 multiplier;\\n    uint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 penalty;\\n}\",\"keccak256\":\"0x6511a1c116bd568dba24edd6d70b0a927bb249e499cbf29305803ed27e78055a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4542e2cf81b3cbcda615ef4960a53dc09094e975649b40bc70274f6592975648\",\"license\":\"agpl-3.0\"},\"contracts/staking/ChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IEligibilityDataProvider.sol\\\";\\nimport \\\"../interfaces/IOnwardIncentivesController.sol\\\";\\nimport \\\"../interfaces/IAToken.sol\\\";\\nimport \\\"../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IBounty.sol\\\";\\n\\nimport \\\"../dependencies/openzeppelin/contracts/SafeMath.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\\\";\\n\\n// based on the Sushi MasterChef\\n// https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\ncontract ChefIncentivesController is\\n    Initializable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    // reward = user.`amount` * pool.`accRewardPerShare` - `rewardDebt`\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 enterTime;\\n        uint256 lastClaimTime;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 totalSupply;\\n        uint256 allocPoint; // How many allocation points assigned to this pool.\\n        uint256 lastRewardTime; // Last second that reward distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated rewards per share, times ACC_REWARD_PRECISION. See below.\\n        IOnwardIncentivesController onwardIncentives;\\n    }\\n\\n    // Info about token emissions for a given time period.\\n    struct EmissionPoint {\\n        uint128 startTimeOffset;\\n        uint128 rewardsPerSecond;\\n    }\\n\\n    // Emitted when rewardPerSecond is updated\\n    event RewardsPerSecondUpdated(\\n        uint256 indexed rewardsPerSecond,\\n        bool persist\\n    );\\n\\n    event BalanceUpdated(\\n        address indexed token,\\n        address indexed user,\\n        uint256 balance,\\n        uint256 totalSupply\\n    );\\n\\n    event EmissionScheduleAppended(\\n        uint256[] startTimeOffsets,\\n        uint256[] rewardsPerSeconds\\n    );\\n\\n    event ChefReserveLow(uint256 _balance);\\n\\n    event ChefReserveEmpty(uint256 _balance);\\n\\n    event Disqualified(address indexed user, uint256 rewardsRemoved);\\n\\n    // multiplier for reward calc\\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n    // Data about the future reward rates. emissionSchedule stored in chronological order,\\n    // whenever the number of blocks since the start block exceeds the next block offset a new\\n    // reward rate is applied.\\n    EmissionPoint[] public emissionSchedule;\\n\\n    // If true, keep this new reward rate indefinitely\\n    // If false, keep this reward rate until the next scheduled block offset, then return to the schedule.\\n    bool public persistRewardsPerSecond;\\n\\n    /********************** Emission Info ***********************/\\n\\n    // Array of tokens for reward\\n    address[] public registeredTokens;\\n\\n    // Current reward per second\\n    uint256 public rewardsPerSecond;\\n\\n    // last RPS, used during refill after reserve empty\\n    uint256 public lastRPS;\\n\\n    // Index in emission schedule which the last rewardsPerSeconds was used\\n    // only used for scheduled rewards\\n    uint256 public emissionScheduleIndex;\\n\\n    // Info of each pool.\\n    mapping(address => PoolInfo) public poolInfo;\\n    mapping(address => bool) private validRTokens;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    // token => user => Info of each user that stakes LP tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    // user => base claimable balance\\n    mapping(address => uint256) public userBaseClaimable;\\n\\n    // MFD, LPMFD, bounties, AC, middlefee\\n    mapping(address => bool) public eligibilityExempt;\\n\\n    // The block number when reward mining starts.\\n    uint256 public startTime;\\n\\n    bool public ELIGIBILITY_ENABLED;\\n\\n    address public poolConfigurator;\\n    uint256 public depositedRewards;\\n    uint256 public accountedRewards;\\n    uint256 public lastAllPoolUpdate;\\n\\n    IMiddleFeeDistribution public rewardMinter;\\n    IEligibilityDataProvider public eligibleDataProvider;\\n    address public bountyManager;\\n\\n    function initialize(\\n        address _poolConfigurator,\\n        IEligibilityDataProvider _eligibleDataProvider,\\n        IMiddleFeeDistribution _rewardMinter,\\n        uint256 _rewardsPerSecond\\n    ) public initializer {\\n        require(address(_poolConfigurator) != address(0));\\n        require(address(_eligibleDataProvider) != address(0));\\n        require(address(_rewardMinter) != address(0));\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        poolConfigurator = _poolConfigurator;\\n        eligibleDataProvider = _eligibleDataProvider;\\n        rewardMinter = _rewardMinter;\\n        rewardsPerSecond = _rewardsPerSecond;\\n        persistRewardsPerSecond = true;\\n\\n        ELIGIBILITY_ENABLED = true;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return registeredTokens.length;\\n    }\\n\\n    function _getMfd() internal view returns (IMultiFeeDistribution mfd) {\\n        address multiFeeDistribution = rewardMinter\\n            .getMultiFeeDistributionAddress();\\n        mfd = IMultiFeeDistribution(multiFeeDistribution);\\n    }\\n\\n    function _getLpMfd() internal view returns (IMultiFeeDistribution mfd) {\\n        address multiFeeDistribution = rewardMinter\\n            .getLPFeeDistributionAddress();\\n        mfd = IMultiFeeDistribution(multiFeeDistribution);\\n    }\\n\\n    function setOnwardIncentives(\\n        address _token,\\n        IOnwardIncentivesController _incentives\\n    ) external onlyOwner {\\n        require(poolInfo[_token].lastRewardTime != 0, \\\"pool doesn't exist\\\");\\n        poolInfo[_token].onwardIncentives = _incentives;\\n    }\\n\\n    function setBountyManager(address _bountyManager) external onlyOwner {\\n        bountyManager = _bountyManager;\\n    }\\n\\n    function setEligibilityEnabled(bool _newVal) external onlyOwner {\\n        ELIGIBILITY_ENABLED = _newVal;\\n    }\\n\\n    /********************** Pool Setup + Admin ***********************/\\n\\n    function start() public onlyOwner {\\n        require(startTime == 0, \\\"already started\\\");\\n        startTime = block.timestamp;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the poolConfigurator.\\n    function addPool(address _token, uint256 _allocPoint) external {\\n        require(msg.sender == poolConfigurator, \\\"not allowed\\\");\\n        require(poolInfo[_token].lastRewardTime == 0, \\\"pool already exists\\\");\\n        _updateEmissions();\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        registeredTokens.push(_token);\\n        poolInfo[_token] = PoolInfo({\\n            totalSupply: 0,\\n            allocPoint: _allocPoint,\\n            lastRewardTime: block.timestamp,\\n            accRewardPerShare: 0,\\n            onwardIncentives: IOnwardIncentivesController(0)\\n        });\\n        validRTokens[_token] = true;\\n    }\\n\\n    // Update the given pool's allocation point. Can only be called by the owner.\\n    function batchUpdateAllocPoint(\\n        address[] calldata _tokens,\\n        uint256[] calldata _allocPoints\\n    ) public onlyOwner {\\n        require(\\n            _tokens.length == _allocPoints.length,\\n            \\\"params length mismatch\\\"\\n        );\\n        _massUpdatePools();\\n        uint256 _totalAllocPoint = totalAllocPoint;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            PoolInfo storage pool = poolInfo[_tokens[i]];\\n            require(pool.lastRewardTime > 0, \\\"pool doesn't exist\\\");\\n            _totalAllocPoint = _totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoints[i]\\n            );\\n            pool.allocPoint = _allocPoints[i];\\n        }\\n        totalAllocPoint = _totalAllocPoint;\\n    }\\n\\n    /**\\n     * @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n     * @dev Its decimals count is ACC_REWARD_PRECISION\\n     * @param _rewardsPerSecond The amount of reward to be distributed per second.\\n     */\\n    function setRewardsPerSecond(uint256 _rewardsPerSecond, bool _persist)\\n        external\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n        rewardsPerSecond = _rewardsPerSecond;\\n        persistRewardsPerSecond = _persist;\\n        emit RewardsPerSecondUpdated(_rewardsPerSecond, _persist);\\n    }\\n\\n    function setScheduledRewardsPerSecond() internal {\\n        if (!persistRewardsPerSecond) {\\n            uint256 length = emissionSchedule.length;\\n            uint256 i = emissionScheduleIndex;\\n            uint128 offset = uint128(block.timestamp.sub(startTime));\\n            for (\\n                ;\\n                i < length && offset >= emissionSchedule[i].startTimeOffset;\\n                i++\\n            ) {}\\n            if (i > emissionScheduleIndex) {\\n                emissionScheduleIndex = i;\\n                _massUpdatePools();\\n                rewardsPerSecond = uint256(\\n                    emissionSchedule[i - 1].rewardsPerSecond\\n                );\\n            }\\n        }\\n    }\\n\\n    function setEmissionSchedule(\\n        uint256[] calldata _startTimeOffsets,\\n        uint256[] calldata _rewardsPerSecond\\n    ) external onlyOwner {\\n        uint256 length = _startTimeOffsets.length;\\n        require(\\n            length > 0 && length == _rewardsPerSecond.length,\\n            \\\"empty or mismatch params\\\"\\n        );\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            require(\\n                _startTimeOffsets[i] <= type(uint128).max,\\n                \\\"startTimeOffsets > max uint128\\\"\\n            );\\n            require(\\n                _rewardsPerSecond[i] <= type(uint128).max,\\n                \\\"rewardsPerSecond > max uint128\\\"\\n            );\\n\\n            if (startTime > 0) {\\n                require(\\n                    _startTimeOffsets[i] > block.timestamp.sub(startTime),\\n                    \\\"invalid start time\\\"\\n                );\\n            }\\n            emissionSchedule.push(\\n                EmissionPoint({\\n                    startTimeOffset: uint128(_startTimeOffsets[i]),\\n                    rewardsPerSecond: uint128(_rewardsPerSecond[i])\\n                })\\n            );\\n        }\\n        emit EmissionScheduleAppended(_startTimeOffsets, _rewardsPerSecond);\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    }\\n\\n    /********************** Pool State Changers ***********************/\\n\\n    function _updateEmissions() internal {\\n        if (block.timestamp > endRewardTime()) {\\n            _massUpdatePools();\\n            lastRPS = rewardsPerSecond;\\n            rewardsPerSecond = 0;\\n            return;\\n        }\\n        setScheduledRewardsPerSecond();\\n    }\\n\\n    // Update reward variables for all pools\\n    function _massUpdatePools() internal {\\n        uint256 totalAP = totalAllocPoint;\\n        uint256 length = registeredTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            _updatePool(poolInfo[registeredTokens[i]], totalAP);\\n        }\\n        lastAllPoolUpdate = block.timestamp;\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(PoolInfo storage pool, uint256 _totalAllocPoint)\\n        internal\\n    {\\n        uint256 timestamp = block.timestamp;\\n        if (endRewardTime() <= block.timestamp) {\\n            timestamp = endRewardTime();\\n        }\\n        if (timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalSupply;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTime = timestamp;\\n            return;\\n        }\\n\\n        uint256 duration = timestamp.sub(pool.lastRewardTime);\\n        uint256 rawReward = duration.mul(rewardsPerSecond);\\n        if (availableRewards() < rawReward) {\\n            rawReward = availableRewards();\\n        }\\n        uint256 reward = rawReward.mul(pool.allocPoint).div(_totalAllocPoint);\\n        accountedRewards = accountedRewards.add(reward);\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\\n            reward.mul(ACC_REWARD_PRECISION).div(lpSupply)\\n        );\\n        pool.lastRewardTime = timestamp;\\n    }\\n\\n    /********************** Emission Calc + Transfer ***********************/\\n\\n    function pendingRewards(address _user, address[] memory _tokens)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory claimable = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            PoolInfo storage pool = poolInfo[token];\\n            UserInfo storage user = userInfo[token][_user];\\n            uint256 accRewardPerShare = pool.accRewardPerShare;\\n            uint256 lpSupply = pool.totalSupply;\\n            if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n                uint256 duration = block.timestamp.sub(pool.lastRewardTime);\\n                uint256 reward = duration\\n                    .mul(rewardsPerSecond)\\n                    .mul(pool.allocPoint)\\n                    .div(totalAllocPoint);\\n                accRewardPerShare = accRewardPerShare.add(\\n                    reward.mul(ACC_REWARD_PRECISION).div(lpSupply)\\n                );\\n            }\\n            claimable[i] = user\\n                .amount\\n                .mul(accRewardPerShare)\\n                .div(ACC_REWARD_PRECISION)\\n                .sub(user.rewardDebt);\\n        }\\n        return claimable;\\n    }\\n\\n    // Claim pending rewards for one or more pools.\\n    // Rewards are not received directly, they are minted by the rewardMinter.\\n    function claim(address _user, address[] memory _tokens) public {\\n        if (ELIGIBILITY_ENABLED) {\\n            checkAndProcessEligibility(_user);\\n        }\\n\\n        _updateEmissions();\\n\\n        uint256 pending = userBaseClaimable[_user];\\n        userBaseClaimable[_user] = 0;\\n        uint256 _totalAllocPoint = totalAllocPoint;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(validRTokens[_tokens[i]]);\\n            PoolInfo storage pool = poolInfo[_tokens[i]];\\n            require(pool.lastRewardTime > 0, \\\"pool doesn't exist\\\");\\n            _updatePool(pool, _totalAllocPoint);\\n            UserInfo storage user = userInfo[_tokens[i]][_user];\\n            uint256 rewardDebt = user.amount.mul(pool.accRewardPerShare).div(\\n                ACC_REWARD_PRECISION\\n            );\\n            pending = pending.add(rewardDebt.sub(user.rewardDebt));\\n            user.rewardDebt = rewardDebt;\\n            user.lastClaimTime = block.timestamp;\\n        }\\n\\n        _mint(_user, pending);\\n\\n        if (endRewardTime() < block.timestamp + 5 days) {\\n            _emitReserveLow();\\n        }\\n    }\\n\\n    function _emitReserveLow() internal {\\n        address rdntToken = rewardMinter.getRdntTokenAddress();\\n        emit ChefReserveLow(IERC20(rdntToken).balanceOf(address(this)));\\n    }\\n\\n    function _mint(address _user, uint256 _amount) internal {\\n        _amount = _sendRadiant(address(_getMfd()), _amount);\\n        _getMfd().mint(_user, _amount, true);\\n    }\\n\\n    function setEligibilityExempt(address _contract) public onlyOwner {\\n        eligibilityExempt[_contract] = true;\\n    }\\n\\n    /********************** Eligibility + Disqualification ***********************/\\n\\n    /**\\n     * @notice `after` Hook for deposit and borrow update.\\n     * @dev important! eligible status can be updated here\\n     */\\n    function handleActionAfter(\\n        address _user,\\n        uint256 _balance,\\n        uint256 _totalSupply\\n    ) external {\\n        require(\\n            validRTokens[msg.sender] || msg.sender == address(_getLpMfd()),\\n            \\\"!rToken || lpmfd\\\"\\n        );\\n\\n        if (\\n            _user == address(rewardMinter) ||\\n            _user == address(_getMfd()) ||\\n            _user == address(_getLpMfd()) ||\\n            eligibilityExempt[_user]\\n        ) {\\n            return;\\n        }\\n        if (ELIGIBILITY_ENABLED) {\\n            eligibleDataProvider.refresh(_user);\\n            if (eligibleDataProvider.isEligibleForRewards(_user)) {\\n                _handleActionAfterForToken(\\n                    msg.sender,\\n                    _user,\\n                    _balance,\\n                    _totalSupply\\n                );\\n            } else {\\n                checkAndProcessEligibility(_user);\\n            }\\n        } else {\\n            _handleActionAfterForToken(\\n                msg.sender,\\n                _user,\\n                _balance,\\n                _totalSupply\\n            );\\n        }\\n    }\\n\\n    function _handleActionAfterForToken(\\n        address _token,\\n        address _user,\\n        uint256 _balance,\\n        uint256 _totalSupply\\n    ) internal {\\n        PoolInfo storage pool = poolInfo[_token];\\n        require(pool.lastRewardTime > 0, \\\"pool doesn't exist\\\");\\n        _updateEmissions();\\n        _updatePool(pool, totalAllocPoint);\\n        UserInfo storage user = userInfo[_token][_user];\\n        uint256 amount = user.amount;\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        if (amount != 0) {\\n            uint256 pending = amount\\n                .mul(accRewardPerShare)\\n                .div(ACC_REWARD_PRECISION)\\n                .sub(user.rewardDebt);\\n            if (pending != 0) {\\n                userBaseClaimable[_user] = userBaseClaimable[_user].add(\\n                    pending\\n                );\\n            }\\n        }\\n        pool.totalSupply = pool.totalSupply.sub(user.amount);\\n        user.amount = _balance;\\n        user.rewardDebt = _balance.mul(accRewardPerShare).div(\\n            ACC_REWARD_PRECISION\\n        );\\n        if (user.amount > 0) {\\n            user.enterTime = block.timestamp;\\n        }\\n        pool.totalSupply = pool.totalSupply.add(_balance);\\n        if (pool.onwardIncentives != IOnwardIncentivesController(0)) {\\n            pool.onwardIncentives.handleAction(\\n                _token,\\n                _user,\\n                _balance,\\n                _totalSupply\\n            );\\n        }\\n\\n        emit BalanceUpdated(_token, _user, _balance, _totalSupply);\\n    }\\n\\n    /**\\n     * @notice `before` Hook for deposit and borrow update.\\n     */\\n    function handleActionBefore(address _user) external {}\\n\\n    /**\\n     * @notice Hook for lock update.\\n     * @dev Called by the locking contracts before locking or unlocking happens\\n     */\\n    function beforeLockUpdate(address _user) external {\\n        require(\\n            msg.sender == address(_getLpMfd()) ||\\n                msg.sender == address(_getMfd())\\n        );\\n        if (ELIGIBILITY_ENABLED) {\\n            uint256 userBounty = bountyForUser(_user);\\n            bool isRelock = !_getLpMfd().autoRelockDisabled(_user);\\n            if (userBounty != 0 && !isRelock) {\\n                checkAndProcessEligibility(_user);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Hook for lock update.\\n     * @dev Called by the locking contracts after locking or unlocking happens\\n     */\\n    function afterLockUpdate(address _user) external {\\n        require(\\n            msg.sender == address(_getLpMfd()) ||\\n                msg.sender == address(_getMfd()),\\n            \\\"!lpMFD || !MFD\\\"\\n        );\\n\\n        if (ELIGIBILITY_ENABLED) {\\n            eligibleDataProvider.updatePrice();\\n            if (eligibleDataProvider.isEligibleForRewards(_user)) {\\n                for (uint256 i = 0; i < registeredTokens.length; i++) {\\n                    uint256 newBal = IERC20(registeredTokens[i]).balanceOf(\\n                        _user\\n                    );\\n                    if (newBal != 0) {\\n                        _handleActionAfterForToken(\\n                            registeredTokens[i],\\n                            _user,\\n                            newBal,\\n                            poolInfo[registeredTokens[i]]\\n                                .totalSupply\\n                                .add(newBal)\\n                                .sub(\\n                                    userInfo[registeredTokens[i]][_user].amount\\n                                )\\n                        );\\n                    }\\n                }\\n            }\\n            eligibleDataProvider.refresh(_user);\\n        }\\n    }\\n\\n    /********************** Eligibility + Disqualification ***********************/\\n\\n    function earnedSince(address _user, uint256 lastEligibleTime)\\n        public\\n        view\\n        returns (uint256 earnedAmount)\\n    {\\n        if (\\n            !ELIGIBILITY_ENABLED ||\\n            eligibleDataProvider.isEligibleForRewards(_user)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 ineligibleDuration;\\n        if (lastEligibleTime < block.timestamp) {\\n            ineligibleDuration = block.timestamp.sub(lastEligibleTime);\\n        }\\n\\n        uint256[] memory claimable = pendingRewards(_user, registeredTokens);\\n        for (uint256 i = 0; i < claimable.length; i++) {\\n            UserInfo storage user = userInfo[registeredTokens[i]][_user];\\n            uint256 referenceTime;\\n\\n            if (user.lastClaimTime > user.enterTime) {\\n                referenceTime = user.lastClaimTime;\\n            } else {\\n                referenceTime = user.enterTime;\\n            }\\n\\n            uint256 referenceDuration = block.timestamp - referenceTime;\\n            if (referenceDuration > 0) {\\n                uint256 rps = claimable[i].div(referenceDuration);\\n                uint256 ineligAmt = ineligibleDuration.mul(rps);\\n                if (ineligAmt > claimable[i]) {\\n                    ineligAmt = claimable[i];\\n                }\\n                earnedAmount = earnedAmount.add(ineligAmt);\\n            }\\n        }\\n    }\\n\\n    function bountyForUser(address _user) public view returns (uint256 bounty) {\\n        bounty = earnedSince(\\n            _user,\\n            eligibleDataProvider.lastEligibleTime(_user)\\n        );\\n    }\\n\\n    function harvestIneligible(address _target, uint256 _bounty)\\n        internal\\n        returns (uint256)\\n    {\\n        require(ELIGIBILITY_ENABLED, \\\"!EE\\\");\\n        claimToBase(_target, registeredTokens);\\n        if (_bounty < userBaseClaimable[_target]) {\\n            userBaseClaimable[_target] = userBaseClaimable[_target].sub(\\n                _bounty\\n            );\\n        } else {\\n            _bounty = userBaseClaimable[_target];\\n            userBaseClaimable[_target] = 0;\\n        }\\n        return _bounty;\\n    }\\n\\n    function hasEligibleDeposits(address _user)\\n        internal\\n        view\\n        returns (bool hasDeposits)\\n    {\\n        for (uint256 i = 0; i < registeredTokens.length; i++) {\\n            UserInfo storage user = userInfo[registeredTokens[i]][_user];\\n            if (user.amount != 0) {\\n                hasDeposits = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function checkAndProcessEligibility(address _user, bool _execute)\\n        internal\\n        returns (uint256 bountyAmt, bool issueBaseBounty)\\n    {\\n        // for expire DQ\\n        bool hasRelock = !_getLpMfd().autoRelockDisabled(_user);\\n        bool isMarketDq = eligibleDataProvider.isMarketDisqualified(_user);\\n        bool isEligible = eligibleDataProvider.isEligibleForRewards(_user);\\n        uint256 lastEligibleTime = eligibleDataProvider.lastEligibleTime(_user);\\n        uint256 lastDqTime = eligibleDataProvider.getDqTime(_user);\\n        bool hasEligDeposits = hasEligibleDeposits(_user);\\n        bool alreadyDqd = lastDqTime != 0;\\n\\n        // market dq:\\n        //    stop all types immediately, BB\\n        // timedq:\\n        //    if !relock, remove inelig\\n        //    if relock, no-op\\n        if (!isEligible && !alreadyDqd) {\\n            // inelig earned emissions\\n            if (isMarketDq && hasEligDeposits) {\\n                // all user types DQ when market, will DQ below if _execute\\n                issueBaseBounty = true;\\n            } else {\\n                // expired dq\\n                if (\\n                    lastEligibleTime != 0 && lastEligibleTime < block.timestamp\\n                ) {\\n                    if (!hasRelock) {\\n                        bountyAmt = bountyForUser(_user);\\n                    }\\n                }\\n            }\\n        }\\n        if (_execute) {\\n            if (bountyAmt != 0 || issueBaseBounty) {\\n                require(!isEligible, \\\"user still eligible\\\");\\n                stopEmissionsFor(_user);\\n            }\\n\\n            if (bountyAmt != 0) {\\n                uint256 rewardsRemoved = harvestIneligible(_user, bountyAmt);\\n                emit Disqualified(_user, rewardsRemoved);\\n            }\\n            eligibleDataProvider.refresh(_user);\\n        }\\n    }\\n\\n    function checkAndProcessEligibility(address _user) internal {\\n        checkAndProcessEligibility(_user, true);\\n    }\\n\\n    function claimBounty(address _user, bool _execute)\\n        public\\n        returns (uint256 bountyAmt, bool issueBaseBounty)\\n    {\\n        require(msg.sender == address(bountyManager), \\\"bounty only\\\");\\n        (bountyAmt, issueBaseBounty) = checkAndProcessEligibility(\\n            _user,\\n            _execute\\n        );\\n        if (_execute) {\\n            address rdntAddr = rewardMinter.getRdntTokenAddress();\\n            IERC20(rdntAddr).safeApprove(address(bountyManager), bountyAmt);\\n        }\\n    }\\n\\n    function stopEmissionsFor(address _user) internal {\\n        require(ELIGIBILITY_ENABLED, \\\"!EE\\\");\\n        require(\\n            !eligibleDataProvider.isEligibleForRewards(_user),\\n            \\\"user is still eligible\\\"\\n        );\\n        uint256 length = registeredTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            address token = registeredTokens[i];\\n            PoolInfo storage pool = poolInfo[token];\\n            UserInfo storage user = userInfo[token][_user];\\n\\n            _handleActionAfterForToken(\\n                token,\\n                _user,\\n                0,\\n                pool.totalSupply.sub(user.amount)\\n            );\\n        }\\n        eligibleDataProvider.setDqTime(_user, block.timestamp);\\n    }\\n\\n    function _sendRadiant(address _user, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        address rdntToken = rewardMinter.getRdntTokenAddress();\\n        uint256 chefReserve = IERC20(rdntToken).balanceOf(address(this));\\n        if (_amount > chefReserve) {\\n            emit ChefReserveEmpty(chefReserve);\\n            _pause();\\n        } else {\\n            IERC20(rdntToken).safeTransfer(_user, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /********************** RDNT Reserve Management ***********************/\\n\\n    function endRewardTime() public view returns (uint256 timestamp) {\\n        uint256 unclaimedRewards = depositedRewards.sub(accountedRewards);\\n        uint256 extra = 0;\\n        for (uint256 i; i < registeredTokens.length; i++) {\\n            if (\\n                poolInfo[registeredTokens[i]].lastRewardTime <=\\n                lastAllPoolUpdate\\n            ) {\\n                continue;\\n            } else {\\n                extra = extra.add(\\n                    poolInfo[registeredTokens[i]]\\n                        .lastRewardTime\\n                        .sub(lastAllPoolUpdate)\\n                        .mul(poolInfo[registeredTokens[i]].allocPoint)\\n                        .mul(rewardsPerSecond)\\n                        .div(totalAllocPoint)\\n                );\\n            }\\n        }\\n        if (rewardsPerSecond == 0) {\\n            timestamp = uint256(-1);\\n        } else {\\n            timestamp =\\n                (unclaimedRewards + extra).div(rewardsPerSecond) +\\n                (lastAllPoolUpdate);\\n        }\\n    }\\n\\n    function registerRewardDeposit(uint256 _amount) external onlyOwner {\\n        depositedRewards = depositedRewards.add(_amount);\\n        _massUpdatePools();\\n        if (rewardsPerSecond == 0 && lastRPS > 0) {\\n            rewardsPerSecond = lastRPS;\\n        }\\n    }\\n\\n    function availableRewards() internal view returns (uint256 amount) {\\n        return depositedRewards.sub(accountedRewards);\\n    }\\n\\n    /********************** Helper/Convenience Methods ***********************/\\n\\n    /**\\n     * @notice Claim pending rewards for one or more pools into base claimable.\\n     * @dev Rewards are not transferred, just converted into base claimable.\\n     */\\n    function claimToBase(address _user, address[] memory _tokens) public {\\n        uint256 _userBaseClaimable = userBaseClaimable[_user];\\n\\n        // updatePool must be called after calculation of pending rewards\\n        // this is because of reward calculation based on eligibility\\n        uint256[] memory pending = pendingRewards(_user, _tokens);\\n        _updateEmissions();\\n        uint256 _totalAllocPoint = totalAllocPoint;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(validRTokens[_tokens[i]]);\\n            UserInfo storage user = userInfo[_tokens[i]][_user];\\n            _userBaseClaimable = _userBaseClaimable.add(pending[i]);\\n\\n            // Set pending reward to zero\\n            PoolInfo storage pool = poolInfo[_tokens[i]];\\n            _updatePool(pool, _totalAllocPoint);\\n            uint256 newDebt = user.amount.mul(pool.accRewardPerShare).div(\\n                ACC_REWARD_PRECISION\\n            );\\n            user.rewardDebt = newDebt;\\n            user.lastClaimTime = block.timestamp;\\n        }\\n        userBaseClaimable[_user] = _userBaseClaimable;\\n    }\\n\\n    function saveUserRewards(address[] memory _users) public {\\n        address[] memory _tokens = registeredTokens;\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            if (_users[i] != address(0)) {\\n                claimToBase(_users[i], _tokens);\\n            }\\n        }\\n    }\\n\\n    function claimAll(address _user) external {\\n        claim(_user, registeredTokens);\\n    }\\n\\n    function allPendingRewards(address _user)\\n        public\\n        view\\n        returns (uint256 pending)\\n    {\\n        pending = userBaseClaimable[_user];\\n        uint256[] memory claimable = pendingRewards(_user, registeredTokens);\\n        for (uint256 i = 0; i < claimable.length; i++) {\\n            pending += claimable[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa357d9fbbce437954cb30b74d447f9e4152609fbb7548b0305dce1d099593e0b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102515760003560e01c806302a24770146102565780630702a95d14610270578063081e3eda146102aa5780630c634248146102b25780630f208beb146102ba57806317caf6f11461030e5780631b2064f7146103165780631d94f24d1461031e57806325dc43871461035257806332a9caba14610377578063334d0bbd146103a357806334c54230146103ef5780633adcdfc8146104ad5780633df8161c146104d3578063566cac76146105d45780635c1a8ac6146106755780635c975abb1461069b5780635ea3f4fa146106a35780635fe4f741146106c95780636d4f675c146106ed578063715018a6146106f557806377329f35146106fd578063779f61691461072357806378e979251461072b5780637ab8955d14610733578063850294091461077a5780638980f11f146107a05780638da5cb5b146107cc5780638e2eba09146107d45780639a0ba2ea146108855780639a7b5f11146108a25780639b5a734f146108fc5780639b8e556314610922578063a3eaf99a1461092a578063b36b9ffd146109db578063ba04a111146109e3578063be05d3fb146109eb578063be9a6555146109f3578063bfccff45146109fb578063c025191e14610a21578063cccd82b014610a4d578063cd1a4d8614610a73578063cf756fdf14610aa1578063d055709014610add578063de7e410c14610afa578063eacdaabc14610b02578063f2fde38b14610b0a578063f5fe161014610b30578063f6d69c2814610b4f578063fc7c937614610c0d578063ff66a30514610c15575b600080fd5b61025e610c3b565b60408051918252519081900360200190f35b6102966004803603602081101561028657600080fd5b50356001600160a01b0316610d8b565b604080519115158252519081900360200190f35b61025e610da0565b61025e610da6565b6102e8600480360360408110156102d057600080fd5b506001600160a01b0381358116916020013516610dac565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61025e610dde565b610296610de4565b6103506004803603606081101561033457600080fd5b506001600160a01b038135169060208101359060400135610ded565b005b6103506004803603604081101561036857600080fd5b5080359060200135151561100a565b6103506004803603604081101561038d57600080fd5b506001600160a01b0381351690602001356110c4565b6103c0600480360360208110156103b957600080fd5b5035611255565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103506004803603604081101561040557600080fd5b810190602081018135600160201b81111561041f57600080fd5b82018360208201111561043157600080fd5b803590602001918460208302840111600160201b8311171561045257600080fd5b919390929091602081019035600160201b81111561046f57600080fd5b82018360208201111561048157600080fd5b803590602001918460208302840111600160201b831117156104a257600080fd5b50909250905061128a565b610350600480360360208110156104c357600080fd5b50356001600160a01b0316611441565b610584600480360360408110156104e957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561051357600080fd5b82018360208201111561052557600080fd5b803590602001918460208302840111600160201b8311171561054657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611794945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105c05781810151838201526020016105a8565b505050509050019250505060405180910390f35b610350600480360360208110156105ea57600080fd5b810190602081018135600160201b81111561060457600080fd5b82018360208201111561061657600080fd5b803590602001918460208302840111600160201b8311171561063757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611913945050505050565b6103506004803603602081101561068b57600080fd5b50356001600160a01b03166119d0565b610296611a56565b61025e600480360360208110156106b957600080fd5b50356001600160a01b0316611a5f565b6106d1611b17565b604080516001600160a01b039092168252519081900360200190f35b61025e611b26565b610350611b2c565b6103506004803603602081101561071357600080fd5b50356001600160a01b0316611b9a565b61025e611bfe565b61025e611c04565b6107616004803603604081101561074957600080fd5b506001600160a01b0381351690602001351515611c0a565b6040805192835290151560208301528051918290030190f35b61025e6004803603602081101561079057600080fd5b50356001600160a01b0316611d08565b610350600480360360408110156107b657600080fd5b506001600160a01b038135169060200135611d8e565b6106d1611e10565b610350600480360360408110156107ea57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561081457600080fd5b82018360208201111561082657600080fd5b803590602001918460208302840111600160201b8311171561084757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e1f945050505050565b6106d16004803603602081101561089b57600080fd5b5035612032565b6108c8600480360360208110156108b857600080fd5b50356001600160a01b031661205c565b6040805195865260208601949094528484019290925260608401526001600160a01b03166080830152519081900360a00190f35b6103506004803603602081101561091257600080fd5b50356001600160a01b0316611791565b6106d1612094565b6103506004803603604081101561094057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561096a57600080fd5b82018360208201111561097c57600080fd5b803590602001918460208302840111600160201b8311171561099d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506120a3945050505050565b6106d1612251565b61025e612260565b61025e612266565b61035061226c565b61025e60048036036020811015610a1157600080fd5b50356001600160a01b031661231b565b61025e60048036036040811015610a3757600080fd5b506001600160a01b03813516906020013561232d565b61035060048036036020811015610a6357600080fd5b50356001600160a01b0316612550565b61035060048036036040811015610a8957600080fd5b506001600160a01b0381358116916020013516612650565b61035060048036036080811015610ab757600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612745565b61035060048036036020811015610af357600080fd5b5035612898565b6106d1612932565b61025e612946565b61035060048036036020811015610b2057600080fd5b50356001600160a01b031661294c565b61035060048036036020811015610b4657600080fd5b503515156129fc565b61035060048036036040811015610b6557600080fd5b810190602081018135600160201b811115610b7f57600080fd5b820183602082011115610b9157600080fd5b803590602001918460208302840111600160201b83111715610bb257600080fd5b919390929091602081019035600160201b811115610bcf57600080fd5b820183602082011115610be157600080fd5b803590602001918460208302840111600160201b83111715610c0257600080fd5b509092509050612a71565b610296612db7565b61035060048036036020811015610c2b57600080fd5b50356001600160a01b0316612dc0565b600080610c5560d85460d754612e4490919063ffffffff16565b90506000805b60cb54811015610d5d5760d95460cf600060cb8481548110610c7957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015411610cab57610d55565b610d52610d4b60d154610d4560cc54610d3f60cf600060cb8981548110610cce57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400181206001015460d95460cb80549293610d3f9360cf92908d908110610d1157fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206002015490612e44565b90612e8d565b90612ee6565b8390612f25565b91505b600101610c5b565b5060cc54610d6f576000199250610d86565b60d95460cc54610d829084840190612ee6565b0192505b505090565b60d46020526000908152604090205460ff1681565b60cb5490565b60ce5481565b60d260209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b60d15481565b60ca5460ff1681565b33600090815260d0602052604090205460ff1680610e235750610e0e612f7d565b6001600160a01b0316336001600160a01b0316145b610e67576040805162461bcd60e51b815260206004820152601060248201526f085c951bdad95b881f1f081b1c1b599960821b604482015290519081900360640190fd5b60da546001600160a01b0384811691161480610e9b5750610e86613000565b6001600160a01b0316836001600160a01b0316145b80610ebe5750610ea9612f7d565b6001600160a01b0316836001600160a01b0316145b80610ee157506001600160a01b038316600090815260d4602052604090205460ff165b15610eeb57611005565b60d65460ff1615610ff95760db5460408051630afb040960e01b81526001600160a01b03868116600483015291519190921691630afb040991602480830192600092919082900301818387803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505060db5460408051633300c37360e11b81526001600160a01b038881166004830152915191909216935063660186e692506024808301926020929190829003018186803b158015610fa957600080fd5b505afa158015610fbd573d6000803e3d6000fd5b505050506040513d6020811015610fd357600080fd5b505115610feb57610fe633848484613051565b610ff4565b610ff483613299565b611005565b61100533848484613051565b505050565b6110126132a4565b6001600160a01b0316611023611e10565b6001600160a01b03161461106c576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b6110746132a8565b60cc82905560ca805482151560ff199091168117909155604080519182525183917f91bb2acfac3265da2e9b45e815cdcb50f9b349454c54e812590ecb5d109ae8dc919081900360200190a25050565b60d65461010090046001600160a01b03163314611116576040805162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b604482015290519081900360640190fd5b6001600160a01b038216600090815260cf60205260409020600201541561117a576040805162461bcd60e51b8152602060048201526013602482015272706f6f6c20616c72656164792065786973747360681b604482015290519081900360640190fd5b611182613308565b60d15461118f9082612f25565b60d15560cb805460018082019092557fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0180546001600160a01b03199081166001600160a01b039586169081179092556040805160a0810182526000808252602080830197885242838501908152606084018381526080850184815297845260cf83528584209451855598518489015551600284015596516003830155935160049091018054909316961695909517905560d0909252919020805460ff19169091179055565b60c9818154811061126557600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b6112926132a4565b6001600160a01b03166112a3611e10565b6001600160a01b0316146112ec576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b828114611339576040805162461bcd60e51b81526020600482015260166024820152750e0c2e4c2dae640d8cadccee8d040dad2e6dac2e8c6d60531b604482015290519081900360640190fd5b6113416132a8565b60d15460005b8481101561143757600060cf600088888581811061136157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020905060008160020154116113e1576040805162461bcd60e51b81526020600482015260126024820152711c1bdbdb08191bd95cdb89dd08195e1a5cdd60721b604482015290519081900360640190fd5b6114148585848181106113f057fe5b9050602002013561140e836001015486612e4490919063ffffffff16565b90612f25565b925084848381811061142257fe5b60200291909101356001928301555001611347565b5060d15550505050565b611449612f7d565b6001600160a01b0316336001600160a01b03161480611480575061146b613000565b6001600160a01b0316336001600160a01b0316145b6114c2576040805162461bcd60e51b815260206004820152600e60248201526d085b1c135191081f1f080853519160921b604482015290519081900360640190fd5b60d65460ff16156117915760db60009054906101000a90046001600160a01b03166001600160a01b031663673a7e286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561151d57600080fd5b505af1158015611531573d6000803e3d6000fd5b505060db5460408051633300c37360e11b81526001600160a01b038681166004830152915191909216935063660186e692506024808301926020929190829003018186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d60208110156115ac57600080fd5b50511561172a5760005b60cb5481101561172857600060cb82815481106115cf57fe5b60009182526020918290200154604080516370a0823160e01b81526001600160a01b038781166004830152915191909216926370a082319260248082019391829003018186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d602081101561164c57600080fd5b50519050801561171f5761171f60cb838154811061166657fe5b9060005260206000200160009054906101000a90046001600160a01b0316848361171a60d2600060cb898154811061169a57fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938c1682529290925281205460cb80549192611714928a9260cf92918d9081106116e957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205490612f25565b90612e44565b613051565b506001016115b6565b505b60db5460408051630afb040960e01b81526001600160a01b03848116600483015291519190921691630afb040991602480830192600092919082900301818387803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050505b50565b6060600082516001600160401b03811180156117af57600080fd5b506040519080825280602002602001820160405280156117d9578160200160208202803683370190505b50905060005b83518110156119095760008482815181106117f657fe5b6020908102919091018101516001600160a01b03808216600090815260cf8452604080822060d28652818320938c168352929094529290922060038301548354600285015493955091929091904211801561185057508015155b156118b957600061186e856002015442612e4490919063ffffffff16565b9050600061189560d154610d458860010154610d3f60cc5487612e8d90919063ffffffff16565b90506118b46118ad84610d458464e8d4a51000612e8d565b8590612f25565b935050505b6118e1836001015461171464e8d4a51000610d45868860000154612e8d90919063ffffffff16565b8787815181106118ed57fe5b60209081029190910101525050600190930192506117df915050565b5090505b92915050565b600060cb80548060200260200160405190810160405280929190818152602001828054801561196b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161194d575b5050505050905060005b82518110156110055760006001600160a01b031683828151811061199557fe5b60200260200101516001600160a01b0316146119c8576119c88382815181106119ba57fe5b6020026020010151836120a3565b600101611975565b6119d86132a4565b6001600160a01b03166119e9611e10565b6001600160a01b031614611a32576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b6001600160a01b0316600090815260d460205260409020805460ff19166001179055565b60655460ff1690565b6001600160a01b038116600090815260d3602090815260408083205460cb8054835181860281018601909452808452919493611add938793909291830182828015611ad357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ab5575b5050505050611794565b905060005b8151811015611b1057818181518110611af757fe5b6020026020010151830192508080600101915050611ae2565b5050919050565b60db546001600160a01b031681565b60d75481565b611b346132a4565b6001600160a01b0316611b45611e10565b6001600160a01b031614611b8e576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b611b986000613337565b565b6117918160cb805480602002602001604051908101604052809291908181526020018280548015611bf457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bd6575b5050505050611e1f565b60d95481565b60d55481565b60dc5460009081906001600160a01b03163314611c5c576040805162461bcd60e51b815260206004820152600b60248201526a626f756e7479206f6e6c7960a81b604482015290519081900360640190fd5b611c668484613389565b90925090508215611d015760da546040805163ab453a5960e01b815290516000926001600160a01b03169163ab453a59916004808301926020929190829003018186803b158015611cb657600080fd5b505afa158015611cca573d6000803e3d6000fd5b505050506040513d6020811015611ce057600080fd5b505160dc54909150611cff906001600160a01b0380841691168561379c565b505b9250929050565b60db546040805163563014e560e01b81526001600160a01b038085166004830152915160009361190d93869391169163563014e591602480820192602092909190829003018186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d6020811015611d8757600080fd5b505161232d565b611d966132a4565b6001600160a01b0316611da7611e10565b6001600160a01b031614611df0576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b611e0c611dfb611e10565b6001600160a01b03841690836138af565b5050565b6097546001600160a01b031690565b60d65460ff1615611e3357611e3382613299565b611e3b613308565b6001600160a01b038216600090815260d36020526040812080549082905560d15490915b83518110156120055760d06000858381518110611e7857fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16611ea857600080fd5b600060cf6000868481518110611eba57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506000816002015411611f32576040805162461bcd60e51b81526020600482015260126024820152711c1bdbdb08191bd95cdb89dd08195e1a5cdd60721b604482015290519081900360640190fd5b611f3c8184613901565b600060d26000878581518110611f4e57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002090506000611fc164e8d4a51000610d4585600301548560000154612e8d90919063ffffffff16565b9050611fe4611fdd836001015483612e4490919063ffffffff16565b8790612f25565b60018084019290925542600390930192909255909450919091019050611e5f565b5061201084836139ef565b42620697800161201e610c3b565b101561202c5761202c613a87565b50505050565b60cb818154811061204257600080fd5b6000918252602090912001546001600160a01b0316905081565b60cf6020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b031685565b60da546001600160a01b031681565b6001600160a01b038216600090815260d36020526040812054906120c78484611794565b90506120d1613308565b60d15460005b845181101561222e5760d060008683815181106120f057fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1661212057600080fd5b600060d2600087848151811061213257fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002090506121a584838151811061218e57fe5b602002602001015186612f2590919063ffffffff16565b9450600060cf60008885815181106121b957fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506121ed8185613901565b600061221364e8d4a51000610d4584600301548660000154612e8d90919063ffffffff16565b600180850191909155426003909401939093555050016120d7565b5050506001600160a01b03909216600090815260d3602052604090209190915550565b60dc546001600160a01b031681565b60cd5481565b60d85481565b6122746132a4565b6001600160a01b0316612285611e10565b6001600160a01b0316146122ce576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b60d55415612315576040805162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cdd185c9d1959608a1b604482015290519081900360640190fd5b4260d555565b60d36020526000908152604090205481565b60d65460009060ff1615806123b7575060db5460408051633300c37360e11b81526001600160a01b0386811660048301529151919092169163660186e6916024808301926020929190829003018186803b15801561238a57600080fd5b505afa15801561239e573d6000803e3d6000fd5b505050506040513d60208110156123b457600080fd5b50515b156123c45750600061190d565b6000428310156123db576123d84284612e44565b90505b600061243f8560cb805480602002602001604051908101604052809291908181526020018280548015611ad3576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611ab5575050505050611794565b905060005b815181101561254757600060d2600060cb848154811061246057fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938b1682529290925281206002810154600382015491935010156124b2575060038101546124b9565b5060028101545b42819003801561253c5760006124eb828787815181106124d557fe5b6020026020010151612ee690919063ffffffff16565b905060006124f98883612e8d565b905086868151811061250757fe5b602002602001015181111561252d5786868151811061252257fe5b602002602001015190505b6125378982612f25565b985050505b505050600101612444565b50505092915050565b612558612f7d565b6001600160a01b0316336001600160a01b0316148061258f575061257a613000565b6001600160a01b0316336001600160a01b0316145b61259857600080fd5b60d65460ff16156117915760006125ae82611d08565b905060006125ba612f7d565b6001600160a01b03166398387a8d846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561260657600080fd5b505afa15801561261a573d6000803e3d6000fd5b505050506040513d602081101561263057600080fd5b50511590508115801590612642575080155b156110055761100583613299565b6126586132a4565b6001600160a01b0316612669611e10565b6001600160a01b0316146126b2576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260cf6020526040902060020154612714576040805162461bcd60e51b81526020600482015260126024820152711c1bdbdb08191bd95cdb89dd08195e1a5cdd60721b604482015290519081900360640190fd5b6001600160a01b03918216600090815260cf6020526040902060040180546001600160a01b03191691909216179055565b600054610100900460ff168061275e575061275e613ba3565b8061276c575060005460ff16155b6127a75760405162461bcd60e51b815260040180806020018281038252602e815260200180614692602e913960400191505060405180910390fd5b600054610100900460ff161580156127d2576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0385166127e557600080fd5b6001600160a01b0384166127f857600080fd5b6001600160a01b03831661280b57600080fd5b612813613ba9565b61281b613bf7565b60d6805460db80546001600160a01b038881166001600160a01b03199283161790925560da8054888416921691909117905560cc85905560ca805460ff19908116600190811790925591891661010002610100600160a81b03199093169290921716179055801561178c576000805461ff00191690555050505050565b6128a06132a4565b6001600160a01b03166128b1611e10565b6001600160a01b0316146128fa576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b60d7546129079082612f25565b60d7556129126132a8565b60cc541580156129245750600060cd54115b156117915760cd5460cc5550565b60d65461010090046001600160a01b031681565b60cc5481565b6129546132a4565b6001600160a01b0316612965611e10565b6001600160a01b0316146129ae576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b6001600160a01b0381166129f35760405162461bcd60e51b815260040180806020018281038252602681526020018061462b6026913960400191505060405180910390fd5b61179181613337565b612a046132a4565b6001600160a01b0316612a15611e10565b6001600160a01b031614612a5e576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b60d6805460ff1916911515919091179055565b612a796132a4565b6001600160a01b0316612a8a611e10565b6001600160a01b031614612ad3576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b828015801590612ae257508082145b612b2e576040805162461bcd60e51b8152602060048201526018602482015277656d707479206f72206d69736d6174636820706172616d7360401b604482015290519081900360640190fd5b60005b81811015612d1c576001600160801b03868683818110612b4d57fe5b905060200201351115612ba7576040805162461bcd60e51b815260206004820152601e60248201527f737461727454696d654f666673657473203e206d61782075696e743132380000604482015290519081900360640190fd5b6001600160801b03848483818110612bbb57fe5b905060200201351115612c15576040805162461bcd60e51b815260206004820152601e60248201527f726577617264735065725365636f6e64203e206d61782075696e743132380000604482015290519081900360640190fd5b60d55415612c855760d554612c2b904290612e44565b868683818110612c3757fe5b9050602002013511612c85576040805162461bcd60e51b8152602060048201526012602482015271696e76616c69642073746172742074696d6560701b604482015290519081900360640190fd5b60c96040518060400160405280888885818110612c9e57fe5b905060200201356001600160801b03168152602001868685818110612cbf57fe5b6001600160801b036020918202939093013583169093525083546001818101865560009586529483902084519101805494909301518216600160801b029082166001600160801b0319909416939093171691909117905501612b31565b507f0a4b885eafe78f585b7c7667ea419f9b1b17d09dfdf23ffa7925b73db6986f16858585856040518080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039850909650505050505050a15050505050565b60d65460ff1681565b612dc86132a4565b6001600160a01b0316612dd9611e10565b6001600160a01b031614612e22576040805162461bcd60e51b81526020600482018190526024820152600080516020614672833981519152604482015290519081900360640190fd5b60dc80546001600160a01b0319166001600160a01b0392909216919091179055565b6000612e8683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613c45565b9392505050565b600082612e9c5750600061190d565b82820282848281612ea957fe5b0414612e865760405162461bcd60e51b81526004018080602001828103825260218152602001806146516021913960400191505060405180910390fd5b6000612e8683836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250613cdc565b600082820183811015612e86576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b60008060da60009054906101000a90046001600160a01b03166001600160a01b03166328f407486040518163ffffffff1660e01b815260040160206040518083038186803b158015612fce57600080fd5b505afa158015612fe2573d6000803e3d6000fd5b505050506040513d6020811015612ff857600080fd5b505192915050565b60008060da60009054906101000a90046001600160a01b03166001600160a01b031663cd57ed6c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612fce57600080fd5b6001600160a01b038416600090815260cf6020526040902060028101546130b4576040805162461bcd60e51b81526020600482015260126024820152711c1bdbdb08191bd95cdb89dd08195e1a5cdd60721b604482015290519081900360640190fd5b6130bc613308565b6130c88160d154613901565b6001600160a01b03808616600090815260d2602090815260408083209388168352929052208054600383015481156131605760018301546000906131199061171464e8d4a51000610d458787612e8d565b9050801561315e576001600160a01b038816600090815260d360205260409020546131449082612f25565b6001600160a01b038916600090815260d360205260409020555b505b8254845461316d91612e44565b845585835561318564e8d4a51000610d458884612e8d565b6001840155825415613198574260028401555b83546131a49087612f25565b845560048401546001600160a01b03161561323c576004808501546040805163ae0b537160e01b81526001600160a01b038c8116948201949094528a84166024820152604481018a9052606481018990529051929091169163ae0b53719160848082019260009290919082900301818387803b15801561322357600080fd5b505af1158015613237573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167f526824944047da5b81071fb6349412005c5da81380b336103fbe5dd34556c7768888604051808381526020018281526020019250505060405180910390a35050505050505050565b611005816001613389565b3390565b60d15460cb5460005b818110156132ff576132f760cf600060cb84815481106132cd57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902084613901565b6001016132b1565b50504260d95550565b613310610c3b565b42111561332f5761331f6132a8565b60cc805460cd5560009055611b98565b611b98613d41565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000613396612f7d565b6001600160a01b03166398387a8d866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156133e257600080fd5b505afa1580156133f6573d6000803e3d6000fd5b505050506040513d602081101561340c57600080fd5b505160db546040805163696c9a7f60e01b81526001600160a01b038981166004830152915193159450600093919092169163696c9a7f916024808301926020929190829003018186803b15801561346257600080fd5b505afa158015613476573d6000803e3d6000fd5b505050506040513d602081101561348c57600080fd5b505160db5460408051633300c37360e11b81526001600160a01b038a811660048301529151939450600093919092169163660186e6916024808301926020929190829003018186803b1580156134e157600080fd5b505afa1580156134f5573d6000803e3d6000fd5b505050506040513d602081101561350b57600080fd5b505160db546040805163563014e560e01b81526001600160a01b038b811660048301529151939450600093919092169163563014e5916024808301926020929190829003018186803b15801561356057600080fd5b505afa158015613574573d6000803e3d6000fd5b505050506040513d602081101561358a57600080fd5b505160db5460408051636f21a17960e01b81526001600160a01b038c8116600483015291519394506000939190921691636f21a179916024808301926020929190829003018186803b1580156135df57600080fd5b505afa1580156135f3573d6000803e3d6000fd5b505050506040513d602081101561360957600080fd5b5051905060006136188a613df4565b905081151584158015613629575080155b1561366a578580156136385750815b15613646576001975061366a565b831580159061365457504284105b1561366a578661366a576136678b611d08565b98505b891561378e578815158061367b5750875b156136d25784156136c9576040805162461bcd60e51b815260206004820152601360248201527275736572207374696c6c20656c696769626c6560681b604482015290519081900360640190fd5b6136d28b613e6c565b88156137275760006136e48c8b614044565b6040805182815290519192506001600160a01b038e16917f2af5d0a51fd1438a65c30b3ef7bcb7851335de1ff2540c9394b4dbb5733657a09181900360200190a2505b60db5460408051630afb040960e01b81526001600160a01b038e8116600483015291519190921691630afb040991602480830192600092919082900301818387803b15801561377557600080fd5b505af1158015613789573d6000803e3d6000fd5b505050505b505050505050509250929050565b801580613822575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156137f457600080fd5b505afa158015613808573d6000803e3d6000fd5b505050506040513d602081101561381e57600080fd5b5051155b61385d5760405162461bcd60e51b81526004018080602001828103825260368152602001806147156036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261100590849061416a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261100590849061416a565b428061390b610c3b565b1161391b57613918610c3b565b90505b8260020154811161392c5750611e0c565b82548061393e57506002830155611e0c565b6000613957856002015484612e4490919063ffffffff16565b9050600061397060cc5483612e8d90919063ffffffff16565b90508061397b614321565b101561398c57613989614321565b90505b60006139a986610d45896001015485612e8d90919063ffffffff16565b60d8549091506139b99082612f25565b60d8556139dd6139d285610d458464e8d4a51000612e8d565b600389015490612f25565b60038801555050505060028301555050565b613a006139fa613000565b8261433f565b9050613a0a613000565b6001600160a01b031663d1a1beb4838360016040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200182151581526020019350505050600060405180830381600087803b158015613a6b57600080fd5b505af1158015613a7f573d6000803e3d6000fd5b505050505050565b60da546040805163ab453a5960e01b815290516000926001600160a01b03169163ab453a59916004808301926020929190829003018186803b158015613acc57600080fd5b505afa158015613ae0573d6000803e3d6000fd5b505050506040513d6020811015613af657600080fd5b5051604080516370a0823160e01b815230600482015290519192507f1681e542d7f33ef0ad012aecd346fa867be856110f81d25dcbbd72f972a57a45916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015613b6357600080fd5b505afa158015613b77573d6000803e3d6000fd5b505050506040513d6020811015613b8d57600080fd5b505160408051918252519081900360200190a150565b303b1590565b600054610100900460ff16613bef5760405162461bcd60e51b815260040180806020018281038252602b8152602001806146c0602b913960400191505060405180910390fd5b611b9861449e565b600054610100900460ff16613c3d5760405162461bcd60e51b815260040180806020018281038252602b8152602001806146c0602b913960400191505060405180910390fd5b611b986144f4565b60008184841115613cd45760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c99578181015183820152602001613c81565b50505050905090810190601f168015613cc65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183613d2b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613c99578181015183820152602001613c81565b506000838581613d3757fe5b0495945050505050565b60ca5460ff16611b985760c95460ce5460d554600090613d62904290612e44565b90505b8282108015613d99575060c98281548110613d7c57fe5b6000918252602090912001546001600160801b0390811690821610155b15613da957600190910190613d65565b60ce548211156110055760ce829055613dc06132a8565b60c96001830381548110613dd057fe5b600091825260209091200154600160801b90046001600160801b031660cc55505050565b6000805b60cb54811015613e6657600060d2600060cb8481548110613e1557fe5b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182209388168252929092529020805490915015613e5d576001925050613e66565b50600101613df8565b50919050565b60d65460ff16613ea9576040805162461bcd60e51b815260206004820152600360248201526221454560e81b604482015290519081900360640190fd5b60db5460408051633300c37360e11b81526001600160a01b0384811660048301529151919092169163660186e6916024808301926020929190829003018186803b158015613ef657600080fd5b505afa158015613f0a573d6000803e3d6000fd5b505050506040513d6020811015613f2057600080fd5b505115613f6d576040805162461bcd60e51b815260206004820152601660248201527575736572206973207374696c6c20656c696769626c6560501b604482015290519081900360640190fd5b60cb5460005b81811015613fef57600060cb8281548110613f8a57fe5b60009182526020808320909101546001600160a01b0390811680845260cf8352604080852060d28552818620938a168652929093529183208054825493955091939092613fe19286928a92909161171a9190612e44565b505050806001019050613f73565b5060db54604080516307163ae560e51b81526001600160a01b0385811660048301524260248301529151919092169163e2c75ca091604480830192600092919082900301818387803b158015613a6b57600080fd5b60d65460009060ff16614084576040805162461bcd60e51b815260206004820152600360248201526221454560e81b604482015290519081900360640190fd5b6140e88360cb8054806020026020016040519081016040528092919081815260200182805480156140de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116140c0575b50505050506120a3565b6001600160a01b038316600090815260d36020526040902054821015614149576001600160a01b038316600090815260d3602052604090205461412b9083612e44565b6001600160a01b038416600090815260d36020526040902055613e66565b50506001600160a01b0316600090815260d360205260408120805491905590565b61417c826001600160a01b0316614546565b6141cd576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b6020831061420a5780518252601f1990920191602091820191016141eb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461426c576040519150601f19603f3d011682016040523d82523d6000602084013e614271565b606091505b5091509150816142c8576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561202c578080602001905160208110156142e457600080fd5b505161202c5760405162461bcd60e51b815260040180806020018281038252602a8152602001806146eb602a913960400191505060405180910390fd5b600061433a60d85460d754612e4490919063ffffffff16565b905090565b60008161434e5750600061190d565b60da546040805163ab453a5960e01b815290516000926001600160a01b03169163ab453a59916004808301926020929190829003018186803b15801561439357600080fd5b505afa1580156143a7573d6000803e3d6000fd5b505050506040513d60208110156143bd57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561440b57600080fd5b505afa15801561441f573d6000803e3d6000fd5b505050506040513d602081101561443557600080fd5b5051905080841115614481576040805182815290517f09fb3e34da56fdc0b28f9769c6dcb55321715bc673f744205e208b82c97963c99181900360200190a161447c614582565b614495565b6144956001600160a01b03831686866138af565b50919392505050565b600054610100900460ff166144e45760405162461bcd60e51b815260040180806020018281038252602b8152602001806146c0602b913960400191505060405180910390fd5b611b986144ef6132a4565b613337565b600054610100900460ff1661453a5760405162461bcd60e51b815260040180806020018281038252602b8152602001806146c0602b913960400191505060405180910390fd5b6065805460ff19169055565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061457a57508115155b949350505050565b61458a6145dd565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586145c06132a4565b604080516001600160a01b039092168252519081900360200190a1565b6145e5611a56565b15611b98576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d5bfa7b170047b41c7deb428fb44f6c6e1a45fe34ba8c5a30d18eecd65a2189364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "afterLockUpdate(address)": {
        "details": "Called by the locking contracts after locking or unlocking happens"
      },
      "beforeLockUpdate(address)": {
        "details": "Called by the locking contracts before locking or unlocking happens"
      },
      "claimToBase(address,address[])": {
        "details": "Rewards are not transferred, just converted into base claimable."
      },
      "handleActionAfter(address,uint256,uint256)": {
        "details": "important! eligible status can be updated here"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setRewardsPerSecond(uint256,bool)": {
        "details": "Its decimals count is ACC_REWARD_PRECISION",
        "params": {
          "_rewardsPerSecond": "The amount of reward to be distributed per second."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "afterLockUpdate(address)": {
        "notice": "Hook for lock update."
      },
      "beforeLockUpdate(address)": {
        "notice": "Hook for lock update."
      },
      "claimToBase(address,address[])": {
        "notice": "Claim pending rewards for one or more pools into base claimable."
      },
      "handleActionAfter(address,uint256,uint256)": {
        "notice": "`after` Hook for deposit and borrow update."
      },
      "handleActionBefore(address)": {
        "notice": "`before` Hook for deposit and borrow update."
      },
      "setRewardsPerSecond(uint256,bool)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6361,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6364,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6431,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6703,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 6808,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6576,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 6681,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 37608,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "emissionSchedule",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(EmissionPoint)37564_storage)dyn_storage"
      },
      {
        "astId": 37610,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "persistRewardsPerSecond",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 37613,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "registeredTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 37615,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "rewardsPerSecond",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 37617,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "lastRPS",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 37619,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "emissionScheduleIndex",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 37623,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "poolInfo",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_struct(PoolInfo)37559_storage)"
      },
      {
        "astId": 37627,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "validRTokens",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 37629,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 37635,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "userInfo",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)37548_storage))"
      },
      {
        "astId": 37639,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "userBaseClaimable",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 37643,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "eligibilityExempt",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 37645,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "startTime",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 37647,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "ELIGIBILITY_ENABLED",
        "offset": 0,
        "slot": "214",
        "type": "t_bool"
      },
      {
        "astId": 37649,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "poolConfigurator",
        "offset": 1,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 37651,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "depositedRewards",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 37653,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "accountedRewards",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 37655,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "lastAllPoolUpdate",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 37657,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "rewardMinter",
        "offset": 0,
        "slot": "218",
        "type": "t_contract(IMiddleFeeDistribution)12596"
      },
      {
        "astId": 37659,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "eligibleDataProvider",
        "offset": 0,
        "slot": "219",
        "type": "t_contract(IEligibilityDataProvider)11190"
      },
      {
        "astId": 37661,
        "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "bountyManager",
        "offset": 0,
        "slot": "220",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmissionPoint)37564_storage)dyn_storage": {
        "base": "t_struct(EmissionPoint)37564_storage",
        "encoding": "dynamic_array",
        "label": "struct ChefIncentivesController.EmissionPoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEligibilityDataProvider)11190": {
        "encoding": "inplace",
        "label": "contract IEligibilityDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)12596": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IOnwardIncentivesController)12791": {
        "encoding": "inplace",
        "label": "contract IOnwardIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)37548_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ChefIncentivesController.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)37548_storage)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)37559_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChefIncentivesController.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)37559_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)37548_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChefIncentivesController.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)37548_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EmissionPoint)37564_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.EmissionPoint",
        "members": [
          {
            "astId": 37561,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "startTimeOffset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 37563,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "rewardsPerSecond",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)37559_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.PoolInfo",
        "members": [
          {
            "astId": 37550,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 37552,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 37554,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 37556,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 37558,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "onwardIncentives",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IOnwardIncentivesController)12791"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)37548_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.UserInfo",
        "members": [
          {
            "astId": 37541,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 37543,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 37545,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "enterTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 37547,
            "contract": "contracts/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}