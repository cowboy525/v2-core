{
  "address": "0x4D35A200468278d6dc9a3f5b7BD3D0e2F145B334",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "principal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "receiveAToken",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidationFeeTo",
          "type": "address"
        }
      ],
      "name": "LiquidationCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ReserveUsedAsCollateralDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ReserveUsedAsCollateralEnabled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtToCover",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveAToken",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "liquidationFeeTo",
          "type": "address"
        }
      ],
      "name": "liquidationCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x232df83f363d579f7e30a2b054b7c92dad9c3dbad83874245f631c5a3b996628",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x4D35A200468278d6dc9a3f5b7BD3D0e2F145B334",
    "transactionIndex": 6,
    "gasUsed": "2497805",
    "logsBloom": "0x
    "blockHash": "0x70936ca7cbb9803e3b3e8b7639ebb951e2d1bde29c500ebb3cf422984a8e0177",
    "transactionHash": "0x232df83f363d579f7e30a2b054b7c92dad9c3dbad83874245f631c5a3b996628",
    "logs": [],
    "blockNumber": 27738656,
    "cumulativeGasUsed": "2732970",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidationFeeTo\",\"type\":\"address\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"liquidationFeeTo\",\"type\":\"address\"}],\"name\":\"liquidationCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"Implements actions involving management of collateral in the protocol, the main one being the liquidations IMPORTANT This contract will run always via DELEGATECALL, through the LendingPool, so the chain of inheritance is the same as the LendingPool, to have compatible storage layouts*\",\"kind\":\"dev\",\"methods\":{\"liquidationCall(address,address,address,uint256,bool,address)\":{\"details\":\"Function to liquidate a position if its Health Factor drops below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\",\"params\":{\"collateralAsset\":\"The address of the underlying asset used as collateral, to receive as result of the liquidation\",\"debtAsset\":\"The address of the underlying borrowed asset to be repaid with the liquidation\",\"debtToCover\":\"The debt amount of borrowed `asset` the liquidator wants to cover\",\"receiveAToken\":\"`true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*\",\"user\":\"The address of the borrower getting liquidated\"}}},\"title\":\"LendingPoolCollateralManager contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/lendingpool/LendingPoolCollateralManager.sol\":\"LendingPoolCollateralManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7887b4b7a2d2907d6f35e84e55e632a6c391d17a345fd47c1cd9f11f04fb30de\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   **/\\n  function handleActionBefore(\\n    address user\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleActionAfter(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8331ccb3d25d999a00e624a2c91988b422af47c9a94a3c3e0e049116e9b52ac9\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x29f3fc61ab3d5a38972809501aba613b89bf2355049a9e59dee3b2d3c89d13b0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param debtTokenDecimals the decimals of the debt token\\n   * @param debtTokenName the name of the debt token\\n   * @param debtTokenSymbol the symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address incentivesController,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the debt token.\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0xfbad6df87ea7d969d345ed5d29059c15871244f542ae73dc25f09a7180356cb2\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositWithAutoDLP(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7394d2e721bb4b2e25c3bf1fddce39667911de9d9db87176548a99c4aeced76b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n\\n  function getLiquidationFeeTo() external view returns (address);\\n\\n  function setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x106ef9420d874acfc948c140b0b4ffff258a8fa664febf805c686fdbff278f62\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolCollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ILendingPoolCollateralManager\\n * @author Aave\\n * @notice Defines the actions involving management of collateral in the protocol.\\n **/\\ninterface ILendingPoolCollateralManager {\\n  /**\\n   * @dev Emitted when a borrower is liquidated\\n   * @param collateral The address of the collateral being liquidated\\n   * @param principal The address of the reserve\\n   * @param user The address of the user being liquidated\\n   * @param debtToCover The total amount liquidated\\n   * @param liquidatedCollateralAmount The amount of collateral being liquidated\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken true if the liquidator wants to receive aTokens, false otherwise\\n   **/\\n  event LiquidationCall(\\n    address indexed collateral,\\n    address indexed principal,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken,\\n    address liquidationFeeTo\\n  );\\n\\n  /**\\n   * @dev Emitted when a reserve is disabled as collateral for an user\\n   * @param reserve The address of the reserve\\n   * @param user The address of the user\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted when a reserve is enabled as collateral for an user\\n   * @param reserve The address of the reserve\\n   * @param user The address of the user\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Users can invoke this function to liquidate an undercollateralized position.\\n   * @param collateral The address of the collateral to liquidated\\n   * @param principal The address of the principal reserve\\n   * @param user The address of the borrower\\n   * @param debtToCover The amount of principal that the liquidator wants to repay\\n   * @param receiveAToken true if the liquidators wants to receive the aTokens, false if\\n   * he wants to receive the underlying asset directly\\n   **/\\n  function liquidationCall(\\n    address collateral,\\n    address principal,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken,\\n    address liquidationFeeTo\\n  ) external returns (uint256, string memory);\\n}\\n\",\"keccak256\":\"0x63c88d9d9b501f7f6fe0038ff8ac54a1e612420d1dab2830d97a336797cc7a22\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n  /**\\n   * @dev returns the asset price in ETH\\n   * @param asset the address of the asset\\n   * @return the ETH price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32c2052a5851605f9dcac3a78931fd879149c705a16413dab6c1098939a75576\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n  function baseVariableBorrowRate() external view returns (uint256);\\n\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n  function calculateInterestRates(\\n    address reserve,\\n    uint256 availableLiquidity,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  )\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function calculateInterestRates(\\n    address reserve,\\n    address aToken,\\n    uint256 liquidityAdded,\\n    uint256 liquidityTaken,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 liquidityRate,\\n      uint256 stableBorrowRate,\\n      uint256 variableBorrowRate\\n    );\\n}\\n\",\"keccak256\":\"0x3599558ea24cd106e82d420cd270c26f048453056a65a5049cf63a8e67c3923d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09ce61e28962584d42a99b05380b629c8a696b1cd5f987837a51740457070922\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param user The address of the user who triggered the minting\\n   * @param onBehalfOf The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the user\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param user The address of the user\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the user\\n   * @param balanceIncrease The the increase in balance since the last action of the user\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 rate\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Burns debt of `user`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param user The address of the user getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getAverageStableRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the user debt\\n   * @return The stable rate of the user\\n   **/\\n  function getUserStableRate(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the user\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdated(address user) external view returns (uint40);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getSupplyData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint40\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the user\\n   * @return The debt balance of the user since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0x9f1722620d0e8113e2824e06470d4f2a41ff9ad04d729c22dea3424233634a68\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param onBehalfOf The address of the user on which behalf minting has been performed\\n   * @param value The amount to be minted\\n   * @param index The last index of the reserve\\n   **/\\n  event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return `true` if the the previous balance of the user is 0\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when variable debt is burnt\\n   * @param user The user which debt has been burned\\n   * @param amount The amount of debt being burned\\n   * @param index The index of the user\\n   **/\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Burns user variable debt\\n   * @param user The user which debt is burnt\\n   * @param index The variable debt index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0xfacc023592fce2d6c8abbc89eeae0679dfac9facd2f4b15a83b21f5043784b25\",\"license\":\"agpl-3.0\"},\"contracts/protocol/lendingpool/LendingPoolCollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from '../../dependencies/openzeppelin/contracts//SafeMath.sol';\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts//IERC20.sol';\\nimport {IAToken} from '../../interfaces/IAToken.sol';\\nimport {IStableDebtToken} from '../../interfaces/IStableDebtToken.sol';\\nimport {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol';\\nimport {IPriceOracleGetter} from '../../interfaces/IPriceOracleGetter.sol';\\nimport {ILendingPoolCollateralManager} from '../../interfaces/ILendingPoolCollateralManager.sol';\\nimport {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';\\nimport {GenericLogic} from '../libraries/logic/GenericLogic.sol';\\nimport {Helpers} from '../libraries/helpers/Helpers.sol';\\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\\nimport {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {ValidationLogic} from '../libraries/logic/ValidationLogic.sol';\\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\\nimport {LendingPoolStorage} from './LendingPoolStorage.sol';\\nimport {UserConfiguration} from '../libraries/configuration/UserConfiguration.sol';\\nimport {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';\\nimport {ReserveLogic} from '../libraries/logic/ReserveLogic.sol';\\n\\n/**\\n * @title LendingPoolCollateralManager contract\\n * @author Aave\\n * @dev Implements actions involving management of collateral in the protocol, the main one being the liquidations\\n * IMPORTANT This contract will run always via DELEGATECALL, through the LendingPool, so the chain of inheritance\\n * is the same as the LendingPool, to have compatible storage layouts\\n **/\\ncontract LendingPoolCollateralManager is\\n  ILendingPoolCollateralManager,\\n  VersionedInitializable,\\n  LendingPoolStorage\\n{\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n  uint256 internal constant LIQUIDATION_CLOSE_FACTOR_PERCENT = 5000;\\n\\n  struct LiquidationCallLocalVars {\\n    uint256 userCollateralBalance;\\n    uint256 userStableDebt;\\n    uint256 userVariableDebt;\\n    uint256 maxLiquidatableDebt;\\n    uint256 actualDebtToLiquidate;\\n    uint256 liquidationRatio;\\n    uint256 maxAmountCollateralToLiquidate;\\n    uint256 userStableRate;\\n    uint256 maxCollateralToLiquidate;\\n    uint256 liquidationFee;\\n    uint256 debtAmountNeeded;\\n    uint256 healthFactor;\\n    uint256 liquidatorPreviousATokenBalance;\\n    IAToken collateralAtoken;\\n    bool isCollateralEnabled;\\n    DataTypes.InterestRateMode borrowRateMode;\\n    uint256 errorCode;\\n    string errorMsg;\\n  }\\n\\n  /**\\n   * @dev As thIS contract extends the VersionedInitializable contract to match the state\\n   * of the LendingPool contract, the getRevision() function is needed, but the value is not\\n   * important, as the initialize() function will never be called here\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Function to liquidate a position if its Health Factor drops below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken,\\n    address liquidationFeeTo\\n  ) external override returns (uint256, string memory) {\\n    DataTypes.ReserveData storage collateralReserve = _reserves[collateralAsset];\\n    DataTypes.ReserveData storage debtReserve = _reserves[debtAsset];\\n    DataTypes.UserConfigurationMap storage userConfig = _usersConfig[user];\\n\\n    LiquidationCallLocalVars memory vars;\\n\\n    (, , , , vars.healthFactor) = GenericLogic.calculateUserAccountData(\\n      user,\\n      _reserves,\\n      userConfig,\\n      _reservesList,\\n      _reservesCount,\\n      _addressesProvider.getPriceOracle()\\n    );\\n\\n    (vars.userStableDebt, vars.userVariableDebt) = Helpers.getUserCurrentDebt(user, debtReserve);\\n\\n    (vars.errorCode, vars.errorMsg) = ValidationLogic.validateLiquidationCall(\\n      collateralReserve,\\n      debtReserve,\\n      userConfig,\\n      vars.healthFactor,\\n      vars.userStableDebt,\\n      vars.userVariableDebt\\n    );\\n\\n    if (Errors.CollateralManagerErrors(vars.errorCode) != Errors.CollateralManagerErrors.NO_ERROR) {\\n      return (vars.errorCode, vars.errorMsg);\\n    }\\n\\n    vars.collateralAtoken = IAToken(collateralReserve.aTokenAddress);\\n\\n    vars.userCollateralBalance = vars.collateralAtoken.balanceOf(user);\\n\\n    vars.maxLiquidatableDebt = vars.userStableDebt.add(vars.userVariableDebt).percentMul(\\n      LIQUIDATION_CLOSE_FACTOR_PERCENT\\n    );\\n\\n    vars.actualDebtToLiquidate = debtToCover > vars.maxLiquidatableDebt\\n      ? vars.maxLiquidatableDebt\\n      : debtToCover;\\n\\n    (\\n      vars.maxCollateralToLiquidate,\\n      vars.liquidationFee,\\n      vars.debtAmountNeeded\\n    ) = _calculateAvailableCollateralToLiquidate(\\n      collateralReserve,\\n      debtReserve,\\n      collateralAsset,\\n      debtAsset,\\n      vars.actualDebtToLiquidate,\\n      vars.userCollateralBalance\\n    );\\n\\n    // If debtAmountNeeded < actualDebtToLiquidate, there isn't enough\\n    // collateral to cover the actual amount that is being liquidated, hence we liquidate\\n    // a smaller amount\\n\\n    if (vars.debtAmountNeeded < vars.actualDebtToLiquidate) {\\n      vars.actualDebtToLiquidate = vars.debtAmountNeeded;\\n    }\\n\\n    // If the liquidator reclaims the underlying asset, we make sure there is enough available liquidity in the\\n    // collateral reserve\\n    if (!receiveAToken) {\\n      uint256 currentAvailableCollateral =\\n        IERC20(collateralAsset).balanceOf(address(vars.collateralAtoken));\\n      if (currentAvailableCollateral < vars.maxCollateralToLiquidate) {\\n        return (\\n          uint256(Errors.CollateralManagerErrors.NOT_ENOUGH_LIQUIDITY),\\n          Errors.LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE\\n        );\\n      }\\n    }\\n\\n    debtReserve.updateState();\\n\\n    if (vars.userVariableDebt >= vars.actualDebtToLiquidate) {\\n      IVariableDebtToken(debtReserve.variableDebtTokenAddress).burn(\\n        user,\\n        vars.actualDebtToLiquidate,\\n        debtReserve.variableBorrowIndex\\n      );\\n    } else {\\n      // If the user doesn't have variable debt, no need to try to burn variable debt tokens\\n      if (vars.userVariableDebt > 0) {\\n        IVariableDebtToken(debtReserve.variableDebtTokenAddress).burn(\\n          user,\\n          vars.userVariableDebt,\\n          debtReserve.variableBorrowIndex\\n        );\\n      }\\n      IStableDebtToken(debtReserve.stableDebtTokenAddress).burn(\\n        user,\\n        vars.actualDebtToLiquidate.sub(vars.userVariableDebt)\\n      );\\n    }\\n\\n    debtReserve.updateInterestRates(\\n      debtAsset,\\n      debtReserve.aTokenAddress,\\n      vars.actualDebtToLiquidate,\\n      0\\n    );\\n\\n    if (receiveAToken) {\\n      vars.liquidatorPreviousATokenBalance = IERC20(vars.collateralAtoken).balanceOf(msg.sender);\\n      vars.collateralAtoken.transferOnLiquidation(user, msg.sender, vars.maxCollateralToLiquidate.sub(vars.liquidationFee));\\n      vars.collateralAtoken.transferOnLiquidation(user, liquidationFeeTo, vars.liquidationFee);\\n\\n      if (vars.liquidatorPreviousATokenBalance == 0) {\\n        DataTypes.UserConfigurationMap storage liquidatorConfig = _usersConfig[msg.sender];\\n        liquidatorConfig.setUsingAsCollateral(collateralReserve.id, true);\\n        emit ReserveUsedAsCollateralEnabled(collateralAsset, msg.sender);\\n      }\\n    } else {\\n      collateralReserve.updateState();\\n      collateralReserve.updateInterestRates(\\n        collateralAsset,\\n        address(vars.collateralAtoken),\\n        0,\\n        vars.maxCollateralToLiquidate\\n      );\\n\\n      // Burn the equivalent amount of aToken, sending the underlying to the liquidator\\n      vars.collateralAtoken.burn(\\n        user,\\n        msg.sender,\\n        vars.maxCollateralToLiquidate.sub(vars.liquidationFee),\\n        collateralReserve.liquidityIndex\\n      );\\n      vars.collateralAtoken.burn(\\n        user,\\n        liquidationFeeTo,\\n        vars.liquidationFee,\\n        collateralReserve.liquidityIndex\\n      );\\n    }\\n\\n    // If the collateral being liquidated is equal to the user balance,\\n    // we set the currency as not being used as collateral anymore\\n    if (vars.maxCollateralToLiquidate == vars.userCollateralBalance) {\\n      userConfig.setUsingAsCollateral(collateralReserve.id, false);\\n      emit ReserveUsedAsCollateralDisabled(collateralAsset, user);\\n    }\\n\\n    // Transfers the debt asset being repaid to the aToken, where the liquidity is kept\\n    IERC20(debtAsset).safeTransferFrom(\\n      msg.sender,\\n      debtReserve.aTokenAddress,\\n      vars.actualDebtToLiquidate\\n    );\\n\\n    emit LiquidationCall(\\n      collateralAsset,\\n      debtAsset,\\n      user,\\n      vars.actualDebtToLiquidate,\\n      vars.maxCollateralToLiquidate,\\n      msg.sender,\\n      receiveAToken,\\n      liquidationFeeTo\\n    );\\n\\n    return (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\\n  }\\n\\n  struct AvailableCollateralToLiquidateLocalVars {\\n    uint256 userCompoundedBorrowBalance;\\n    uint256 liquidationBonus;\\n    uint256 collateralPrice;\\n    uint256 debtAssetPrice;\\n    uint256 maxAmountCollateralToLiquidate;\\n    uint256 debtAssetDecimals;\\n    uint256 collateralDecimals;\\n  }\\n\\n  /**\\n   * @dev Calculates how much of a specific collateral can be liquidated, given\\n   * a certain amount of debt asset.\\n   * - This function needs to be called after all the checks to validate the liquidation have been performed,\\n   *   otherwise it might fail.\\n   * @param collateralReserve The data of the collateral reserve\\n   * @param debtReserve The data of the debt reserve\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated\\n   * @return collateralAmount: The maximum amount that is possible to liquidate given all the liquidation constraints\\n   *                           (user balance, close factor)\\n   *         debtAmountNeeded: The amount to repay with the liquidation\\n   **/\\n  function _calculateAvailableCollateralToLiquidate(\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ReserveData storage debtReserve,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    uint256 userCollateralBalance\\n  ) internal view returns (uint256, uint256, uint256) {\\n    uint256 collateralAmount = 0;\\n    uint256 debtAmountNeeded = 0;\\n    IPriceOracleGetter oracle = IPriceOracleGetter(_addressesProvider.getPriceOracle());\\n\\n    AvailableCollateralToLiquidateLocalVars memory vars;\\n\\n    vars.collateralPrice = oracle.getAssetPrice(collateralAsset);\\n    vars.debtAssetPrice = oracle.getAssetPrice(debtAsset);\\n\\n    (, , vars.liquidationBonus, vars.collateralDecimals, ) = collateralReserve\\n      .configuration\\n      .getParams();\\n    vars.debtAssetDecimals = debtReserve.configuration.getDecimals();\\n\\n    // This is the maximum possible amount of the selected collateral that can be liquidated, given the\\n    // max amount of liquidatable debt\\n    vars.maxAmountCollateralToLiquidate = vars\\n      .debtAssetPrice\\n      .mul(debtToCover)\\n      .mul(10**vars.collateralDecimals)\\n      .percentMul(vars.liquidationBonus)\\n      .div(vars.collateralPrice.mul(10**vars.debtAssetDecimals));\\n\\n    if (vars.maxAmountCollateralToLiquidate > userCollateralBalance) {\\n      collateralAmount = userCollateralBalance;\\n      debtAmountNeeded = vars\\n        .collateralPrice\\n        .mul(collateralAmount)\\n        .mul(10**vars.debtAssetDecimals)\\n        .div(vars.debtAssetPrice.mul(10**vars.collateralDecimals))\\n        .percentDiv(vars.liquidationBonus);\\n    } else {\\n      collateralAmount = vars.maxAmountCollateralToLiquidate;\\n      debtAmountNeeded = debtToCover;\\n    }\\n    uint256 bonusCollateral = collateralAmount.sub(vars\\n      .debtAssetPrice\\n      .mul(debtAmountNeeded)\\n      .mul(10**vars.collateralDecimals)\\n      .div(vars.collateralPrice.mul(10**vars.debtAssetDecimals))\\n    );\\n    return (collateralAmount, bonusCollateral.div(2), debtAmountNeeded);\\n  }\\n}\\n\",\"keccak256\":\"0xaedf3b37d62b31fbf6b034c16268aa03a92c6eb4235a9448477de958cd840555\",\"license\":\"agpl-3.0\"},\"contracts/protocol/lendingpool/LendingPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {UserConfiguration} from '../libraries/configuration/UserConfiguration.sol';\\nimport {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';\\nimport {ReserveLogic} from '../libraries/logic/ReserveLogic.sol';\\nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\\n\\ncontract LendingPoolStorage {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n  ILendingPoolAddressesProvider internal _addressesProvider;\\n\\n  mapping(address => DataTypes.ReserveData) internal _reserves;\\n  mapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\\n\\n  // the list of the available reserves, structured as a mapping for gas savings reasons\\n  mapping(uint256 => address) internal _reservesList;\\n\\n  uint256 internal _reservesCount;\\n\\n  bool internal _paused;\\n\\n  uint256 internal _maxStableRateBorrowSizePercent;\\n\\n  uint256 internal _flashLoanPremiumTotal;\\n\\n  uint256 internal _maxNumberOfReserves;\\n}\\n\",\"keccak256\":\"0xfd372ef8d9e9e552a2fbd4695083841d7612b558c062034e6f9647ba98b406d2\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the revision number of the contract\\n   * Needs to be defined in the inherited class as a constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns true if and only if the function is running in the constructor\\n   **/\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x171572af79570ce55dfd07dd9d5bc8b0402e2128924ab0a6641a6c3fdde884c8\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n  uint256 constant MAX_VALID_LTV = 65535;\\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 constant MAX_VALID_DECIMALS = 255;\\n  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n  /**\\n   * @dev Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv the new ltv\\n   **/\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @dev Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @dev Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   **/\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @dev Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   **/\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   **/\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @dev Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   **/\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @dev Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   **/\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   **/\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   **/\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   **/\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   **/\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   **/\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @dev Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   **/\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @dev Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n   **/\\n  function getFlags(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets the configuration paramters of the reserve\\n   * @param self The reserve configuration\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n   **/\\n  function getParams(DataTypes.ReserveConfigurationMap storage self)\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets the configuration paramters of the reserve from a memory object\\n   * @param self The reserve configuration\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n   **/\\n  function getParamsMemory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      self.data & ~LTV_MASK,\\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets the configuration flags of the reserve from a memory object\\n   * @param self The reserve configuration\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n   **/\\n  function getFlagsMemory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    return (\\n      (self.data & ~ACTIVE_MASK) != 0,\\n      (self.data & ~FROZEN_MASK) != 0,\\n      (self.data & ~BORROWING_MASK) != 0,\\n      (self.data & ~STABLE_BORROWING_MASK) != 0\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x7b81a7db75d8eae5afa0984dd6f7c83b6606d13ec746c5abc39e21ad28a1c7fc\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n  uint256 internal constant BORROWING_MASK =\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n  /**\\n   * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\\n   **/\\n  function setBorrowing(\\n    DataTypes.UserConfigurationMap storage self,\\n    uint256 reserveIndex,\\n    bool borrowing\\n  ) internal {\\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n    self.data =\\n      (self.data & ~(1 << (reserveIndex * 2))) |\\n      (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n  }\\n\\n  /**\\n   * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n   **/\\n  function setUsingAsCollateral(\\n    DataTypes.UserConfigurationMap storage self,\\n    uint256 reserveIndex,\\n    bool usingAsCollateral\\n  ) internal {\\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n    self.data =\\n      (self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n      (uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n  }\\n\\n  /**\\n   * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n   **/\\n  function isUsingAsCollateralOrBorrowing(\\n    DataTypes.UserConfigurationMap memory self,\\n    uint256 reserveIndex\\n  ) internal pure returns (bool) {\\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n    return (self.data >> (reserveIndex * 2)) & 3 != 0;\\n  }\\n\\n  /**\\n   * @dev Used to validate if a user has been using the reserve for borrowing\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing, false otherwise\\n   **/\\n  function isBorrowing(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n    return (self.data >> (reserveIndex * 2)) & 1 != 0;\\n  }\\n\\n  /**\\n   * @dev Used to validate if a user has been using the reserve as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve as collateral, false otherwise\\n   **/\\n  function isUsingAsCollateral(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    require(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n    return (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n  }\\n\\n  /**\\n   * @dev Used to validate if a user has been borrowing from any reserve\\n   * @param self The configuration object\\n   * @return True if the user has been borrowing any reserve, false otherwise\\n   **/\\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data & BORROWING_MASK != 0;\\n  }\\n\\n  /**\\n   * @dev Used to validate if a user has not been using any reserve\\n   * @param self The configuration object\\n   * @return True if the user has been borrowing any reserve, false otherwise\\n   **/\\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data == 0;\\n  }\\n}\\n\",\"keccak256\":\"0x0950587e4e87987d88cc6c6a17ed521a9676f9781299f1eb4b4ca5436f2d8108\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant LP_NOT_CONTRACT = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\",\"keccak256\":\"0x45f2f13f3cdf758d0b4b4dfeb02f365fe6b0328b23cf0544fc12ee89e383d7f3\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/helpers/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title Helpers library\\n * @author Aave\\n */\\nlibrary Helpers {\\n  /**\\n   * @dev Fetches the user current stable and variable debt balances\\n   * @param user The user address\\n   * @param reserve The reserve data object\\n   * @return The stable and variable debt balance\\n   **/\\n  function getUserCurrentDebt(address user, DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    return (\\n      IERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n      IERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n    );\\n  }\\n\\n  function getUserCurrentDebtMemory(address user, DataTypes.ReserveData memory reserve)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    return (\\n      IERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n      IERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xc5c387fae5062875b4420f89b616ff013d5ac4d975af97a5a36494c13a757b7a\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title GenericLogic library\\n * @author Aave\\n * @title Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n  uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\n\\n  struct balanceDecreaseAllowedLocalVars {\\n    uint256 decimals;\\n    uint256 liquidationThreshold;\\n    uint256 totalCollateralInETH;\\n    uint256 totalDebtInETH;\\n    uint256 avgLiquidationThreshold;\\n    uint256 amountToDecreaseInETH;\\n    uint256 collateralBalanceAfterDecrease;\\n    uint256 liquidationThresholdAfterDecrease;\\n    uint256 healthFactorAfterDecrease;\\n    bool reserveUsageAsCollateralEnabled;\\n  }\\n\\n  /**\\n   * @dev Checks if a specific balance decrease is allowed\\n   * (i.e. doesn't bring the user borrow position health factor under HEALTH_FACTOR_LIQUIDATION_THRESHOLD)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param user The address of the user\\n   * @param amount The amount to decrease\\n   * @param reservesData The data of all the reserves\\n   * @param userConfig The user configuration\\n   * @param reserves The list of all the active reserves\\n   * @param oracle The address of the oracle contract\\n   * @return true if the decrease of the balance is allowed\\n   **/\\n  function balanceDecreaseAllowed(\\n    address asset,\\n    address user,\\n    uint256 amount,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap calldata userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  ) external view returns (bool) {\\n    if (!userConfig.isBorrowingAny() || !userConfig.isUsingAsCollateral(reservesData[asset].id)) {\\n      return true;\\n    }\\n\\n    balanceDecreaseAllowedLocalVars memory vars;\\n\\n    (, vars.liquidationThreshold, , vars.decimals, ) = reservesData[asset]\\n      .configuration\\n      .getParams();\\n\\n    if (vars.liquidationThreshold == 0) {\\n      return true;\\n    }\\n\\n    (\\n      vars.totalCollateralInETH,\\n      vars.totalDebtInETH,\\n      ,\\n      vars.avgLiquidationThreshold,\\n\\n    ) = calculateUserAccountData(user, reservesData, userConfig, reserves, reservesCount, oracle);\\n\\n    if (vars.totalDebtInETH == 0) {\\n      return true;\\n    }\\n\\n    vars.amountToDecreaseInETH = IPriceOracleGetter(oracle).getAssetPrice(asset).mul(amount).div(\\n      10**vars.decimals\\n    );\\n\\n    vars.collateralBalanceAfterDecrease = vars.totalCollateralInETH.sub(vars.amountToDecreaseInETH);\\n\\n    //if there is a borrow, there can't be 0 collateral\\n    if (vars.collateralBalanceAfterDecrease == 0) {\\n      return false;\\n    }\\n\\n    vars.liquidationThresholdAfterDecrease = vars\\n      .totalCollateralInETH\\n      .mul(vars.avgLiquidationThreshold)\\n      .sub(vars.amountToDecreaseInETH.mul(vars.liquidationThreshold))\\n      .div(vars.collateralBalanceAfterDecrease);\\n\\n    uint256 healthFactorAfterDecrease =\\n      calculateHealthFactorFromBalances(\\n        vars.collateralBalanceAfterDecrease,\\n        vars.totalDebtInETH,\\n        vars.liquidationThresholdAfterDecrease\\n      );\\n\\n    return healthFactorAfterDecrease >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\\n  }\\n\\n  struct CalculateUserAccountDataVars {\\n    uint256 reserveUnitPrice;\\n    uint256 tokenUnit;\\n    uint256 compoundedLiquidityBalance;\\n    uint256 compoundedBorrowBalance;\\n    uint256 decimals;\\n    uint256 ltv;\\n    uint256 liquidationThreshold;\\n    uint256 i;\\n    uint256 healthFactor;\\n    uint256 totalCollateralInETH;\\n    uint256 totalDebtInETH;\\n    uint256 avgLtv;\\n    uint256 avgLiquidationThreshold;\\n    uint256 reservesLength;\\n    bool healthFactorBelowThreshold;\\n    address currentReserveAddress;\\n    bool usageAsCollateralEnabled;\\n    bool userUsesReserveAsCollateral;\\n  }\\n\\n  /**\\n   * @dev Calculates the user data across the reserves.\\n   * this includes the total liquidity/collateral/borrow balances in ETH,\\n   * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n   * @param user The address of the user\\n   * @param reservesData Data of all the reserves\\n   * @param userConfig The configuration of the user\\n   * @param reserves The list of the available reserves\\n   * @param oracle The price oracle address\\n   * @return The total collateral and total debt of the user in ETH, the avg ltv, liquidation threshold and the HF\\n   **/\\n  function calculateUserAccountData(\\n    address user,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    CalculateUserAccountDataVars memory vars;\\n\\n    if (userConfig.isEmpty()) {\\n      return (0, 0, 0, 0, uint256(-1));\\n    }\\n    for (vars.i = 0; vars.i < reservesCount; vars.i++) {\\n      if (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n        continue;\\n      }\\n\\n      vars.currentReserveAddress = reserves[vars.i];\\n      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n      (vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve\\n        .configuration\\n        .getParams();\\n\\n      vars.tokenUnit = 10**vars.decimals;\\n      vars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\\n\\n      if (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\\n        vars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\\n\\n        uint256 liquidityBalanceETH =\\n          vars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(vars.tokenUnit);\\n\\n        vars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\\n\\n        vars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\\n        vars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\\n          liquidityBalanceETH.mul(vars.liquidationThreshold)\\n        );\\n      }\\n\\n      if (userConfig.isBorrowing(vars.i)) {\\n        vars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(\\n          user\\n        );\\n        vars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\\n          IERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\\n        );\\n\\n        vars.totalDebtInETH = vars.totalDebtInETH.add(\\n          vars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\\n        );\\n      }\\n    }\\n\\n    vars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\\n    vars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\\n      ? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\\n      : 0;\\n\\n    vars.healthFactor = calculateHealthFactorFromBalances(\\n      vars.totalCollateralInETH,\\n      vars.totalDebtInETH,\\n      vars.avgLiquidationThreshold\\n    );\\n    return (\\n      vars.totalCollateralInETH,\\n      vars.totalDebtInETH,\\n      vars.avgLtv,\\n      vars.avgLiquidationThreshold,\\n      vars.healthFactor\\n    );\\n  }\\n\\n  /**\\n   * @dev Calculates the health factor from the corresponding balances\\n   * @param totalCollateralInETH The total collateral in ETH\\n   * @param totalDebtInETH The total debt in ETH\\n   * @param liquidationThreshold The avg liquidation threshold\\n   * @return The health factor calculated from the balances provided\\n   **/\\n  function calculateHealthFactorFromBalances(\\n    uint256 totalCollateralInETH,\\n    uint256 totalDebtInETH,\\n    uint256 liquidationThreshold\\n  ) internal pure returns (uint256) {\\n    if (totalDebtInETH == 0) return uint256(-1);\\n\\n    return (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\\n  }\\n\\n  /**\\n   * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\\n   * average Loan To Value\\n   * @param totalCollateralInETH The total collateral in ETH\\n   * @param totalDebtInETH The total borrow balance\\n   * @param ltv The average loan to value\\n   * @return the amount available to borrow in ETH for the user\\n   **/\\n\\n  function calculateAvailableBorrowsETH(\\n    uint256 totalCollateralInETH,\\n    uint256 totalDebtInETH,\\n    uint256 ltv\\n  ) internal pure returns (uint256) {\\n    uint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\\n\\n    if (availableBorrowsETH < totalDebtInETH) {\\n      return 0;\\n    }\\n\\n    availableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\\n    return availableBorrowsETH;\\n  }\\n}\\n\",\"keccak256\":\"0xe9dde5efd3236071e10050e2eb52f11344da3f95ee2f01c46b85f0bcf2d43b7d\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {IAToken} from '../../../interfaces/IAToken.sol';\\nimport {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\\nimport {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {MathUtils} from '../math/MathUtils.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed asset,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  /**\\n   * @dev Returns the ongoing normalized income for the reserve\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return the normalized income. expressed in ray\\n   **/\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == uint40(block.timestamp)) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.liquidityIndex;\\n    }\\n\\n    uint256 cumulated =\\n      MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n        reserve.liquidityIndex\\n      );\\n\\n    return cumulated;\\n  }\\n\\n  /**\\n   * @dev Returns the ongoing normalized variable debt for the reserve\\n   * A value of 1e27 means there is no debt. As time passes, the income is accrued\\n   * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n   * @param reserve The reserve object\\n   * @return The normalized variable debt. expressed in ray\\n   **/\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == uint40(block.timestamp)) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.variableBorrowIndex;\\n    }\\n\\n    uint256 cumulated =\\n      MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n        reserve.variableBorrowIndex\\n      );\\n\\n    return cumulated;\\n  }\\n\\n  /**\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\n   * @param reserve the reserve object\\n   **/\\n  function updateState(DataTypes.ReserveData storage reserve) internal {\\n    uint256 scaledVariableDebt =\\n      IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\n    uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\n    uint256 previousLiquidityIndex = reserve.liquidityIndex;\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n\\n    (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) =\\n      _updateIndexes(\\n        reserve,\\n        scaledVariableDebt,\\n        previousLiquidityIndex,\\n        previousVariableBorrowIndex,\\n        lastUpdatedTimestamp\\n      );\\n\\n    _mintToTreasury(\\n      reserve,\\n      scaledVariableDebt,\\n      previousVariableBorrowIndex,\\n      newLiquidityIndex,\\n      newVariableBorrowIndex,\\n      lastUpdatedTimestamp\\n    );\\n  }\\n\\n  /**\\n   * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example to accumulate\\n   * the flashloan fee to the reserve, and spread it between all the depositors\\n   * @param reserve The reserve object\\n   * @param totalLiquidity The total liquidity available in the reserve\\n   * @param amount The amount to accomulate\\n   **/\\n  function cumulateToLiquidityIndex(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 totalLiquidity,\\n    uint256 amount\\n  ) internal {\\n    uint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\\n\\n    uint256 result = amountToLiquidityRatio.add(WadRayMath.ray());\\n\\n    result = result.rayMul(reserve.liquidityIndex);\\n    require(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n    reserve.liquidityIndex = uint128(result);\\n  }\\n\\n  /**\\n   * @dev Initializes a reserve\\n   * @param reserve The reserve object\\n   * @param aTokenAddress The address of the overlying atoken contract\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function init(\\n    DataTypes.ReserveData storage reserve,\\n    address aTokenAddress,\\n    address stableDebtTokenAddress,\\n    address variableDebtTokenAddress,\\n    address interestRateStrategyAddress\\n  ) external {\\n    require(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\\n\\n    reserve.liquidityIndex = uint128(WadRayMath.ray());\\n    reserve.variableBorrowIndex = uint128(WadRayMath.ray());\\n    reserve.aTokenAddress = aTokenAddress;\\n    reserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n    reserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n    reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n  }\\n\\n  struct UpdateInterestRatesLocalVars {\\n    address stableDebtTokenAddress;\\n    uint256 availableLiquidity;\\n    uint256 totalStableDebt;\\n    uint256 newLiquidityRate;\\n    uint256 newStableRate;\\n    uint256 newVariableRate;\\n    uint256 avgStableRate;\\n    uint256 totalVariableDebt;\\n  }\\n\\n  /**\\n   * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n   * @param reserve The address of the reserve to be updated\\n   * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n   **/\\n  function updateInterestRates(\\n    DataTypes.ReserveData storage reserve,\\n    address reserveAddress,\\n    address aTokenAddress,\\n    uint256 liquidityAdded,\\n    uint256 liquidityTaken\\n  ) internal {\\n    UpdateInterestRatesLocalVars memory vars;\\n\\n    vars.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n\\n    (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(vars.stableDebtTokenAddress)\\n      .getTotalSupplyAndAvgRate();\\n\\n    //calculates the total variable debt locally using the scaled total supply instead\\n    //of totalSupply(), as it's noticeably cheaper. Also, the index has been\\n    //updated by the previous updateState() call\\n    vars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress)\\n      .scaledTotalSupply()\\n      .rayMul(reserve.variableBorrowIndex);\\n\\n    (\\n      vars.newLiquidityRate,\\n      vars.newStableRate,\\n      vars.newVariableRate\\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\\n      reserveAddress,\\n      aTokenAddress,\\n      liquidityAdded,\\n      liquidityTaken,\\n      vars.totalStableDebt,\\n      vars.totalVariableDebt,\\n      vars.avgStableRate,\\n      reserve.configuration.getReserveFactor()\\n    );\\n    require(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\\n    require(vars.newStableRate <= type(uint128).max, Errors.RL_STABLE_BORROW_RATE_OVERFLOW);\\n    require(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\\n\\n    reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\n    reserve.currentStableBorrowRate = uint128(vars.newStableRate);\\n    reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\n\\n    emit ReserveDataUpdated(\\n      reserveAddress,\\n      vars.newLiquidityRate,\\n      vars.newStableRate,\\n      vars.newVariableRate,\\n      reserve.liquidityIndex,\\n      reserve.variableBorrowIndex\\n    );\\n  }\\n\\n  struct MintToTreasuryLocalVars {\\n    uint256 currentStableDebt;\\n    uint256 principalStableDebt;\\n    uint256 previousStableDebt;\\n    uint256 currentVariableDebt;\\n    uint256 previousVariableDebt;\\n    uint256 avgStableRate;\\n    uint256 cumulatedStableInterest;\\n    uint256 totalDebtAccrued;\\n    uint256 amountToMint;\\n    uint256 reserveFactor;\\n    uint40 stableSupplyUpdatedTimestamp;\\n  }\\n\\n  /**\\n   * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\n   * specific asset.\\n   * @param reserve The reserve reserve to be updated\\n   * @param scaledVariableDebt The current scaled total variable debt\\n   * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\n   * @param newLiquidityIndex The new liquidity index\\n   * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\n   **/\\n  function _mintToTreasury(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 scaledVariableDebt,\\n    uint256 previousVariableBorrowIndex,\\n    uint256 newLiquidityIndex,\\n    uint256 newVariableBorrowIndex,\\n    uint40 timestamp\\n  ) internal {\\n    MintToTreasuryLocalVars memory vars;\\n\\n    vars.reserveFactor = reserve.configuration.getReserveFactor();\\n\\n    if (vars.reserveFactor == 0) {\\n      return;\\n    }\\n\\n    //fetching the principal, total stable debt and the avg stable rate\\n    (\\n      vars.principalStableDebt,\\n      vars.currentStableDebt,\\n      vars.avgStableRate,\\n      vars.stableSupplyUpdatedTimestamp\\n    ) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\\n\\n    //calculate the last principal variable debt\\n    vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\n\\n    //calculate the new total supply after accumulation of the index\\n    vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\n\\n    //calculate the stable debt until the last timestamp update\\n    vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n      vars.avgStableRate,\\n      vars.stableSupplyUpdatedTimestamp,\\n      timestamp\\n    );\\n\\n    vars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\\n\\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n    vars.totalDebtAccrued = vars\\n      .currentVariableDebt\\n      .add(vars.currentStableDebt)\\n      .sub(vars.previousVariableDebt)\\n      .sub(vars.previousStableDebt);\\n\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\n\\n    if (vars.amountToMint != 0) {\\n      IAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the reserve indexes and the timestamp of the update\\n   * @param reserve The reserve reserve to be updated\\n   * @param scaledVariableDebt The scaled variable debt\\n   * @param liquidityIndex The last stored liquidity index\\n   * @param variableBorrowIndex The last stored variable borrow index\\n   **/\\n  function _updateIndexes(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 scaledVariableDebt,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex,\\n    uint40 timestamp\\n  ) internal returns (uint256, uint256) {\\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\n    uint256 newLiquidityIndex = liquidityIndex;\\n    uint256 newVariableBorrowIndex = variableBorrowIndex;\\n\\n    //only cumulating if there is any income being produced\\n    if (currentLiquidityRate > 0) {\\n      uint256 cumulatedLiquidityInterest =\\n        MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\n      newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\n      require(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n      reserve.liquidityIndex = uint128(newLiquidityIndex);\\n\\n      //as the liquidity rate might come only from stable rate loans, we need to ensure\\n      //that there is actual variable debt before accumulating\\n      if (scaledVariableDebt != 0) {\\n        uint256 cumulatedVariableBorrowInterest =\\n          MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\\n        newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\n        require(\\n          newVariableBorrowIndex <= type(uint128).max,\\n          Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW\\n        );\\n        reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\n      }\\n    }\\n\\n    //solium-disable-next-line\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n    return (newLiquidityIndex, newVariableBorrowIndex);\\n  }\\n}\\n\",\"keccak256\":\"0x419f0e145d396a4db35937af2c154a190d33502d2f21bcba2ea752012cf5685d\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {Helpers} from '../helpers/Helpers.sol';\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n  uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\\n  uint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\\n\\n  /**\\n   * @dev Validates a deposit action\\n   * @param reserve The reserve object on which the user is depositing\\n   * @param amount The amount to be deposited\\n   */\\n  function validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\\n    (bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\\n\\n    require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n    require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n    require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n  }\\n\\n  /**\\n   * @dev Validates a withdraw action\\n   * @param reserveAddress The address of the reserve\\n   * @param amount The amount to be withdrawn\\n   * @param userBalance The balance of the user\\n   * @param reservesData The reserves state\\n   * @param userConfig The user configuration\\n   * @param reserves The addresses of the reserves\\n   * @param reservesCount The number of reserves\\n   * @param oracle The price oracle\\n   */\\n  function validateWithdraw(\\n    address reserveAddress,\\n    uint256 amount,\\n    uint256 userBalance,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  ) external view {\\n    require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n    require(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n\\n    (bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\\n    require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n    require(\\n      GenericLogic.balanceDecreaseAllowed(\\n        reserveAddress,\\n        msg.sender,\\n        amount,\\n        reservesData,\\n        userConfig,\\n        reserves,\\n        reservesCount,\\n        oracle\\n      ),\\n      Errors.VL_TRANSFER_NOT_ALLOWED\\n    );\\n  }\\n\\n  struct ValidateBorrowLocalVars {\\n    uint256 currentLtv;\\n    uint256 currentLiquidationThreshold;\\n    uint256 amountOfCollateralNeededETH;\\n    uint256 userCollateralBalanceETH;\\n    uint256 userBorrowBalanceETH;\\n    uint256 availableLiquidity;\\n    uint256 healthFactor;\\n    bool isActive;\\n    bool isFrozen;\\n    bool borrowingEnabled;\\n    bool stableRateBorrowingEnabled;\\n  }\\n\\n  /**\\n   * @dev Validates a borrow action\\n   * @param asset The address of the asset to borrow\\n   * @param reserve The reserve state from which the user is borrowing\\n   * @param userAddress The address of the user\\n   * @param amount The amount to be borrowed\\n   * @param amountInETH The amount to be borrowed, in ETH\\n   * @param interestRateMode The interest rate mode at which the user is borrowing\\n   * @param maxStableLoanPercent The max amount of the liquidity that can be borrowed at stable rate, in percentage\\n   * @param reservesData The state of all the reserves\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param reserves The addresses of all the active reserves\\n   * @param oracle The price oracle\\n   */\\n\\n  function validateBorrow(\\n    address asset,\\n    DataTypes.ReserveData storage reserve,\\n    address userAddress,\\n    uint256 amount,\\n    uint256 amountInETH,\\n    uint256 interestRateMode,\\n    uint256 maxStableLoanPercent,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  ) external view {\\n    ValidateBorrowLocalVars memory vars;\\n\\n    (vars.isActive, vars.isFrozen, vars.borrowingEnabled, vars.stableRateBorrowingEnabled) = reserve\\n      .configuration\\n      .getFlags();\\n\\n    require(vars.isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n    require(!vars.isFrozen, Errors.VL_RESERVE_FROZEN);\\n    require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\n    require(vars.borrowingEnabled, Errors.VL_BORROWING_NOT_ENABLED);\\n\\n    //validate interest rate mode\\n    require(\\n      uint256(DataTypes.InterestRateMode.VARIABLE) == interestRateMode ||\\n        uint256(DataTypes.InterestRateMode.STABLE) == interestRateMode,\\n      Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED\\n    );\\n\\n    (\\n      vars.userCollateralBalanceETH,\\n      vars.userBorrowBalanceETH,\\n      vars.currentLtv,\\n      vars.currentLiquidationThreshold,\\n      vars.healthFactor\\n    ) = GenericLogic.calculateUserAccountData(\\n      userAddress,\\n      reservesData,\\n      userConfig,\\n      reserves,\\n      reservesCount,\\n      oracle\\n    );\\n\\n    require(vars.userCollateralBalanceETH > 0, Errors.VL_COLLATERAL_BALANCE_IS_0);\\n\\n    require(\\n      vars.healthFactor > GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n      Errors.VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n    );\\n\\n    //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n    vars.amountOfCollateralNeededETH = vars.userBorrowBalanceETH.add(amountInETH).percentDiv(\\n      vars.currentLtv\\n    ); //LTV is calculated in percentage\\n\\n    require(\\n      vars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\\n      Errors.VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\\n    );\\n\\n    /**\\n     * Following conditions need to be met if the user is borrowing at a stable rate:\\n     * 1. Reserve must be enabled for stable rate borrowing\\n     * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n     *    they are borrowing, to prevent abuses.\\n     * 3. Users will be able to borrow only a portion of the total available liquidity\\n     **/\\n\\n    if (interestRateMode == uint256(DataTypes.InterestRateMode.STABLE)) {\\n      //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n      require(vars.stableRateBorrowingEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n      require(\\n        !userConfig.isUsingAsCollateral(reserve.id) ||\\n          reserve.configuration.getLtv() == 0 ||\\n          amount > IERC20(reserve.aTokenAddress).balanceOf(userAddress),\\n        Errors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n      );\\n\\n      vars.availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\\n\\n      //calculate the max available loan size in stable rate mode as a percentage of the\\n      //available liquidity\\n      uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(maxStableLoanPercent);\\n\\n      require(amount <= maxLoanSizeStable, Errors.VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates a repay action\\n   * @param reserve The reserve state from which the user is repaying\\n   * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\n   * @param onBehalfOf The address of the user msg.sender is repaying for\\n   * @param stableDebt The borrow balance of the user\\n   * @param variableDebt The borrow balance of the user\\n   */\\n  function validateRepay(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 amountSent,\\n    DataTypes.InterestRateMode rateMode,\\n    address onBehalfOf,\\n    uint256 stableDebt,\\n    uint256 variableDebt\\n  ) external view {\\n    bool isActive = reserve.configuration.getActive();\\n\\n    require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n    require(amountSent > 0, Errors.VL_INVALID_AMOUNT);\\n\\n    require(\\n      (stableDebt > 0 &&\\n        DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\\n        (variableDebt > 0 &&\\n          DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\\n      Errors.VL_NO_DEBT_OF_SELECTED_TYPE\\n    );\\n\\n    require(\\n      amountSent != uint256(-1) || msg.sender == onBehalfOf,\\n      Errors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n    );\\n  }\\n\\n  /**\\n   * @dev Validates a swap of borrow rate mode.\\n   * @param reserve The reserve state on which the user is swapping the rate\\n   * @param userConfig The user reserves configuration\\n   * @param stableDebt The stable debt of the user\\n   * @param variableDebt The variable debt of the user\\n   * @param currentRateMode The rate mode of the borrow\\n   */\\n  function validateSwapRateMode(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    uint256 stableDebt,\\n    uint256 variableDebt,\\n    DataTypes.InterestRateMode currentRateMode\\n  ) external view {\\n    (bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\\n\\n    require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n    require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\n    if (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n      require(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\\n    } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n      require(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\\n      /**\\n       * user wants to swap to stable, before swapping we need to ensure that\\n       * 1. stable borrow rate is enabled on the reserve\\n       * 2. user is not trying to abuse the reserve by depositing\\n       * more collateral than he is borrowing, artificially lowering\\n       * the interest rate, borrowing at variable, and switching to stable\\n       **/\\n      require(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n      require(\\n        !userConfig.isUsingAsCollateral(reserve.id) ||\\n          reserve.configuration.getLtv() == 0 ||\\n          stableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\\n        Errors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n      );\\n    } else {\\n      revert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\\n    }\\n  }\\n\\n  /**\\n   * @dev Validates a stable borrow rate rebalance action\\n   * @param reserve The reserve state on which the user is getting rebalanced\\n   * @param reserveAddress The address of the reserve\\n   * @param stableDebtToken The stable debt token instance\\n   * @param variableDebtToken The variable debt token instance\\n   * @param aTokenAddress The address of the aToken contract\\n   */\\n  function validateRebalanceStableBorrowRate(\\n    DataTypes.ReserveData storage reserve,\\n    address reserveAddress,\\n    IERC20 stableDebtToken,\\n    IERC20 variableDebtToken,\\n    address aTokenAddress\\n  ) external view {\\n    (bool isActive, , , ) = reserve.configuration.getFlags();\\n\\n    require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n    //if the usage ratio is below 95%, no rebalances are needed\\n    uint256 totalDebt =\\n      stableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\\n    uint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\\n    uint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n    //if the liquidity rate is below REBALANCE_UP_THRESHOLD of the max variable APR at 95% usage,\\n    //then we allow rebalancing of the stable rate positions.\\n\\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n    uint256 maxVariableBorrowRate =\\n      IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).getMaxVariableBorrowRate();\\n\\n    require(\\n      usageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\\n        currentLiquidityRate <=\\n        maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\\n      Errors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n    );\\n  }\\n\\n  /**\\n   * @dev Validates the action of setting an asset as collateral\\n   * @param reserve The state of the reserve that the user is enabling or disabling as collateral\\n   * @param reserveAddress The address of the reserve\\n   * @param reservesData The data of all the reserves\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param reserves The addresses of all the active reserves\\n   * @param oracle The price oracle\\n   */\\n  function validateSetUseReserveAsCollateral(\\n    DataTypes.ReserveData storage reserve,\\n    address reserveAddress,\\n    bool useAsCollateral,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  ) external view {\\n    uint256 underlyingBalance = IERC20(reserve.aTokenAddress).balanceOf(msg.sender);\\n\\n    require(underlyingBalance > 0, Errors.VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0);\\n\\n    require(\\n      useAsCollateral ||\\n        GenericLogic.balanceDecreaseAllowed(\\n          reserveAddress,\\n          msg.sender,\\n          underlyingBalance,\\n          reservesData,\\n          userConfig,\\n          reserves,\\n          reservesCount,\\n          oracle\\n        ),\\n      Errors.VL_DEPOSIT_ALREADY_IN_USE\\n    );\\n  }\\n\\n  /**\\n   * @dev Validates a flashloan action\\n   * @param assets The assets being flashborrowed\\n   * @param amounts The amounts for each asset being borrowed\\n   **/\\n  function validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\\n    require(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\\n  }\\n\\n  /**\\n   * @dev Validates the liquidation action\\n   * @param collateralReserve The reserve data of the collateral\\n   * @param principalReserve The reserve data of the principal\\n   * @param userConfig The user configuration\\n   * @param userHealthFactor The user's health factor\\n   * @param userStableDebt Total stable debt balance of the user\\n   * @param userVariableDebt Total variable debt balance of the user\\n   **/\\n  function validateLiquidationCall(\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ReserveData storage principalReserve,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    uint256 userHealthFactor,\\n    uint256 userStableDebt,\\n    uint256 userVariableDebt\\n  ) internal view returns (uint256, string memory) {\\n    if (\\n      !collateralReserve.configuration.getActive() || !principalReserve.configuration.getActive()\\n    ) {\\n      return (\\n        uint256(Errors.CollateralManagerErrors.NO_ACTIVE_RESERVE),\\n        Errors.VL_NO_ACTIVE_RESERVE\\n      );\\n    }\\n\\n    if (userHealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD) {\\n      return (\\n        uint256(Errors.CollateralManagerErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\\n        Errors.LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n      );\\n    }\\n\\n    bool isCollateralEnabled =\\n      collateralReserve.configuration.getLiquidationThreshold() > 0 &&\\n        userConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n    //if collateral isn't enabled as collateral by user, it cannot be liquidated\\n    if (!isCollateralEnabled) {\\n      return (\\n        uint256(Errors.CollateralManagerErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\\n        Errors.LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\\n      );\\n    }\\n\\n    if (userStableDebt == 0 && userVariableDebt == 0) {\\n      return (\\n        uint256(Errors.CollateralManagerErrors.CURRRENCY_NOT_BORROWED),\\n        Errors.LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n      );\\n    }\\n\\n    return (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\\n  }\\n\\n  /**\\n   * @dev Validates an aToken transfer\\n   * @param from The user from which the aTokens are being transferred\\n   * @param reservesData The state of all the reserves\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param reserves The addresses of all the active reserves\\n   * @param oracle The price oracle\\n   */\\n  function validateTransfer(\\n    address from,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(uint256 => address) storage reserves,\\n    uint256 reservesCount,\\n    address oracle\\n  ) internal view {\\n    (, , , , uint256 healthFactor) =\\n      GenericLogic.calculateUserAccountData(\\n        from,\\n        reservesData,\\n        userConfig,\\n        reserves,\\n        reservesCount,\\n        oracle\\n      );\\n\\n    require(\\n      healthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n      Errors.VL_TRANSFER_NOT_ALLOWED\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1acfcd2421a6cb980cd5885441b72fd2994e8c4392182ba44feaabe8fd0dff30\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   **/\\n\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    //solium-disable-next-line\\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n    return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   **/\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x4aad24c95e765738c5c3d728d1b387d9bd9bd19d455c43f5688ce62603c07c11\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\",\"keccak256\":\"0xffcdc80c257fd97d6ab702c60e328d806e54d940cc21a485e019418897b7115c\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x8c4bd191a824ee46287a3c55799bbd8ff5a7ab4fe318c4a76b8d570ab680a67e\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4542e2cf81b3cbcda615ef4960a53dc09094e975649b40bc70274f6592975648\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50612c37806100246000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c42879714610030575b600080fd5b61007c600480360360c081101561004657600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013591608082013515159160a00135166100fb565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156100bf5781810151838201526020016100a7565b50505050905090810190601f1680156100ec5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6001600160a01b03808716600090815260356020908152604080832089851684528184209489168452603690925282209192606092610138612963565b6101d88a6035846040518060200160405290816000820154815250506037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156101a757600080fd5b505afa1580156101bb573d6000803e3d6000fd5b505050506040513d60208110156101d157600080fd5b5051610b2b565b610160860152506101ef92508c9150859050610ff2565b60408301819052602083018290526101608301516102149287928792879290916110f5565b6102208301526102008201819052600090600981111561023057fe5b600981111561023b57fe5b14610259578061020001518161022001519550955050505050610b20565b6004808501546001600160a01b039081166101a08401819052604080516370a0823160e01b8152928e169383019390935291516370a0823191602480820192602092909190829003018186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d60208110156102dc57600080fd5b505181526040810151602082015161030191611388916102fb91611231565b90611292565b606082018190528911610314578861031a565b80606001515b81608001818152505061033984848e8e8560800151866000015161137c565b61014084018190526101208401919091526101008301919091526080820151111561036a5761014081015160808201525b8761042c5760008c6001600160a01b03166370a08231836101a001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103c357600080fd5b505afa1580156103d7573d6000803e3d6000fd5b505050506040513d60208110156103ed57600080fd5b505161010083015190915081101561042a57600560405180604001604052806002815260200161343560f01b815250965096505050505050610b20565b505b6104358361165d565b80608001518160400151106104d85760068301546080820151600185015460408051637a94c56560e11b81526001600160a01b038f811660048301526024820194909452600160801b9092046001600160801b0316604483015251919092169163f5298aca91606480830192600092919082900301818387803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b505050506105fc565b60408101511561057157600683015460408281015160018601548251637a94c56560e11b81526001600160a01b038f811660048301526024820193909352600160801b9091046001600160801b03166044820152915192169163f5298aca9160648082019260009290919082900301818387803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b505050505b6005830154604082015160808301516001600160a01b0390921691639dc29fac918d9161059d91611727565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050505b6004830154608082015161061f9185918e916001600160a01b0316906000611769565b871561084857806101a001516001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561067757600080fd5b505afa15801561068b573d6000803e3d6000fd5b505050506040513d60208110156106a157600080fd5b50516101808201526101a08101516101208201516101008301516001600160a01b039092169163f866c319918d9133916106db9190611727565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b50505050806101a001516001600160a01b031663f866c3198b898461012001516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505050508061018001516000141561084357336000908152603660205260409020600785015461080c908290600160a01b900460ff166001611b9c565b60405133906001600160a01b038f16907e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f290600090a3505b6109d7565b6108518461165d565b6101a081015161010082015161086e9186918f9190600090611769565b806101a001516001600160a01b031663d7020d0a8b336108a185610120015186610100015161172790919063ffffffff16565b6001890154604080516001600160e01b031960e088901b1681526001600160a01b03958616600482015293909416602484015260448301919091526001600160801b031660648201529051608480830192600092919082900301818387803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b50505050806101a001516001600160a01b031663d7020d0a8b898461012001518860010160009054906101000a90046001600160801b03166040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001826001600160801b03168152602001945050505050600060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505050505b80516101008201511415610a42576007840154610a01908390600160a01b900460ff166000611b9c565b896001600160a01b03168c6001600160a01b03167f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd60405160405180910390a35b60048301546080820151610a68916001600160a01b038e81169233929190911690611c40565b896001600160a01b03168b6001600160a01b03168d6001600160a01b03167fe76026d190f8c969db64638eaf9bc7087a3758e7fe58c017135a5051b4d7c4f88460800151856101000151338e8e60405180868152602001858152602001846001600160a01b031681526020018315158152602001826001600160a01b031681526020019550505050505060405180910390a46000604051806040016040528060028152602001611a1b60f11b81525095509550505050505b965096945050505050565b6000806000806000610b3b612a04565b610b448a611ca0565b15610b62576000806000806000199550955095509550955050610fe4565b600060e08201525b878160e001511015610f435760e0810151610b86908b90611ca5565b610b8f57610f33565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d90529020610bc681611d24565b506080860181905260c08601929092525060a0840191909152600a0a60208301526101e082015160405163b3596f0760e01b81526001600160a01b038a169163b3596f0791610c189190600401612ba2565b60206040518083038186803b158015610c3057600080fd5b505afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190612b8a565b825260c082015115801590610c88575060e0820151610c88908c90611d4f565b15610dac578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b8152600401610cd09190612ba2565b60206040518083038186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d209190612b8a565b6040830181905260208301518351600092610d459291610d3f91611dd5565b90611e2e565b610120840151909150610d589082611231565b61012084015260a0830151610d7e90610d72908390611dd5565b61016085015190611231565b61016084015260c0830151610da490610d98908390611dd5565b61018085015190611231565b610180840152505b60e0820151610dbc908c90611e6d565b15610f31578060050160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b8152600401610e049190612ba2565b60206040518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190612b8a565b826060018181525050610efe8160060160009054906101000a90046001600160a01b03166001600160a01b03166370a082318f6040518263ffffffff1660e01b8152600401610ea39190612ba2565b60206040518083038186803b158015610ebb57600080fd5b505afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190612b8a565b606084015190611231565b6060830181905260208301518351610f2a92610f1e9291610d3f91611dd5565b61014084015190611231565b6101408301525b505b60e0810180516001019052610b6a565b600081610120015111610f57576000610f6c565b610120810151610160820151610f6c91611e2e565b610160820152610120810151610f83576000610f98565b610120810151610180820151610f9891611e2e565b6101808201819052610120820151610140830151610fb592611eec565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b6005810154604080516370a0823160e01b81526001600160a01b0385811660048301529151600093849316916370a08231916024808301926020929190829003018186803b15801561104357600080fd5b505afa158015611057573d6000803e3d6000fd5b505050506040513d602081101561106d57600080fd5b50516006840154604080516370a0823160e01b81526001600160a01b038881166004830152915191909216916370a08231916024808301926020929190829003018186803b1580156110be57600080fd5b505afa1580156110d2573d6000803e3d6000fd5b505050506040513d60208110156110e857600080fd5b5051909590945092505050565b6000606061110288611f1a565b1580611114575061111287611f1a565b155b1561113b5750506040805180820190915260018152601960f91b6020820152600690610b20565b670de0b6b3a7640000851061116d5750506040805180820190915260028152611a1960f11b6020820152600490610b20565b6000806111798a611f26565b1180156111a8575060078901546040805160208101909152885481526111a891600160a01b900460ff16611d4f565b9050806111d257505060408051808201909152600280825261343360f01b60208301529150610b20565b841580156111de575083155b156112075750506040805180820190915260028152610d0d60f21b602082015260039150610b20565b50506040805180820190915260028152611a1b60f11b602082015260009890975095505050505050565b600082820183811015611289576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b90505b92915050565b600082158061129f575081155b156112ac5750600061128c565b8161138819816112b857fe5b0483111560405180604001604052806002815260200161068760f31b815250906113605760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561132557818101518382015260200161130d565b50505050905090810190601f1680156113525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506127106002815b04838502018161137457fe5b049392505050565b60008060008060009050600080603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113d757600080fd5b505afa1580156113eb573d6000803e3d6000fd5b505050506040513d602081101561140157600080fd5b5051905061140d612a9e565b816001600160a01b031663b3596f078c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561145a57600080fd5b505afa15801561146e573d6000803e3d6000fd5b505050506040513d602081101561148457600080fd5b5051604080830191909152805163b3596f0760e01b81526001600160a01b038c8116600483015291519184169163b3596f0791602480820192602092909190829003018186803b1580156114d757600080fd5b505afa1580156114eb573d6000803e3d6000fd5b505050506040513d602081101561150157600080fd5b505160608201526115118d611d24565b5060c085015260208401525061152890508c611f31565b60a082018190526040820151611575916115459190600a0a611dd5565b610d3f83602001516102fb8560c00151600a0a61156f8f8860600151611dd590919063ffffffff16565b90611dd5565b608082018190528810156115de578793506115d781602001516115d16115af8460c00151600a0a8560600151611dd590919063ffffffff16565b610d3f8560a00151600a0a61156f8a8860400151611dd590919063ffffffff16565b90611f3b565b92506115e9565b806080015193508892505b600061163861163161160f8460a00151600a0a8560400151611dd590919063ffffffff16565b610d3f8560c00151600a0a61156f898860600151611dd590919063ffffffff16565b8690611727565b905084611646826002611e2e565b909f909e50939c50929a5050505050505050505050565b60068101546040805163b1bf962d60e01b815290516000926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d60208110156116ce57600080fd5b505160018301546003840154919250600160801b8082046001600160801b03908116939216910464ffffffffff1660008061170c878786888761202e565b9150915061171e8787878585886121e7565b50505050505050565b600061128983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123d0565b611771612adb565b60058601546001600160a01b031680825260408051637b98f4df60e11b8152815163f731e9be92600480840193919291829003018186803b1580156117b557600080fd5b505afa1580156117c9573d6000803e3d6000fd5b505050506040513d60408110156117df57600080fd5b50805160209182015160c084015260408084019190915260018801546006890154825163b1bf962d60e01b8152925161188394600160801b9093046001600160801b0316936001600160a01b039092169263b1bf962d9260048082019391829003018186803b15801561185157600080fd5b505afa158015611865573d6000803e3d6000fd5b505050506040513d602081101561187b57600080fd5b50519061242a565b60e082018190526007870154604083015160c08401516001600160a01b03909216926329db497d92899289928992899291906118be8f6124d9565b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b031681526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060606040518083038186803b15801561193557600080fd5b505afa158015611949573d6000803e3d6000fd5b505050506040513d606081101561195f57600080fd5b50805160208083015160409384015160a086015260808501526060840182905282518084019093526002835261353360f01b908301526001600160801b0310156119ea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b506080810151604080518082019091526002815261353560f01b6020820152906001600160801b031015611a5f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060a08101516040805180820190915260028152610d4d60f21b6020820152906001600160801b031015611ad45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060608181015160028801805460808086015160038c0180546001600160801b03199081166001600160801b038085169190911790925560a0808a015191909516828816178216600160801b82841681029190911790965560018e01546040805198895260208901949094528784019190915280821697870197909752939095049092169183019190915291516001600160a01b038816927f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a928290030190a2505050505050565b604080518082019091526002815261373760f01b602082015260808310611c045760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b508160020260010181611c18576000611c1b565b60015b60ff16901b826002026001016001901b19846000015416178360000181905550505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c9a9085906124e4565b50505050565b511590565b60006080821060405180604001604052806002815260200161373760f01b81525090611d125760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b50509051600360029092021c16151590565b5461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b60006080821060405180604001604052806002815260200161373760f01b81525090611dbc5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5050815160016002830281019190911c16151592915050565b600082611de45750600061128c565b82820282848281611df157fe5b04146112895760405162461bcd60e51b8152600401808060200182810382526021815260200180612bb76021913960400191505060405180910390fd5b600061128983836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061269b565b60006080821060405180604001604052806002815260200161373760f01b81525090611eda5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b50509051600160029092021c16151590565b600082611efc5750600019611f13565b611f1083611f0a8685611292565b90612700565b90505b9392505050565b54600160381b16151590565b5460101c61ffff1690565b5460301c60ff1690565b604080518082019091526002815261035360f41b602082015260009082611fa35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060408051808201909152600280825261068760f31b60208301528304906127108219048511156120155760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5082816127108602018161202557fe5b04949350505050565b600285015460009081906001600160801b0316858582156121b857600061205584886127f6565b9050612061818a61242a565b604080518082019091526002815261353160f01b60208201529093506001600160801b038411156120d35760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060018b0180546001600160801b0319166001600160801b03851617905589156121b65760028b015460009061211990600160801b90046001600160801b03168961283c565b9050612125818a61242a565b6040805180820190915260028152611a9960f11b60208201529093506001600160801b038411156121975760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b505060018b0180546001600160801b03808516600160801b0291161790555b505b600399909901805464ffffffffff60801b1916600160801b4264ffffffffff1602179055989650505050505050565b6121ef612b29565b6121f8876124d9565b610120820181905261220a57506123c8565b8660050160009054906101000a90046001600160a01b03166001600160a01b031663797743386040518163ffffffff1660e01b815260040160806040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d608081101561228457600080fd5b508051602080830151604084015160609094015164ffffffffff1661014086015260a0850193909352918352908201526122be868661242a565b60808201526122cd868461242a565b606082015260a08101516101408201516122ef919064ffffffffff8516612845565b60c0820181905260208201516123049161242a565b6040820181905260808201518251606084015161232f93926123299290918391611231565b90611727565b60e082018190526101208201516123469190611292565b61010082018190521561171e5760048088015461010083015160408051637df5bd3b60e01b81529384019190915260248301879052516001600160a01b0390911691637df5bd3b91604480830192600092919082900301818387803b1580156123ae57600080fd5b505af11580156123c2573d6000803e3d6000fd5b50505050505b505050505050565b600081848411156124225760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b505050900390565b6000821580612437575081155b156124445750600061128c565b81676765c793fa10079d601a1b198161245957fe5b0483111560405180604001604052806002815260200161068760f31b815250906124c45760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b50676765c793fa10079d601b1b600281611368565b5460401c61ffff1690565b6124f6826001600160a01b031661291b565b612547576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b602083106125845780518252601f199092019160209182019101612565565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146125e6576040519150601f19603f3d011682016040523d82523d6000602084013e6125eb565b606091505b509150915081612642576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611c9a5780806020019051602081101561265e57600080fd5b5051611c9a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612bd8602a913960400191505060405180910390fd5b600081836126ea5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060008385816126f657fe5b0495945050505050565b604080518082019091526002815261035360f41b6020820152600090826127685760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b5060408051808201909152600280825261068760f31b6020830152830490670de0b6b3a76400008219048511156127e05760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132557818101518382015260200161130d565b508281670de0b6b3a76400008602018161202557fe5b60008061280a4264ffffffffff8516611727565b9050612834612817612954565b6301e133806128268785611dd5565b8161282d57fe5b0490611231565b949350505050565b60006112898383425b6000806128598364ffffffffff8616611727565b90508061287057612868612954565b915050611f13565b600019810160006002831161288657600061288b565b600283035b90506301e13380870460006128a0828061242a565b905060006128ae828461242a565b9050600060026128c28461156f8a8a611dd5565b816128c957fe5b049050600060066128e08461156f89818d8d611dd5565b816128e757fe5b04905061290b8161290584816128fd8a8e611dd5565b612905612954565b90611231565b9c9b505050505050505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612834575050151592915050565b676765c793fa10079d601b1b90565b6040518061024001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600060028111156129f057fe5b815260200160008152602001606081525090565b604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff1681525090565b600060208284031215612b9b578081fd5b5051919050565b6001600160a01b039190911681526020019056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a9bdccf93f6e8372d57af55a039bb6a6ddd8543e5a94b7e55e52c7d9e7df4a4464736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Aave",
    "details": "Implements actions involving management of collateral in the protocol, the main one being the liquidations IMPORTANT This contract will run always via DELEGATECALL, through the LendingPool, so the chain of inheritance is the same as the LendingPool, to have compatible storage layouts*",
    "kind": "dev",
    "methods": {
      "liquidationCall(address,address,address,uint256,bool,address)": {
        "details": "Function to liquidate a position if its Health Factor drops below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk",
        "params": {
          "collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
          "debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
          "debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
          "receiveAToken": "`true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*",
          "user": "The address of the borrower getting liquidated"
        }
      }
    },
    "title": "LendingPoolCollateralManager contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29898,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 29901,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 29971,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29722,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_addressesProvider",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ILendingPoolAddressesProvider)11915"
      },
      {
        "astId": 29726,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_reserves",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(ReserveData)34343_storage)"
      },
      {
        "astId": 29730,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_usersConfig",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_struct(UserConfigurationMap)34349_storage)"
      },
      {
        "astId": 29734,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_reservesList",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 29736,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_reservesCount",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 29738,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_paused",
        "offset": 0,
        "slot": "57",
        "type": "t_bool"
      },
      {
        "astId": 29740,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_maxStableRateBorrowSizePercent",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 29742,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_flashLoanPremiumTotal",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 29744,
        "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
        "label": "_maxNumberOfReserves",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILendingPoolAddressesProvider)11915": {
        "encoding": "inplace",
        "label": "contract ILendingPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ReserveData)34343_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)34343_storage"
      },
      "t_mapping(t_address,t_struct(UserConfigurationMap)34349_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.UserConfigurationMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UserConfigurationMap)34349_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ReserveConfigurationMap)34346_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveConfigurationMap",
        "members": [
          {
            "astId": 34345,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)34343_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 34320,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)34346_storage"
          },
          {
            "astId": 34322,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "liquidityIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 34324,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "variableBorrowIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 34326,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "currentLiquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 34328,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "currentVariableBorrowRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 34330,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "currentStableBorrowRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 34332,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "lastUpdateTimestamp",
            "offset": 16,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 34334,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "aTokenAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 34336,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "stableDebtTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 34338,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "variableDebtTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 34340,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 34342,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "id",
            "offset": 20,
            "slot": "7",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserConfigurationMap)34349_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.UserConfigurationMap",
        "members": [
          {
            "astId": 34348,
            "contract": "contracts/protocol/lendingpool/LendingPoolCollateralManager.sol:LendingPoolCollateralManager",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}