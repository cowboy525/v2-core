{
  "address": "0x4bE15451324ac4b14E65C42585Ecc8d8F388eec4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "_rewardEligibleDataProvider",
          "type": "address"
        },
        {
          "internalType": "contract IAaveOracle",
          "name": "_aaveOracle",
          "type": "address"
        },
        {
          "internalType": "contract ILockZap",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "FeePercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "API_ETH_MOCK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveOracle",
      "outputs": [
        {
          "internalType": "contract IAaveOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityDataProvider",
      "outputs": [
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getVDebtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockZap",
      "outputs": [
        {
          "internalType": "contract ILockZap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isBorrow",
          "type": "bool"
        }
      ],
      "name": "loop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        }
      ],
      "name": "loopETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ltv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wethToZap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        }
      ],
      "name": "wethToZapEstimation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "zapWETHWithBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x884e5bb8805a13a9e771713e038f9504323de61331ab671173307fbc09a8fb29",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x4bE15451324ac4b14E65C42585Ecc8d8F388eec4",
    "transactionIndex": 4,
    "gasUsed": "2456521",
    "logsBloom": "0x
    "blockHash": "0xa01bcb8e5a3c0eabeb51fa185d09050c52c1ebd0cd09154d5a3f18d3e28ce576",
    "transactionHash": "0x884e5bb8805a13a9e771713e038f9504323de61331ab671173307fbc09a8fb29",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 27738672,
        "transactionHash": "0x884e5bb8805a13a9e771713e038f9504323de61331ab671173307fbc09a8fb29",
        "address": "0x4bE15451324ac4b14E65C42585Ecc8d8F388eec4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3de96858fd006fd978ea2d55efe6b125012f485"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa01bcb8e5a3c0eabeb51fa185d09050c52c1ebd0cd09154d5a3f18d3e28ce576"
      }
    ],
    "blockNumber": 27738672,
    "cumulativeGasUsed": "2540521",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00175A6E2c1d498F04B471C85194C1bed6b3950d",
    "0x9927c9b2F8dBD0ee6EBf2bAD97b5aaf132Ea6A86",
    "0x5f083c18b59755f67967A97063f1dc5cF66124EB",
    "0x7E9CbA1182cDc063Fc76935452D70589399151de",
    "0xb78dC8Cb950AF587526E182A7A36a907F8bC6A59",
    "0",
    "0xA3De96858FD006fd978eA2D55Efe6b125012f485"
  ],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"_rewardEligibleDataProvider\",\"type\":\"address\"},{\"internalType\":\"contract IAaveOracle\",\"name\":\"_aaveOracle\",\"type\":\"address\"},{\"internalType\":\"contract ILockZap\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"FeePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"API_ETH_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveOracle\",\"outputs\":[{\"internalType\":\"contract IAaveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityDataProvider\",\"outputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getVDebtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"contract ILockZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrow\",\"type\":\"bool\"}],\"name\":\"loop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"}],\"name\":\"loopETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ltv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wethToZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"}],\"name\":\"wethToZapEstimation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"zapWETHWithBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_aaveOracle\":\"address.\",\"_feePercent\":\"leveraging fee ratio.\",\"_lendingPool\":\"Address of lending pool.\",\"_lockZap\":\"address.\",\"_rewardEligibleDataProvider\":\"EligibilityProvider address.\",\"_treasury\":\"address.\",\"_weth\":\"WETH address.\"}},\"getConfiguration(address)\":{\"details\":\"Returns the configuration of the reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The configuration of the reserve*\"}},\"getVDebtToken(address)\":{\"details\":\"Returns variable debt token address of asset\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"varaiableDebtToken address of the asset*\"}},\"loop(address,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"Loop the deposit and borrow of an asset\",\"params\":{\"amount\":\"for the initial deposit\",\"asset\":\"for loop\",\"borrowRatio\":\"Ratio of tokens to borrow\",\"interestRateMode\":\"stable or variable borrow mode\",\"isBorrow\":\"true when the loop without deposit tokens *\",\"loopCount\":\"Repeat count for loop\"}},\"loopETH(uint256,uint256,uint256)\":{\"details\":\"Loop the deposit and borrow of ETH\",\"params\":{\"borrowRatio\":\"Ratio of tokens to borrow\",\"interestRateMode\":\"stable or variable borrow mode\",\"loopCount\":\"Repeat count for loop*\"}},\"ltv(address)\":{\"details\":\"Returns loan to value\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"ltv of the asset*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeePercent(uint256)\":{\"params\":{\"_feePercent\":\"fee ratio.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wethToZap(address)\":{\"params\":{\"user\":\"for zap*\"}},\"wethToZapEstimation(address,address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of `asset`\",\"asset\":\"src token\",\"borrowRatio\":\"Single ratio of borrow\",\"loopCount\":\"Repeat count for loop*\",\"user\":\"for zap\"}},\"zapWETHWithBorrow(uint256,address)\":{\"params\":{\"amount\":\"to zap\",\"borrower\":\"to zap\"},\"returns\":{\"liquidity\":\"amount by zapping*\"}}},\"title\":\"Leverager Contract\",\"version\":1},\"userdoc\":{\"events\":{\"FeePercentUpdated(uint256)\":{\"notice\":\"Emitted when fee ratio is updated\"},\"TreasuryUpdated(address)\":{\"notice\":\"Emitted when treasury is updated\"}},\"kind\":\"user\",\"methods\":{\"API_ETH_MOCK_ADDRESS()\":{\"notice\":\"Mock ETH address\"},\"RATIO_DIVISOR()\":{\"notice\":\"Ratio Divisor\"},\"aaveOracle()\":{\"notice\":\"Aave oracle address\"},\"constructor\":{\"notice\":\"Constructor\"},\"eligibilityDataProvider()\":{\"notice\":\"EligibilityDataProvider contract address\"},\"feePercent()\":{\"notice\":\"Fee ratio\"},\"lendingPool()\":{\"notice\":\"Lending Pool address\"},\"lockZap()\":{\"notice\":\"LockZap contract address\"},\"setFeePercent(uint256)\":{\"notice\":\"Sets fee ratio\"},\"setTreasury(address)\":{\"notice\":\"Sets fee ratio\"},\"treasury()\":{\"notice\":\"Treasury address\"},\"weth()\":{\"notice\":\"Wrapped ETH contract address\"},\"wethToZap(address)\":{\"notice\":\"Return estimated zap WETH amount for eligbility.\"},\"wethToZapEstimation(address,address,uint256,uint256,uint256)\":{\"notice\":\"Return estimated zap WETH amount for eligbility after loop.\"},\"zapWETHWithBorrow(uint256,address)\":{\"notice\":\"Zap WETH by borrowing.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/leverage/Leverager.sol\":\"Leverager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xdf8525cd148276c372bf07a4b90630053d76c7a52649c7740df86a1a1a75cc7a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1df359538876049d223fdcb393d0adda56f81763b9ac627e69aca4577a6c1baf\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x0b0ab32430f6def166e85816b37c61c175168c96519305001b5a209cfb5856dd\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x682963fa630d6afc8e1fcc5b3ee6b49ec1216f30ac698bca43747bd6e8a19fd6\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x5cf082133e64f5f90f446c011681ea7ab719e2992c7247074b943771c176494a\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.7.6;\\n\\nimport './AggregatorInterface.sol';\\nimport './AggregatorV3Interface.sol';\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x0c3f73420cf8c3a80f3a9a3380c3fb54f7279e697c641382614971c2238edc26\",\"license\":\"MIT\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n    function refresh(address user) external;\\n\\n    function updatePrice() external;\\n\\n    function requiredEthValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function isEligibleForRewards(address _user)\\n        external\\n        view\\n        returns (bool isEligible);\\n\\n    function lastEligibleTime(address user)\\n        external\\n        view\\n        returns (uint256 lastEligibleTimestamp);\\n\\n    function lockedUsdValue(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requiredUsdValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function lastEligibleStatus(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isMarketDisqualified(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function rewardEligibleAmount(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setDqTime(address _user, uint256 _time) external;\\n    function getDqTime(address _user) external view returns (uint256);\\n    function autoprune() external returns (uint256 processed);\\n    function requiredDepositRatio() external view returns (uint256);\\n    function RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53c7626d11338cffeae8336da94c99dd1894f6838be238e3487205200f4e54ff\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositWithAutoDLP(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7394d2e721bb4b2e25c3bf1fddce39667911de9d9db87176548a99c4aeced76b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n\\n  function getLiquidationFeeTo() external view returns (address);\\n\\n  function setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x106ef9420d874acfc948c140b0b4ffff258a8fa664febf805c686fdbff278f62\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n    function zap(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, uint256 _lockTypeIndex) external returns (uint256 liquidity);\\n    function zapOnBehalf(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, address _onBehalf) external returns (uint256 liquidity);\\n\\n}\\n\",\"keccak256\":\"0x32a8e56ae3d9f17bb8e1d08c87067d55be089dbf4f52e05bd3520abf5c7d5b4e\",\"license\":\"agpl-3.0\"},\"contracts/leverage/Leverager.sol\":{\"content\":\"pragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../dependencies/openzeppelin/contracts/SafeMath.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/IEligibilityDataProvider.sol\\\";\\nimport \\\"../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../interfaces/ILockZap.sol\\\";\\nimport \\\"../misc/interfaces/IAaveOracle.sol\\\";\\nimport \\\"../misc/interfaces/IWETH.sol\\\";\\n\\n/// @title Leverager Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract Leverager is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Ratio Divisor\\n    uint256 public constant RATIO_DIVISOR = 10000;\\n\\n    /// @notice Mock ETH address\\n    address public constant API_ETH_MOCK_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Lending Pool address\\n    ILendingPool public lendingPool;\\n\\n    /// @notice EligibilityDataProvider contract address\\n    IEligibilityDataProvider public eligibilityDataProvider;\\n\\n    /// @notice LockZap contract address\\n    ILockZap public lockZap;\\n\\n    /// @notice Wrapped ETH contract address\\n    IWETH public weth;\\n\\n    /// @notice Aave oracle address\\n    IAaveOracle public aaveOracle;\\n\\n    /// @notice Fee ratio\\n    uint256 public feePercent;\\n\\n    /// @notice Treasury address\\n    address public treasury;\\n\\n    /// @notice Emitted when fee ratio is updated\\n    event FeePercentUpdated(uint256 _feePercent);\\n\\n    /// @notice Emitted when treasury is updated\\n    event TreasuryUpdated(address indexed _treasury);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _lendingPool Address of lending pool.\\n     * @param _rewardEligibleDataProvider EligibilityProvider address.\\n     * @param _aaveOracle address.\\n     * @param _lockZap address.\\n     * @param _weth WETH address.\\n     * @param _feePercent leveraging fee ratio.\\n     * @param _treasury address.\\n     */\\n    constructor(\\n        ILendingPool _lendingPool,\\n        IEligibilityDataProvider _rewardEligibleDataProvider,\\n        IAaveOracle _aaveOracle,\\n        ILockZap _lockZap,\\n        IWETH _weth,\\n        uint256 _feePercent,\\n        address _treasury\\n    ) Ownable() {\\n\\n        require(address(_lendingPool) != (address(0)), 'Not a valid address');\\n        require(address(_rewardEligibleDataProvider) != (address(0)), 'Not a valid address');\\n        require(address(_aaveOracle) != (address(0)), 'Not a valid address');\\n        require(address(_lockZap) != (address(0)), 'Not a valid address');\\n        require(address(_weth) != (address(0)), 'Not a valid address');\\n        require(_treasury != address(0), 'Not a valid address');\\n        \\n        lendingPool = _lendingPool;\\n        eligibilityDataProvider = _rewardEligibleDataProvider;\\n        lockZap = _lockZap;\\n        aaveOracle = _aaveOracle;\\n        weth = _weth;\\n        feePercent = _feePercent;\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n    * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\\n    */\\n    receive() external payable {\\n        require(msg.sender == address(weth), 'Receive not allowed');\\n    }\\n\\n    /**\\n    * @dev Revert fallback calls\\n    */\\n    fallback() external payable {\\n        revert('Fallback not allowed');\\n    }\\n\\n    /**\\n     * @notice Sets fee ratio\\n     * @param _feePercent fee ratio.\\n     */\\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\\n        require(_feePercent <= 1e4, \\\"Invalid ratio\\\");\\n        feePercent = _feePercent; \\n        emit FeePercentUpdated(_feePercent);\\n    }\\n\\n    /**\\n     * @notice Sets fee ratio\\n     * @param _treasury address\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory) {\\n        return lendingPool.getConfiguration(asset);\\n    }\\n\\n    /**\\n     * @dev Returns variable debt token address of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return varaiableDebtToken address of the asset\\n     **/\\n    function getVDebtToken(address asset) public view returns (address) {\\n        DataTypes.ReserveData memory reserveData = lendingPool.getReserveData(asset);\\n        return reserveData.variableDebtTokenAddress;\\n    }\\n\\n    /**\\n     * @dev Returns loan to value\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return ltv of the asset\\n     **/\\n    function ltv(address asset) public view returns (uint256) {\\n        DataTypes.ReserveConfigurationMap memory conf =  lendingPool.getConfiguration(asset);\\n        return conf.data % (2 ** 16);\\n    }\\n\\n    /**\\n     * @dev Loop the deposit and borrow of an asset\\n     * @param asset for loop\\n     * @param amount for the initial deposit\\n     * @param interestRateMode stable or variable borrow mode\\n     * @param borrowRatio Ratio of tokens to borrow\\n     * @param loopCount Repeat count for loop\\n     * @param isBorrow true when the loop without deposit tokens \\n     **/\\n    function loop(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint256 borrowRatio,\\n        uint256 loopCount,\\n        bool    isBorrow\\n    ) external {\\n        require(borrowRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n        uint16 referralCode = 0;\\n        uint256 fee;\\n        if (!isBorrow) {\\n            IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n            fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n            IERC20(asset).safeTransfer(treasury, fee);\\n            amount = amount.sub(fee);\\n        }\\n        if (IERC20(asset).allowance(address(this), address(lendingPool)) == 0) {\\n            IERC20(asset).safeApprove(address(lendingPool), type(uint256).max);\\n        }\\n        if (IERC20(asset).allowance(address(this), address(treasury)) == 0) {\\n            IERC20(asset).safeApprove(treasury, type(uint256).max);\\n        }\\n\\n        if (!isBorrow) {\\n            lendingPool.deposit(asset, amount, msg.sender, referralCode);\\n        }\\n\\n        for (uint256 i = 0; i < loopCount; i += 1) {\\n            amount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n            lendingPool.borrow(asset, amount, interestRateMode, referralCode, msg.sender);\\n\\n            fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n            IERC20(asset).safeTransfer(treasury, fee);\\n            lendingPool.deposit(asset, amount.sub(fee), msg.sender, referralCode);\\n        }\\n            \\n        zapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Loop the deposit and borrow of ETH\\n     * @param interestRateMode stable or variable borrow mode\\n     * @param borrowRatio Ratio of tokens to borrow\\n     * @param loopCount Repeat count for loop\\n     **/\\n    function loopETH(\\n        uint256 interestRateMode,\\n        uint256 borrowRatio,\\n        uint256 loopCount\\n    ) external payable {\\n        uint16 referralCode = 0;\\n        uint256 amount = msg.value;\\n        if (IERC20(address(weth)).allowance(address(this), address(lendingPool)) == 0) {\\n            IERC20(address(weth)).safeApprove(address(lendingPool), type(uint256).max);\\n        }\\n        if (IERC20(address(weth)).allowance(address(this), address(treasury)) == 0) {\\n            IERC20(address(weth)).safeApprove(treasury, type(uint256).max);\\n        }\\n\\n        uint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n        _safeTransferETH(treasury, fee);\\n        \\n        amount = amount.sub(fee);\\n\\n        weth.deposit{value: amount}();\\n        lendingPool.deposit(address(weth), amount, msg.sender, referralCode);\\n\\n        for (uint256 i = 0; i < loopCount; i += 1) {\\n            amount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n            lendingPool.borrow(address(weth), amount, interestRateMode, referralCode, msg.sender);\\n            weth.withdraw(amount);\\n\\n            fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n            _safeTransferETH(treasury, fee);\\n\\n            weth.deposit{value: amount.sub(fee)}();\\n            lendingPool.deposit(address(weth), amount.sub(fee), msg.sender, referralCode);\\n        }\\n\\n        zapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Return estimated zap WETH amount for eligbility after loop.\\n     * @param user for zap\\n     * @param asset src token\\n     * @param amount of `asset`\\n     * @param borrowRatio Single ratio of borrow\\n     * @param loopCount Repeat count for loop\\n     **/\\n    function wethToZapEstimation(address user, address asset, uint256 amount, uint256 borrowRatio, uint256 loopCount) external view returns (uint256) {\\n        if (asset == API_ETH_MOCK_ADDRESS) {\\n            asset = address(weth);\\n        }\\n        uint256 required = eligibilityDataProvider.requiredUsdValue(user);\\n        uint256 locked = eligibilityDataProvider.lockedUsdValue(user);\\n\\n        uint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n        amount = amount.sub(fee);\\n\\n        required = required.add(requiredLocked(asset, amount));\\n\\n        for (uint256 i = 0; i < loopCount; i += 1) {\\n            amount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n            fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n            required = required.add(requiredLocked(asset, amount.sub(fee)));\\n        }\\n\\n        if (locked >= required) {\\n            return 0;\\n        } else {\\n            uint256 deltaUsdValue = required.sub(locked); //decimals === 8\\n            uint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\\n            uint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\\n            uint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\\n            wethAmount = wethAmount.add(wethAmount.mul(6).div(100));\\n            return wethAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Return estimated zap WETH amount for eligbility.\\n     * @param user for zap\\n     **/\\n    function wethToZap(address user) public view returns (uint256){\\n        uint256 required = eligibilityDataProvider.requiredUsdValue(user);\\n        uint256 locked = eligibilityDataProvider.lockedUsdValue(user);\\n        if (locked >= required) {\\n            return 0;\\n        } else {\\n            uint256 deltaUsdValue = required.sub(locked); //decimals === 8\\n            uint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\\n            uint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\\n            uint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\\n            wethAmount = wethAmount.add(wethAmount.mul(6).div(100));\\n            return wethAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Zap WETH by borrowing.\\n     * @param amount to zap\\n     * @param borrower to zap\\n     * @return liquidity amount by zapping\\n     **/\\n    function zapWETHWithBorrow(uint256 amount, address borrower) public returns (uint256 liquidity){\\n        require(msg.sender == borrower || msg.sender == address(lendingPool));\\n\\n        if (amount > 0) {\\n            uint16 referralCode = 0;\\n            lendingPool.borrow(address(weth), amount, 2, referralCode, borrower);\\n            if (IERC20(address(weth)).allowance(address(this), address(lockZap)) == 0) {\\n                IERC20(address(weth)).safeApprove(address(lockZap), type(uint256).max);\\n            }\\n            liquidity = lockZap.zapOnBehalf(false, amount, 0, borrower);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns required LP lock amount.\\n     * @param asset underlyig asset\\n     * @param amount of tokens\\n     **/\\n    function requiredLocked(address asset, uint256 amount) internal view returns (uint256) {\\n        uint256 assetPrice = aaveOracle.getAssetPrice(asset);\\n        uint8 assetDecimal = IERC20Detailed(asset).decimals();\\n        uint256 requiredVal = assetPrice.mul(amount).div(10 ** assetDecimal).mul(eligibilityDataProvider.requiredDepositRatio()).div(eligibilityDataProvider.RATIO_DIVISOR());\\n        return requiredVal;\\n    }\\n\\n    /**\\n    * @dev transfer ETH to an address, revert if it fails.\\n    * @param to recipient of the transfer\\n    * @param value the amount to send\\n    */\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x612897d5e8662ab33c37d930458739011bc9d2e2f0026a011599d1d1528c9401\",\"license\":\"MIT\"},\"contracts/misc/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n  function BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /***********\\n    @dev returns the asset price in ETH\\n     */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n  function getSourceOfAsset(address asset) external view returns (address);\\n}\",\"keccak256\":\"0xf7159481f79cc30ff1ea29a4164ba6e3ec1e317512b4511920f5d8e7976eb298\",\"license\":\"agpl-3.0\"},\"contracts/misc/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n  function balanceOf(address) external returns (uint);\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x85072a63d2176ce319a35c12dfb684f8c2aeded1749e4cb01551d89426aca843\",\"license\":\"agpl-3.0\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4542e2cf81b3cbcda615ef4960a53dc09094e975649b40bc70274f6592975648\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b8d38038062002b8d833981016040819052620000349162000206565b60006200004062000202565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038716620000bc5760405162461bcd60e51b8152600401620000b390620002a4565b60405180910390fd5b6001600160a01b038616620000e55760405162461bcd60e51b8152600401620000b390620002a4565b6001600160a01b0385166200010e5760405162461bcd60e51b8152600401620000b390620002a4565b6001600160a01b038416620001375760405162461bcd60e51b8152600401620000b390620002a4565b6001600160a01b038316620001605760405162461bcd60e51b8152600401620000b390620002a4565b6001600160a01b038116620001895760405162461bcd60e51b8152600401620000b390620002a4565b600180546001600160a01b03199081166001600160a01b03998a1617909155600280548216978916979097179096556003805487169488169490941790935560058054861694871694909417909355600480548516918616919091179055600691909155600780549092169216919091179055620002f4565b3390565b600080600080600080600060e0888a03121562000221578283fd5b87516200022e81620002db565b60208901519097506200024181620002db565b60408901519096506200025481620002db565b60608901519095506200026781620002db565b60808901519094506200027a81620002db565b60a089015160c08a015191945092506200029481620002db565b8091505092959891949750929550565b60208082526013908201527f4e6f7420612076616c6964206164647265737300000000000000000000000000604082015260600190565b6001600160a01b0381168114620002f157600080fd5b50565b61288980620003046000396000f3fe6080604052600436106101095760003560e01c806303bf24e51461015b57806306346c3014610191578063171b3e43146101b35780633fc8cef3146101d3578063602acb7e146101e857806361d027b3146101fd5780636372b28114610212578063667f3745146102275780636a7e9f3314610247578063715018a61461025c5780637473eea61461027157806376e82e8b146102915780637ce3489b146102a65780637fd6f15c146102c65780638da5cb5b146102db578063a59a9973146102f0578063a8d5a45214610305578063c44b11f714610318578063cd498dc414610345578063ec67ff7314610365578063f0f4426014610385578063f2fde38b146103a557610143565b36610143576004546001600160a01b031633146101415760405162461bcd60e51b81526004016101389061269d565b60405180910390fd5b005b60405162461bcd60e51b81526004016101389061266f565b34801561016757600080fd5b5061017b6101763660046122e9565b6103c5565b6040516101889190612728565b60405180910390f35b34801561019d57600080fd5b506101a66106d9565b60405161018891906125ba565b3480156101bf57600080fd5b506101416101ce366004612371565b6106e8565b3480156101df57600080fd5b506101a6610a74565b3480156101f457600080fd5b506101a6610a83565b34801561020957600080fd5b506101a6610a9b565b34801561021e57600080fd5b506101a6610aaa565b34801561023357600080fd5b506101a66102423660046122e9565b610ab9565b34801561025357600080fd5b5061017b610b4b565b34801561026857600080fd5b50610141610b51565b34801561027d57600080fd5b5061017b61028c3660046122e9565b610be1565b34801561029d57600080fd5b506101a6610c72565b3480156102b257600080fd5b506101416102c13660046124dd565b610c81565b3480156102d257600080fd5b5061017b610d3b565b3480156102e757600080fd5b506101a6610d41565b3480156102fc57600080fd5b506101a6610d50565b61014161031336600461253c565b610d5f565b34801561032457600080fd5b506103386103333660046122e9565b6111e2565b604051610188919061271e565b34801561035157600080fd5b5061017b610360366004612321565b611270565b34801561037157600080fd5b5061017b61038036600461250d565b61164c565b34801561039157600080fd5b506101416103a03660046122e9565b611829565b3480156103b157600080fd5b506101416103c03660046122e9565b6118cb565b6002546040516371c7ee1b60e11b815260009182916001600160a01b039091169063e38fdc36906103fa9086906004016125ba565b60206040518083038186803b15801561041257600080fd5b505afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a91906124f5565b600254604051636d9077cb60e01b81529192506000916001600160a01b0390911690636d9077cb906104809087906004016125ba565b60206040518083038186803b15801561049857600080fd5b505afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d091906124f5565b90508181106104e4576000925050506106d4565b60006104f083836119b1565b6005546004805460405163b3596f0760e01b81529394506000936001600160a01b039384169363b3596f079361052a9390911691016125ba565b60206040518083038186803b15801561054257600080fd5b505afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a91906124f5565b60055460048054604051630495f95f60e51b81529394506000936001600160a01b03938416936392bf2be0936105b49390911691016125ba565b60206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190612305565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190612567565b905060006106aa6305f5e1006106a4858160ff8716600a0a61069e8a670de0b6b3a76400006119fa565b906119fa565b90611a53565b90506106c66106bf60646106a48460066119fa565b8290611a92565b96506106d495505050505050565b919050565b6003546001600160a01b031681565b61271083111561070a5760405162461bcd60e51b8152600401610138906126f7565b6000808261076c576107276001600160a01b03891633308a611aea565b6107426127106106a46006548a6119fa90919063ffffffff16565b60075490915061075f906001600160a01b038a8116911683611b4a565b61076987826119b1565b96505b600154604051636eb1769f60e11b81526001600160a01b03808b169263dd62ed3e9261079e92309216906004016125ce565b60206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee91906124f5565b61080e5760015461080e906001600160a01b038a81169116600019611ba1565b600754604051636eb1769f60e11b81526001600160a01b03808b169263dd62ed3e9261084092309216906004016125ce565b60206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089091906124f5565b6108b0576007546108b0906001600160a01b038a81169116600019611ba1565b8261091e5760015460405163e8eda9df60e01b81526001600160a01b039091169063e8eda9df906108eb908b908b90339088906004016125e8565b600060405180830381600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050505b60005b84811015610a56576109396127106106a48a896119fa565b60015460405163a415bcad60e01b81529199506001600160a01b03169063a415bcad90610972908c908c908c9089903390600401612615565b600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b505050506109bf6127106106a46006548b6119fa90919063ffffffff16565b6007549092506109dc906001600160a01b038b8116911684611b4a565b6001546001600160a01b031663e8eda9df8a6109f88b866119b1565b33876040518563ffffffff1660e01b8152600401610a1994939291906125e8565b600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b50505050600181019050610921565b50610a69610a63336103c5565b3361164c565b505050505050505050565b6004546001600160a01b031681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6007546001600160a01b031681565b6005546001600160a01b031681565b6001546040516335ea6a7560e01b815260009182916001600160a01b03909116906335ea6a7590610aee9086906004016125ba565b6101806040518083038186803b158015610b0757600080fd5b505afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f91906123ed565b61012001519392505050565b61271081565b610b59611cb4565b6000546001600160a01b03908116911614610ba9576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116906000805160206127d4833981519152908390a3600080546001600160a01b0319169055565b60015460405163c44b11f760e01b815260009182916001600160a01b039091169063c44b11f790610c169086906004016125ba565b60206040518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6691906123d2565b5161ffff169392505050565b6002546001600160a01b031681565b610c89611cb4565b6000546001600160a01b03908116911614610cd9576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b612710811115610cfb5760405162461bcd60e51b8152600401610138906126f7565b60068190556040517f64d1887078a96d281ed60dd69ba75bfb6b5cd2cb4c2d2538b2eb7816a4c646ea90610d30908390612728565b60405180910390a150565b60065481565b6000546001600160a01b031690565b6001546001600160a01b031681565b60048054600154604051636eb1769f60e11b815260009334936001600160a01b039081169363dd62ed3e93610d9a93309390921691016125ce565b60206040518083038186803b158015610db257600080fd5b505afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea91906124f5565b610e0d57600154600454610e0d916001600160a01b039182169116600019611ba1565b60048054600754604051636eb1769f60e11b81526001600160a01b039283169363dd62ed3e93610e42933093911691016125ce565b60206040518083038186803b158015610e5a57600080fd5b505afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9291906124f5565b610eb557600754600454610eb5916001600160a01b039182169116600019611ba1565b6000610ed26127106106a4600654856119fa90919063ffffffff16565b600754909150610eeb906001600160a01b031682611cb8565b610ef582826119b1565b9150600460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b50506001546004805460405163e8eda9df60e01b81526001600160a01b03938416965063e8eda9df9550610f999450921691879133918a91016125e8565b600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b5050505060005b848110156111cc57610fe66127106106a485896119fa565b6001546004805460405163a415bcad60e01b81529396506001600160a01b039283169363a415bcad936110249392169188918d918b91339101612615565b600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b505060048054604051632e1a7d4d60e01b81526001600160a01b039091169350632e1a7d4d925061108591879101612728565b600060405180830381600087803b15801561109f57600080fd5b505af11580156110b3573d6000803e3d6000fd5b505050506110d26127106106a4600654866119fa90919063ffffffff16565b6007549092506110eb906001600160a01b031683611cb8565b6004546001600160a01b031663d0e30db061110685856119b1565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b50506001546004546001600160a01b03918216945063e8eda9df935016905061116e86866119b1565b33886040518563ffffffff1660e01b815260040161118f94939291906125e8565b600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b50505050600181019050610fce565b506111d9610a63336103c5565b50505050505050565b6111ea612254565b60015460405163c44b11f760e01b81526001600160a01b039091169063c44b11f79061121a9085906004016125ba565b60206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a91906123d2565b92915050565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112a6576004546001600160a01b031694505b6002546040516371c7ee1b60e11b81526000916001600160a01b03169063e38fdc36906112d7908a906004016125ba565b60206040518083038186803b1580156112ef57600080fd5b505afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906124f5565b600254604051636d9077cb60e01b81529192506000916001600160a01b0390911690636d9077cb9061135d908b906004016125ba565b60206040518083038186803b15801561137557600080fd5b505afa158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ad91906124f5565b905060006113cc6127106106a46006548a6119fa90919063ffffffff16565b90506113d887826119b1565b96506113ee6113e78989611d45565b8490611a92565b925060005b858110156114515761140b6127106106a48a8a6119fa565b97506114286127106106a46006548b6119fa90919063ffffffff16565b91506114476114408a61143b8b866119b1565b611d45565b8590611a92565b93506001016113f3565b508282106114655760009350505050611643565b600061147184846119b1565b6005546004805460405163b3596f0760e01b81529394506000936001600160a01b039384169363b3596f07936114ab9390911691016125ba565b60206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb91906124f5565b60055460048054604051630495f95f60e51b81529394506000936001600160a01b03938416936392bf2be0936115359390911691016125ba565b60206040518083038186803b15801561154d57600080fd5b505afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190612305565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190612567565b9050600061161f6305f5e1006106a4858160ff8716600a0a61069e8a670de0b6b3a76400006119fa565b90506116346106bf60646106a48460066119fa565b97506116439650505050505050565b95945050505050565b6000336001600160a01b038316148061166f57506001546001600160a01b031633145b61167857600080fd5b821561126a576001546004805460405163a415bcad60e01b81526000936001600160a01b039081169363a415bcad936116bd93921691899160029188918b9101612615565b600060405180830381600087803b1580156116d757600080fd5b505af11580156116eb573d6000803e3d6000fd5b505060048054600354604051636eb1769f60e11b81526001600160a01b03928316955063dd62ed3e945061172593309390921691016125ce565b60206040518083038186803b15801561173d57600080fd5b505afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906124f5565b61179857600354600454611798916001600160a01b039182169116600019611ba1565b60035460405163d478088560e01b81526001600160a01b039091169063d4780885906117cf90600090889082908990600401612649565b602060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182191906124f5565b949350505050565b611831611cb4565b6000546001600160a01b03908116911614611881576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b6118d3611cb4565b6000546001600160a01b03908116911614611923576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b6001600160a01b0381166119685760405162461bcd60e51b815260040180806020018281038252602681526020018061276d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206127d483398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006119f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f68565b9392505050565b600082611a095750600061126a565b82820282848281611a1657fe5b04146119f35760405162461bcd60e51b81526004018080602001828103825260218152602001806127936021913960400191505060405180910390fd5b60006119f383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250611fff565b6000828201838110156119f3576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611b44908590612064565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611b9c908490612064565b505050565b801580611c27575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611bf957600080fd5b505afa158015611c0d573d6000803e3d6000fd5b505050506040513d6020811015611c2357600080fd5b5051155b611c625760405162461bcd60e51b815260040180806020018281038252603681526020018061281e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611b9c908490612064565b3390565b604080516000808252602082019092526001600160a01b038416908390604051611ce29190612581565b60006040518083038185875af1925050503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b5050905080611b9c5760405162461bcd60e51b8152600401610138906126ca565b60055460405163b3596f0760e01b815260009182916001600160a01b039091169063b3596f0790611d7a9087906004016125ba565b60206040518083038186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dca91906124f5565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190612567565b90506000611f5e600260009054906101000a90046001600160a01b03166001600160a01b0316636a7e9f336040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9457600080fd5b505afa158015611ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecc91906124f5565b60025460408051636a943a6d60e11b815290516106a4926001600160a01b03169163d52874da916004808301926020929190829003018186803b158015611f1257600080fd5b505afa158015611f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4a91906124f5565b61069e60ff8716600a0a6106a4898c6119fa565b9695505050505050565b60008184841115611ff75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fbc578181015183820152602001611fa4565b50505050905090810190601f168015611fe95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361204e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fbc578181015183820152602001611fa4565b50600083858161205a57fe5b0495945050505050565b612076826001600160a01b031661221b565b6120c7576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b602083106121045780518252601f1990920191602091820191016120e5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612166576040519150601f19603f3d011682016040523d82523d6000602084013e61216b565b606091505b5091509150816121c2576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611b44578080602001905160208110156121de57600080fd5b5051611b445760405162461bcd60e51b815260040180806020018281038252602a8152602001806127f4602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611821575050151592915050565b6040518060200160405280600081525090565b80516106d481612754565b600060208284031215612283578081fd5b604051602081016001600160401b038111828210171561229f57fe5b6040529151825250919050565b80516001600160801b03811681146106d457600080fd5b805164ffffffffff811681146106d457600080fd5b805160ff811681146106d457600080fd5b6000602082840312156122fa578081fd5b81356119f381612754565b600060208284031215612316578081fd5b81516119f381612754565b600080600080600060a08688031215612338578081fd5b853561234381612754565b9450602086013561235381612754565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215612389578081fd5b863561239481612754565b95506020870135945060408701359350606087013592506080870135915060a087013580151581146123c4578182fd5b809150509295509295509295565b6000602082840312156123e3578081fd5b6119f38383612272565b6000610180808385031215612400578182fd5b61240981612731565b90506124158484612272565b8152612423602084016122ac565b6020820152612434604084016122ac565b6040820152612445606084016122ac565b6060820152612456608084016122ac565b608082015261246760a084016122ac565b60a082015261247860c084016122c3565b60c082015261248960e08401612267565b60e082015261010061249c818501612267565b908201526101206124ae848201612267565b908201526101406124c0848201612267565b908201526101606124d28482016122d8565b908201529392505050565b6000602082840312156124ee578081fd5b5035919050565b600060208284031215612506578081fd5b5051919050565b6000806040838503121561251f578182fd5b82359150602083013561253181612754565b809150509250929050565b600080600060608486031215612550578283fd5b505081359360208301359350604090920135919050565b600060208284031215612578578081fd5b6119f3826122d8565b60008251815b818110156125a15760208186018101518583015201612587565b818111156125af5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b9315158452602084019290925260408301526001600160a01b0316606082015260800190565b60208082526014908201527311985b1b189858dac81b9bdd08185b1b1bddd95960621b604082015260600190565b602080825260139082015272149958d95a5d99481b9bdd08185b1b1bddd959606a1b604082015260600190565b60208082526013908201527211551217d514905394d1915497d19052531151606a1b604082015260600190565b6020808252600d908201526c496e76616c696420726174696f60981b604082015260600190565b9051815260200190565b90815260200190565b6040518181016001600160401b038111828210171561274c57fe5b604052919050565b6001600160a01b038116811461276957600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212202e2f05845953e1ffeb46e9e63550963f4dc8d2c2850ff48d1f0c9d10a943075664736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806303bf24e51461015b57806306346c3014610191578063171b3e43146101b35780633fc8cef3146101d3578063602acb7e146101e857806361d027b3146101fd5780636372b28114610212578063667f3745146102275780636a7e9f3314610247578063715018a61461025c5780637473eea61461027157806376e82e8b146102915780637ce3489b146102a65780637fd6f15c146102c65780638da5cb5b146102db578063a59a9973146102f0578063a8d5a45214610305578063c44b11f714610318578063cd498dc414610345578063ec67ff7314610365578063f0f4426014610385578063f2fde38b146103a557610143565b36610143576004546001600160a01b031633146101415760405162461bcd60e51b81526004016101389061269d565b60405180910390fd5b005b60405162461bcd60e51b81526004016101389061266f565b34801561016757600080fd5b5061017b6101763660046122e9565b6103c5565b6040516101889190612728565b60405180910390f35b34801561019d57600080fd5b506101a66106d9565b60405161018891906125ba565b3480156101bf57600080fd5b506101416101ce366004612371565b6106e8565b3480156101df57600080fd5b506101a6610a74565b3480156101f457600080fd5b506101a6610a83565b34801561020957600080fd5b506101a6610a9b565b34801561021e57600080fd5b506101a6610aaa565b34801561023357600080fd5b506101a66102423660046122e9565b610ab9565b34801561025357600080fd5b5061017b610b4b565b34801561026857600080fd5b50610141610b51565b34801561027d57600080fd5b5061017b61028c3660046122e9565b610be1565b34801561029d57600080fd5b506101a6610c72565b3480156102b257600080fd5b506101416102c13660046124dd565b610c81565b3480156102d257600080fd5b5061017b610d3b565b3480156102e757600080fd5b506101a6610d41565b3480156102fc57600080fd5b506101a6610d50565b61014161031336600461253c565b610d5f565b34801561032457600080fd5b506103386103333660046122e9565b6111e2565b604051610188919061271e565b34801561035157600080fd5b5061017b610360366004612321565b611270565b34801561037157600080fd5b5061017b61038036600461250d565b61164c565b34801561039157600080fd5b506101416103a03660046122e9565b611829565b3480156103b157600080fd5b506101416103c03660046122e9565b6118cb565b6002546040516371c7ee1b60e11b815260009182916001600160a01b039091169063e38fdc36906103fa9086906004016125ba565b60206040518083038186803b15801561041257600080fd5b505afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a91906124f5565b600254604051636d9077cb60e01b81529192506000916001600160a01b0390911690636d9077cb906104809087906004016125ba565b60206040518083038186803b15801561049857600080fd5b505afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d091906124f5565b90508181106104e4576000925050506106d4565b60006104f083836119b1565b6005546004805460405163b3596f0760e01b81529394506000936001600160a01b039384169363b3596f079361052a9390911691016125ba565b60206040518083038186803b15801561054257600080fd5b505afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a91906124f5565b60055460048054604051630495f95f60e51b81529394506000936001600160a01b03938416936392bf2be0936105b49390911691016125ba565b60206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190612305565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190612567565b905060006106aa6305f5e1006106a4858160ff8716600a0a61069e8a670de0b6b3a76400006119fa565b906119fa565b90611a53565b90506106c66106bf60646106a48460066119fa565b8290611a92565b96506106d495505050505050565b919050565b6003546001600160a01b031681565b61271083111561070a5760405162461bcd60e51b8152600401610138906126f7565b6000808261076c576107276001600160a01b03891633308a611aea565b6107426127106106a46006548a6119fa90919063ffffffff16565b60075490915061075f906001600160a01b038a8116911683611b4a565b61076987826119b1565b96505b600154604051636eb1769f60e11b81526001600160a01b03808b169263dd62ed3e9261079e92309216906004016125ce565b60206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee91906124f5565b61080e5760015461080e906001600160a01b038a81169116600019611ba1565b600754604051636eb1769f60e11b81526001600160a01b03808b169263dd62ed3e9261084092309216906004016125ce565b60206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089091906124f5565b6108b0576007546108b0906001600160a01b038a81169116600019611ba1565b8261091e5760015460405163e8eda9df60e01b81526001600160a01b039091169063e8eda9df906108eb908b908b90339088906004016125e8565b600060405180830381600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050505b60005b84811015610a56576109396127106106a48a896119fa565b60015460405163a415bcad60e01b81529199506001600160a01b03169063a415bcad90610972908c908c908c9089903390600401612615565b600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b505050506109bf6127106106a46006548b6119fa90919063ffffffff16565b6007549092506109dc906001600160a01b038b8116911684611b4a565b6001546001600160a01b031663e8eda9df8a6109f88b866119b1565b33876040518563ffffffff1660e01b8152600401610a1994939291906125e8565b600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b50505050600181019050610921565b50610a69610a63336103c5565b3361164c565b505050505050505050565b6004546001600160a01b031681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6007546001600160a01b031681565b6005546001600160a01b031681565b6001546040516335ea6a7560e01b815260009182916001600160a01b03909116906335ea6a7590610aee9086906004016125ba565b6101806040518083038186803b158015610b0757600080fd5b505afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f91906123ed565b61012001519392505050565b61271081565b610b59611cb4565b6000546001600160a01b03908116911614610ba9576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116906000805160206127d4833981519152908390a3600080546001600160a01b0319169055565b60015460405163c44b11f760e01b815260009182916001600160a01b039091169063c44b11f790610c169086906004016125ba565b60206040518083038186803b158015610c2e57600080fd5b505afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6691906123d2565b5161ffff169392505050565b6002546001600160a01b031681565b610c89611cb4565b6000546001600160a01b03908116911614610cd9576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b612710811115610cfb5760405162461bcd60e51b8152600401610138906126f7565b60068190556040517f64d1887078a96d281ed60dd69ba75bfb6b5cd2cb4c2d2538b2eb7816a4c646ea90610d30908390612728565b60405180910390a150565b60065481565b6000546001600160a01b031690565b6001546001600160a01b031681565b60048054600154604051636eb1769f60e11b815260009334936001600160a01b039081169363dd62ed3e93610d9a93309390921691016125ce565b60206040518083038186803b158015610db257600080fd5b505afa158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea91906124f5565b610e0d57600154600454610e0d916001600160a01b039182169116600019611ba1565b60048054600754604051636eb1769f60e11b81526001600160a01b039283169363dd62ed3e93610e42933093911691016125ce565b60206040518083038186803b158015610e5a57600080fd5b505afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9291906124f5565b610eb557600754600454610eb5916001600160a01b039182169116600019611ba1565b6000610ed26127106106a4600654856119fa90919063ffffffff16565b600754909150610eeb906001600160a01b031682611cb8565b610ef582826119b1565b9150600460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b50506001546004805460405163e8eda9df60e01b81526001600160a01b03938416965063e8eda9df9550610f999450921691879133918a91016125e8565b600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b5050505060005b848110156111cc57610fe66127106106a485896119fa565b6001546004805460405163a415bcad60e01b81529396506001600160a01b039283169363a415bcad936110249392169188918d918b91339101612615565b600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b505060048054604051632e1a7d4d60e01b81526001600160a01b039091169350632e1a7d4d925061108591879101612728565b600060405180830381600087803b15801561109f57600080fd5b505af11580156110b3573d6000803e3d6000fd5b505050506110d26127106106a4600654866119fa90919063ffffffff16565b6007549092506110eb906001600160a01b031683611cb8565b6004546001600160a01b031663d0e30db061110685856119b1565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b50506001546004546001600160a01b03918216945063e8eda9df935016905061116e86866119b1565b33886040518563ffffffff1660e01b815260040161118f94939291906125e8565b600060405180830381600087803b1580156111a957600080fd5b505af11580156111bd573d6000803e3d6000fd5b50505050600181019050610fce565b506111d9610a63336103c5565b50505050505050565b6111ea612254565b60015460405163c44b11f760e01b81526001600160a01b039091169063c44b11f79061121a9085906004016125ba565b60206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a91906123d2565b92915050565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112a6576004546001600160a01b031694505b6002546040516371c7ee1b60e11b81526000916001600160a01b03169063e38fdc36906112d7908a906004016125ba565b60206040518083038186803b1580156112ef57600080fd5b505afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132791906124f5565b600254604051636d9077cb60e01b81529192506000916001600160a01b0390911690636d9077cb9061135d908b906004016125ba565b60206040518083038186803b15801561137557600080fd5b505afa158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ad91906124f5565b905060006113cc6127106106a46006548a6119fa90919063ffffffff16565b90506113d887826119b1565b96506113ee6113e78989611d45565b8490611a92565b925060005b858110156114515761140b6127106106a48a8a6119fa565b97506114286127106106a46006548b6119fa90919063ffffffff16565b91506114476114408a61143b8b866119b1565b611d45565b8590611a92565b93506001016113f3565b508282106114655760009350505050611643565b600061147184846119b1565b6005546004805460405163b3596f0760e01b81529394506000936001600160a01b039384169363b3596f07936114ab9390911691016125ba565b60206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb91906124f5565b60055460048054604051630495f95f60e51b81529394506000936001600160a01b03938416936392bf2be0936115359390911691016125ba565b60206040518083038186803b15801561154d57600080fd5b505afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190612305565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190612567565b9050600061161f6305f5e1006106a4858160ff8716600a0a61069e8a670de0b6b3a76400006119fa565b90506116346106bf60646106a48460066119fa565b97506116439650505050505050565b95945050505050565b6000336001600160a01b038316148061166f57506001546001600160a01b031633145b61167857600080fd5b821561126a576001546004805460405163a415bcad60e01b81526000936001600160a01b039081169363a415bcad936116bd93921691899160029188918b9101612615565b600060405180830381600087803b1580156116d757600080fd5b505af11580156116eb573d6000803e3d6000fd5b505060048054600354604051636eb1769f60e11b81526001600160a01b03928316955063dd62ed3e945061172593309390921691016125ce565b60206040518083038186803b15801561173d57600080fd5b505afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906124f5565b61179857600354600454611798916001600160a01b039182169116600019611ba1565b60035460405163d478088560e01b81526001600160a01b039091169063d4780885906117cf90600090889082908990600401612649565b602060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182191906124f5565b949350505050565b611831611cb4565b6000546001600160a01b03908116911614611881576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b6118d3611cb4565b6000546001600160a01b03908116911614611923576040805162461bcd60e51b815260206004820181905260248201526000805160206127b4833981519152604482015290519081900360640190fd5b6001600160a01b0381166119685760405162461bcd60e51b815260040180806020018281038252602681526020018061276d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206127d483398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006119f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f68565b9392505050565b600082611a095750600061126a565b82820282848281611a1657fe5b04146119f35760405162461bcd60e51b81526004018080602001828103825260218152602001806127936021913960400191505060405180910390fd5b60006119f383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250611fff565b6000828201838110156119f3576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611b44908590612064565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611b9c908490612064565b505050565b801580611c27575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611bf957600080fd5b505afa158015611c0d573d6000803e3d6000fd5b505050506040513d6020811015611c2357600080fd5b5051155b611c625760405162461bcd60e51b815260040180806020018281038252603681526020018061281e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611b9c908490612064565b3390565b604080516000808252602082019092526001600160a01b038416908390604051611ce29190612581565b60006040518083038185875af1925050503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b5050905080611b9c5760405162461bcd60e51b8152600401610138906126ca565b60055460405163b3596f0760e01b815260009182916001600160a01b039091169063b3596f0790611d7a9087906004016125ba565b60206040518083038186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dca91906124f5565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190612567565b90506000611f5e600260009054906101000a90046001600160a01b03166001600160a01b0316636a7e9f336040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9457600080fd5b505afa158015611ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecc91906124f5565b60025460408051636a943a6d60e11b815290516106a4926001600160a01b03169163d52874da916004808301926020929190829003018186803b158015611f1257600080fd5b505afa158015611f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4a91906124f5565b61069e60ff8716600a0a6106a4898c6119fa565b9695505050505050565b60008184841115611ff75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fbc578181015183820152602001611fa4565b50505050905090810190601f168015611fe95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361204e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fbc578181015183820152602001611fa4565b50600083858161205a57fe5b0495945050505050565b612076826001600160a01b031661221b565b6120c7576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b602083106121045780518252601f1990920191602091820191016120e5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612166576040519150601f19603f3d011682016040523d82523d6000602084013e61216b565b606091505b5091509150816121c2576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115611b44578080602001905160208110156121de57600080fd5b5051611b445760405162461bcd60e51b815260040180806020018281038252602a8152602001806127f4602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611821575050151592915050565b6040518060200160405280600081525090565b80516106d481612754565b600060208284031215612283578081fd5b604051602081016001600160401b038111828210171561229f57fe5b6040529151825250919050565b80516001600160801b03811681146106d457600080fd5b805164ffffffffff811681146106d457600080fd5b805160ff811681146106d457600080fd5b6000602082840312156122fa578081fd5b81356119f381612754565b600060208284031215612316578081fd5b81516119f381612754565b600080600080600060a08688031215612338578081fd5b853561234381612754565b9450602086013561235381612754565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215612389578081fd5b863561239481612754565b95506020870135945060408701359350606087013592506080870135915060a087013580151581146123c4578182fd5b809150509295509295509295565b6000602082840312156123e3578081fd5b6119f38383612272565b6000610180808385031215612400578182fd5b61240981612731565b90506124158484612272565b8152612423602084016122ac565b6020820152612434604084016122ac565b6040820152612445606084016122ac565b6060820152612456608084016122ac565b608082015261246760a084016122ac565b60a082015261247860c084016122c3565b60c082015261248960e08401612267565b60e082015261010061249c818501612267565b908201526101206124ae848201612267565b908201526101406124c0848201612267565b908201526101606124d28482016122d8565b908201529392505050565b6000602082840312156124ee578081fd5b5035919050565b600060208284031215612506578081fd5b5051919050565b6000806040838503121561251f578182fd5b82359150602083013561253181612754565b809150509250929050565b600080600060608486031215612550578283fd5b505081359360208301359350604090920135919050565b600060208284031215612578578081fd5b6119f3826122d8565b60008251815b818110156125a15760208186018101518583015201612587565b818111156125af5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b9315158452602084019290925260408301526001600160a01b0316606082015260800190565b60208082526014908201527311985b1b189858dac81b9bdd08185b1b1bddd95960621b604082015260600190565b602080825260139082015272149958d95a5d99481b9bdd08185b1b1bddd959606a1b604082015260600190565b60208082526013908201527211551217d514905394d1915497d19052531151606a1b604082015260600190565b6020808252600d908201526c496e76616c696420726174696f60981b604082015260600190565b9051815260200190565b90815260200190565b6040518181016001600160401b038111828210171561274c57fe5b604052919050565b6001600160a01b038116811461276957600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212202e2f05845953e1ffeb46e9e63550963f4dc8d2c2850ff48d1f0c9d10a943075664736f6c63430007060033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_aaveOracle": "address.",
          "_feePercent": "leveraging fee ratio.",
          "_lendingPool": "Address of lending pool.",
          "_lockZap": "address.",
          "_rewardEligibleDataProvider": "EligibilityProvider address.",
          "_treasury": "address.",
          "_weth": "WETH address."
        }
      },
      "getConfiguration(address)": {
        "details": "Returns the configuration of the reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The configuration of the reserve*"
        }
      },
      "getVDebtToken(address)": {
        "details": "Returns variable debt token address of asset",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "varaiableDebtToken address of the asset*"
        }
      },
      "loop(address,uint256,uint256,uint256,uint256,bool)": {
        "details": "Loop the deposit and borrow of an asset",
        "params": {
          "amount": "for the initial deposit",
          "asset": "for loop",
          "borrowRatio": "Ratio of tokens to borrow",
          "interestRateMode": "stable or variable borrow mode",
          "isBorrow": "true when the loop without deposit tokens *",
          "loopCount": "Repeat count for loop"
        }
      },
      "loopETH(uint256,uint256,uint256)": {
        "details": "Loop the deposit and borrow of ETH",
        "params": {
          "borrowRatio": "Ratio of tokens to borrow",
          "interestRateMode": "stable or variable borrow mode",
          "loopCount": "Repeat count for loop*"
        }
      },
      "ltv(address)": {
        "details": "Returns loan to value",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "ltv of the asset*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeePercent(uint256)": {
        "params": {
          "_feePercent": "fee ratio."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wethToZap(address)": {
        "params": {
          "user": "for zap*"
        }
      },
      "wethToZapEstimation(address,address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of `asset`",
          "asset": "src token",
          "borrowRatio": "Single ratio of borrow",
          "loopCount": "Repeat count for loop*",
          "user": "for zap"
        }
      },
      "zapWETHWithBorrow(uint256,address)": {
        "params": {
          "amount": "to zap",
          "borrower": "to zap"
        },
        "returns": {
          "liquidity": "amount by zapping*"
        }
      }
    },
    "title": "Leverager Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeePercentUpdated(uint256)": {
        "notice": "Emitted when fee ratio is updated"
      },
      "TreasuryUpdated(address)": {
        "notice": "Emitted when treasury is updated"
      }
    },
    "kind": "user",
    "methods": {
      "API_ETH_MOCK_ADDRESS()": {
        "notice": "Mock ETH address"
      },
      "RATIO_DIVISOR()": {
        "notice": "Ratio Divisor"
      },
      "aaveOracle()": {
        "notice": "Aave oracle address"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "eligibilityDataProvider()": {
        "notice": "EligibilityDataProvider contract address"
      },
      "feePercent()": {
        "notice": "Fee ratio"
      },
      "lendingPool()": {
        "notice": "Lending Pool address"
      },
      "lockZap()": {
        "notice": "LockZap contract address"
      },
      "setFeePercent(uint256)": {
        "notice": "Sets fee ratio"
      },
      "setTreasury(address)": {
        "notice": "Sets fee ratio"
      },
      "treasury()": {
        "notice": "Treasury address"
      },
      "weth()": {
        "notice": "Wrapped ETH contract address"
      },
      "wethToZap(address)": {
        "notice": "Return estimated zap WETH amount for eligbility."
      },
      "wethToZapEstimation(address,address,uint256,uint256,uint256)": {
        "notice": "Return estimated zap WETH amount for eligbility after loop."
      },
      "zapWETHWithBorrow(uint256,address)": {
        "notice": "Zap WETH by borrowing."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5437,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14584,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "lendingPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILendingPool)11754"
      },
      {
        "astId": 14587,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "eligibilityDataProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IEligibilityDataProvider)11190"
      },
      {
        "astId": 14590,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "lockZap",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILockZap)12435"
      },
      {
        "astId": 14593,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "weth",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IWETH)19766"
      },
      {
        "astId": 14596,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "aaveOracle",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IAaveOracle)19404"
      },
      {
        "astId": 14599,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "feePercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14602,
        "contract": "contracts/leverage/Leverager.sol:Leverager",
        "label": "treasury",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAaveOracle)19404": {
        "encoding": "inplace",
        "label": "contract IAaveOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IEligibilityDataProvider)11190": {
        "encoding": "inplace",
        "label": "contract IEligibilityDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)11754": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ILockZap)12435": {
        "encoding": "inplace",
        "label": "contract ILockZap",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)19766": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}