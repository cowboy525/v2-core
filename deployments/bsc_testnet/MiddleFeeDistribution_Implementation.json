{
  "address": "0x0E254f8997b99e7D849d2cD4A73f87B40E0585b9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ForwardReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMultiFeeDistribution",
          "name": "_lpFeeDistribution",
          "type": "address"
        }
      ],
      "name": "LPFeeDistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpLockingRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "LpLockingRewardRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_operationExpenses",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_operationExpenseRatio",
          "type": "uint256"
        }
      ],
      "name": "OperationExpensesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "opEx",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "SetOperationExpenses",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "forwardReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPFeeDistributionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMFDstatsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMultiFeeDistributionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRdntTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdntToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mfdStats",
          "type": "address"
        },
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "_lpFeeDistribution",
          "type": "address"
        },
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "_multiFeeDistribution",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedWithMultiplier",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "lockData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpLockingRewardRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationExpenseRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationExpenses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "_lpFeeDistribution",
          "type": "address"
        }
      ],
      "name": "setLPFeeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpLockingRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "setLpLockingRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operationExpenses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_operationExpenseRatio",
          "type": "uint256"
        }
      ],
      "name": "setOperationExpenses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcd16f790514a8620e62ab21fe7fe0591db3aa93b07003c845019a4785810f22",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x0E254f8997b99e7D849d2cD4A73f87B40E0585b9",
    "transactionIndex": 2,
    "gasUsed": "1362977",
    "logsBloom": "0x
    "blockHash": "0x6d19bdbd9d37956404af7dc9ef41346570e628ac9192f4ef331af7d90d168fb3",
    "transactionHash": "0xbcd16f790514a8620e62ab21fe7fe0591db3aa93b07003c845019a4785810f22",
    "logs": [],
    "blockNumber": 27738561,
    "cumulativeGasUsed": "2292673",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForwardReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_lpFeeDistribution\",\"type\":\"address\"}],\"name\":\"LPFeeDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpLockingRewardRatio\",\"type\":\"uint256\"}],\"name\":\"LpLockingRewardRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operationExpenses\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operationExpenseRatio\",\"type\":\"uint256\"}],\"name\":\"OperationExpensesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opEx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"SetOperationExpenses\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"forwardReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPFeeDistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMFDstatsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiFeeDistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRdntTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdntToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mfdStats\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_lpFeeDistribution\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_multiFeeDistribution\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWithMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockingRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationExpenseRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationExpenses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_lpFeeDistribution\",\"type\":\"address\"}],\"name\":\"setLPFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpLockingRewardRatio\",\"type\":\"uint256\"}],\"name\":\"setLpLockingRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationExpenses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_operationExpenseRatio\",\"type\":\"uint256\"}],\"name\":\"setOperationExpenses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"lockedBalances(address)\":{\"details\":\"It currently returns just MFD infos.\"}},\"title\":\"Fee distributor inside \",\"version\":1},\"userdoc\":{\"events\":{\"ForwardReward(address,uint256)\":{\"notice\":\"Emitted when reward token is forwarded\"},\"LPFeeDistributionUpdated(address)\":{\"notice\":\"Emitted when lp fee distribution is set\"},\"LpLockingRewardRatioUpdated(uint256)\":{\"notice\":\"Emitted when LP locking reward ratio is set \"},\"OperationExpensesUpdated(address,uint256)\":{\"notice\":\"Emitted when operation expenses is set\"},\"Recovered(address,uint256)\":{\"notice\":\"Emitted when ERC20 token is recovered\"},\"SetOperationExpenses(address,uint256)\":{\"notice\":\"Emitted when OpEx info is updated\"}},\"kind\":\"user\",\"methods\":{\"addReward(address)\":{\"notice\":\"Add a new reward token to be distributed to stakers\"},\"admin()\":{\"notice\":\"Admin address\"},\"forwardReward(address[])\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"lockedBalances(address)\":{\"notice\":\"Returns lock information of a user.\"},\"lpFeeDistribution()\":{\"notice\":\"Fee distributor contract for lp locking\"},\"lpLockingRewardRatio()\":{\"notice\":\"Reward ratio for lp locking in bips\"},\"multiFeeDistribution()\":{\"notice\":\"Fee distributor contract for earnings and RDNT lockings\"},\"operationExpenseRatio()\":{\"notice\":\"Reward ratio for operation expenses\"},\"operationExpenses()\":{\"notice\":\"Operation Expense account\"},\"rdntToken()\":{\"notice\":\"RDNT token\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"setLPFeeDistribution(address)\":{\"notice\":\"Set lp fee distribution contract\"},\"setLpLockingRewardRatio(uint256)\":{\"notice\":\"Set reward ratio for lp token locking\"},\"setOperationExpenses(address,uint256)\":{\"notice\":\"Set operation expenses account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/MiddleFeeDistribution.sol\":\"MiddleFeeDistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1df359538876049d223fdcb393d0adda56f81763b9ac627e69aca4577a6c1baf\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x0b16a215990b3611c5c352eb914d8320a26f7149d8dcc007b97b40bd4e403565\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xa5f6f100094fd6a02b3f012d94b8bd2cdabb8a5d3d77ba052c4ef965d57684b2\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    \\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n   \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    \\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdaf9847b1b084c0bfc20081e03cc924cc35ca524067067572c475227a6667297\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n    function addReward(address rewardsToken) external;\\n    function lockedBalances(address user) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\",\"keccak256\":\"0x34593f732405652613fca6e84a22485acd7851b2a5dcb045773abcb6c512bc24\",\"license\":\"MIT\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n    function forwardReward(address[] memory _rewardTokens) external;\\n    function getMFDstatsAddress () external view returns (address);\\n    function lpLockingRewardRatio () external view returns (uint256);\\n    function getRdntTokenAddress () external view returns (address);\\n    function getLPFeeDistributionAddress () external view returns (address);\\n    function getMultiFeeDistributionAddress () external view returns (address);\\n    function operationExpenseRatio () external view returns (uint256);\\n    function operationExpenses () external view returns (address);\\n    function isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7cd6c42e2cca557d1f47ec97384758c3a751bc48c660938c0f4e2792d4a834e\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n    function mint(address _receiver, uint256 _amount) external returns (bool);\\n    function burn(uint256 _amount) external returns (bool);\\n    function setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x60e22d1995733ed58d9464a7e65c309739dda09b97303477f736b070b9718501\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n    function exit(bool claimRewards) external;\\n    function stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n    function lockInfo(address user) external view returns (LockedBalance[] memory);\\n    function defaultLockIndex(address _user) external view returns (uint256);\\n    function autoRelockDisabled(address user) external view returns (bool);\\n    function totalBalance(address user) external view returns (uint256);\\n    function zapVestingToLp (address _address) external returns (uint256);\\n    function withdrawExpiredLocksFor(address _address) external returns (uint256);\\n    function claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n    function setDefaultRelockTypeIndex(uint256 _index) external;\\n    function daoTreasury() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n    function getLastClaimTime(address _user) external returns (uint256);\\n    function claimFromConverter(address) external;\\n    function bountyForUser(address _user) external view returns (IFeeDistribution.RewardData[] memory bounties);\\n    function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool issueBaseBounty);\\n    function claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n    function setAutocompound(bool _newVal) external;\\n    function getAutocompoundEnabled(address _user) external view returns(bool);\\n}\",\"keccak256\":\"0x7c16c4e91f717ca13a58bde2ff298128b315d6eaa60571b87926c78b328861b0\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 multiplier;\\n    uint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 penalty;\\n}\",\"keccak256\":\"0x6511a1c116bd568dba24edd6d70b0a927bb249e499cbf29305803ed27e78055a\",\"license\":\"MIT\"},\"contracts/staking/MiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IMintableToken.sol\\\";\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeMath.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\n\\n/// @title Fee distributor inside \\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract MiddleFeeDistribution is IMiddleFeeDistribution, Initializable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice RDNT token\\n    IMintableToken public rdntToken;\\n\\n    /// @notice Fee distributor contract for lp locking\\n    IMultiFeeDistribution public lpFeeDistribution;\\n\\n    /// @notice Fee distributor contract for earnings and RDNT lockings\\n    IMultiFeeDistribution public multiFeeDistribution;\\n    \\n    /// @notice Reward ratio for lp locking in bips\\n    uint256 public override lpLockingRewardRatio;\\n\\n    /// @notice Reward ratio for operation expenses\\n    uint256 public override operationExpenseRatio;\\n\\n    uint256 public constant RATIO_DIVISOR = 10000;\\n\\n    mapping(address => bool) public override isRewardToken;\\n\\n    /// @notice Operation Expense account\\n    address public override operationExpenses;\\n\\n    /// @notice Admin address\\n    address public admin;\\n\\n    // MFDStats address\\n    address internal _mfdStats;\\n\\n    /********************** Events ***********************/\\n\\n    /// @notice Emitted when ERC20 token is recovered\\n    event Recovered(address token, uint256 amount);\\n\\n    /// @notice Emitted when reward token is forwarded\\n    event ForwardReward(address token, uint256 amount);\\n\\n    /// @notice Emitted when OpEx info is updated\\n    event SetOperationExpenses(address opEx, uint256 ratio);\\n\\n    /// @notice Emitted when LP locking reward ratio is set \\n    event LpLockingRewardRatioUpdated(uint256 _lpLockingRewardRatio);\\n\\n    /// @notice Emitted when lp fee distribution is set\\n    event LPFeeDistributionUpdated(IMultiFeeDistribution _lpFeeDistribution);\\n\\n    /// @notice Emitted when operation expenses is set\\n    event OperationExpensesUpdated(address _operationExpenses, uint256 _operationExpenseRatio);\\n\\n    /**\\n    * @dev Throws if called by any account other than the admin or owner.\\n    */\\n    modifier onlyAdminOrOwner() {\\n        require(admin == _msgSender() || owner() == _msgSender(), 'caller is not the admin or owner');\\n        _;\\n    }\\n\\n    function initialize(\\n        address _rdntToken,\\n        address mfdStats,\\n        IMultiFeeDistribution _lpFeeDistribution,\\n        IMultiFeeDistribution _multiFeeDistribution\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        rdntToken = IMintableToken(_rdntToken);\\n        _mfdStats = mfdStats;\\n        lpFeeDistribution = _lpFeeDistribution;\\n        multiFeeDistribution = _multiFeeDistribution;\\n\\n        lpLockingRewardRatio = 10000;\\n        admin = msg.sender;\\n    }\\n\\n    function getMFDstatsAddress () external view override returns (address) {\\n        return _mfdStats;\\n    }\\n\\n    function getRdntTokenAddress () external view override returns (address) {\\n        return address(rdntToken);\\n    }\\n\\n    function getLPFeeDistributionAddress () external view override returns (address) {\\n        return address(lpFeeDistribution);\\n    }\\n\\n    function getMultiFeeDistributionAddress () external view override returns (address) {\\n        return address(multiFeeDistribution);\\n    }\\n\\n    /**\\n     * @notice Returns lock information of a user.\\n     * @dev It currently returns just MFD infos.\\n     */\\n    function lockedBalances(\\n        address user\\n    ) view external override returns (\\n        uint256 total,\\n        uint256 unlockable,\\n        uint256 locked,\\n        uint256 lockedWithMultiplier,\\n        LockedBalance[] memory lockData\\n    ) {\\n        return multiFeeDistribution.lockedBalances(user);\\n    }\\n    \\n    /**\\n     * @notice Set reward ratio for lp token locking\\n     */\\n    function setLpLockingRewardRatio(uint256 _lpLockingRewardRatio) external onlyAdminOrOwner {\\n        require(_lpLockingRewardRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n        lpLockingRewardRatio = _lpLockingRewardRatio;\\n        emit LpLockingRewardRatioUpdated(_lpLockingRewardRatio);\\n    }\\n    \\n    /**\\n     * @notice Set lp fee distribution contract\\n     */\\n    function setLPFeeDistribution(IMultiFeeDistribution _lpFeeDistribution) external onlyAdminOrOwner {\\n        lpFeeDistribution = _lpFeeDistribution;\\n        emit LPFeeDistributionUpdated(_lpFeeDistribution);\\n    }\\n    \\n    /**\\n     * @notice Set operation expenses account\\n     */\\n    function setOperationExpenses(address _operationExpenses, uint256 _operationExpenseRatio) external onlyAdminOrOwner {\\n        require(_operationExpenseRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n        operationExpenses = _operationExpenses;\\n        operationExpenseRatio = _operationExpenseRatio;\\n        emit OperationExpensesUpdated(_operationExpenses, _operationExpenseRatio);\\n    }\\n\\n    /**\\n     * @notice Add a new reward token to be distributed to stakers\\n     */\\n    function addReward(address _rewardsToken) external override onlyAdminOrOwner {\\n        multiFeeDistribution.addReward(_rewardsToken);\\n        lpFeeDistribution.addReward(_rewardsToken);\\n        isRewardToken[_rewardsToken] = true;\\n    }\\n\\n    /**\\n     * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n     */\\n    function forwardReward(address[] memory _rewardTokens) external override {\\n        require(\\n            msg.sender == address(lpFeeDistribution) ||\\n            msg.sender == address(multiFeeDistribution)\\n        );\\n        \\n        for (uint256 i = 0; i < _rewardTokens.length; i += 1) {\\n            uint256 total = IERC20(_rewardTokens[i]).balanceOf(address(this));\\n            \\n            if (operationExpenses != address(0) && operationExpenseRatio != 0) {\\n                uint256 opExAmount = total.mul(operationExpenseRatio).div(RATIO_DIVISOR);\\n                if (opExAmount != 0) {\\n                    IERC20(_rewardTokens[i]).safeTransfer(operationExpenses, opExAmount);\\n                }\\n                total = total.sub(opExAmount);\\n            }\\n            total = IERC20(_rewardTokens[i]).balanceOf(address(this));\\n            uint256 lpReward = total.mul(lpLockingRewardRatio).div(RATIO_DIVISOR);\\n            if (lpReward != 0) {\\n                IERC20(_rewardTokens[i]).safeTransfer(address(lpFeeDistribution), lpReward);\\n            }\\n            uint256 rdntReward = IERC20(_rewardTokens[i]).balanceOf(address(this));\\n            if (rdntReward != 0) {\\n                IERC20(_rewardTokens[i]).safeTransfer(address(multiFeeDistribution), rdntReward);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x4e64ffd309746c19a3494fb6933d143576154f90b8967d785709f137679f2abd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101285760003560e01c80630483a7f61461012d57806308c51c651461015a57806328f407481461016f5780634c6f713114610184578063542b3cb81461018c5780636a7e9f3314610194578063715018a6146101a95780638980f11f146101b15780638bb403eb146101c45780638da5cb5b146101cc57806392d1dbae146101d457806398f442bb146101dc5780639c9b2e21146101ef578063ab453a5914610202578063b5fd73f81461020a578063b82def931461022a578063c8d508b014610232578063cd57ed6c1461023a578063d30be90314610242578063dd36bd0e14610255578063f2fde38b1461025d578063f851a44014610270578063f8b336ac14610278578063f8c8765e1461028b575b600080fd5b61014061013b3660046112a5565b61029e565b6040516101519594939291906115b8565b60405180910390f35b61016d610168366004611347565b61033e565b005b610177610644565b604051610151919061151b565b610177610653565b610177610662565b61019c610671565b60405161015191906115af565b61016d610677565b61016d6101bf36600461131c565b6106e5565b6101776107a0565b6101776107af565b6101776107be565b61016d6101ea36600461131c565b6107cd565b61016d6101fd3660046112a5565b6108a9565b6101776109f2565b61021d6102183660046112a5565b610a01565b6040516101519190611548565b61019c610a16565b610177610a1c565b610177610a2b565b61016d6102503660046112a5565b610a3a565b61019c610aef565b61016d61026b3660046112a5565b610af5565b610177610ba8565b61016d6102863660046113e4565b610bb7565b61016d6102993660046112c1565b610c6d565b609954604051630241d3fb60e11b81526000918291829182916060916001600160a01b031690630483a7f6906102d890899060040161151b565b60006040518083038186803b1580156102f057600080fd5b505afa158015610304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032c9190810190611414565b939a9299509097509550909350915050565b6098546001600160a01b031633148061036157506099546001600160a01b031633145b61036a57600080fd5b60005b815181101561064057600082828151811061038457fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103b7919061151b565b60206040518083038186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040791906113fc565b609d549091506001600160a01b0316158015906104255750609b5415155b156104a457600061044d612710610447609b5485610d7690919063ffffffff16565b90610dd8565b9050801561049657609d548451610496916001600160a01b031690839087908790811061047657fe5b60200260200101516001600160a01b0316610e179092919063ffffffff16565b6104a08282610e6e565b9150505b8282815181106104b057fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104e3919061151b565b60206040518083038186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906113fc565b90506000610552612710610447609a5485610d7690919063ffffffff16565b9050801561057b57609854845161057b916001600160a01b031690839087908790811061047657fe5b600084848151811061058957fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105bc919061151b565b60206040518083038186803b1580156105d457600080fd5b505afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c91906113fc565b90508015610635576099548551610635916001600160a01b031690839088908890811061047657fe5b50505060010161036d565b5050565b6098546001600160a01b031690565b6097546001600160a01b031681565b6099546001600160a01b031681565b61271081565b61067f610eb0565b6001600160a01b03166106906107af565b6001600160a01b0316146106d9576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6106e36000610eb4565b565b6106ed610eb0565b6001600160a01b03166106fe6107af565b6001600160a01b031614610747576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6107636107526107af565b6001600160a01b0384169083610e17565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161079492919061152f565b60405180910390a15050565b609f546001600160a01b031690565b6065546001600160a01b031690565b6098546001600160a01b031681565b6107d5610eb0565b609e546001600160a01b039081169116148061081057506107f4610eb0565b6001600160a01b03166108056107af565b6001600160a01b0316145b6108355760405162461bcd60e51b815260040161082c90611553565b60405180910390fd5b6127108111156108575760405162461bcd60e51b815260040161082c90611588565b609d80546001600160a01b0319166001600160a01b038416179055609b8190556040517fba1e229a9495e21f509ea04bfdca8f222980ac1cb76333de06f6833f1e3f62d690610794908490849061152f565b6108b1610eb0565b609e546001600160a01b03908116911614806108ec57506108d0610eb0565b6001600160a01b03166108e16107af565b6001600160a01b0316145b6109085760405162461bcd60e51b815260040161082c90611553565b609954604051639c9b2e2160e01b81526001600160a01b0390911690639c9b2e219061093890849060040161151b565b600060405180830381600087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b5050609854604051639c9b2e2160e01b81526001600160a01b039091169250639c9b2e21915061099a90849060040161151b565b600060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b5050506001600160a01b039091166000908152609c60205260409020805460ff1916600117905550565b6097546001600160a01b031690565b609c6020526000908152604090205460ff1681565b609a5481565b609d546001600160a01b031681565b6099546001600160a01b031690565b610a42610eb0565b609e546001600160a01b0390811691161480610a7d5750610a61610eb0565b6001600160a01b0316610a726107af565b6001600160a01b0316145b610a995760405162461bcd60e51b815260040161082c90611553565b609880546001600160a01b0319166001600160a01b0383161790556040517f0c87dc2f7431709f171cde3001127c154b65cd22dc6c4695f3f718821f26a42790610ae490839061151b565b60405180910390a150565b609b5481565b610afd610eb0565b6001600160a01b0316610b0e6107af565b6001600160a01b031614610b57576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6001600160a01b038116610b9c5760405162461bcd60e51b815260040180806020018281038252602681526020018061168f6026913960400191505060405180910390fd5b610ba581610eb4565b50565b609e546001600160a01b031681565b610bbf610eb0565b609e546001600160a01b0390811691161480610bfa5750610bde610eb0565b6001600160a01b0316610bef6107af565b6001600160a01b0316145b610c165760405162461bcd60e51b815260040161082c90611553565b612710811115610c385760405162461bcd60e51b815260040161082c90611588565b609a8190556040517f1348fcd6cc6f4974c75a9c3a1db3d5106bcc97df42167c37777a40413f52272c90610ae49083906115af565b600054610100900460ff1680610c865750610c86610f06565b80610c94575060005460ff16155b610ccf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806116f6602e913960400191505060405180910390fd5b600054610100900460ff16158015610cfa576000805460ff1961ff0019909116610100171660011790555b610d02610f0c565b609780546001600160a01b038088166001600160a01b031992831617909255609f8054878416908316179055609880548684169083161790556099805492851692821692909217909155612710609a55609e8054909116331790558015610d6f576000805461ff00191690555b5050505050565b600082610d8557506000610dd2565b82820282848281610d9257fe5b0414610dcf5760405162461bcd60e51b81526004018080602001828103825260218152602001806116b56021913960400191505060405180910390fd5b90505b92915050565b6000610dcf83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610f5a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e69908490610ffc565b505050565b6000610dcf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111b9565b3390565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b303b1590565b600054610100900460ff16610f525760405162461bcd60e51b815260040180806020018281038252602b815260200180611724602b913960400191505060405180910390fd5b6106e3611213565b60008183610fe65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fab578181015183820152602001610f93565b50505050905090810190601f168015610fd85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610ff257fe5b0495945050505050565b61100e826001600160a01b0316611269565b61105f576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b6020831061109c5780518252601f19909201916020918201910161107d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146110fe576040519150601f19603f3d011682016040523d82523d6000602084013e611103565b606091505b50915091508161115a576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156111b35780806020019051602081101561117657600080fd5b50516111b35760405162461bcd60e51b815260040180806020018281038252602a81526020018061174f602a913960400191505060405180910390fd5b50505050565b6000818484111561120b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610fab578181015183820152602001610f93565b505050900390565b600054610100900460ff166112595760405162461bcd60e51b815260040180806020018281038252602b815260200180611724602b913960400191505060405180910390fd5b6106e3611264610eb0565b610eb4565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061129d57508115155b949350505050565b6000602082840312156112b6578081fd5b8135610dcf81611679565b600080600080608085870312156112d6578283fd5b84356112e181611679565b935060208501356112f181611679565b9250604085013561130181611679565b9150606085013561131181611679565b939692955090935050565b6000806040838503121561132e578182fd5b823561133981611679565b946020939093013593505050565b60006020808385031215611359578182fd5b82356001600160401b0381111561136e578283fd5b8301601f8101851361137e578283fd5b803561139161138c8261165c565b611639565b81815283810190838501858402850186018910156113ad578687fd5b8694505b838510156113d85780356113c481611679565b8352600194909401939185019185016113b1565b50979650505050505050565b6000602082840312156113f5578081fd5b5035919050565b60006020828403121561140d578081fd5b5051919050565b600080600080600060a0868803121561142b578081fd5b8551602080880151604089015160608a015160808b015194995091975095509350906001600160401b0380821115611461578384fd5b818901915089601f830112611474578384fd5b815161148261138c8261165c565b8181528481019084860160808402860187018e101561149f578788fd5b8795505b83861015611507576080818f0312156114ba578788fd5b6040516080810181811087821117156114cf57fe5b6040908152825182528883015189830152828101519082015260608083015190820152835260019590950194918601916080016114a3565b508096505050505050509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252818101527f63616c6c6572206973206e6f74207468652061646d696e206f72206f776e6572604082015260600190565b6020808252600d908201526c496e76616c696420726174696f60981b604082015260600190565b90815260200190565b600060a08201878352602087818501526040878186015260608781870152608060a08188015284885180875260c089019150858a019650875b8181101561162657875180518452878101518885015286810151878501528501518584015296860196918301916001016115f1565b50909d9c50505050505050505050505050565b6040518181016001600160401b038111828210171561165457fe5b604052919050565b60006001600160401b0382111561166f57fe5b5060209081020190565b6001600160a01b0381168114610ba557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bdfd909997de59e29bf3b5ed084289a641c4097f6307ba5d7097624f875946b764736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101285760003560e01c80630483a7f61461012d57806308c51c651461015a57806328f407481461016f5780634c6f713114610184578063542b3cb81461018c5780636a7e9f3314610194578063715018a6146101a95780638980f11f146101b15780638bb403eb146101c45780638da5cb5b146101cc57806392d1dbae146101d457806398f442bb146101dc5780639c9b2e21146101ef578063ab453a5914610202578063b5fd73f81461020a578063b82def931461022a578063c8d508b014610232578063cd57ed6c1461023a578063d30be90314610242578063dd36bd0e14610255578063f2fde38b1461025d578063f851a44014610270578063f8b336ac14610278578063f8c8765e1461028b575b600080fd5b61014061013b3660046112a5565b61029e565b6040516101519594939291906115b8565b60405180910390f35b61016d610168366004611347565b61033e565b005b610177610644565b604051610151919061151b565b610177610653565b610177610662565b61019c610671565b60405161015191906115af565b61016d610677565b61016d6101bf36600461131c565b6106e5565b6101776107a0565b6101776107af565b6101776107be565b61016d6101ea36600461131c565b6107cd565b61016d6101fd3660046112a5565b6108a9565b6101776109f2565b61021d6102183660046112a5565b610a01565b6040516101519190611548565b61019c610a16565b610177610a1c565b610177610a2b565b61016d6102503660046112a5565b610a3a565b61019c610aef565b61016d61026b3660046112a5565b610af5565b610177610ba8565b61016d6102863660046113e4565b610bb7565b61016d6102993660046112c1565b610c6d565b609954604051630241d3fb60e11b81526000918291829182916060916001600160a01b031690630483a7f6906102d890899060040161151b565b60006040518083038186803b1580156102f057600080fd5b505afa158015610304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032c9190810190611414565b939a9299509097509550909350915050565b6098546001600160a01b031633148061036157506099546001600160a01b031633145b61036a57600080fd5b60005b815181101561064057600082828151811061038457fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103b7919061151b565b60206040518083038186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040791906113fc565b609d549091506001600160a01b0316158015906104255750609b5415155b156104a457600061044d612710610447609b5485610d7690919063ffffffff16565b90610dd8565b9050801561049657609d548451610496916001600160a01b031690839087908790811061047657fe5b60200260200101516001600160a01b0316610e179092919063ffffffff16565b6104a08282610e6e565b9150505b8282815181106104b057fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104e3919061151b565b60206040518083038186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906113fc565b90506000610552612710610447609a5485610d7690919063ffffffff16565b9050801561057b57609854845161057b916001600160a01b031690839087908790811061047657fe5b600084848151811061058957fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105bc919061151b565b60206040518083038186803b1580156105d457600080fd5b505afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c91906113fc565b90508015610635576099548551610635916001600160a01b031690839088908890811061047657fe5b50505060010161036d565b5050565b6098546001600160a01b031690565b6097546001600160a01b031681565b6099546001600160a01b031681565b61271081565b61067f610eb0565b6001600160a01b03166106906107af565b6001600160a01b0316146106d9576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6106e36000610eb4565b565b6106ed610eb0565b6001600160a01b03166106fe6107af565b6001600160a01b031614610747576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6107636107526107af565b6001600160a01b0384169083610e17565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161079492919061152f565b60405180910390a15050565b609f546001600160a01b031690565b6065546001600160a01b031690565b6098546001600160a01b031681565b6107d5610eb0565b609e546001600160a01b039081169116148061081057506107f4610eb0565b6001600160a01b03166108056107af565b6001600160a01b0316145b6108355760405162461bcd60e51b815260040161082c90611553565b60405180910390fd5b6127108111156108575760405162461bcd60e51b815260040161082c90611588565b609d80546001600160a01b0319166001600160a01b038416179055609b8190556040517fba1e229a9495e21f509ea04bfdca8f222980ac1cb76333de06f6833f1e3f62d690610794908490849061152f565b6108b1610eb0565b609e546001600160a01b03908116911614806108ec57506108d0610eb0565b6001600160a01b03166108e16107af565b6001600160a01b0316145b6109085760405162461bcd60e51b815260040161082c90611553565b609954604051639c9b2e2160e01b81526001600160a01b0390911690639c9b2e219061093890849060040161151b565b600060405180830381600087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b5050609854604051639c9b2e2160e01b81526001600160a01b039091169250639c9b2e21915061099a90849060040161151b565b600060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b5050506001600160a01b039091166000908152609c60205260409020805460ff1916600117905550565b6097546001600160a01b031690565b609c6020526000908152604090205460ff1681565b609a5481565b609d546001600160a01b031681565b6099546001600160a01b031690565b610a42610eb0565b609e546001600160a01b0390811691161480610a7d5750610a61610eb0565b6001600160a01b0316610a726107af565b6001600160a01b0316145b610a995760405162461bcd60e51b815260040161082c90611553565b609880546001600160a01b0319166001600160a01b0383161790556040517f0c87dc2f7431709f171cde3001127c154b65cd22dc6c4695f3f718821f26a42790610ae490839061151b565b60405180910390a150565b609b5481565b610afd610eb0565b6001600160a01b0316610b0e6107af565b6001600160a01b031614610b57576040805162461bcd60e51b815260206004820181905260248201526000805160206116d6833981519152604482015290519081900360640190fd5b6001600160a01b038116610b9c5760405162461bcd60e51b815260040180806020018281038252602681526020018061168f6026913960400191505060405180910390fd5b610ba581610eb4565b50565b609e546001600160a01b031681565b610bbf610eb0565b609e546001600160a01b0390811691161480610bfa5750610bde610eb0565b6001600160a01b0316610bef6107af565b6001600160a01b0316145b610c165760405162461bcd60e51b815260040161082c90611553565b612710811115610c385760405162461bcd60e51b815260040161082c90611588565b609a8190556040517f1348fcd6cc6f4974c75a9c3a1db3d5106bcc97df42167c37777a40413f52272c90610ae49083906115af565b600054610100900460ff1680610c865750610c86610f06565b80610c94575060005460ff16155b610ccf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806116f6602e913960400191505060405180910390fd5b600054610100900460ff16158015610cfa576000805460ff1961ff0019909116610100171660011790555b610d02610f0c565b609780546001600160a01b038088166001600160a01b031992831617909255609f8054878416908316179055609880548684169083161790556099805492851692821692909217909155612710609a55609e8054909116331790558015610d6f576000805461ff00191690555b5050505050565b600082610d8557506000610dd2565b82820282848281610d9257fe5b0414610dcf5760405162461bcd60e51b81526004018080602001828103825260218152602001806116b56021913960400191505060405180910390fd5b90505b92915050565b6000610dcf83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610f5a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e69908490610ffc565b505050565b6000610dcf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111b9565b3390565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b303b1590565b600054610100900460ff16610f525760405162461bcd60e51b815260040180806020018281038252602b815260200180611724602b913960400191505060405180910390fd5b6106e3611213565b60008183610fe65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fab578181015183820152602001610f93565b50505050905090810190601f168015610fd85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610ff257fe5b0495945050505050565b61100e826001600160a01b0316611269565b61105f576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b6020831061109c5780518252601f19909201916020918201910161107d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146110fe576040519150601f19603f3d011682016040523d82523d6000602084013e611103565b606091505b50915091508161115a576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156111b35780806020019051602081101561117657600080fd5b50516111b35760405162461bcd60e51b815260040180806020018281038252602a81526020018061174f602a913960400191505060405180910390fd5b50505050565b6000818484111561120b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610fab578181015183820152602001610f93565b505050900390565b600054610100900460ff166112595760405162461bcd60e51b815260040180806020018281038252602b815260200180611724602b913960400191505060405180910390fd5b6106e3611264610eb0565b610eb4565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061129d57508115155b949350505050565b6000602082840312156112b6578081fd5b8135610dcf81611679565b600080600080608085870312156112d6578283fd5b84356112e181611679565b935060208501356112f181611679565b9250604085013561130181611679565b9150606085013561131181611679565b939692955090935050565b6000806040838503121561132e578182fd5b823561133981611679565b946020939093013593505050565b60006020808385031215611359578182fd5b82356001600160401b0381111561136e578283fd5b8301601f8101851361137e578283fd5b803561139161138c8261165c565b611639565b81815283810190838501858402850186018910156113ad578687fd5b8694505b838510156113d85780356113c481611679565b8352600194909401939185019185016113b1565b50979650505050505050565b6000602082840312156113f5578081fd5b5035919050565b60006020828403121561140d578081fd5b5051919050565b600080600080600060a0868803121561142b578081fd5b8551602080880151604089015160608a015160808b015194995091975095509350906001600160401b0380821115611461578384fd5b818901915089601f830112611474578384fd5b815161148261138c8261165c565b8181528481019084860160808402860187018e101561149f578788fd5b8795505b83861015611507576080818f0312156114ba578788fd5b6040516080810181811087821117156114cf57fe5b6040908152825182528883015189830152828101519082015260608083015190820152835260019590950194918601916080016114a3565b508096505050505050509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252818101527f63616c6c6572206973206e6f74207468652061646d696e206f72206f776e6572604082015260600190565b6020808252600d908201526c496e76616c696420726174696f60981b604082015260600190565b90815260200190565b600060a08201878352602087818501526040878186015260608781870152608060a08188015284885180875260c089019150858a019650875b8181101561162657875180518452878101518885015286810151878501528501518584015296860196918301916001016115f1565b50909d9c50505050505050505050505050565b6040518181016001600160401b038111828210171561165457fe5b604052919050565b60006001600160401b0382111561166f57fe5b5060209081020190565b6001600160a01b0381168114610ba557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bdfd909997de59e29bf3b5ed084289a641c4097f6307ba5d7097624f875946b764736f6c63430007060033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "lockedBalances(address)": {
        "details": "It currently returns just MFD infos."
      }
    },
    "title": "Fee distributor inside ",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ForwardReward(address,uint256)": {
        "notice": "Emitted when reward token is forwarded"
      },
      "LPFeeDistributionUpdated(address)": {
        "notice": "Emitted when lp fee distribution is set"
      },
      "LpLockingRewardRatioUpdated(uint256)": {
        "notice": "Emitted when LP locking reward ratio is set "
      },
      "OperationExpensesUpdated(address,uint256)": {
        "notice": "Emitted when operation expenses is set"
      },
      "Recovered(address,uint256)": {
        "notice": "Emitted when ERC20 token is recovered"
      },
      "SetOperationExpenses(address,uint256)": {
        "notice": "Emitted when OpEx info is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addReward(address)": {
        "notice": "Add a new reward token to be distributed to stakers"
      },
      "admin()": {
        "notice": "Admin address"
      },
      "forwardReward(address[])": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "lockedBalances(address)": {
        "notice": "Returns lock information of a user."
      },
      "lpFeeDistribution()": {
        "notice": "Fee distributor contract for lp locking"
      },
      "lpLockingRewardRatio()": {
        "notice": "Reward ratio for lp locking in bips"
      },
      "multiFeeDistribution()": {
        "notice": "Fee distributor contract for earnings and RDNT lockings"
      },
      "operationExpenseRatio()": {
        "notice": "Reward ratio for operation expenses"
      },
      "operationExpenses()": {
        "notice": "Operation Expense account"
      },
      "rdntToken()": {
        "notice": "RDNT token"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "setLPFeeDistribution(address)": {
        "notice": "Set lp fee distribution contract"
      },
      "setLpLockingRewardRatio(uint256)": {
        "notice": "Set reward ratio for lp token locking"
      },
      "setOperationExpenses(address,uint256)": {
        "notice": "Set operation expenses account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6361,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6364,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6431,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6576,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 6681,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42858,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "rdntToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IMintableToken)12625"
      },
      {
        "astId": 42861,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "lpFeeDistribution",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IMultiFeeDistribution)12722"
      },
      {
        "astId": 42864,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "multiFeeDistribution",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IMultiFeeDistribution)12722"
      },
      {
        "astId": 42868,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "lpLockingRewardRatio",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 42872,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "operationExpenseRatio",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 42880,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 42884,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "operationExpenses",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 42887,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "admin",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 42889,
        "contract": "contracts/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_mfdStats",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMintableToken)12625": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiFeeDistribution)12722": {
        "encoding": "inplace",
        "label": "contract IMultiFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}