{
  "address": "0x484c15F5c60b99BB002dA4D5Ab1C868ca606764d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "BaseBountyUsdTargetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "BountyBoosterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bal",
          "type": "uint256"
        }
      ],
      "name": "BountyReserveEmpty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IChefIncentivesController",
          "name": "_chef",
          "type": "address"
        }
      ],
      "name": "ChefIncentivesControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Disqualified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "HunterShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "MaxBaseBountyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "SlippageLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUNTER_SHARE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "addAddressToWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBountyUsdTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyBooster",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "changeWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expectedBounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityDataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_expectedBounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "executeBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpMfd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mfd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eligibilityDataProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hunterShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseBountyUsdTarget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBaseBounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyBooster",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "onRelockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdnt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setBaseBountyUsdTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBounties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setBountyBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setHunterShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setMaxBaseBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDLPBalance",
          "type": "uint256"
        }
      ],
      "name": "setMinDLPBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setSlippageLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x22d8cdb91475da4d277aeebe799ceff37cc4d0c8b788554c351ac21d1106cbed",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x484c15F5c60b99BB002dA4D5Ab1C868ca606764d",
    "transactionIndex": 3,
    "gasUsed": "2134049",
    "logsBloom": "0x
    "blockHash": "0x2ed45772ddd36c379302c75d2dc6c340a91e6df95a696b20bd797404f6e5291e",
    "transactionHash": "0x22d8cdb91475da4d277aeebe799ceff37cc4d0c8b788554c351ac21d1106cbed",
    "logs": [],
    "blockNumber": 27738677,
    "cumulativeGasUsed": "2302419",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"BaseBountyUsdTargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"BountyBoosterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"BountyReserveEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_chef\",\"type\":\"address\"}],\"name\":\"ChefIncentivesControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Disqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"HunterShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"MaxBaseBountyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"SlippageLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNTER_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addAddressToWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBountyUsdTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyBooster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expectedBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_expectedBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"executeBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpMfd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mfd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eligibilityDataProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hunterShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBountyUsdTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBaseBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyBooster\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"onRelockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdnt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setBaseBountyUsdTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBounties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setBountyBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setHunterShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxBaseBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDLPBalance\",\"type\":\"uint256\"}],\"name\":\"setMinDLPBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setSlippageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run. \",\"_expectedBounty\":\"result from quote above, used for slippage handling can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\",\"_user\":\"address\"},\"returns\":{\"actionType\":\"which bounty ran\",\"bounty\":\"in RDNT to be paid to Hunter (via vesting)\"}},\"executeBounty(address,bool,uint256,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run. \",\"_execute\":\"whether to execute this txn, or just quote what its execution would return\",\"_expectedBounty\":\"result from quote above, used for slippage handling can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\",\"_user\":\"address\"},\"returns\":{\"actionType\":\"which bounty ran\",\"bounty\":\"in RDNT to be paid to Hunter (via vesting)\"}},\"getBaseBounty()\":{\"returns\":{\"bounty\":\"in RDNT\"}},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_baseBountyUsdTarget\":\"Base Bounty is paid in RDNT, will scale to match this USD target value\",\"_bountyBooster\":\"when bounties need boosting to clear queue, add this amount (in RDNT)\",\"_chef\":\"CIC, to query bounties for ineligible emissions\",\"_hunterShare\":\"% of reclaimed rewards to send to Hunter\",\"_lpMfd\":\"LP MFD, to query bounties on expired locks + autocompounds\",\"_maxBaseBounty\":\"cap the scaling above\",\"_mfd\":\"MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)\",\"_priceProvider\":\"PriceProvider service, to get RDNT price for bounty quotes\",\"_rdnt\":\"RDNT address\",\"_weth\":\"WETH address\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quote(address)\":{\"params\":{\"_user\":\"address\"},\"returns\":{\"actionType\":\"which of the 3 bounty types (above) to run.  getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\",\"bounty\":\"amount of RDNT Hunter will recieve.  can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256,uint256)\":{\"notice\":\"Execute a bounty. \"},\"executeBounty(address,bool,uint256,uint256)\":{\"notice\":\"Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\"},\"getBaseBounty()\":{\"notice\":\"Return RDNT amount for Base Bounty.  Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter.\"},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize\"},\"quote(address)\":{\"notice\":\"Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bounties/BountyManager.sol\":\"BountyManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/bounties/BountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IAToken.sol\\\";\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../uniswap/periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeMath.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/ILockZap.sol\\\";\\nimport \\\"../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../interfaces/IEligibilityDataProvider.sol\\\";\\n\\ncontract BountyManager is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public rdnt;\\n    address public weth;\\n    address mfd;\\n    address lpMfd;\\n    address chef;\\n    address public priceProvider;\\n    address public eligibilityDataProvider;\\n    uint256 public HUNTER_SHARE;\\n    uint256 public baseBountyUsdTarget; // decimals 18\\n    uint256 public maxBaseBounty;\\n    uint256 public bountyBooster;\\n    uint256 public bountyCount;\\n    uint256 public minDLPBalance;\\n    uint256 slippageLimit;\\n\\n    // Array of available Bounty functions to run. See getLpMfdBounty, getChefBounty, etc.\\n    mapping(uint256 => function(address, bool) returns (address,uint256,bool))\\n        private bounties;\\n\\n    mapping(address => bool) public whitelist;\\n    bool public whitelistActive;\\n\\n    modifier isWhitelisted {\\n        if(whitelistActive){\\n            require(whitelist[msg.sender], \\\"!whiteliested\\\");\\n        }\\n        _;\\n    }\\n\\n    event Disqualified(address user);\\n    event ChefIncentivesControllerUpdated(IChefIncentivesController _chef);\\n    event BaseBountyUsdTargetUpdated(uint256 _newVal);\\n    event HunterShareUpdated(uint256 _newVal);\\n    event MaxBaseBountyUpdated(uint256 _newVal);\\n    event BountyBoosterUpdated(uint256 _newVal);\\n    event SlippageLimitUpdated(uint256 _newVal);\\n    event BountyReserveEmpty(uint256 _bal);\\n\\n    /**\\n     * @notice Initialize\\n     * @param _rdnt RDNT address\\n     * @param _weth WETH address\\n     * @param _lpMfd LP MFD, to query bounties on expired locks + autocompounds\\n     * @param _mfd MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)\\n     * @param _chef CIC, to query bounties for ineligible emissions\\n     * @param _priceProvider PriceProvider service, to get RDNT price for bounty quotes\\n     * @param _hunterShare % of reclaimed rewards to send to Hunter\\n     * @param _baseBountyUsdTarget Base Bounty is paid in RDNT, will scale to match this USD target value\\n     * @param _maxBaseBounty cap the scaling above\\n     * @param _bountyBooster when bounties need boosting to clear queue, add this amount (in RDNT)\\n     */\\n    function initialize(\\n        address _rdnt,\\n        address _weth,\\n        address _lpMfd,\\n        address _mfd,\\n        address _chef,\\n        address _priceProvider,\\n        address _eligibilityDataProvider,\\n        uint256 _hunterShare,\\n        uint256 _baseBountyUsdTarget,\\n        uint256 _maxBaseBounty,\\n        uint256 _bountyBooster\\n    ) external initializer {\\n        require(_rdnt != address(0));\\n        require(_weth != address(0));\\n        require(_lpMfd != address(0));\\n        require(_mfd != address(0));\\n        require(_chef != address(0));\\n        require(_priceProvider != address(0));\\n        require(_eligibilityDataProvider != address(0));\\n        require(_hunterShare <= 10000);\\n        require(_baseBountyUsdTarget != 0);\\n        require(_maxBaseBounty != 0);\\n\\n        rdnt = _rdnt;\\n        weth = _weth;\\n        lpMfd = _lpMfd;\\n        mfd = _mfd;\\n        chef = _chef;\\n        priceProvider = _priceProvider;\\n        eligibilityDataProvider = _eligibilityDataProvider;\\n\\n        HUNTER_SHARE = _hunterShare;\\n        baseBountyUsdTarget = _baseBountyUsdTarget;\\n        bountyBooster = _bountyBooster;\\n        maxBaseBounty = _maxBaseBounty;\\n\\n        bounties[1] = getLpMfdBounty;\\n        bounties[2] = getChefBounty;\\n        bounties[3] = getAutoCompoundBounty;\\n        bountyCount = 3;\\n\\n        slippageLimit = 10;\\n        minDLPBalance = uint256(5).mul(10 ** 18);\\n\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @notice Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\\n     * @param _user address\\n     * @return bounty amount of RDNT Hunter will recieve. \\n     * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n     * @return actionType which of the 3 bounty types (above) to run. \\n     * getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\\n     */\\n    function quote(address _user)\\n        public\\n        view\\n        whenNotPaused\\n        returns (uint256 bounty, uint256 actionType)\\n    {\\n        (bool success, bytes memory data) = address(this).staticcall(\\n            abi.encodeWithSignature(\\n                \\\"executeBounty(address,bool,uint256,uint256)\\\",\\n                _user,\\n                false,\\n                0,\\n                0\\n            )\\n        );\\n        require(success, \\\"quote fail\\\");\\n\\n        (bounty, actionType) = abi.decode(data, (uint256, uint256));\\n    }\\n\\n     /**\\n     * @notice Execute a bounty. \\n     * @param _user address\\n     * @param _expectedBounty result from quote above, used for slippage handling\\n     * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n     * @param _actionType which of the 3 bounty types (above) to run. \\n     * @return bounty in RDNT to be paid to Hunter (via vesting)\\n     * @return actionType which bounty ran\\n     */\\n    function claim(\\n        address _user,\\n        uint256 _expectedBounty,\\n        uint256 _actionType\\n    ) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\\n        return executeBounty(_user, true, _expectedBounty, _actionType);\\n    }\\n\\n    /**\\n     * @notice Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\\n     * @param _user address\\n     * @param _execute whether to execute this txn, or just quote what its execution would return\\n     * @param _expectedBounty result from quote above, used for slippage handling\\n     * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n     * @param _actionType which of the 3 bounty types (above) to run. \\n     * @return bounty in RDNT to be paid to Hunter (via vesting)\\n     * @return actionType which bounty ran\\n     */\\n    function executeBounty(\\n        address _user,\\n        bool _execute,\\n        uint256 _expectedBounty,\\n        uint256 _actionType\\n    ) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\\n        \\n        require(\\n            !_execute || (_execute && _expectedBounty != 0),\\n            \\\"quote required\\\"\\n        );\\n\\n        if(msg.sender != address(this)){\\n            (, , uint256 lockedLP, ,) = IMFDPlus(lpMfd).lockedBalances(msg.sender);\\n            require(lockedLP >= minDLPBalance, \\\"No enough DLP balance to be able to bounty\\\");\\n            require(IEligibilityDataProvider(eligibilityDataProvider).isEligibleForRewards(msg.sender), \\\"Bounty executer must be eligible for rewards.\\\");\\n        }\\n\\n        uint256 totalBounty;\\n        bool issueBaseBounty;\\n        address incentivizer;\\n        uint256 bb = getBaseBounty();\\n\\n        (\\n            incentivizer,\\n            totalBounty,\\n            issueBaseBounty,\\n            actionType\\n        ) = getBestBounty(_user, _execute, _actionType);\\n\\n        if (issueBaseBounty) {\\n            bounty = bb;\\n        } else {\\n            if (totalBounty != 0) {\\n                bounty = totalBounty.mul(HUNTER_SHARE).div(10000);\\n            }\\n        }\\n\\n        uint256 minAmountOut = _expectedBounty.sub(\\n            _expectedBounty.mul(slippageLimit).div(100)\\n        );\\n        require(bounty >= minAmountOut, \\\"too much slippage\\\");\\n\\n        if (_execute && bounty != 0) {\\n            if (!issueBaseBounty) {\\n                IERC20(rdnt).safeTransferFrom(\\n                    incentivizer,\\n                    address(this),\\n                    totalBounty\\n                );\\n            }\\n            _sendBounty(msg.sender, bounty);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given a user and actionType, execute that bounty on either CIC or MFD.\\n     * @param _user address\\n     * @param _execute whether to execute this txn, or just quote what its execution would return\\n     * @param _actionTypeIndex, which of the 3 bounty types (above) to run. \\n     * @return incentivizer the contract that had a bounty operation performed for it. \\n     * Either CIC (to remove ineligible user from emission pool, or MFD to remove expired locks)\\n     * @return totalBounty raw amount of RDNT returned from Incentivizer. Hunter % will be deducted from this.\\n     * @return issueBaseBounty whether Incentivizer will pay bounty from its own RDNT reserve, or from this contracts RDNT reserve\\n     * @return actionType the action type index executed\\n     */\\n    function getBestBounty(\\n        address _user,\\n        bool _execute,\\n        uint256 _actionTypeIndex\\n    )\\n        internal\\n        returns (\\n            address incentivizer,\\n            uint256 totalBounty,\\n            bool issueBaseBounty,\\n            uint256 actionType\\n        )\\n    {\\n        if (_actionTypeIndex != 0) {\\n            // execute bounty w/ given params\\n            (incentivizer, totalBounty, issueBaseBounty) = bounties[\\n                _actionTypeIndex\\n            ](_user, _execute);\\n            actionType = _actionTypeIndex;\\n        } else {\\n            for (uint256 i = 1; i <= bountyCount; i++) {\\n                (incentivizer, totalBounty, issueBaseBounty) = bounties[i](\\n                    _user,\\n                    _execute\\n                );\\n                if (totalBounty != 0 || issueBaseBounty) {\\n                    actionType = i;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice call MFDPlus.claimBounty()\\n     * @param _user address\\n     * @param _execute whether to execute this txn, or just quote what its execution would return\\n     * @return incentivizer in this case MFD\\n     * @return totalBounty RDNT to pay for this _user's bounty execution\\n     * @return issueBaseBounty true when user has autorelock, \\n     * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\\n     */\\n    function getLpMfdBounty(address _user, bool _execute)\\n        internal\\n        returns (\\n            address incentivizer,\\n            uint256 totalBounty,\\n            bool issueBaseBounty\\n        )\\n    {\\n        (totalBounty, issueBaseBounty) = IMFDPlus(lpMfd).claimBounty(\\n            _user,\\n            _execute\\n        );\\n        incentivizer = lpMfd;\\n    }\\n\\n    /**\\n     * @notice call CIC.claimBounty()\\n     * @param _user address\\n     * @param _execute whether to execute this txn, or just quote what its execution would return\\n     * @return incentivizer in this case CIC\\n     * @return totalBounty RDNT to pay for this _user's bounty execution\\n     * @return issueBaseBounty true when user has autorelock or when disqualified because their lock value dropped below 5% threshold\\n     * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\\n     */\\n    function getChefBounty(address _user, bool _execute)\\n        internal\\n        returns (\\n            address incentivizer,\\n            uint256 totalBounty,\\n            bool issueBaseBounty\\n        )\\n    {\\n        (totalBounty, issueBaseBounty) = IChefIncentivesController(chef)\\n            .claimBounty(_user, _execute);\\n        incentivizer = chef;\\n    }\\n\\n    /**\\n     * @notice call MFDPlus.claimCompound(). compound pending rewards for _user into locked LP\\n     * @param _user address\\n     * @param _execute whether to execute this txn, or just quote what its execution would return\\n     * @return incentivizer in this case MFDPlus\\n     * @return totalBounty RDNT to pay for this _user's bounty execution. paid from Autocompound fee\\n     * @return issueBaseBounty always false since bounty paid from compound fee\\n     */\\n    function getAutoCompoundBounty(address _user, bool _execute)\\n        internal\\n        returns (\\n            address incentivizer,\\n            uint256 totalBounty,\\n            bool issueBaseBounty\\n        )\\n    {\\n        (totalBounty) = IMFDPlus(lpMfd).claimCompound(_user, _execute);\\n        issueBaseBounty = false;\\n        incentivizer = lpMfd;\\n    }\\n\\n    /**\\n     * @notice Vest a bounty in MFD for successful bounty by Hunter\\n     * @param _to Hunter address\\n     * @param _amount of RDNT\\n     * @return amt added to vesting\\n     */\\n    function _sendBounty(address _to, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 bountyReserve = IERC20(rdnt).balanceOf(address(this));\\n        if(_amount > bountyReserve) {\\n            emit BountyReserveEmpty(bountyReserve);\\n            _pause();\\n        } else {\\n            IERC20(rdnt).safeTransfer(address(mfd), _amount);\\n            IMFDPlus(mfd).mint(_to, _amount, true);\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Return RDNT amount for Base Bounty. \\n     * Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter.\\n     * @return bounty in RDNT\\n     */\\n    function getBaseBounty()\\n        public\\n        view\\n        whenNotPaused\\n        returns (uint256 bounty)\\n    {\\n        uint256 rdntPrice = IPriceProvider(priceProvider).getTokenPriceUsd();\\n        bounty = baseBountyUsdTarget.mul(1e8).div(rdntPrice);\\n        if (bounty > maxBaseBounty) {\\n            bounty = maxBaseBounty;\\n        }\\n    }\\n\\n    function setMinDLPBalance (uint256 _minDLPBalance) external onlyOwner {\\n        minDLPBalance = _minDLPBalance;\\n    }\\n\\n    function setBaseBountyUsdTarget(uint256 _newVal) external onlyOwner {\\n        baseBountyUsdTarget = _newVal;\\n        emit BaseBountyUsdTargetUpdated(_newVal);\\n    }\\n\\n    function setHunterShare(uint256 _newVal) external onlyOwner {\\n        require(_newVal <= 10000, \\\"override\\\");\\n        HUNTER_SHARE = _newVal;\\n        emit HunterShareUpdated(_newVal);\\n    }\\n\\n    function setMaxBaseBounty(uint256 _newVal) external onlyOwner {\\n        maxBaseBounty = _newVal;\\n        emit MaxBaseBountyUpdated(_newVal);\\n    }\\n\\n    function setBountyBooster(uint256 _newVal) external onlyOwner {\\n        bountyBooster = _newVal;\\n        emit BountyBoosterUpdated(_newVal);\\n    }\\n\\n    function setSlippageLimit(uint256 _newVal) external onlyOwner {\\n        slippageLimit = _newVal;\\n        emit SlippageLimitUpdated(_newVal);\\n    }\\n\\n    function setBounties() external onlyOwner {\\n        bounties[1] = getLpMfdBounty;\\n        bounties[2] = getChefBounty;\\n        bounties[3] = getAutoCompoundBounty;\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    }\\n    function addAddressToWL(address user, bool status) external onlyOwner {\\n        whitelist[user] = status;\\n    }\\n\\n    function changeWL(bool status) external onlyOwner {\\n        whitelistActive = status;\\n    }\\n    \\n    function onRelockUpdate(address _user, bool oldStatus, bool newStatus) external {\\n        if (msg.sender != address(lpMfd) || oldStatus || !newStatus) {\\n            return;\\n        }\\n        (uint256 bounty, ) = quote(_user);\\n        if (bounty == 0) {\\n            return;\\n        }\\n        this.executeBounty(_user, true, bounty, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xb1edf161d5311098aa355e5de5592775173d7d29f04a2d45e04dd2a7ad5c9d53\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x0b16a215990b3611c5c352eb914d8320a26f7149d8dcc007b97b40bd4e403565\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xa5f6f100094fd6a02b3f012d94b8bd2cdabb8a5d3d77ba052c4ef965d57684b2\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    \\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n   \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    \\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdaf9847b1b084c0bfc20081e03cc924cc35ca524067067572c475227a6667297\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6c1d4d78f280a84374787cf607a31f56a3428c1a15ae05b08c7e68ee854bb7ec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7887b4b7a2d2907d6f35e84e55e632a6c391d17a345fd47c1cd9f11f04fb30de\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   **/\\n  function handleActionBefore(\\n    address user\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleActionAfter(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8331ccb3d25d999a00e624a2c91988b422af47c9a94a3c3e0e049116e9b52ac9\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   **/\\n  function handleActionBefore(\\n    address user\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleActionAfter(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Called by the locking contracts after locking or unlocking happens\\n   * @param user The address of the user\\n   **/\\n  function beforeLockUpdate(address user) external;\\n\\n  /**\\n    * @notice Hook for lock update.\\n    * @dev Called by the locking contracts after locking or unlocking happens\\n    */\\n  function afterLockUpdate(address _user) external;\\n\\n  function addPool(address _token, uint256 _allocPoint) external;\\n\\n  function claim(address _user, address[] calldata _tokens) external;\\n\\n  function setClaimReceiver(address _user, address _receiver) external;\\n  function getRegisteredTokens () external view returns (address[] memory);\\n  function disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n  function bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n  function allPendingRewards(address _user) external view returns (uint256 pending);\\n  function claimAll(address _user) external;\\n\\n  function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool useBountyReserve);\\n}\\n\",\"keccak256\":\"0x9c1b78487694af724a72b47d4910833a406533169c23412b819830de0876ce91\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n    function refresh(address user) external;\\n\\n    function updatePrice() external;\\n\\n    function requiredEthValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function isEligibleForRewards(address _user)\\n        external\\n        view\\n        returns (bool isEligible);\\n\\n    function lastEligibleTime(address user)\\n        external\\n        view\\n        returns (uint256 lastEligibleTimestamp);\\n\\n    function lockedUsdValue(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requiredUsdValue(address user)\\n        external\\n        view\\n        returns (uint256 required);\\n\\n    function lastEligibleStatus(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isMarketDisqualified(address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function rewardEligibleAmount(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setDqTime(address _user, uint256 _time) external;\\n    function getDqTime(address _user) external view returns (uint256);\\n    function autoprune() external returns (uint256 processed);\\n    function requiredDepositRatio() external view returns (uint256);\\n    function RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53c7626d11338cffeae8336da94c99dd1894f6838be238e3487205200f4e54ff\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n    function addReward(address rewardsToken) external;\\n    function lockedBalances(address user) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\",\"keccak256\":\"0x34593f732405652613fca6e84a22485acd7851b2a5dcb045773abcb6c512bc24\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x29f3fc61ab3d5a38972809501aba613b89bf2355049a9e59dee3b2d3c89d13b0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositWithAutoDLP(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7394d2e721bb4b2e25c3bf1fddce39667911de9d9db87176548a99c4aeced76b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n\\n  function getLiquidationFeeTo() external view returns (address);\\n\\n  function setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x106ef9420d874acfc948c140b0b4ffff258a8fa664febf805c686fdbff278f62\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n    function zap(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, uint256 _lockTypeIndex) external returns (uint256 liquidity);\\n    function zapOnBehalf(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, address _onBehalf) external returns (uint256 liquidity);\\n\\n}\\n\",\"keccak256\":\"0x32a8e56ae3d9f17bb8e1d08c87067d55be089dbf4f52e05bd3520abf5c7d5b4e\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n    function exit(bool claimRewards) external;\\n    function stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n    function lockInfo(address user) external view returns (LockedBalance[] memory);\\n    function defaultLockIndex(address _user) external view returns (uint256);\\n    function autoRelockDisabled(address user) external view returns (bool);\\n    function totalBalance(address user) external view returns (uint256);\\n    function zapVestingToLp (address _address) external returns (uint256);\\n    function withdrawExpiredLocksFor(address _address) external returns (uint256);\\n    function claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n    function setDefaultRelockTypeIndex(uint256 _index) external;\\n    function daoTreasury() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n    function getLastClaimTime(address _user) external returns (uint256);\\n    function claimFromConverter(address) external;\\n    function bountyForUser(address _user) external view returns (IFeeDistribution.RewardData[] memory bounties);\\n    function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool issueBaseBounty);\\n    function claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n    function setAutocompound(bool _newVal) external;\\n    function getAutocompoundEnabled(address _user) external view returns(bool);\\n}\",\"keccak256\":\"0x7c16c4e91f717ca13a58bde2ff298128b315d6eaa60571b87926c78b328861b0\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IPriceProvider {\\n    function getTokenPrice() external view returns (uint256);\\n    function getTokenPriceUsd() external view returns (uint256);\\n    function getLpTokenPrice() external view returns (uint256);\\n    function getLpTokenPriceUsd() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function update() external;\\n    function baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\",\"keccak256\":\"0xc6769af9019da36c386c44cf3fd9f07841f1e953debf843356415d825258033a\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09ce61e28962584d42a99b05380b629c8a696b1cd5f987837a51740457070922\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 multiplier;\\n    uint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 penalty;\\n}\",\"keccak256\":\"0x6511a1c116bd568dba24edd6d70b0a927bb249e499cbf29305803ed27e78055a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4542e2cf81b3cbcda615ef4960a53dc09094e975649b40bc70274f6592975648\",\"license\":\"agpl-3.0\"},\"contracts/uniswap/periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    \\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb79fed28729146c62c113b9c975cdf0079df43df2926b477ecfbf11a76844de4\",\"license\":\"agpl-3.0\"},\"contracts/uniswap/periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    \\n}\\n\",\"keccak256\":\"0x4291c8345e5f0eea0223c0cc87d52bd82b73a5cca3d0d9d4a6984d5598ffe14f\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c8063015d87611461018557806302ce58131461019a5780630b39ed47146101b85780631a2baad6146101d95780631fe4ba17146101ee5780632a50ddd2146102015780632bc43fd9146102145780632d54f823146102275780633e362c961461022f5780633fc8cef314610237578063464cea3d1461024c57806359cec45b1461025f5780635c975abb146102725780635d0f53961461027a5780635ebd4f9f14610282578063715018a61461029557806376e82e8b1461029d5780637a7acb89146102a55780638980f11f146102b85780638da5cb5b146102cb5780639b19251a146102d3578063b200e2c8146102e6578063b736ca82146102f9578063b888879e1461030c578063c0d02c5114610314578063d1025c0c1461031c578063d4743bae14610324578063d7ae73ae14610337578063d8c0e2531461033f578063d9cdd51314610347578063f2fde38b1461034f578063f582269314610362575b600080fd5b610198610193366004612011565b610375565b005b6101a2610417565b6040516101af9190612277565b60405180910390f35b6101cb6101c6366004611df4565b610420565b6040516101af9291906123e2565b6101e1610511565b6040516101af91906123d9565b6101986101fc366004612011565b6105d3565b61019861020f366004612011565b61066a565b6101cb610222366004611fa7565b610701565b6101e161075f565b6101e1610765565b61023f61076b565b6040516101af91906121d3565b61019861025a366004611ebd565b61077a565b6101cb61026d366004611f3b565b610807565b6101a2610ab4565b61023f610abd565b610198610290366004612011565b610acc565b610198610b85565b61023f610bf3565b6101986102b3366004611ef3565b610c02565b6101986102c6366004611f7e565b610cca565b61023f610d4c565b6101a26102e1366004611df4565b610d5b565b6101986102f4366004612011565b610d70565b610198610307366004611e0e565b610e07565b61023f611085565b610198611094565b6101e161116d565b610198610332366004611fd9565b611173565b6101e16111e8565b6101e16111ee565b6101e16111f4565b61019861035d366004611df4565b6111fa565b610198610370366004612011565b6112ad565b61037d611314565b6001600160a01b031661038e610d4c565b6001600160a01b0316146103d7576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d28190556040517fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e22969061040c9083906123d9565b60405180910390a150565b60d95460ff1681565b60008061042b611318565b600080306001600160a01b03168560008060006040516024016104519493929190612202565b60408051601f198184030181529181526020820180516001600160e01b03166359cec45b60e01b17905251610486919061219a565b600060405180830381855afa9150503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b5091509150816104f15760405162461bcd60e51b81526004016104e8906123b5565b60405180910390fd5b808060200190518101906105059190612065565b90969095509350505050565b600061051b611318565b60ce5460408051631b4bb46160e21b815290516000926001600160a01b031691636d2ed184916004808301926020929190829003018186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190612029565b90506105bd816105b76305f5e10060d15461136590919063ffffffff16565b906113c7565b915060d2548211156105cf5760d25491505b5090565b6105db611314565b6001600160a01b03166105ec610d4c565b6001600160a01b031614610635576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d68190556040517fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d2993049061040c9083906123d9565b610672611314565b6001600160a01b0316610683610d4c565b6001600160a01b0316146106cc576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d38190556040517f36a68bf905dcbd4092d259543b986b02346ebd9663aaacc168ba581b44d63f6c9061040c9083906123d9565b60008061070c611318565b60d95460ff16156107465733600090815260d8602052604090205460ff166107465760405162461bcd60e51b81526004016104e8906122a4565b6107538560018686610807565b91509150935093915050565b60d35481565b60d45481565b60ca546001600160a01b031681565b610782611314565b6001600160a01b0316610793610d4c565b6001600160a01b0316146107dc576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b600080610812611318565b60d95460ff161561084c5733600090815260d8602052604090205460ff1661084c5760405162461bcd60e51b81526004016104e8906122a4565b841580610860575084801561086057508315155b61087c5760405162461bcd60e51b81526004016104e890612318565b3330146109ce5760cc54604051630241d3fb60e11b81526000916001600160a01b031690630483a7f6906108b49033906004016121d3565b60006040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109089190810190612088565b50509250505060d5548110156109305760405162461bcd60e51b81526004016104e890612340565b60cf54604051633300c37360e11b81526001600160a01b039091169063660186e6906109609033906004016121d3565b60206040518083038186803b15801561097857600080fd5b505afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190611ff5565b6109cc5760405162461bcd60e51b81526004016104e8906122cb565b505b6000806000806109dc610511565b90506109e98a8a89611406565b9750909550935091508215610a0057809550610a24565b8315610a2457610a216127106105b760d0548761136590919063ffffffff16565b95505b6000610a4a610a4360646105b760d6548d61136590919063ffffffff16565b8a906114aa565b905080871015610a6c5760405162461bcd60e51b81526004016104e89061238a565b898015610a7857508615155b15610aa65783610a9a5760c954610a9a906001600160a01b03168430886114ec565b610aa4338861154c565b505b505050505094509492505050565b60975460ff1690565b60c9546001600160a01b031681565b610ad4611314565b6001600160a01b0316610ae5610d4c565b6001600160a01b031614610b2e576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b612710811115610b505760405162461bcd60e51b81526004016104e890612282565b60d08190556040517fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf9061040c9083906123d9565b610b8d611314565b6001600160a01b0316610b9e610d4c565b6001600160a01b031614610be7576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b610bf160006116be565b565b60cf546001600160a01b031681565b60cc546001600160a01b031633141580610c195750815b80610c22575080155b15610c2c57610cc5565b6000610c3784610420565b50905080610c455750610cc5565b6040516359cec45b60e01b815230906359cec45b90610c70908790600190869060009060040161222e565b6040805180830381600087803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190612065565b5050505b505050565b610cd2611314565b6001600160a01b0316610ce3610d4c565b6001600160a01b031614610d2c576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b610d48610d37610d4c565b6001600160a01b0384169083611710565b5050565b6065546001600160a01b031690565b60d86020526000908152604090205460ff1681565b610d78611314565b6001600160a01b0316610d89610d4c565b6001600160a01b031614610dd2576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d18190556040517f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e9061040c9083906123d9565b600054610100900460ff1680610e205750610e20611762565b80610e2e575060005460ff16155b610e695760405162461bcd60e51b815260040180806020018281038252602e8152602001806124c9602e913960400191505060405180910390fd5b600054610100900460ff16158015610e94576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038c16610ea757600080fd5b6001600160a01b038b16610eba57600080fd5b6001600160a01b038a16610ecd57600080fd5b6001600160a01b038916610ee057600080fd5b6001600160a01b038816610ef357600080fd5b6001600160a01b038716610f0657600080fd5b6001600160a01b038616610f1957600080fd5b612710851115610f2857600080fd5b83610f3257600080fd5b82610f3c57600080fd5b60c980546001600160a01b03199081166001600160a01b038f81169190911790925560ca805482168e841617905560cc805482168d841617905560cb805482168c841617905560cd805482168b841617905560ce805482168a841617905560cf805490911691881691909117905560d085905560d184905560d382905560d283905560d760205260008051602061244883398151915280546001600160401b03199081166117686001600160401b0390811691909117909255600080516020612468833981519152805482166118088416179055600360008190526000805160206124f783398151915280549092166118a890931692909217905560d455600a60d6556110526005670de0b6b3a7640000611365565b60d55561105d61194b565b611065611999565b8015611077576000805461ff00191690555b505050505050505050505050565b60ce546001600160a01b031681565b61109c611314565b6001600160a01b03166110ad610d4c565b6001600160a01b0316146110f6576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d760205260008051602061244883398151915280546001600160401b0361176881166001600160401b0319928316179092556000805160206124688339815191528054611808841690831617905560036000526000805160206124f783398151915280546118a890931692909116919091179055565b60d15481565b61117b611314565b6001600160a01b031661118c610d4c565b6001600160a01b0316146111d5576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d9805460ff1916911515919091179055565b60d05481565b60d25481565b60d55481565b611202611314565b6001600160a01b0316611213610d4c565b6001600160a01b03161461125c576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b6001600160a01b0381166112a15760405162461bcd60e51b81526004018080602001828103825260268152602001806124226026913960400191505060405180910390fd5b6112aa816116be565b50565b6112b5611314565b6001600160a01b03166112c6610d4c565b6001600160a01b03161461130f576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d555565b3390565b611320610ab4565b15610bf1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600082611374575060006113c1565b8282028284828161138157fe5b04146113be5760405162461bcd60e51b81526004018080602001828103825260218152602001806124886021913960400191505060405180910390fd5b90505b92915050565b60006113be83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506119e7565b6000808080841561144657600085815260d7602052604090205461143790889088908015611ddb021763ffffffff16565b919550935091508490506114a1565b60015b60d454811161149f57600081815260d7602052604090205461147890899089908015611ddb021763ffffffff16565b919650945092508315158061148a5750825b156114975780915061149f565b600101611449565b505b93509350935093565b60006113be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a89565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611546908590611ae3565b50505050565b60008161155b575060006113c1565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a082319061158c9030906004016121d3565b60206040518083038186803b1580156115a457600080fd5b505afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc9190612029565b90508083111561162a577fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b228160405161161591906123d9565b60405180910390a1611625611c9a565b6116b7565b60cb5460c954611647916001600160a01b03918216911685611710565b60cb546040516334686fad60e21b81526001600160a01b039091169063d1a1beb49061167c9087908790600190600401612254565b600060405180830381600087803b15801561169657600080fd5b505af11580156116aa573d6000803e3d6000fd5b50505050829150506113c1565b5092915050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cc5908490611ae3565b303b1590565b60cc54604051637ab8955d60e01b8152600091829182916001600160a01b031690637ab8955d9061179f90889088906004016121e7565b6040805180830381600087803b1580156117b857600080fd5b505af11580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190612041565b60cc546001600160a01b031697919650945092505050565b60cd54604051637ab8955d60e01b8152600091829182916001600160a01b031690637ab8955d9061183f90889088906004016121e7565b6040805180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190612041565b60cd546001600160a01b031697919650945092505050565b60cc546040516323d0c81d60e21b8152600091829182916001600160a01b031690638f432074906118df90889088906004016121e7565b602060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119319190612029565b60cc546001600160a01b0316969095506000945092505050565b600054610100900460ff166119915760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611cf5565b600054610100900460ff166119df5760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611d4b565b60008183611a735760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a38578181015183820152602001611a20565b50505050905090810190601f168015611a655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611a7f57fe5b0495945050505050565b60008184841115611adb5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611a38578181015183820152602001611a20565b505050900390565b611af5826001600160a01b0316611d9d565b611b46576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310611b835780518252601f199092019160209182019101611b64565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611be5576040519150601f19603f3d011682016040523d82523d6000602084013e611bea565b606091505b509150915081611c41576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561154657808060200190516020811015611c5d57600080fd5b50516115465760405162461bcd60e51b815260040180806020018281038252602a815260200180612542602a913960400191505060405180910390fd5b611ca2611318565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cd8611314565b604080516001600160a01b039092168252519081900360200190a1565b600054610100900460ff16611d3b5760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611d46611314565b6116be565b600054610100900460ff16611d915760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b6097805460ff19169055565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611dd157508115155b925050505b919050565bfe5b80356001600160a01b0381168114611dd657600080fd5b600060208284031215611e05578081fd5b6113be82611ddd565b60008060008060008060008060008060006101608c8e031215611e2f578687fd5b611e388c611ddd565b9a50611e4660208d01611ddd565b9950611e5460408d01611ddd565b9850611e6260608d01611ddd565b9750611e7060808d01611ddd565b9650611e7e60a08d01611ddd565b9550611e8c60c08d01611ddd565b945060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b60008060408385031215611ecf578182fd5b611ed883611ddd565b91506020830135611ee881612413565b809150509250929050565b600080600060608486031215611f07578283fd5b611f1084611ddd565b92506020840135611f2081612413565b91506040840135611f3081612413565b809150509250925092565b60008060008060808587031215611f50578384fd5b611f5985611ddd565b93506020850135611f6981612413565b93969395505050506040820135916060013590565b60008060408385031215611f90578182fd5b611f9983611ddd565b946020939093013593505050565b600080600060608486031215611fbb578283fd5b611fc484611ddd565b95602085013595506040909401359392505050565b600060208284031215611fea578081fd5b81356113be81612413565b600060208284031215612006578081fd5b81516113be81612413565b600060208284031215612022578081fd5b5035919050565b60006020828403121561203a578081fd5b5051919050565b60008060408385031215612053578182fd5b825191506020830151611ee881612413565b60008060408385031215612077578182fd5b505080516020909101519092909150565b600080600080600060a0868803121561209f578283fd5b8551602080880151604089015160608a015160808b015194995091975095509350906001600160401b03808211156120d5578384fd5b818901915089601f8301126120e8578384fd5b8151818111156120f457fe5b61210184858302016123f0565b8181528481019084860160808402860187018e101561211e578788fd5b8795505b83861015612186576080818f031215612139578788fd5b60405160808101818110878211171561214e57fe5b604090815282518252888301518983015282810151908201526060808301519082015283526001959095019491860191608001612122565b508096505050505050509295509295909350565b60008251815b818110156121ba57602081860181015185830152016121a0565b818111156121c85782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03949094168452911515602084015260ff908116604084015216606082015260800190565b6001600160a01b0394909416845291151560208401526040830152606082015260800190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b6020808252600890820152676f7665727269646560c01b604082015260600190565b6020808252600d908201526c085dda1a5d195b1a595cdd1959609a1b604082015260600190565b6020808252602d908201527f426f756e7479206578656375746572206d75737420626520656c696769626c6560408201526c103337b9103932bbb0b932399760991b606082015260800190565b6020808252600e908201526d1c5d5bdd19481c995c5d5a5c995960921b604082015260600190565b6020808252602a908201527f4e6f20656e6f75676820444c502062616c616e636520746f2062652061626c6560408201526920746f20626f756e747960b01b606082015260800190565b602080825260119082015270746f6f206d75636820736c69707061676560781b604082015260600190565b6020808252600a90820152691c5d5bdd194819985a5b60b21b604082015260600190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b038111828210171561240b57fe5b604052919050565b80151581146112aa57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4af10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea75536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656422b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220eecc95113fd73795867a2b6c08699f31339a5ae3c918b4298661ce12c02bbf4964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101805760003560e01c8063015d87611461018557806302ce58131461019a5780630b39ed47146101b85780631a2baad6146101d95780631fe4ba17146101ee5780632a50ddd2146102015780632bc43fd9146102145780632d54f823146102275780633e362c961461022f5780633fc8cef314610237578063464cea3d1461024c57806359cec45b1461025f5780635c975abb146102725780635d0f53961461027a5780635ebd4f9f14610282578063715018a61461029557806376e82e8b1461029d5780637a7acb89146102a55780638980f11f146102b85780638da5cb5b146102cb5780639b19251a146102d3578063b200e2c8146102e6578063b736ca82146102f9578063b888879e1461030c578063c0d02c5114610314578063d1025c0c1461031c578063d4743bae14610324578063d7ae73ae14610337578063d8c0e2531461033f578063d9cdd51314610347578063f2fde38b1461034f578063f582269314610362575b600080fd5b610198610193366004612011565b610375565b005b6101a2610417565b6040516101af9190612277565b60405180910390f35b6101cb6101c6366004611df4565b610420565b6040516101af9291906123e2565b6101e1610511565b6040516101af91906123d9565b6101986101fc366004612011565b6105d3565b61019861020f366004612011565b61066a565b6101cb610222366004611fa7565b610701565b6101e161075f565b6101e1610765565b61023f61076b565b6040516101af91906121d3565b61019861025a366004611ebd565b61077a565b6101cb61026d366004611f3b565b610807565b6101a2610ab4565b61023f610abd565b610198610290366004612011565b610acc565b610198610b85565b61023f610bf3565b6101986102b3366004611ef3565b610c02565b6101986102c6366004611f7e565b610cca565b61023f610d4c565b6101a26102e1366004611df4565b610d5b565b6101986102f4366004612011565b610d70565b610198610307366004611e0e565b610e07565b61023f611085565b610198611094565b6101e161116d565b610198610332366004611fd9565b611173565b6101e16111e8565b6101e16111ee565b6101e16111f4565b61019861035d366004611df4565b6111fa565b610198610370366004612011565b6112ad565b61037d611314565b6001600160a01b031661038e610d4c565b6001600160a01b0316146103d7576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d28190556040517fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e22969061040c9083906123d9565b60405180910390a150565b60d95460ff1681565b60008061042b611318565b600080306001600160a01b03168560008060006040516024016104519493929190612202565b60408051601f198184030181529181526020820180516001600160e01b03166359cec45b60e01b17905251610486919061219a565b600060405180830381855afa9150503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b5091509150816104f15760405162461bcd60e51b81526004016104e8906123b5565b60405180910390fd5b808060200190518101906105059190612065565b90969095509350505050565b600061051b611318565b60ce5460408051631b4bb46160e21b815290516000926001600160a01b031691636d2ed184916004808301926020929190829003018186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190612029565b90506105bd816105b76305f5e10060d15461136590919063ffffffff16565b906113c7565b915060d2548211156105cf5760d25491505b5090565b6105db611314565b6001600160a01b03166105ec610d4c565b6001600160a01b031614610635576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d68190556040517fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d2993049061040c9083906123d9565b610672611314565b6001600160a01b0316610683610d4c565b6001600160a01b0316146106cc576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d38190556040517f36a68bf905dcbd4092d259543b986b02346ebd9663aaacc168ba581b44d63f6c9061040c9083906123d9565b60008061070c611318565b60d95460ff16156107465733600090815260d8602052604090205460ff166107465760405162461bcd60e51b81526004016104e8906122a4565b6107538560018686610807565b91509150935093915050565b60d35481565b60d45481565b60ca546001600160a01b031681565b610782611314565b6001600160a01b0316610793610d4c565b6001600160a01b0316146107dc576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b600080610812611318565b60d95460ff161561084c5733600090815260d8602052604090205460ff1661084c5760405162461bcd60e51b81526004016104e8906122a4565b841580610860575084801561086057508315155b61087c5760405162461bcd60e51b81526004016104e890612318565b3330146109ce5760cc54604051630241d3fb60e11b81526000916001600160a01b031690630483a7f6906108b49033906004016121d3565b60006040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109089190810190612088565b50509250505060d5548110156109305760405162461bcd60e51b81526004016104e890612340565b60cf54604051633300c37360e11b81526001600160a01b039091169063660186e6906109609033906004016121d3565b60206040518083038186803b15801561097857600080fd5b505afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190611ff5565b6109cc5760405162461bcd60e51b81526004016104e8906122cb565b505b6000806000806109dc610511565b90506109e98a8a89611406565b9750909550935091508215610a0057809550610a24565b8315610a2457610a216127106105b760d0548761136590919063ffffffff16565b95505b6000610a4a610a4360646105b760d6548d61136590919063ffffffff16565b8a906114aa565b905080871015610a6c5760405162461bcd60e51b81526004016104e89061238a565b898015610a7857508615155b15610aa65783610a9a5760c954610a9a906001600160a01b03168430886114ec565b610aa4338861154c565b505b505050505094509492505050565b60975460ff1690565b60c9546001600160a01b031681565b610ad4611314565b6001600160a01b0316610ae5610d4c565b6001600160a01b031614610b2e576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b612710811115610b505760405162461bcd60e51b81526004016104e890612282565b60d08190556040517fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf9061040c9083906123d9565b610b8d611314565b6001600160a01b0316610b9e610d4c565b6001600160a01b031614610be7576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b610bf160006116be565b565b60cf546001600160a01b031681565b60cc546001600160a01b031633141580610c195750815b80610c22575080155b15610c2c57610cc5565b6000610c3784610420565b50905080610c455750610cc5565b6040516359cec45b60e01b815230906359cec45b90610c70908790600190869060009060040161222e565b6040805180830381600087803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190612065565b5050505b505050565b610cd2611314565b6001600160a01b0316610ce3610d4c565b6001600160a01b031614610d2c576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b610d48610d37610d4c565b6001600160a01b0384169083611710565b5050565b6065546001600160a01b031690565b60d86020526000908152604090205460ff1681565b610d78611314565b6001600160a01b0316610d89610d4c565b6001600160a01b031614610dd2576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d18190556040517f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e9061040c9083906123d9565b600054610100900460ff1680610e205750610e20611762565b80610e2e575060005460ff16155b610e695760405162461bcd60e51b815260040180806020018281038252602e8152602001806124c9602e913960400191505060405180910390fd5b600054610100900460ff16158015610e94576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038c16610ea757600080fd5b6001600160a01b038b16610eba57600080fd5b6001600160a01b038a16610ecd57600080fd5b6001600160a01b038916610ee057600080fd5b6001600160a01b038816610ef357600080fd5b6001600160a01b038716610f0657600080fd5b6001600160a01b038616610f1957600080fd5b612710851115610f2857600080fd5b83610f3257600080fd5b82610f3c57600080fd5b60c980546001600160a01b03199081166001600160a01b038f81169190911790925560ca805482168e841617905560cc805482168d841617905560cb805482168c841617905560cd805482168b841617905560ce805482168a841617905560cf805490911691881691909117905560d085905560d184905560d382905560d283905560d760205260008051602061244883398151915280546001600160401b03199081166117686001600160401b0390811691909117909255600080516020612468833981519152805482166118088416179055600360008190526000805160206124f783398151915280549092166118a890931692909217905560d455600a60d6556110526005670de0b6b3a7640000611365565b60d55561105d61194b565b611065611999565b8015611077576000805461ff00191690555b505050505050505050505050565b60ce546001600160a01b031681565b61109c611314565b6001600160a01b03166110ad610d4c565b6001600160a01b0316146110f6576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d760205260008051602061244883398151915280546001600160401b0361176881166001600160401b0319928316179092556000805160206124688339815191528054611808841690831617905560036000526000805160206124f783398151915280546118a890931692909116919091179055565b60d15481565b61117b611314565b6001600160a01b031661118c610d4c565b6001600160a01b0316146111d5576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d9805460ff1916911515919091179055565b60d05481565b60d25481565b60d55481565b611202611314565b6001600160a01b0316611213610d4c565b6001600160a01b03161461125c576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b6001600160a01b0381166112a15760405162461bcd60e51b81526004018080602001828103825260268152602001806124226026913960400191505060405180910390fd5b6112aa816116be565b50565b6112b5611314565b6001600160a01b03166112c6610d4c565b6001600160a01b03161461130f576040805162461bcd60e51b815260206004820181905260248201526000805160206124a9833981519152604482015290519081900360640190fd5b60d555565b3390565b611320610ab4565b15610bf1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b600082611374575060006113c1565b8282028284828161138157fe5b04146113be5760405162461bcd60e51b81526004018080602001828103825260218152602001806124886021913960400191505060405180910390fd5b90505b92915050565b60006113be83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506119e7565b6000808080841561144657600085815260d7602052604090205461143790889088908015611ddb021763ffffffff16565b919550935091508490506114a1565b60015b60d454811161149f57600081815260d7602052604090205461147890899089908015611ddb021763ffffffff16565b919650945092508315158061148a5750825b156114975780915061149f565b600101611449565b505b93509350935093565b60006113be83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a89565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611546908590611ae3565b50505050565b60008161155b575060006113c1565b60c9546040516370a0823160e01b81526000916001600160a01b0316906370a082319061158c9030906004016121d3565b60206040518083038186803b1580156115a457600080fd5b505afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc9190612029565b90508083111561162a577fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b228160405161161591906123d9565b60405180910390a1611625611c9a565b6116b7565b60cb5460c954611647916001600160a01b03918216911685611710565b60cb546040516334686fad60e21b81526001600160a01b039091169063d1a1beb49061167c9087908790600190600401612254565b600060405180830381600087803b15801561169657600080fd5b505af11580156116aa573d6000803e3d6000fd5b50505050829150506113c1565b5092915050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610cc5908490611ae3565b303b1590565b60cc54604051637ab8955d60e01b8152600091829182916001600160a01b031690637ab8955d9061179f90889088906004016121e7565b6040805180830381600087803b1580156117b857600080fd5b505af11580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190612041565b60cc546001600160a01b031697919650945092505050565b60cd54604051637ab8955d60e01b8152600091829182916001600160a01b031690637ab8955d9061183f90889088906004016121e7565b6040805180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190612041565b60cd546001600160a01b031697919650945092505050565b60cc546040516323d0c81d60e21b8152600091829182916001600160a01b031690638f432074906118df90889088906004016121e7565b602060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119319190612029565b60cc546001600160a01b0316969095506000945092505050565b600054610100900460ff166119915760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611cf5565b600054610100900460ff166119df5760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611d4b565b60008183611a735760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a38578181015183820152602001611a20565b50505050905090810190601f168015611a655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611a7f57fe5b0495945050505050565b60008184841115611adb5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611a38578181015183820152602001611a20565b505050900390565b611af5826001600160a01b0316611d9d565b611b46576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310611b835780518252601f199092019160209182019101611b64565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611be5576040519150601f19603f3d011682016040523d82523d6000602084013e611bea565b606091505b509150915081611c41576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561154657808060200190516020811015611c5d57600080fd5b50516115465760405162461bcd60e51b815260040180806020018281038252602a815260200180612542602a913960400191505060405180910390fd5b611ca2611318565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cd8611314565b604080516001600160a01b039092168252519081900360200190a1565b600054610100900460ff16611d3b5760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b610bf1611d46611314565b6116be565b600054610100900460ff16611d915760405162461bcd60e51b815260040180806020018281038252602b815260200180612517602b913960400191505060405180910390fd5b6097805460ff19169055565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611dd157508115155b925050505b919050565bfe5b80356001600160a01b0381168114611dd657600080fd5b600060208284031215611e05578081fd5b6113be82611ddd565b60008060008060008060008060008060006101608c8e031215611e2f578687fd5b611e388c611ddd565b9a50611e4660208d01611ddd565b9950611e5460408d01611ddd565b9850611e6260608d01611ddd565b9750611e7060808d01611ddd565b9650611e7e60a08d01611ddd565b9550611e8c60c08d01611ddd565b945060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b60008060408385031215611ecf578182fd5b611ed883611ddd565b91506020830135611ee881612413565b809150509250929050565b600080600060608486031215611f07578283fd5b611f1084611ddd565b92506020840135611f2081612413565b91506040840135611f3081612413565b809150509250925092565b60008060008060808587031215611f50578384fd5b611f5985611ddd565b93506020850135611f6981612413565b93969395505050506040820135916060013590565b60008060408385031215611f90578182fd5b611f9983611ddd565b946020939093013593505050565b600080600060608486031215611fbb578283fd5b611fc484611ddd565b95602085013595506040909401359392505050565b600060208284031215611fea578081fd5b81356113be81612413565b600060208284031215612006578081fd5b81516113be81612413565b600060208284031215612022578081fd5b5035919050565b60006020828403121561203a578081fd5b5051919050565b60008060408385031215612053578182fd5b825191506020830151611ee881612413565b60008060408385031215612077578182fd5b505080516020909101519092909150565b600080600080600060a0868803121561209f578283fd5b8551602080880151604089015160608a015160808b015194995091975095509350906001600160401b03808211156120d5578384fd5b818901915089601f8301126120e8578384fd5b8151818111156120f457fe5b61210184858302016123f0565b8181528481019084860160808402860187018e101561211e578788fd5b8795505b83861015612186576080818f031215612139578788fd5b60405160808101818110878211171561214e57fe5b604090815282518252888301518983015282810151908201526060808301519082015283526001959095019491860191608001612122565b508096505050505050509295509295909350565b60008251815b818110156121ba57602081860181015185830152016121a0565b818111156121c85782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03949094168452911515602084015260ff908116604084015216606082015260800190565b6001600160a01b0394909416845291151560208401526040830152606082015260800190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b6020808252600890820152676f7665727269646560c01b604082015260600190565b6020808252600d908201526c085dda1a5d195b1a595cdd1959609a1b604082015260600190565b6020808252602d908201527f426f756e7479206578656375746572206d75737420626520656c696769626c6560408201526c103337b9103932bbb0b932399760991b606082015260800190565b6020808252600e908201526d1c5d5bdd19481c995c5d5a5c995960921b604082015260600190565b6020808252602a908201527f4e6f20656e6f75676820444c502062616c616e636520746f2062652061626c6560408201526920746f20626f756e747960b01b606082015260800190565b602080825260119082015270746f6f206d75636820736c69707061676560781b604082015260600190565b6020808252600a90820152691c5d5bdd194819985a5b60b21b604082015260600190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b038111828210171561240b57fe5b604052919050565b80151581146112aa57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4af10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea75536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656422b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220eecc95113fd73795867a2b6c08699f31339a5ae3c918b4298661ce12c02bbf4964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,uint256,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run. ",
          "_expectedBounty": "result from quote above, used for slippage handling can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)",
          "_user": "address"
        },
        "returns": {
          "actionType": "which bounty ran",
          "bounty": "in RDNT to be paid to Hunter (via vesting)"
        }
      },
      "executeBounty(address,bool,uint256,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run. ",
          "_execute": "whether to execute this txn, or just quote what its execution would return",
          "_expectedBounty": "result from quote above, used for slippage handling can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)",
          "_user": "address"
        },
        "returns": {
          "actionType": "which bounty ran",
          "bounty": "in RDNT to be paid to Hunter (via vesting)"
        }
      },
      "getBaseBounty()": {
        "returns": {
          "bounty": "in RDNT"
        }
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_baseBountyUsdTarget": "Base Bounty is paid in RDNT, will scale to match this USD target value",
          "_bountyBooster": "when bounties need boosting to clear queue, add this amount (in RDNT)",
          "_chef": "CIC, to query bounties for ineligible emissions",
          "_hunterShare": "% of reclaimed rewards to send to Hunter",
          "_lpMfd": "LP MFD, to query bounties on expired locks + autocompounds",
          "_maxBaseBounty": "cap the scaling above",
          "_mfd": "MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)",
          "_priceProvider": "PriceProvider service, to get RDNT price for bounty quotes",
          "_rdnt": "RDNT address",
          "_weth": "WETH address"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quote(address)": {
        "params": {
          "_user": "address"
        },
        "returns": {
          "actionType": "which of the 3 bounty types (above) to run.  getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)",
          "bounty": "amount of RDNT Hunter will recieve.  can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256,uint256)": {
        "notice": "Execute a bounty. "
      },
      "executeBounty(address,bool,uint256,uint256)": {
        "notice": "Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting."
      },
      "getBaseBounty()": {
        "notice": "Return RDNT amount for Base Bounty.  Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter."
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize"
      },
      "quote(address)": {
        "notice": "Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6361,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6364,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6431,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6576,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 6681,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6703,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 6808,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1828,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "rdnt",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 1830,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "weth",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 1832,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "mfd",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 1834,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "lpMfd",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 1836,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "chef",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 1838,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "priceProvider",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 1840,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "eligibilityDataProvider",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 1842,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "HUNTER_SHARE",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 1844,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "baseBountyUsdTarget",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 1846,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "maxBaseBounty",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 1848,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "bountyBooster",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 1850,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "bountyCount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 1852,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "minDLPBalance",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 1854,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "slippageLimit",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 1870,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "bounties",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))"
      },
      {
        "astId": 1874,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1876,
        "contract": "contracts/bounties/BountyManager.sol:BountyManager",
        "label": "whitelistActive",
        "offset": 0,
        "slot": "217",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)": {
        "encoding": "inplace",
        "label": "function (address,bool) returns (address,uint256,bool)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => function (address,bool) returns (address,uint256,bool))",
        "numberOfBytes": "32",
        "value": "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}