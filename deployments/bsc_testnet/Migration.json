{
  "address": "0x523fA5ce23b58386D689EB1a0D419A35049dE038",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_tokenV1",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_tokenV2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountV1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountV2",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isExchangeRateFixed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "pauseMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenV1",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenV2",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x493b586593a7d579cd211d4421621933ae6768e6f376b17245a507cb3fd0c6dc",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x523fA5ce23b58386D689EB1a0D419A35049dE038",
    "transactionIndex": 2,
    "gasUsed": "887675",
    "logsBloom": "0x
    "blockHash": "0x88a28873f6fb9fe722b225de98d4ad41d826fbc676f88d7d7782a1466f88943b",
    "transactionHash": "0x493b586593a7d579cd211d4421621933ae6768e6f376b17245a507cb3fd0c6dc",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27738620,
        "transactionHash": "0x493b586593a7d579cd211d4421621933ae6768e6f376b17245a507cb3fd0c6dc",
        "address": "0x523fA5ce23b58386D689EB1a0D419A35049dE038",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3de96858fd006fd978ea2d55efe6b125012f485"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x88a28873f6fb9fe722b225de98d4ad41d826fbc676f88d7d7782a1466f88943b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 27738620,
        "transactionHash": "0x493b586593a7d579cd211d4421621933ae6768e6f376b17245a507cb3fd0c6dc",
        "address": "0x523fA5ce23b58386D689EB1a0D419A35049dE038",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000a3de96858fd006fd978ea2d55efe6b125012f485",
        "logIndex": 12,
        "blockHash": "0x88a28873f6fb9fe722b225de98d4ad41d826fbc676f88d7d7782a1466f88943b"
      }
    ],
    "blockNumber": 27738620,
    "cumulativeGasUsed": "1344768",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3dF6EE678AA53FFE12E9C901141d4419429e25B9",
    "0x20d9C60d0d5985fE56104f8B1fd68A191137FE5E"
  ],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_tokenV1\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_tokenV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountV1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountV2\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExchangeRateFixed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenV1\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenV2\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant team\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_tokenV1\":\"RDNT V1 token address\",\"_tokenV2\":\"RDNT V2 token address\"}},\"exchange(uint256)\":{\"params\":{\"amount\":\"of V1 token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseMigration(bool)\":{\"params\":{\"pause\":\"or unpause, true for pause\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExchangeRate(uint256)\":{\"params\":{\"_exchangeRate\":\"from V1 to V2\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawToken(address,uint256,address)\":{\"params\":{\"amount\":\"to withdraw\",\"to\":\"target address\",\"token\":\"address for withdraw\"}}},\"title\":\"Migration contract from V1 to V2\",\"version\":1},\"userdoc\":{\"events\":{\"ExchangeRateUpdated(uint256)\":{\"notice\":\"emitted when exchange rate is updated\"},\"Migrate(address,uint256,uint256)\":{\"notice\":\"emitted when migrate v1 token into v2\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"exchange(uint256)\":{\"notice\":\"Migrate from V1 to V2\"},\"exchangeRate()\":{\"notice\":\"Exchange rate in bips; if V1:V2 is 10:1 then, 10 * 1e4 \"},\"isExchangeRateFixed()\":{\"notice\":\"Any user exchanging tokens will fix the exchange rate\"},\"pauseMigration(bool)\":{\"notice\":\"Pause or Unpause migration\"},\"setExchangeRate(uint256)\":{\"notice\":\"Sets exchange rate\"},\"tokenV1()\":{\"notice\":\"V1 of RDNT\"},\"tokenV2()\":{\"notice\":\"V2 of RDNT\"},\"withdrawToken(address,uint256,address)\":{\"notice\":\"Withdraw ERC20 token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oft/Migration.sol\":\"Migration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xdf8525cd148276c372bf07a4b90630053d76c7a52649c7740df86a1a1a75cc7a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport './Context.sol';\\nimport './IERC20.sol';\\nimport './SafeMath.sol';\\nimport './Address.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 internal _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        'ERC20: decreased allowance below zero'\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n    * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n    *\\n    * Does not update the allowance amount in case of infinite allowance.\\n    * Revert if not enough allowance is available.\\n    *\\n    * Might emit an {Approval} event.\\n    */\\n  function _spendAllowance(\\n      address owner,\\n      address spender,\\n      uint256 amount\\n  ) internal virtual {\\n      uint256 currentAllowance = allowance(owner, spender);\\n      if (currentAllowance != type(uint256).max) {\\n          require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n          _approve(owner, spender, currentAllowance - amount);\\n      }\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be to transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xae99531d3aaa523b16e22c440fb342d1d70c847dd169ca5833353fe2934dca06\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x0b0ab32430f6def166e85816b37c61c175168c96519305001b5a209cfb5856dd\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\",\"keccak256\":\"0x84c06921ceec3b9687a20464684389f37e5b7e87ab7fa87de7580e44130a4f04\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/oft/Migration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/ERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/Pausable.sol\\\";\\n\\n/// @title Migration contract from V1 to V2\\n/// @author Radiant team\\n/// @dev All function calls are currently implemented without side effects\\ncontract Migration is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice V1 of RDNT\\n    ERC20 public tokenV1;\\n\\n    /// @notice V2 of RDNT\\n    ERC20 public tokenV2;\\n\\n    /// @notice Exchange rate in bips; if V1:V2 is 10:1 then, 10 * 1e4 \\n    uint256 public exchangeRate;\\n\\n    /// @notice Any user exchanging tokens will fix the exchange rate\\n    bool public isExchangeRateFixed;\\n\\n    /// @notice emitted when exchange rate is updated\\n    event ExchangeRateUpdated(uint256 exchangeRate);\\n\\n    /// @notice emitted when migrate v1 token into v2\\n    event Migrate(address indexed user, uint256 amountV1, uint256 amountV2);\\n\\n    /**\\n     * @notice constructor\\n     * @param _tokenV1 RDNT V1 token address\\n     * @param _tokenV2 RDNT V2 token address\\n     */\\n    constructor(ERC20 _tokenV1, ERC20 _tokenV2) Ownable() {\\n        tokenV1 = _tokenV1;\\n        tokenV2 = _tokenV2;\\n\\n        exchangeRate = 1e4;\\n\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Sets exchange rate\\n     * @param _exchangeRate from V1 to V2\\n     */\\n    function setExchangeRate(uint256 _exchangeRate) external onlyOwner {\\n        require(!isExchangeRateFixed, \\\"Users already exchanged tokens\\\");\\n        exchangeRate = _exchangeRate;\\n        emit ExchangeRateUpdated(_exchangeRate);\\n    }\\n\\n    /**\\n     * @notice Withdraw ERC20 token\\n     * @param token address for withdraw\\n     * @param amount to withdraw\\n     * @param to target address\\n     */\\n    function withdrawToken(ERC20 token, uint256 amount, address to) external onlyOwner {\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Pause or Unpause migration\\n     * @param pause or unpause, true for pause\\n     */\\n    function pauseMigration(bool pause) external onlyOwner {\\n        pause ? _pause() : _unpause();\\n    }\\n\\n    /**\\n     * @notice Migrate from V1 to V2\\n     * @param amount of V1 token\\n     */\\n    function exchange(uint256 amount) external whenNotPaused {\\n        if (!isExchangeRateFixed) {\\n            isExchangeRateFixed = true;\\n        }\\n        uint256 v1Decimals = tokenV1.decimals();\\n        uint256 v2Decimals = tokenV2.decimals();\\n\\n        uint256 outAmount = amount.mul(1e4).div(exchangeRate).mul(10**v2Decimals).div(10**v1Decimals);\\n        tokenV1.safeTransferFrom(_msgSender(), address(this), amount);\\n        tokenV2.safeTransfer(_msgSender(), outAmount);\\n\\n        emit Migrate(_msgSender(), amount, outAmount);\\n    }\\n}\",\"keccak256\":\"0xfe056919e6399c290b3d9358e2075a8a214abb52a9438d6ae2978e6f2d859aa6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f0d380380610f0d8339818101604052604081101561003357600080fd5b50805160209091015160006100466100e2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b19169055600180546001600160a01b038085166001600160a01b03199283161790925560028054928416929091169190911790556127106003556100db6100e6565b50506101a6565b3390565b6100ee610147565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861012a6100e2565b604080516001600160a01b039092168252519081900360200190a1565b61014f610196565b15610194576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b565b600054600160a01b900460ff1690565b610d58806101b56000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c80631382d8c2146100a957806334fa505d146100cd5780633ba0b9a9146100ee5780633ccdbb2814610108578063535565591461013e5780635c975abb1461015b578063715018a61461017757806383b25b891461017f5780638da5cb5b14610187578063db068e0e1461018f578063e3038b84146101ac578063f2fde38b146101b4575b600080fd5b6100b16101da565b604080516001600160a01b039092168252519081900360200190f35b6100ec600480360360208110156100e357600080fd5b503515156101e9565b005b6100f661025e565b60408051918252519081900360200190f35b6100ec6004803603606081101561011e57600080fd5b506001600160a01b03813581169160208101359160409091013516610264565b6100ec6004803603602081101561015457600080fd5b50356102d5565b6101636104af565b604080519115158252519081900360200190f35b6100ec6104bf565b6100b161054f565b6100b161055e565b6100ec600480360360208110156101a557600080fd5b503561056d565b610163610658565b6100ec600480360360208110156101ca57600080fd5b50356001600160a01b0316610661565b6002546001600160a01b031681565b6101f1610747565b6000546001600160a01b03908116911614610241576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b806102535761024e61074b565b61025b565b61025b6107a6565b50565b60035481565b61026c610747565b6000546001600160a01b039081169116146102bc576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b6102d06001600160a01b03841682846107ea565b505050565b6102dd61083c565b60045460ff166102f5576004805460ff191660011790555b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d602081101561036457600080fd5b50516002546040805163313ce56760e01b8152905160ff90931693506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156103b557600080fd5b505afa1580156103c9573d6000803e3d6000fd5b505050506040513d60208110156103df57600080fd5b505160035460ff909116915060009061041a90600a85810a9161040e9186900a9061041490838a61271061088b565b906108ed565b9061088b565b905061043b610427610747565b6001546001600160a01b031690308761092c565b610459610446610747565b6002546001600160a01b031690836107ea565b610461610747565b6001600160a01b03167fd44a6dd2bfac4f6bc02d116d96aa12c24e8580626b95cb6a2f543f18cb61bd4c8583604051808381526020018281526020019250505060405180910390a250505050565b600054600160a01b900460ff1690565b6104c7610747565b6000546001600160a01b03908116911614610517576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b600080546040516001600160a01b0390911690600080516020610cd9833981519152908390a3600080546001600160a01b0319169055565b6001546001600160a01b031681565b6000546001600160a01b031690565b610575610747565b6000546001600160a01b039081169116146105c5576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b60045460ff161561061d576040805162461bcd60e51b815260206004820152601e60248201527f557365727320616c72656164792065786368616e67656420746f6b656e730000604482015290519081900360640190fd5b60038190556040805182815290517f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9181900360200190a150565b60045460ff1681565b610669610747565b6000546001600160a01b039081169116146106b9576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b6001600160a01b0381166106fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180610c726026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610cd983398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b61075361098c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610789610747565b604080516001600160a01b039092168252519081900360200190a1565b6107ae61083c565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610789610747565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526102d09084906109dc565b6108446104af565b15610889576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b565b60008261089a575060006108e7565b828202828482816108a757fe5b04146108e45760405162461bcd60e51b8152600401808060200182810382526021815260200180610c986021913960400191505060405180910390fd5b90505b92915050565b60006108e483836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610b93565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526109869085906109dc565b50505050565b6109946104af565b610889576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6109ee826001600160a01b0316610c35565b610a3f576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310610a7c5780518252601f199092019160209182019101610a5d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610ade576040519150601f19603f3d011682016040523d82523d6000602084013e610ae3565b606091505b509150915081610b3a576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561098657808060200190516020811015610b5657600080fd5b50516109865760405162461bcd60e51b815260040180806020018281038252602a815260200180610cf9602a913960400191505060405180910390fd5b60008183610c1f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610be4578181015183820152602001610bcc565b50505050905090810190601f168015610c115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610c2b57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610c6957508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a51ed2cd4398e008b32662bef6e4bd1448517779b8a6a448e67656468839b29064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a45760003560e01c80631382d8c2146100a957806334fa505d146100cd5780633ba0b9a9146100ee5780633ccdbb2814610108578063535565591461013e5780635c975abb1461015b578063715018a61461017757806383b25b891461017f5780638da5cb5b14610187578063db068e0e1461018f578063e3038b84146101ac578063f2fde38b146101b4575b600080fd5b6100b16101da565b604080516001600160a01b039092168252519081900360200190f35b6100ec600480360360208110156100e357600080fd5b503515156101e9565b005b6100f661025e565b60408051918252519081900360200190f35b6100ec6004803603606081101561011e57600080fd5b506001600160a01b03813581169160208101359160409091013516610264565b6100ec6004803603602081101561015457600080fd5b50356102d5565b6101636104af565b604080519115158252519081900360200190f35b6100ec6104bf565b6100b161054f565b6100b161055e565b6100ec600480360360208110156101a557600080fd5b503561056d565b610163610658565b6100ec600480360360208110156101ca57600080fd5b50356001600160a01b0316610661565b6002546001600160a01b031681565b6101f1610747565b6000546001600160a01b03908116911614610241576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b806102535761024e61074b565b61025b565b61025b6107a6565b50565b60035481565b61026c610747565b6000546001600160a01b039081169116146102bc576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b6102d06001600160a01b03841682846107ea565b505050565b6102dd61083c565b60045460ff166102f5576004805460ff191660011790555b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d602081101561036457600080fd5b50516002546040805163313ce56760e01b8152905160ff90931693506000926001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156103b557600080fd5b505afa1580156103c9573d6000803e3d6000fd5b505050506040513d60208110156103df57600080fd5b505160035460ff909116915060009061041a90600a85810a9161040e9186900a9061041490838a61271061088b565b906108ed565b9061088b565b905061043b610427610747565b6001546001600160a01b031690308761092c565b610459610446610747565b6002546001600160a01b031690836107ea565b610461610747565b6001600160a01b03167fd44a6dd2bfac4f6bc02d116d96aa12c24e8580626b95cb6a2f543f18cb61bd4c8583604051808381526020018281526020019250505060405180910390a250505050565b600054600160a01b900460ff1690565b6104c7610747565b6000546001600160a01b03908116911614610517576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b600080546040516001600160a01b0390911690600080516020610cd9833981519152908390a3600080546001600160a01b0319169055565b6001546001600160a01b031681565b6000546001600160a01b031690565b610575610747565b6000546001600160a01b039081169116146105c5576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b60045460ff161561061d576040805162461bcd60e51b815260206004820152601e60248201527f557365727320616c72656164792065786368616e67656420746f6b656e730000604482015290519081900360640190fd5b60038190556040805182815290517f388f446e9526fe5c9af20a5919b342370c8a7c0cb05245afe1e545658fa3cdba9181900360200190a150565b60045460ff1681565b610669610747565b6000546001600160a01b039081169116146106b9576040805162461bcd60e51b81526020600482018190526024820152600080516020610cb9833981519152604482015290519081900360640190fd5b6001600160a01b0381166106fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180610c726026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610cd983398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b61075361098c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610789610747565b604080516001600160a01b039092168252519081900360200190a1565b6107ae61083c565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610789610747565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526102d09084906109dc565b6108446104af565b15610889576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b565b60008261089a575060006108e7565b828202828482816108a757fe5b04146108e45760405162461bcd60e51b8152600401808060200182810382526021815260200180610c986021913960400191505060405180910390fd5b90505b92915050565b60006108e483836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610b93565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526109869085906109dc565b50505050565b6109946104af565b610889576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6109ee826001600160a01b0316610c35565b610a3f576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310610a7c5780518252601f199092019160209182019101610a5d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610ade576040519150601f19603f3d011682016040523d82523d6000602084013e610ae3565b606091505b509150915081610b3a576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561098657808060200190516020811015610b5657600080fd5b50516109865760405162461bcd60e51b815260040180806020018281038252602a815260200180610cf9602a913960400191505060405180910390fd5b60008183610c1f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610be4578181015183820152602001610bcc565b50505050905090810190601f168015610c115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610c2b57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610c6957508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220a51ed2cd4398e008b32662bef6e4bd1448517779b8a6a448e67656468839b29064736f6c63430007060033",
  "devdoc": {
    "author": "Radiant team",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_tokenV1": "RDNT V1 token address",
          "_tokenV2": "RDNT V2 token address"
        }
      },
      "exchange(uint256)": {
        "params": {
          "amount": "of V1 token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseMigration(bool)": {
        "params": {
          "pause": "or unpause, true for pause"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExchangeRate(uint256)": {
        "params": {
          "_exchangeRate": "from V1 to V2"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawToken(address,uint256,address)": {
        "params": {
          "amount": "to withdraw",
          "to": "target address",
          "token": "address for withdraw"
        }
      }
    },
    "title": "Migration contract from V1 to V2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExchangeRateUpdated(uint256)": {
        "notice": "emitted when exchange rate is updated"
      },
      "Migrate(address,uint256,uint256)": {
        "notice": "emitted when migrate v1 token into v2"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor"
      },
      "exchange(uint256)": {
        "notice": "Migrate from V1 to V2"
      },
      "exchangeRate()": {
        "notice": "Exchange rate in bips; if V1:V2 is 10:1 then, 10 * 1e4 "
      },
      "isExchangeRateFixed()": {
        "notice": "Any user exchanging tokens will fix the exchange rate"
      },
      "pauseMigration(bool)": {
        "notice": "Pause or Unpause migration"
      },
      "setExchangeRate(uint256)": {
        "notice": "Sets exchange rate"
      },
      "tokenV1()": {
        "notice": "V1 of RDNT"
      },
      "tokenV2()": {
        "notice": "V2 of RDNT"
      },
      "withdrawToken(address,uint256,address)": {
        "notice": "Withdraw ERC20 token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5437,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5556,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20268,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "tokenV1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)5317"
      },
      {
        "astId": 20271,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "tokenV2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)5317"
      },
      {
        "astId": 20274,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 20277,
        "contract": "contracts/oft/Migration.sol:Migration",
        "label": "isExchangeRateFixed",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)5317": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}