{
  "address": "0x2cd991b0427D7676Ba9aeB2bBE839F34a7C4cE50",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "_rewardEligibleDataProvider",
          "type": "address"
        },
        {
          "internalType": "contract IAaveOracle",
          "name": "_aaveOracle",
          "type": "address"
        },
        {
          "internalType": "contract ILockZap",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "contract IChefIncentivesController",
          "name": "_cic",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "FeePercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "API_ETH_MOCK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveOracle",
      "outputs": [
        {
          "internalType": "contract IAaveOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cic",
      "outputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityDataProvider",
      "outputs": [
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getVDebtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockZap",
      "outputs": [
        {
          "internalType": "contract ILockZap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isBorrow",
          "type": "bool"
        }
      ],
      "name": "loop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        }
      ],
      "name": "loopETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ltv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wethToZap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loopCount",
          "type": "uint256"
        }
      ],
      "name": "wethToZapEstimation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "zapWETHWithBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x47541e00863f24320f17a3372acfbb730ed1d215194db722834c8fd798276e4f",
  "receipt": {
    "to": null,
    "from": "0x225c6084086F83eCe4BC747403f292a7d324Fd2E",
    "contractAddress": "0x2cd991b0427D7676Ba9aeB2bBE839F34a7C4cE50",
    "transactionIndex": 31,
    "gasUsed": "2494676",
    "logsBloom": "0x
    "blockHash": "0x97d5365d77913da9e9ae7975f9067c12e038345de6a260117c880b0f3c2e1682",
    "transactionHash": "0x47541e00863f24320f17a3372acfbb730ed1d215194db722834c8fd798276e4f",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 27096555,
        "transactionHash": "0x47541e00863f24320f17a3372acfbb730ed1d215194db722834c8fd798276e4f",
        "address": "0x2cd991b0427D7676Ba9aeB2bBE839F34a7C4cE50",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000225c6084086f83ece4bc747403f292a7d324fd2e"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x97d5365d77913da9e9ae7975f9067c12e038345de6a260117c880b0f3c2e1682"
      }
    ],
    "blockNumber": 27096555,
    "cumulativeGasUsed": "5963067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd50Cf00b6e600Dd036Ba8eF475677d816d6c4281",
    "0x7B45bc162804db31D12c0bcf3009fb161A7fEe6e",
    "0x0BB5c1Bc173b207cBf47CDf013617087776F3782",
    "0x13Ef2A9e127aE8d9e9b863c7e375Ba68E1a42Ac6",
    "0x7C16aBb090d3FB266E9d17F60174B632f4229933",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    "0",
    "0x769549Ab2765f2541FF6d5b6655B8bD36f99705E"
  ],
  "numDeployments": 1,
  "solcInputHash": "349e02637fa83cbadc3e167bdb8af2b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"_rewardEligibleDataProvider\",\"type\":\"address\"},{\"internalType\":\"contract IAaveOracle\",\"name\":\"_aaveOracle\",\"type\":\"address\"},{\"internalType\":\"contract ILockZap\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_cic\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"FeePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"API_ETH_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveOracle\",\"outputs\":[{\"internalType\":\"contract IAaveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cic\",\"outputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityDataProvider\",\"outputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getVDebtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"contract ILockZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBorrow\",\"type\":\"bool\"}],\"name\":\"loop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"}],\"name\":\"loopETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ltv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wethToZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loopCount\",\"type\":\"uint256\"}],\"name\":\"wethToZapEstimation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"zapWETHWithBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_aaveOracle\":\"address.\",\"_feePercent\":\"leveraging fee ratio.\",\"_lendingPool\":\"Address of lending pool.\",\"_lockZap\":\"address.\",\"_rewardEligibleDataProvider\":\"EligibilityProvider address.\",\"_treasury\":\"address.\",\"_weth\":\"WETH address.\"}},\"getConfiguration(address)\":{\"details\":\"Returns the configuration of the reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The configuration of the reserve*\"}},\"getVDebtToken(address)\":{\"details\":\"Returns variable debt token address of asset\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"varaiableDebtToken address of the asset*\"}},\"loop(address,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"Loop the deposit and borrow of an asset\",\"params\":{\"amount\":\"for the initial deposit\",\"asset\":\"for loop\",\"borrowRatio\":\"Ratio of tokens to borrow\",\"interestRateMode\":\"stable or variable borrow mode\",\"isBorrow\":\"true when the loop without deposit tokens*\",\"loopCount\":\"Repeat count for loop\"}},\"loopETH(uint256,uint256,uint256)\":{\"details\":\"Loop the deposit and borrow of ETH\",\"params\":{\"borrowRatio\":\"Ratio of tokens to borrow\",\"interestRateMode\":\"stable or variable borrow mode\",\"loopCount\":\"Repeat count for loop*\"}},\"ltv(address)\":{\"details\":\"Returns loan to value\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"ltv of the asset*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeePercent(uint256)\":{\"params\":{\"_feePercent\":\"fee ratio.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wethToZap(address)\":{\"params\":{\"user\":\"for zap*\"}},\"wethToZapEstimation(address,address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of `asset`\",\"asset\":\"src token\",\"borrowRatio\":\"Single ratio of borrow\",\"loopCount\":\"Repeat count for loop*\",\"user\":\"for zap\"}},\"zapWETHWithBorrow(uint256,address)\":{\"params\":{\"amount\":\"to zap\",\"borrower\":\"to zap\"},\"returns\":{\"liquidity\":\"amount by zapping*\"}}},\"title\":\"Leverager Contract\",\"version\":1},\"userdoc\":{\"events\":{\"FeePercentUpdated(uint256)\":{\"notice\":\"Emitted when fee ratio is updated\"},\"TreasuryUpdated(address)\":{\"notice\":\"Emitted when treasury is updated\"}},\"kind\":\"user\",\"methods\":{\"API_ETH_MOCK_ADDRESS()\":{\"notice\":\"Mock ETH address\"},\"RATIO_DIVISOR()\":{\"notice\":\"Ratio Divisor\"},\"aaveOracle()\":{\"notice\":\"Aave oracle address\"},\"cic()\":{\"notice\":\"ChefIncentivesController contract address\"},\"constructor\":{\"notice\":\"Constructor\"},\"eligibilityDataProvider()\":{\"notice\":\"EligibilityDataProvider contract address\"},\"feePercent()\":{\"notice\":\"Fee ratio\"},\"lendingPool()\":{\"notice\":\"Lending Pool address\"},\"lockZap()\":{\"notice\":\"LockZap contract address\"},\"setFeePercent(uint256)\":{\"notice\":\"Sets fee ratio\"},\"setTreasury(address)\":{\"notice\":\"Sets fee ratio\"},\"treasury()\":{\"notice\":\"Treasury address\"},\"weth()\":{\"notice\":\"Wrapped ETH contract address\"},\"wethToZap(address)\":{\"notice\":\"Return estimated zap WETH amount for eligbility.\"},\"wethToZapEstimation(address,address,uint256,uint256,uint256)\":{\"notice\":\"Return estimated zap WETH amount for eligbility after loop.\"},\"zapWETHWithBorrow(uint256,address)\":{\"notice\":\"Zap WETH by borrowing.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/accessories/Leverager.sol\":\"Leverager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n\\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n\\n\\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\tfunction getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x829468b50cba8db2f65ec609801fec1847b87ba65f8a6feaa8d71e97acd065c3\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n}\\n\",\"keccak256\":\"0x3f44ee9291069ef7a3b09c70293e745db5fe53b4f1b5ccdf72c97d1aad0f7720\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external;\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction isMarketDisqualified(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2d1b34c70760edccaee3dd3f3814a0fb97d00982411d363b7c6df1454f9e3226\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n\\tfunction zap(\\n\\t\\tbool _borrow,\\n\\t\\tuint256 _wethAmt,\\n\\t\\tuint256 _rdntAmt,\\n\\t\\tuint256 _lockTypeIndex\\n\\t) external returns (uint256 liquidity);\\n\\n\\tfunction zapOnBehalf(\\n\\t\\tbool _borrow,\\n\\t\\tuint256 _wethAmt,\\n\\t\\tuint256 _rdntAmt,\\n\\t\\taddress _onBehalf\\n\\t) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x793f8c776c176c851226a1045fb260d6c7202c3ac5b6a10f61cccab69114f767\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa01b3e4312088160513233e1f5278473750e47ac9c43efa3df1b8b348d16d8a4\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/radiant/accessories/Leverager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../interfaces/ILendingPool.sol\\\";\\nimport \\\"../../interfaces/IEligibilityDataProvider.sol\\\";\\nimport \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../../interfaces/ILockZap.sol\\\";\\nimport \\\"../../interfaces/IAaveOracle.sol\\\";\\nimport \\\"../../interfaces/IWETH.sol\\\";\\n\\n/// @title Leverager Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract Leverager is Ownable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Ratio Divisor\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\t/// @notice Mock ETH address\\n\\taddress public constant API_ETH_MOCK_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\t/// @notice Lending Pool address\\n\\tILendingPool public lendingPool;\\n\\n\\t/// @notice EligibilityDataProvider contract address\\n\\tIEligibilityDataProvider public eligibilityDataProvider;\\n\\n\\t/// @notice LockZap contract address\\n\\tILockZap public lockZap;\\n\\n\\t/// @notice ChefIncentivesController contract address\\n\\tIChefIncentivesController public cic;\\n\\n\\t/// @notice Wrapped ETH contract address\\n\\tIWETH public weth;\\n\\n\\t/// @notice Aave oracle address\\n\\tIAaveOracle public aaveOracle;\\n\\n\\t/// @notice Fee ratio\\n\\tuint256 public feePercent;\\n\\n\\t/// @notice Treasury address\\n\\taddress public treasury;\\n\\n\\t/// @notice Emitted when fee ratio is updated\\n\\tevent FeePercentUpdated(uint256 _feePercent);\\n\\n\\t/// @notice Emitted when treasury is updated\\n\\tevent TreasuryUpdated(address indexed _treasury);\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _lendingPool Address of lending pool.\\n\\t * @param _rewardEligibleDataProvider EligibilityProvider address.\\n\\t * @param _aaveOracle address.\\n\\t * @param _lockZap address.\\n\\t * @param _weth WETH address.\\n\\t * @param _feePercent leveraging fee ratio.\\n\\t * @param _treasury address.\\n\\t */\\n\\tconstructor(\\n\\t\\tILendingPool _lendingPool,\\n\\t\\tIEligibilityDataProvider _rewardEligibleDataProvider,\\n\\t\\tIAaveOracle _aaveOracle,\\n\\t\\tILockZap _lockZap,\\n\\t\\tIChefIncentivesController _cic,\\n\\t\\tIWETH _weth,\\n\\t\\tuint256 _feePercent,\\n\\t\\taddress _treasury\\n\\t) {\\n\\t\\trequire(address(_lendingPool) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_rewardEligibleDataProvider) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_aaveOracle) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_lockZap) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_cic) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_weth) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(_treasury != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_feePercent <= 1e4, \\\"Invalid ratio\\\");\\n\\n\\t\\tlendingPool = _lendingPool;\\n\\t\\teligibilityDataProvider = _rewardEligibleDataProvider;\\n\\t\\tlockZap = _lockZap;\\n\\t\\taaveOracle = _aaveOracle;\\n\\t\\tcic = _cic;\\n\\t\\tweth = _weth;\\n\\t\\tfeePercent = _feePercent;\\n\\t\\ttreasury = _treasury;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\\n\\t */\\n\\treceive() external payable {\\n\\t\\trequire(msg.sender == address(weth), \\\"Receive not allowed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Revert fallback calls\\n\\t */\\n\\tfallback() external payable {\\n\\t\\trevert(\\\"Fallback not allowed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets fee ratio\\n\\t * @param _feePercent fee ratio.\\n\\t */\\n\\tfunction setFeePercent(uint256 _feePercent) external onlyOwner {\\n\\t\\trequire(_feePercent <= 1e4, \\\"Invalid ratio\\\");\\n\\t\\tfeePercent = _feePercent;\\n\\t\\temit FeePercentUpdated(_feePercent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets fee ratio\\n\\t * @param _treasury address\\n\\t */\\n\\tfunction setTreasury(address _treasury) external onlyOwner {\\n\\t\\trequire(_treasury != address(0), \\\"treasury is 0 address\\\");\\n\\t\\ttreasury = _treasury;\\n\\t\\temit TreasuryUpdated(_treasury);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory) {\\n\\t\\treturn lendingPool.getConfiguration(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns variable debt token address of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return varaiableDebtToken address of the asset\\n\\t **/\\n\\tfunction getVDebtToken(address asset) public view returns (address) {\\n\\t\\tDataTypes.ReserveData memory reserveData = lendingPool.getReserveData(asset);\\n\\t\\treturn reserveData.variableDebtTokenAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns loan to value\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return ltv of the asset\\n\\t **/\\n\\tfunction ltv(address asset) public view returns (uint256) {\\n\\t\\tDataTypes.ReserveConfigurationMap memory conf = lendingPool.getConfiguration(asset);\\n\\t\\treturn conf.data % (2 ** 16);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Loop the deposit and borrow of an asset\\n\\t * @param asset for loop\\n\\t * @param amount for the initial deposit\\n\\t * @param interestRateMode stable or variable borrow mode\\n\\t * @param borrowRatio Ratio of tokens to borrow\\n\\t * @param loopCount Repeat count for loop\\n\\t * @param isBorrow true when the loop without deposit tokens\\n\\t **/\\n\\tfunction loop(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint256 borrowRatio,\\n\\t\\tuint256 loopCount,\\n\\t\\tbool isBorrow\\n\\t) external {\\n\\t\\trequire(borrowRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n\\t\\tuint16 referralCode = 0;\\n\\t\\tuint256 fee;\\n\\t\\tif (!isBorrow) {\\n\\t\\t\\tIERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t\\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\t\\tIERC20(asset).safeTransfer(treasury, fee);\\n\\t\\t\\tamount = amount.sub(fee);\\n\\t\\t}\\n\\t\\tif (IERC20(asset).allowance(address(this), address(lendingPool)) == 0) {\\n\\t\\t\\tIERC20(asset).safeApprove(address(lendingPool), type(uint256).max);\\n\\t\\t}\\n\\t\\tif (IERC20(asset).allowance(address(this), address(treasury)) == 0) {\\n\\t\\t\\tIERC20(asset).safeApprove(treasury, type(uint256).max);\\n\\t\\t}\\n\\n\\t\\tcic.setEligibilityExempt(msg.sender, true);\\n\\n\\t\\tif (!isBorrow) {\\n\\t\\t\\tlendingPool.deposit(asset, amount, msg.sender, referralCode);\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < loopCount; i += 1) {\\n\\t\\t\\t// Reenable on last deposit\\n\\t\\t\\tif (i == (loopCount - 1)) {\\n\\t\\t\\t\\tcic.setEligibilityExempt(msg.sender, false);\\n\\t\\t\\t}\\n\\n\\t\\t\\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n\\t\\t\\tlendingPool.borrow(asset, amount, interestRateMode, referralCode, msg.sender);\\n\\n\\t\\t\\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\t\\tIERC20(asset).safeTransfer(treasury, fee);\\n\\n\\t\\t\\tlendingPool.deposit(asset, amount.sub(fee), msg.sender, referralCode);\\n\\t\\t}\\n\\t\\tzapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Loop the deposit and borrow of ETH\\n\\t * @param interestRateMode stable or variable borrow mode\\n\\t * @param borrowRatio Ratio of tokens to borrow\\n\\t * @param loopCount Repeat count for loop\\n\\t **/\\n\\tfunction loopETH(uint256 interestRateMode, uint256 borrowRatio, uint256 loopCount) external payable {\\n\\t\\trequire(borrowRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n\\t\\tuint16 referralCode = 0;\\n\\t\\tuint256 amount = msg.value;\\n\\t\\tif (IERC20(address(weth)).allowance(address(this), address(lendingPool)) == 0) {\\n\\t\\t\\tIERC20(address(weth)).safeApprove(address(lendingPool), type(uint256).max);\\n\\t\\t}\\n\\t\\tif (IERC20(address(weth)).allowance(address(this), address(treasury)) == 0) {\\n\\t\\t\\tIERC20(address(weth)).safeApprove(treasury, type(uint256).max);\\n\\t\\t}\\n\\n\\t\\tuint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\t_safeTransferETH(treasury, fee);\\n\\n\\t\\tamount = amount.sub(fee);\\n\\n\\t\\tweth.deposit{value: amount}();\\n\\t\\tlendingPool.deposit(address(weth), amount, msg.sender, referralCode);\\n\\n\\t\\tfor (uint256 i = 0; i < loopCount; i += 1) {\\n\\t\\t\\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n\\t\\t\\tlendingPool.borrow(address(weth), amount, interestRateMode, referralCode, msg.sender);\\n\\t\\t\\tweth.withdraw(amount);\\n\\n\\t\\t\\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\t\\t_safeTransferETH(treasury, fee);\\n\\n\\t\\t\\tweth.deposit{value: amount.sub(fee)}();\\n\\t\\t\\tlendingPool.deposit(address(weth), amount.sub(fee), msg.sender, referralCode);\\n\\t\\t}\\n\\n\\t\\tzapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return estimated zap WETH amount for eligbility after loop.\\n\\t * @param user for zap\\n\\t * @param asset src token\\n\\t * @param amount of `asset`\\n\\t * @param borrowRatio Single ratio of borrow\\n\\t * @param loopCount Repeat count for loop\\n\\t **/\\n\\tfunction wethToZapEstimation(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRatio,\\n\\t\\tuint256 loopCount\\n\\t) external view returns (uint256) {\\n\\t\\tif (asset == API_ETH_MOCK_ADDRESS) {\\n\\t\\t\\tasset = address(weth);\\n\\t\\t}\\n\\t\\tuint256 required = eligibilityDataProvider.requiredUsdValue(user);\\n\\t\\tuint256 locked = eligibilityDataProvider.lockedUsdValue(user);\\n\\n\\t\\tuint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\tamount = amount.sub(fee);\\n\\n\\t\\trequired = required.add(requiredLocked(asset, amount));\\n\\n\\t\\tfor (uint256 i = 0; i < loopCount; i += 1) {\\n\\t\\t\\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\\n\\t\\t\\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\\n\\t\\t\\trequired = required.add(requiredLocked(asset, amount.sub(fee)));\\n\\t\\t}\\n\\n\\t\\tif (locked >= required) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else {\\n\\t\\t\\tuint256 deltaUsdValue = required.sub(locked); //decimals === 8\\n\\t\\t\\tuint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\\n\\t\\t\\tuint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\\n\\t\\t\\tuint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\\n\\t\\t\\twethAmount = wethAmount.add(wethAmount.mul(6).div(100));\\n\\t\\t\\treturn wethAmount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return estimated zap WETH amount for eligbility.\\n\\t * @param user for zap\\n\\t **/\\n\\tfunction wethToZap(address user) public view returns (uint256) {\\n\\t\\tuint256 required = eligibilityDataProvider.requiredUsdValue(user);\\n\\t\\tuint256 locked = eligibilityDataProvider.lockedUsdValue(user);\\n\\t\\tif (locked >= required) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else {\\n\\t\\t\\tuint256 deltaUsdValue = required.sub(locked); //decimals === 8\\n\\t\\t\\tuint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\\n\\t\\t\\tuint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\\n\\t\\t\\tuint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\\n\\t\\t\\twethAmount = wethAmount.add(wethAmount.mul(6).div(100));\\n\\t\\t\\treturn wethAmount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap WETH by borrowing.\\n\\t * @param amount to zap\\n\\t * @param borrower to zap\\n\\t * @return liquidity amount by zapping\\n\\t **/\\n\\tfunction zapWETHWithBorrow(uint256 amount, address borrower) public returns (uint256 liquidity) {\\n\\t\\trequire(msg.sender == borrower || msg.sender == address(lendingPool), \\\"!borrower||lendingpool\\\");\\n\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tuint16 referralCode = 0;\\n\\t\\t\\tlendingPool.borrow(address(weth), amount, 2, referralCode, borrower);\\n\\t\\t\\tif (IERC20(address(weth)).allowance(address(this), address(lockZap)) == 0) {\\n\\t\\t\\t\\tIERC20(address(weth)).safeApprove(address(lockZap), type(uint256).max);\\n\\t\\t\\t}\\n\\t\\t\\tliquidity = lockZap.zapOnBehalf(false, amount, 0, borrower);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns required LP lock amount.\\n\\t * @param asset underlyig asset\\n\\t * @param amount of tokens\\n\\t **/\\n\\tfunction requiredLocked(address asset, uint256 amount) internal view returns (uint256) {\\n\\t\\tuint256 assetPrice = aaveOracle.getAssetPrice(asset);\\n\\t\\tuint8 assetDecimal = IERC20Metadata(asset).decimals();\\n\\t\\tuint256 requiredVal = assetPrice\\n\\t\\t\\t.mul(amount)\\n\\t\\t\\t.div(10 ** assetDecimal)\\n\\t\\t\\t.mul(eligibilityDataProvider.requiredDepositRatio())\\n\\t\\t\\t.div(eligibilityDataProvider.RATIO_DIVISOR());\\n\\t\\treturn requiredVal;\\n\\t}\\n\\n\\t/**\\n\\t * @dev transfer ETH to an address, revert if it fails.\\n\\t * @param to recipient of the transfer\\n\\t * @param value the amount to send\\n\\t */\\n\\tfunction _safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x4d87cd145ce438f578d89d05ea6bc76aab40b95a8b581ef689681fad52366e96\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d2538038062002d2583398101604081905262000034916200036a565b6200003f3362000301565b6001600160a01b0388166200008a5760405162461bcd60e51b8152602060048201526013602482015260008051602062002d0583398151915260448201526064015b60405180910390fd5b6001600160a01b038716620000d15760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b6001600160a01b038616620001185760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b6001600160a01b0385166200015f5760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b6001600160a01b038416620001a65760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b6001600160a01b038316620001ed5760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b6001600160a01b038116620002345760405162461bcd60e51b8152602060048201526013602482015260008051602062002d05833981519152604482015260640162000081565b612710821115620002785760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b604482015260640162000081565b600180546001600160a01b03199081166001600160a01b039a8b1617909155600280548216988a16989098179097556003805488169589169590951790945560068054871695881695909517909455600480548616928716929092179091556005805485169186169190911790556007919091556008805490921692169190911790556200041f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200036757600080fd5b50565b600080600080600080600080610100898b0312156200038857600080fd5b8851620003958162000351565b60208a0151909850620003a88162000351565b60408a0151909750620003bb8162000351565b60608a0151909650620003ce8162000351565b60808a0151909550620003e18162000351565b60a08a0151909450620003f48162000351565b60c08a015160e08b015191945092506200040e8162000351565b809150509295985092959890939650565b6128d6806200042f6000396000f3fe6080604052600436106101845760003560e01c80637473eea6116100d6578063a8d5a4521161007f578063ec67ff7311610059578063ec67ff73146104c6578063f0f44260146104e6578063f2fde38b14610506576101ea565b8063a8d5a45214610464578063c44b11f714610477578063cd498dc4146104a6576101ea565b80637fd6f15c116100b05780637fd6f15c146104105780638da5cb5b14610426578063a59a997314610444576101ea565b80637473eea6146103b057806376e82e8b146103d05780637ce3489b146103f0576101ea565b8063602acb7e11610138578063667f374511610112578063667f3745146103655780636a7e9f3314610385578063715018a61461039b576101ea565b8063602acb7e146102fd57806361d027b3146103255780636372b28114610345576101ea565b806313036ed21161016957806313036ed21461029d578063171b3e43146102bd5780633fc8cef3146102dd576101ea565b806303bf24e51461023257806306346c3014610265576101ea565b366101ea576005546001600160a01b031633146101e85760405162461bcd60e51b815260206004820152601360248201527f52656365697665206e6f7420616c6c6f7765640000000000000000000000000060448201526064015b60405180910390fd5b005b60405162461bcd60e51b815260206004820152601460248201527f46616c6c6261636b206e6f7420616c6c6f77656400000000000000000000000060448201526064016101df565b34801561023e57600080fd5b5061025261024d3660046122ec565b610526565b6040519081526020015b60405180910390f35b34801561027157600080fd5b50600354610285906001600160a01b031681565b6040516001600160a01b03909116815260200161025c565b3480156102a957600080fd5b50600454610285906001600160a01b031681565b3480156102c957600080fd5b506101e86102d8366004612317565b6107da565b3480156102e957600080fd5b50600554610285906001600160a01b031681565b34801561030957600080fd5b5061028573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561033157600080fd5b50600854610285906001600160a01b031681565b34801561035157600080fd5b50600654610285906001600160a01b031681565b34801561037157600080fd5b506102856103803660046122ec565b610ca5565b34801561039157600080fd5b5061025261271081565b3480156103a757600080fd5b506101e8610d3d565b3480156103bc57600080fd5b506102526103cb3660046122ec565b610d51565b3480156103dc57600080fd5b50600254610285906001600160a01b031681565b3480156103fc57600080fd5b506101e861040b366004612375565b610ddd565b34801561041c57600080fd5b5061025260075481565b34801561043257600080fd5b506000546001600160a01b0316610285565b34801561045057600080fd5b50600154610285906001600160a01b031681565b6101e861047236600461238e565b610e62565b34801561048357600080fd5b506104976104923660046122ec565b611378565b6040519051815260200161025c565b3480156104b257600080fd5b506102526104c13660046123ba565b6113fb565b3480156104d257600080fd5b506102526104e136600461240b565b611778565b3480156104f257600080fd5b506101e86105013660046122ec565b6119af565b34801561051257600080fd5b506101e86105213660046122ec565b611a64565b6002546040516371c7ee1b60e11b81526001600160a01b038381166004830152600092839291169063e38fdc3690602401602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610598919061243b565b600254604051636d9077cb60e01b81526001600160a01b03868116600483015292935060009290911690636d9077cb90602401602060405180830381865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c919061243b565b905081811061061f575060009392505050565b600061062b8383611af4565b60065460055460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a1919061243b565b600654600554604051630495f95f60e51b81526001600160a01b0391821660048201529293506000929116906392bf2be090602401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190612464565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190612492565b905060006107b26305f5e1006107ac858161079487600a6125a7565b6107a68a670de0b6b3a7640000611b00565b90611b00565b90611b0c565b90506107ce6107c760646107ac846006611b00565b8290611b18565b98975050505050505050565b61271083111561081c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b6000808261087e576108396001600160a01b03891633308a611b24565b6108546127106107ac6007548a611b0090919063ffffffff16565b600854909150610871906001600160a01b038a8116911683611bdb565b61087b8782611af4565b96505b600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529089169063dd62ed3e90604401602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f2919061243b565b61091257600154610912906001600160a01b038a81169116600019611c29565b600854604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529089169063dd62ed3e90604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061243b565b6109a6576008546109a6906001600160a01b038a81169116600019611c29565b60048054604051635d8e5d4960e01b81523392810192909252600160248301526001600160a01b031690635d8e5d4990604401600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b5050505082610a875760015460405163e8eda9df60e01b81526001600160a01b038a81166004830152602482018a905233604483015261ffff851660648301529091169063e8eda9df90608401600060405180830381600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b505050505b60005b84811015610c8757610a9d6001866125b6565b811415610b0a5760048054604051635d8e5d4960e01b81523392810192909252600060248301526001600160a01b031690635d8e5d4990604401600060405180830381600087803b158015610af157600080fd5b505af1158015610b05573d6000803e3d6000fd5b505050505b610b1a6127106107ac8a89611b00565b60015460405163a415bcad60e01b81526001600160a01b038c8116600483015260248201849052604482018b905261ffff87166064830152336084830152929a5091169063a415bcad9060a401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b50505050610bb46127106107ac6007548b611b0090919063ffffffff16565b600854909250610bd1906001600160a01b038b8116911684611bdb565b6001546001600160a01b031663e8eda9df8a610bed8b86611af4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015233604482015261ffff86166064820152608401600060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b50505050600181610c8091906125cd565b9050610a8a565b50610c9a610c9433610526565b33611778565b505050505050505050565b6001546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906335ea6a759060240161018060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906126a2565b61012001519392505050565b610d45611d5e565b610d4f6000611db8565b565b60015460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc3919061278f565b8051909150610dd69062010000906127c1565b9392505050565b610de5611d5e565b612710811115610e275760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b60078190556040518181527f64d1887078a96d281ed60dd69ba75bfb6b5cd2cb4c2d2538b2eb7816a4c646ea9060200160405180910390a150565b612710821115610ea45760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b600554600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000923492169063dd62ed3e90604401602060405180830381865afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e919061243b565b610f4157600154600554610f41916001600160a01b039182169116600019611c29565b600554600854604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb7919061243b565b610fda57600854600554610fda916001600160a01b039182169116600019611c29565b6000610ff76127106107ac60075485611b0090919063ffffffff16565b600854909150611010906001600160a01b031682611e15565b61101a8282611af4565b9150600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505060015460055460405163e8eda9df60e01b81526001600160a01b0391821660048201526024810188905233604482015261ffff891660648201529116935063e8eda9df92506084019050600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b5050505060005b84811015611362576111196127106107ac8589611b00565b60015460055460405163a415bcad60e01b81526001600160a01b03918216600482015260248101849052604481018b905261ffff88166064820152336084820152929550169063a415bcad9060a401600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b50506005546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b5050505061122c6127106107ac60075486611b0090919063ffffffff16565b600854909250611245906001600160a01b031683611e15565b6005546001600160a01b031663d0e30db06112608585611af4565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b50506001546005546001600160a01b03918216945063e8eda9df93501690506112c88686611af4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015233604482015261ffff87166064820152608401600060405180830381600087803b15801561133657600080fd5b505af115801561134a573d6000803e3d6000fd5b5050505060018161135b91906125cd565b9050611101565b5061136f610c9433610526565b50505050505050565b60408051602081019091526000815260015460405163c44b11f760e01b81526001600160a01b0384811660048301529091169063c44b11f790602401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f5919061278f565b92915050565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611431576005546001600160a01b031694505b6002546040516371c7ee1b60e11b81526001600160a01b038881166004830152600092169063e38fdc3690602401602060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a0919061243b565b600254604051636d9077cb60e01b81526001600160a01b038a8116600483015292935060009290911690636d9077cb90602401602060405180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611514919061243b565b905060006115336127106107ac6007548a611b0090919063ffffffff16565b905061153f8782611af4565b965061155561154e8989611ed2565b8490611b18565b925060005b858110156115c2576115726127106107ac8a8a611b00565b975061158f6127106107ac6007548b611b0090919063ffffffff16565b91506115ae6115a78a6115a28b86611af4565b611ed2565b8590611b18565b93506115bb6001826125cd565b905061155a565b508282106115d6576000935050505061176f565b60006115e28484611af4565b60065460055460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611658919061243b565b600654600554604051630495f95f60e51b81526001600160a01b0391821660048201529293506000929116906392bf2be090602401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190612464565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612492565b9050600061174b6305f5e1006107ac858161079487600a6125a7565b90506117606107c760646107ac846006611b00565b975061176f9650505050505050565b95945050505050565b6000336001600160a01b038316148061179b57506001546001600160a01b031633145b6117e75760405162461bcd60e51b815260206004820152601660248201527f21626f72726f7765727c7c6c656e64696e67706f6f6c0000000000000000000060448201526064016101df565b82156113f55760015460055460405163a415bcad60e01b81526001600160a01b0391821660048201526024810186905260026044820152600060648201819052858316608483015292919091169063a415bcad9060a401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b5050600554600354604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529116925063dd62ed3e9150604401602060405180830381865afa1580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e6919061243b565b61190957600354600554611909916001600160a01b039182169116600019611c29565b6003546040517fd47808850000000000000000000000000000000000000000000000000000000081526000600482018190526024820187905260448201526001600160a01b0385811660648301529091169063d4780885906084016020604051808303816000875af1158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a7919061243b565b949350505050565b6119b7611d5e565b6001600160a01b038116611a0d5760405162461bcd60e51b815260206004820152601560248201527f747265617375727920697320302061646472657373000000000000000000000060448201526064016101df565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b611a6c611d5e565b6001600160a01b038116611ae85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101df565b611af181611db8565b50565b6000610dd682846125b6565b6000610dd682846127d5565b6000610dd682846127f4565b6000610dd682846125cd565b6040516001600160a01b0380851660248301528316604482015260648101829052611bd59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526120d2565b50505050565b6040516001600160a01b038316602482015260448101829052611c249084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b71565b505050565b801580611ca35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca1919061243b565b155b611d155760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101df565b6040516001600160a01b038316602482015260448101829052611c249084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611b71565b6000546001600160a01b03163314610d4f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101df565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516000808252602082019092526001600160a01b038416908390604051611e3f9190612834565b60006040518083038185875af1925050503d8060008114611e7c576040519150601f19603f3d011682016040523d82523d6000602084013e611e81565b606091505b5050905080611c245760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016101df565b60065460405163b3596f0760e01b81526001600160a01b038481166004830152600092839291169063b3596f0790602401602060405180830381865afa158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f44919061243b565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faa9190612492565b905060006120c8600260009054906101000a90046001600160a01b03166001600160a01b0316636a7e9f336040518163ffffffff1660e01b8152600401602060405180830381865afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612028919061243b565b600254604080517fd52874da00000000000000000000000000000000000000000000000000000000815290516107ac926001600160a01b03169163d52874da9160048083019260209291908290030181865afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b0919061243b565b6107a66120be87600a6125a7565b6107ac898c611b00565b9695505050505050565b6000612127826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121b79092919063ffffffff16565b805190915015611c2457808060200190518101906121459190612850565b611c245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101df565b60606119a7848460008585600080866001600160a01b031685876040516121de9190612834565b60006040518083038185875af1925050503d806000811461221b576040519150601f19603f3d011682016040523d82523d6000602084013e612220565b606091505b50915091506122318783838761223c565b979650505050505050565b606083156122a85782516122a1576001600160a01b0385163b6122a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101df565b50816119a7565b6119a783838151156122bd5781518083602001fd5b8060405162461bcd60e51b81526004016101df919061286d565b6001600160a01b0381168114611af157600080fd5b6000602082840312156122fe57600080fd5b8135610dd6816122d7565b8015158114611af157600080fd5b60008060008060008060c0878903121561233057600080fd5b863561233b816122d7565b95506020870135945060408701359350606087013592506080870135915060a087013561236781612309565b809150509295509295509295565b60006020828403121561238757600080fd5b5035919050565b6000806000606084860312156123a357600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156123d257600080fd5b85356123dd816122d7565b945060208601356123ed816122d7565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561241e57600080fd5b823591506020830135612430816122d7565b809150509250929050565b60006020828403121561244d57600080fd5b5051919050565b805161245f816122d7565b919050565b60006020828403121561247657600080fd5b8151610dd6816122d7565b805160ff8116811461245f57600080fd5b6000602082840312156124a457600080fd5b610dd682612481565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156124fe5781600019048211156124e4576124e46124ad565b808516156124f157918102915b93841c93908002906124c8565b509250929050565b600082612515575060016113f5565b81612522575060006113f5565b816001811461253857600281146125425761255e565b60019150506113f5565b60ff841115612553576125536124ad565b50506001821b6113f5565b5060208310610133831016604e8410600b8410161715612581575081810a6113f5565b61258b83836124c3565b806000190482111561259f5761259f6124ad565b029392505050565b6000610dd660ff841683612506565b6000828210156125c8576125c86124ad565b500390565b600082198211156125e0576125e06124ad565b500190565b604051610180810167ffffffffffffffff8111828210171561261757634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561262f57600080fd5b6040516020810181811067ffffffffffffffff8211171561266057634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461245f57600080fd5b805164ffffffffff8116811461245f57600080fd5b600061018082840312156126b557600080fd5b6126bd6125e5565b6126c7848461261d565b81526126d56020840161266d565b60208201526126e66040840161266d565b60408201526126f76060840161266d565b60608201526127086080840161266d565b608082015261271960a0840161266d565b60a082015261272a60c0840161268d565b60c082015261273b60e08401612454565b60e082015261010061274e818501612454565b90820152610120612760848201612454565b90820152610140612772848201612454565b90820152610160612784848201612481565b908201529392505050565b6000602082840312156127a157600080fd5b610dd6838361261d565b634e487b7160e01b600052601260045260246000fd5b6000826127d0576127d06127ab565b500690565b60008160001904831182151516156127ef576127ef6124ad565b500290565b600082612803576128036127ab565b500490565b60005b8381101561282357818101518382015260200161280b565b83811115611bd55750506000910152565b60008251612846818460208701612808565b9190910192915050565b60006020828403121561286257600080fd5b8151610dd681612309565b602081526000825180602084015261288c816040850160208701612808565b601f01601f1916919091016040019291505056fea2646970667358221220fd057a08990995f41e48c5271d42da11247405fe78fbb4af98c06d1a761a0ee064736f6c634300080c00334e6f7420612076616c6964206164647265737300000000000000000000000000",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c80637473eea6116100d6578063a8d5a4521161007f578063ec67ff7311610059578063ec67ff73146104c6578063f0f44260146104e6578063f2fde38b14610506576101ea565b8063a8d5a45214610464578063c44b11f714610477578063cd498dc4146104a6576101ea565b80637fd6f15c116100b05780637fd6f15c146104105780638da5cb5b14610426578063a59a997314610444576101ea565b80637473eea6146103b057806376e82e8b146103d05780637ce3489b146103f0576101ea565b8063602acb7e11610138578063667f374511610112578063667f3745146103655780636a7e9f3314610385578063715018a61461039b576101ea565b8063602acb7e146102fd57806361d027b3146103255780636372b28114610345576101ea565b806313036ed21161016957806313036ed21461029d578063171b3e43146102bd5780633fc8cef3146102dd576101ea565b806303bf24e51461023257806306346c3014610265576101ea565b366101ea576005546001600160a01b031633146101e85760405162461bcd60e51b815260206004820152601360248201527f52656365697665206e6f7420616c6c6f7765640000000000000000000000000060448201526064015b60405180910390fd5b005b60405162461bcd60e51b815260206004820152601460248201527f46616c6c6261636b206e6f7420616c6c6f77656400000000000000000000000060448201526064016101df565b34801561023e57600080fd5b5061025261024d3660046122ec565b610526565b6040519081526020015b60405180910390f35b34801561027157600080fd5b50600354610285906001600160a01b031681565b6040516001600160a01b03909116815260200161025c565b3480156102a957600080fd5b50600454610285906001600160a01b031681565b3480156102c957600080fd5b506101e86102d8366004612317565b6107da565b3480156102e957600080fd5b50600554610285906001600160a01b031681565b34801561030957600080fd5b5061028573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561033157600080fd5b50600854610285906001600160a01b031681565b34801561035157600080fd5b50600654610285906001600160a01b031681565b34801561037157600080fd5b506102856103803660046122ec565b610ca5565b34801561039157600080fd5b5061025261271081565b3480156103a757600080fd5b506101e8610d3d565b3480156103bc57600080fd5b506102526103cb3660046122ec565b610d51565b3480156103dc57600080fd5b50600254610285906001600160a01b031681565b3480156103fc57600080fd5b506101e861040b366004612375565b610ddd565b34801561041c57600080fd5b5061025260075481565b34801561043257600080fd5b506000546001600160a01b0316610285565b34801561045057600080fd5b50600154610285906001600160a01b031681565b6101e861047236600461238e565b610e62565b34801561048357600080fd5b506104976104923660046122ec565b611378565b6040519051815260200161025c565b3480156104b257600080fd5b506102526104c13660046123ba565b6113fb565b3480156104d257600080fd5b506102526104e136600461240b565b611778565b3480156104f257600080fd5b506101e86105013660046122ec565b6119af565b34801561051257600080fd5b506101e86105213660046122ec565b611a64565b6002546040516371c7ee1b60e11b81526001600160a01b038381166004830152600092839291169063e38fdc3690602401602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610598919061243b565b600254604051636d9077cb60e01b81526001600160a01b03868116600483015292935060009290911690636d9077cb90602401602060405180830381865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c919061243b565b905081811061061f575060009392505050565b600061062b8383611af4565b60065460055460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a1919061243b565b600654600554604051630495f95f60e51b81526001600160a01b0391821660048201529293506000929116906392bf2be090602401602060405180830381865afa1580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190612464565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190612492565b905060006107b26305f5e1006107ac858161079487600a6125a7565b6107a68a670de0b6b3a7640000611b00565b90611b00565b90611b0c565b90506107ce6107c760646107ac846006611b00565b8290611b18565b98975050505050505050565b61271083111561081c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b6000808261087e576108396001600160a01b03891633308a611b24565b6108546127106107ac6007548a611b0090919063ffffffff16565b600854909150610871906001600160a01b038a8116911683611bdb565b61087b8782611af4565b96505b600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529089169063dd62ed3e90604401602060405180830381865afa1580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f2919061243b565b61091257600154610912906001600160a01b038a81169116600019611c29565b600854604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529089169063dd62ed3e90604401602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610986919061243b565b6109a6576008546109a6906001600160a01b038a81169116600019611c29565b60048054604051635d8e5d4960e01b81523392810192909252600160248301526001600160a01b031690635d8e5d4990604401600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b5050505082610a875760015460405163e8eda9df60e01b81526001600160a01b038a81166004830152602482018a905233604483015261ffff851660648301529091169063e8eda9df90608401600060405180830381600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b505050505b60005b84811015610c8757610a9d6001866125b6565b811415610b0a5760048054604051635d8e5d4960e01b81523392810192909252600060248301526001600160a01b031690635d8e5d4990604401600060405180830381600087803b158015610af157600080fd5b505af1158015610b05573d6000803e3d6000fd5b505050505b610b1a6127106107ac8a89611b00565b60015460405163a415bcad60e01b81526001600160a01b038c8116600483015260248201849052604482018b905261ffff87166064830152336084830152929a5091169063a415bcad9060a401600060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b50505050610bb46127106107ac6007548b611b0090919063ffffffff16565b600854909250610bd1906001600160a01b038b8116911684611bdb565b6001546001600160a01b031663e8eda9df8a610bed8b86611af4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015233604482015261ffff86166064820152608401600060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b50505050600181610c8091906125cd565b9050610a8a565b50610c9a610c9433610526565b33611778565b505050505050505050565b6001546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906335ea6a759060240161018060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906126a2565b61012001519392505050565b610d45611d5e565b610d4f6000611db8565b565b60015460405163c44b11f760e01b81526001600160a01b038381166004830152600092839291169063c44b11f790602401602060405180830381865afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc3919061278f565b8051909150610dd69062010000906127c1565b9392505050565b610de5611d5e565b612710811115610e275760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b60078190556040518181527f64d1887078a96d281ed60dd69ba75bfb6b5cd2cb4c2d2538b2eb7816a4c646ea9060200160405180910390a150565b612710821115610ea45760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b60448201526064016101df565b600554600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000923492169063dd62ed3e90604401602060405180830381865afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e919061243b565b610f4157600154600554610f41916001600160a01b039182169116600019611c29565b600554600854604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb7919061243b565b610fda57600854600554610fda916001600160a01b039182169116600019611c29565b6000610ff76127106107ac60075485611b0090919063ffffffff16565b600854909150611010906001600160a01b031682611e15565b61101a8282611af4565b9150600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505060015460055460405163e8eda9df60e01b81526001600160a01b0391821660048201526024810188905233604482015261ffff891660648201529116935063e8eda9df92506084019050600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b5050505060005b84811015611362576111196127106107ac8589611b00565b60015460055460405163a415bcad60e01b81526001600160a01b03918216600482015260248101849052604481018b905261ffff88166064820152336084820152929550169063a415bcad9060a401600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b50506005546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b5050505061122c6127106107ac60075486611b0090919063ffffffff16565b600854909250611245906001600160a01b031683611e15565b6005546001600160a01b031663d0e30db06112608585611af4565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561128b57600080fd5b505af115801561129f573d6000803e3d6000fd5b50506001546005546001600160a01b03918216945063e8eda9df93501690506112c88686611af4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015233604482015261ffff87166064820152608401600060405180830381600087803b15801561133657600080fd5b505af115801561134a573d6000803e3d6000fd5b5050505060018161135b91906125cd565b9050611101565b5061136f610c9433610526565b50505050505050565b60408051602081019091526000815260015460405163c44b11f760e01b81526001600160a01b0384811660048301529091169063c44b11f790602401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f5919061278f565b92915050565b60006001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611431576005546001600160a01b031694505b6002546040516371c7ee1b60e11b81526001600160a01b038881166004830152600092169063e38fdc3690602401602060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a0919061243b565b600254604051636d9077cb60e01b81526001600160a01b038a8116600483015292935060009290911690636d9077cb90602401602060405180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611514919061243b565b905060006115336127106107ac6007548a611b0090919063ffffffff16565b905061153f8782611af4565b965061155561154e8989611ed2565b8490611b18565b925060005b858110156115c2576115726127106107ac8a8a611b00565b975061158f6127106107ac6007548b611b0090919063ffffffff16565b91506115ae6115a78a6115a28b86611af4565b611ed2565b8590611b18565b93506115bb6001826125cd565b905061155a565b508282106115d6576000935050505061176f565b60006115e28484611af4565b60065460055460405163b3596f0760e01b81526001600160a01b03918216600482015292935060009291169063b3596f0790602401602060405180830381865afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611658919061243b565b600654600554604051630495f95f60e51b81526001600160a01b0391821660048201529293506000929116906392bf2be090602401602060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190612464565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f9190612492565b9050600061174b6305f5e1006107ac858161079487600a6125a7565b90506117606107c760646107ac846006611b00565b975061176f9650505050505050565b95945050505050565b6000336001600160a01b038316148061179b57506001546001600160a01b031633145b6117e75760405162461bcd60e51b815260206004820152601660248201527f21626f72726f7765727c7c6c656e64696e67706f6f6c0000000000000000000060448201526064016101df565b82156113f55760015460055460405163a415bcad60e01b81526001600160a01b0391821660048201526024810186905260026044820152600060648201819052858316608483015292919091169063a415bcad9060a401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b5050600554600354604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529116925063dd62ed3e9150604401602060405180830381865afa1580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e6919061243b565b61190957600354600554611909916001600160a01b039182169116600019611c29565b6003546040517fd47808850000000000000000000000000000000000000000000000000000000081526000600482018190526024820187905260448201526001600160a01b0385811660648301529091169063d4780885906084016020604051808303816000875af1158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a7919061243b565b949350505050565b6119b7611d5e565b6001600160a01b038116611a0d5760405162461bcd60e51b815260206004820152601560248201527f747265617375727920697320302061646472657373000000000000000000000060448201526064016101df565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190600090a250565b611a6c611d5e565b6001600160a01b038116611ae85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101df565b611af181611db8565b50565b6000610dd682846125b6565b6000610dd682846127d5565b6000610dd682846127f4565b6000610dd682846125cd565b6040516001600160a01b0380851660248301528316604482015260648101829052611bd59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526120d2565b50505050565b6040516001600160a01b038316602482015260448101829052611c249084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b71565b505050565b801580611ca35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca1919061243b565b155b611d155760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101df565b6040516001600160a01b038316602482015260448101829052611c249084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611b71565b6000546001600160a01b03163314610d4f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101df565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516000808252602082019092526001600160a01b038416908390604051611e3f9190612834565b60006040518083038185875af1925050503d8060008114611e7c576040519150601f19603f3d011682016040523d82523d6000602084013e611e81565b606091505b5050905080611c245760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016101df565b60065460405163b3596f0760e01b81526001600160a01b038481166004830152600092839291169063b3596f0790602401602060405180830381865afa158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f44919061243b565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faa9190612492565b905060006120c8600260009054906101000a90046001600160a01b03166001600160a01b0316636a7e9f336040518163ffffffff1660e01b8152600401602060405180830381865afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612028919061243b565b600254604080517fd52874da00000000000000000000000000000000000000000000000000000000815290516107ac926001600160a01b03169163d52874da9160048083019260209291908290030181865afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b0919061243b565b6107a66120be87600a6125a7565b6107ac898c611b00565b9695505050505050565b6000612127826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121b79092919063ffffffff16565b805190915015611c2457808060200190518101906121459190612850565b611c245760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101df565b60606119a7848460008585600080866001600160a01b031685876040516121de9190612834565b60006040518083038185875af1925050503d806000811461221b576040519150601f19603f3d011682016040523d82523d6000602084013e612220565b606091505b50915091506122318783838761223c565b979650505050505050565b606083156122a85782516122a1576001600160a01b0385163b6122a15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101df565b50816119a7565b6119a783838151156122bd5781518083602001fd5b8060405162461bcd60e51b81526004016101df919061286d565b6001600160a01b0381168114611af157600080fd5b6000602082840312156122fe57600080fd5b8135610dd6816122d7565b8015158114611af157600080fd5b60008060008060008060c0878903121561233057600080fd5b863561233b816122d7565b95506020870135945060408701359350606087013592506080870135915060a087013561236781612309565b809150509295509295509295565b60006020828403121561238757600080fd5b5035919050565b6000806000606084860312156123a357600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156123d257600080fd5b85356123dd816122d7565b945060208601356123ed816122d7565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561241e57600080fd5b823591506020830135612430816122d7565b809150509250929050565b60006020828403121561244d57600080fd5b5051919050565b805161245f816122d7565b919050565b60006020828403121561247657600080fd5b8151610dd6816122d7565b805160ff8116811461245f57600080fd5b6000602082840312156124a457600080fd5b610dd682612481565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156124fe5781600019048211156124e4576124e46124ad565b808516156124f157918102915b93841c93908002906124c8565b509250929050565b600082612515575060016113f5565b81612522575060006113f5565b816001811461253857600281146125425761255e565b60019150506113f5565b60ff841115612553576125536124ad565b50506001821b6113f5565b5060208310610133831016604e8410600b8410161715612581575081810a6113f5565b61258b83836124c3565b806000190482111561259f5761259f6124ad565b029392505050565b6000610dd660ff841683612506565b6000828210156125c8576125c86124ad565b500390565b600082198211156125e0576125e06124ad565b500190565b604051610180810167ffffffffffffffff8111828210171561261757634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561262f57600080fd5b6040516020810181811067ffffffffffffffff8211171561266057634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461245f57600080fd5b805164ffffffffff8116811461245f57600080fd5b600061018082840312156126b557600080fd5b6126bd6125e5565b6126c7848461261d565b81526126d56020840161266d565b60208201526126e66040840161266d565b60408201526126f76060840161266d565b60608201526127086080840161266d565b608082015261271960a0840161266d565b60a082015261272a60c0840161268d565b60c082015261273b60e08401612454565b60e082015261010061274e818501612454565b90820152610120612760848201612454565b90820152610140612772848201612454565b90820152610160612784848201612481565b908201529392505050565b6000602082840312156127a157600080fd5b610dd6838361261d565b634e487b7160e01b600052601260045260246000fd5b6000826127d0576127d06127ab565b500690565b60008160001904831182151516156127ef576127ef6124ad565b500290565b600082612803576128036127ab565b500490565b60005b8381101561282357818101518382015260200161280b565b83811115611bd55750506000910152565b60008251612846818460208701612808565b9190910192915050565b60006020828403121561286257600080fd5b8151610dd681612309565b602081526000825180602084015261288c816040850160208701612808565b601f01601f1916919091016040019291505056fea2646970667358221220fd057a08990995f41e48c5271d42da11247405fe78fbb4af98c06d1a761a0ee064736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_aaveOracle": "address.",
          "_feePercent": "leveraging fee ratio.",
          "_lendingPool": "Address of lending pool.",
          "_lockZap": "address.",
          "_rewardEligibleDataProvider": "EligibilityProvider address.",
          "_treasury": "address.",
          "_weth": "WETH address."
        }
      },
      "getConfiguration(address)": {
        "details": "Returns the configuration of the reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The configuration of the reserve*"
        }
      },
      "getVDebtToken(address)": {
        "details": "Returns variable debt token address of asset",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "varaiableDebtToken address of the asset*"
        }
      },
      "loop(address,uint256,uint256,uint256,uint256,bool)": {
        "details": "Loop the deposit and borrow of an asset",
        "params": {
          "amount": "for the initial deposit",
          "asset": "for loop",
          "borrowRatio": "Ratio of tokens to borrow",
          "interestRateMode": "stable or variable borrow mode",
          "isBorrow": "true when the loop without deposit tokens*",
          "loopCount": "Repeat count for loop"
        }
      },
      "loopETH(uint256,uint256,uint256)": {
        "details": "Loop the deposit and borrow of ETH",
        "params": {
          "borrowRatio": "Ratio of tokens to borrow",
          "interestRateMode": "stable or variable borrow mode",
          "loopCount": "Repeat count for loop*"
        }
      },
      "ltv(address)": {
        "details": "Returns loan to value",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "ltv of the asset*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeePercent(uint256)": {
        "params": {
          "_feePercent": "fee ratio."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wethToZap(address)": {
        "params": {
          "user": "for zap*"
        }
      },
      "wethToZapEstimation(address,address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of `asset`",
          "asset": "src token",
          "borrowRatio": "Single ratio of borrow",
          "loopCount": "Repeat count for loop*",
          "user": "for zap"
        }
      },
      "zapWETHWithBorrow(uint256,address)": {
        "params": {
          "amount": "to zap",
          "borrower": "to zap"
        },
        "returns": {
          "liquidity": "amount by zapping*"
        }
      }
    },
    "title": "Leverager Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeePercentUpdated(uint256)": {
        "notice": "Emitted when fee ratio is updated"
      },
      "TreasuryUpdated(address)": {
        "notice": "Emitted when treasury is updated"
      }
    },
    "kind": "user",
    "methods": {
      "API_ETH_MOCK_ADDRESS()": {
        "notice": "Mock ETH address"
      },
      "RATIO_DIVISOR()": {
        "notice": "Ratio Divisor"
      },
      "aaveOracle()": {
        "notice": "Aave oracle address"
      },
      "cic()": {
        "notice": "ChefIncentivesController contract address"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "eligibilityDataProvider()": {
        "notice": "EligibilityDataProvider contract address"
      },
      "feePercent()": {
        "notice": "Fee ratio"
      },
      "lendingPool()": {
        "notice": "Lending Pool address"
      },
      "lockZap()": {
        "notice": "LockZap contract address"
      },
      "setFeePercent(uint256)": {
        "notice": "Sets fee ratio"
      },
      "setTreasury(address)": {
        "notice": "Sets fee ratio"
      },
      "treasury()": {
        "notice": "Treasury address"
      },
      "weth()": {
        "notice": "Wrapped ETH contract address"
      },
      "wethToZap(address)": {
        "notice": "Return estimated zap WETH amount for eligbility."
      },
      "wethToZapEstimation(address,address,uint256,uint256,uint256)": {
        "notice": "Return estimated zap WETH amount for eligbility after loop."
      },
      "zapWETHWithBorrow(uint256,address)": {
        "notice": "Zap WETH by borrowing."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2241,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "lendingPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILendingPool)1918"
      },
      {
        "astId": 2245,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "eligibilityDataProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IEligibilityDataProvider)1528"
      },
      {
        "astId": 2249,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "lockZap",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILockZap)2109"
      },
      {
        "astId": 2253,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "cic",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IChefIncentivesController)1431"
      },
      {
        "astId": 2257,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IWETH)2165"
      },
      {
        "astId": 2261,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "aaveOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IAaveOracle)1318"
      },
      {
        "astId": 2264,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "feePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2267,
        "contract": "contracts/radiant/accessories/Leverager.sol:Leverager",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAaveOracle)1318": {
        "encoding": "inplace",
        "label": "contract IAaveOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IChefIncentivesController)1431": {
        "encoding": "inplace",
        "label": "contract IChefIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IEligibilityDataProvider)1528": {
        "encoding": "inplace",
        "label": "contract IEligibilityDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)1918": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ILockZap)2109": {
        "encoding": "inplace",
        "label": "contract ILockZap",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)2165": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}