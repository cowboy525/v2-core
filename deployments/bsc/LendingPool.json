{
  "address": "0x5DeeD2361e725Ec962C570221916E35a6C0115dF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRateMode",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "receiveAToken",
          "type": "bool"
        }
      ],
      "name": "LiquidationCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RebalanceStableBorrowRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableBorrowRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "variableBorrowRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "variableBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "ReserveDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ReserveUsedAsCollateralDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ReserveUsedAsCollateralEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLASHLOAN_PREMIUM_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDINGPOOL_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_RESERVES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "depositWithAutoDLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceFromBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceToBefore",
          "type": "uint256"
        }
      ],
      "name": "finalizeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "modes",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressesProvider",
      "outputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentLiquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentStableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "aTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedVariableDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservesList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAccountData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebtETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableBorrowsETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.UserConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "variableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverager",
      "outputs": [
        {
          "internalType": "contract ILeverager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtToCover",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveAToken",
          "type": "bool"
        }
      ],
      "name": "liquidationCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "rebalanceStableBorrowRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "configuration",
          "type": "uint256"
        }
      ],
      "name": "setConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILeverager",
          "name": "_leverager",
          "type": "address"
        }
      ],
      "name": "setLeverager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useAsCollateral",
          "type": "bool"
        }
      ],
      "name": "setUserUseReserveAsCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        }
      ],
      "name": "swapBorrowRateMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a55e962bdd7ec01eee0f097f8d01225c3806e1d8c12b0397e52a6f4ae64ba95",
  "receipt": {
    "to": null,
    "from": "0x225c6084086F83eCe4BC747403f292a7d324Fd2E",
    "contractAddress": "0x5DeeD2361e725Ec962C570221916E35a6C0115dF",
    "transactionIndex": 50,
    "gasUsed": "5142864",
    "logsBloom": "0x
    "blockHash": "0x2751767b0e5eaba802036f38cafcdd3ae84e05ece0fc743f68a9b57db1ded2da",
    "transactionHash": "0x9a55e962bdd7ec01eee0f097f8d01225c3806e1d8c12b0397e52a6f4ae64ba95",
    "logs": [],
    "blockNumber": 26831953,
    "cumulativeGasUsed": "9104372",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f54c80fadb1017091d92ff7e19a408d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASHLOAN_PREMIUM_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDINGPOOL_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_RESERVES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STABLE_RATE_BORROW_SIZE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositWithAutoDLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceFromBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToBefore\",\"type\":\"uint256\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverager\",\"outputs\":[{\"internalType\":\"contract ILeverager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtToCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAToken\",\"type\":\"bool\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rebalanceStableBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILeverager\",\"name\":\"_leverager\",\"type\":\"address\"}],\"name\":\"setLeverager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"details\":\"Main point of interaction with an Aave protocol's market - Users can:   # Deposit   # Withdraw   # Borrow   # Repay   # Swap their loans between variable and stable rate   # Enable/disable their deposits as collateral rebalance stable rate borrow positions   # Liquidate positions   # Execute Flash Loans - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market - All admin functions are callable by the LendingPoolConfigurator contract defined also in the   LendingPoolAddressesProvider\",\"kind\":\"dev\",\"methods\":{\"FLASHLOAN_PREMIUM_TOTAL()\":{\"details\":\"Returns the fee on flash loans\"},\"MAX_NUMBER_RESERVES()\":{\"details\":\"Returns the maximum number of reserves supported to be listed in this LendingPool\"},\"MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\":{\"details\":\"Returns the percentage of available liquidity that can be borrowed at once at stable rate\"},\"borrow(address,uint256,uint256,uint16,address)\":{\"details\":\"Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`\",\"params\":{\"amount\":\"The amount to be borrowed\",\"asset\":\"The address of the underlying asset to borrow\",\"interestRateMode\":\"The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\",\"onBehalfOf\":\"Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man\"}},\"deposit(address,uint256,address,uint16)\":{\"details\":\"Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC\",\"params\":{\"amount\":\"The amount to be deposited\",\"asset\":\"The address of the underlying asset to deposit\",\"onBehalfOf\":\"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*\"}},\"finalizeTransfer(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Validates and finalizes an aToken transfer - Only callable by the overlying aToken of the `asset`\",\"params\":{\"amount\":\"The amount being transferred/withdrawn\",\"asset\":\"The address of the underlying asset of the aToken\",\"balanceFromBefore\":\"The aToken balance of the `from` user before the transfer\",\"balanceToBefore\":\"The aToken balance of the `to` user before the transfer\",\"from\":\"The user from which the aTokens are transferred\",\"to\":\"The user receiving the aTokens\"}},\"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)\":{\"details\":\"Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com\",\"params\":{\"amounts\":\"The amounts amounts being flash-borrowed\",\"assets\":\"The addresses of the assets being flash-borrowed\",\"modes\":\"Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\",\"onBehalfOf\":\"The address  that will receive the debt in the case of using on `modes` 1 or 2\",\"params\":\"Variadic packed params to pass to the receiver as extra information\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*\"}},\"getAddressesProvider()\":{\"details\":\"Returns the cached LendingPoolAddressesProvider connected to this contract*\"},\"getConfiguration(address)\":{\"details\":\"Returns the configuration of the reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The configuration of the reserve*\"}},\"getReserveData(address)\":{\"details\":\"Returns the state and configuration of the reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getReserveNormalizedIncome(address)\":{\"details\":\"Returns the normalized income per unit of asset\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve's normalized income\"}},\"getReserveNormalizedVariableDebt(address)\":{\"details\":\"Returns the normalized variable debt per unit of asset\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve normalized variable debt\"}},\"getReservesList()\":{\"details\":\"Returns the list of the initialized reserves*\"},\"getUserAccountData(address)\":{\"details\":\"Returns the user account data across all the reserves\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"availableBorrowsETH\":\"the borrowing power left of the user\",\"currentLiquidationThreshold\":\"the liquidation threshold of the user\",\"healthFactor\":\"the current health factor of the user*\",\"ltv\":\"the loan to value of the user\",\"totalCollateralETH\":\"the total collateral in ETH of the user\",\"totalDebtETH\":\"the total debt in ETH of the user\"}},\"getUserConfiguration(address)\":{\"details\":\"Returns the configuration of the user across all the reserves\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"_0\":\"The configuration of the user*\"}},\"initReserve(address,address,address,address,address)\":{\"details\":\"Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy - Only callable by the LendingPoolConfigurator contract\",\"params\":{\"aTokenAddress\":\"The address of the VariableDebtToken that will be assigned to the reserve\",\"asset\":\"The address of the underlying asset of the reserve\",\"interestRateStrategyAddress\":\"The address of the interest rate strategy contract*\",\"stableDebtAddress\":\"The address of the StableDebtToken that will be assigned to the reserve\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the LendingPool contract is added to the LendingPoolAddressesProvider of the market. - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption   on subsequent operations\",\"params\":{\"provider\":\"The address of the LendingPoolAddressesProvider*\"}},\"liquidationCall(address,address,address,uint256,bool)\":{\"details\":\"Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\",\"params\":{\"collateralAsset\":\"The address of the underlying asset used as collateral, to receive as result of the liquidation\",\"debtAsset\":\"The address of the underlying borrowed asset to be repaid with the liquidation\",\"debtToCover\":\"The debt amount of borrowed `asset` the liquidator wants to cover\",\"receiveAToken\":\"`true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*\",\"user\":\"The address of the borrower getting liquidated\"}},\"paused()\":{\"details\":\"Returns if the LendingPool is paused\"},\"rebalanceStableBorrowRate(address,address)\":{\"details\":\"Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough\",\"params\":{\"asset\":\"The address of the underlying asset borrowed\",\"user\":\"The address of the user to be rebalanced*\"}},\"repay(address,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\",\"asset\":\"The address of the borrowed underlying asset previously borrowed\",\"onBehalfOf\":\"Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed\",\"rateMode\":\"The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\"},\"returns\":{\"_0\":\"The final amount repaid*\"}},\"setConfiguration(address,uint256)\":{\"details\":\"Sets the configuration bitmap of the reserve as a whole - Only callable by the LendingPoolConfigurator contract\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"configuration\":\"The new configuration bitmap*\"}},\"setPause(bool)\":{\"details\":\"Set the _pause state of a reserve - Only callable by the LendingPoolConfigurator contract\",\"params\":{\"val\":\"`true` to pause the reserve, `false` to un-pause it\"}},\"setReserveInterestRateStrategyAddress(address,address)\":{\"details\":\"Updates the address of the interest rate strategy contract - Only callable by the LendingPoolConfigurator contract\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"rateStrategyAddress\":\"The address of the interest rate strategy contract*\"}},\"setUserUseReserveAsCollateral(address,bool)\":{\"details\":\"Allows depositors to enable/disable a specific deposited asset as collateral\",\"params\":{\"asset\":\"The address of the underlying asset deposited\",\"useAsCollateral\":\"`true` if the user wants to use the deposit as collateral, `false` otherwise*\"}},\"swapBorrowRateMode(address,uint256)\":{\"details\":\"Allows a borrower to swap his debt between stable and variable mode, or viceversa\",\"params\":{\"asset\":\"The address of the underlying asset borrowed\",\"rateMode\":\"The rate mode that the user wants to swap to*\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\",\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn*\"}}},\"title\":\"LendingPool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"repay(address,uint256,uint256,address)\":{\"notice\":\"Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/lendingpool/LendingPool.sol\":\"LendingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d1f63164155227cf652eb565cda7320d95c1a1b17ee91d1ca4ee7cc8e389538\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xbc2d79250445e87d578cefb23cd0876e1f29a7a4e611b2c18e082681985a7181\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILeverager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILeverager {\\n\\tfunction wethToZap(address user) external view returns (uint256);\\n\\n\\tfunction zapWETHWithBorrow(uint256 amount, address borrower) external returns (uint256 liquidity);\\n\\n\\tfunction zapWETHWithBorrow(\\n\\t\\tuint256 amount,\\n\\t\\taddress borrower,\\n\\t\\taddress onBehalfOf\\n\\t) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x7d775be830b29dabe3a44729be29990702c17202c8f372f2bbfbff0eb55d493c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n\\t/**\\n\\t * @dev returns the asset price in ETH\\n\\t * @param asset the address of the asset\\n\\t * @return the ETH price of the asset\\n\\t **/\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd899e22f6e6dedd49e7a4907fd136a68f6610d9c974b14e42ae10c5a2aa15684\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n\\tfunction baseVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\\n}\\n\",\"keccak256\":\"0xc1fa4a5530a2f754ddba46205980b70dcea67c2144eb3acb237dc82ce44378e7\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when new stable debt is minted\\n\\t * @param user The address of the user who triggered the minting\\n\\t * @param onBehalfOf The recipient of stable debt tokens\\n\\t * @param amount The amount minted\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The increase in balance since the last action of the user\\n\\t * @param newRate The rate of the debt after the minting\\n\\t * @param avgStableRate The new average stable rate after the minting\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Mint(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 newRate,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when new stable debt is burned\\n\\t * @param user The address of the user\\n\\t * @param amount The amount being burned\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The the increase in balance since the last action of the user\\n\\t * @param avgStableRate The new average stable rate after the burning\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Burn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the average rate of all the stable rate loans.\\n\\t * @return The average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user debt\\n\\t * @return The stable rate of the user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the user\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the principal, the total supply and the average stable rate\\n\\t **/\\n\\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the total supply\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0xed20abf39da70863a5fd49d173c907cea1acc2fd09c255c4903990c82fc302e0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param onBehalfOf The address of the user on which behalf minting has been performed\\n\\t * @param value The amount to be minted\\n\\t * @param index The last index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when variable debt is burnt\\n\\t * @param user The user which debt has been burned\\n\\t * @param amount The amount of debt being burned\\n\\t * @param index The index of the user\\n\\t **/\\n\\tevent Burn(address indexed user, uint256 amount, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * @param user The user which debt is burnt\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0x45c38c0244862161745e30c52156a7d37ccce31d20eded4ee6538696ccec7aab\",\"license\":\"agpl-3.0\"},\"contracts/lending/flashloan/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"../../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../interfaces/ILendingPool.sol\\\";\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n\\tfunction executeOperation(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata premiums,\\n\\t\\taddress initiator,\\n\\t\\tbytes calldata params\\n\\t) external returns (bool);\\n\\n\\tfunction ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction LENDING_POOL() external view returns (ILendingPool);\\n}\\n\",\"keccak256\":\"0xe5d5bf25f76d7a4d042b25f5a910669422420275682048936ef07d481250cc57\",\"license\":\"agpl-3.0\"},\"contracts/lending/lendingpool/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {IAToken} from \\\"../../interfaces/IAToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IFlashLoanReceiver} from \\\"../flashloan/interfaces/IFlashLoanReceiver.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {IStableDebtToken} from \\\"../../interfaces/IStableDebtToken.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {ILeverager} from \\\"../../interfaces/ILeverager.sol\\\";\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {Helpers} from \\\"../libraries/helpers/Helpers.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"../libraries/logic/GenericLogic.sol\\\";\\nimport {ValidationLogic} from \\\"../libraries/logic/ValidationLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../libraries/configuration/UserConfiguration.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {LendingPoolStorage} from \\\"./LendingPoolStorage.sol\\\";\\n\\n/**\\n * @title LendingPool contract\\n * @dev Main point of interaction with an Aave protocol's market\\n * - Users can:\\n *   # Deposit\\n *   # Withdraw\\n *   # Borrow\\n *   # Repay\\n *   # Swap their loans between variable and stable rate\\n *   # Enable/disable their deposits as collateral rebalance stable rate borrow positions\\n *   # Liquidate positions\\n *   # Execute Flash Loans\\n * - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market\\n * - All admin functions are callable by the LendingPoolConfigurator contract defined also in the\\n *   LendingPoolAddressesProvider\\n * @author Aave\\n **/\\ncontract LendingPool is VersionedInitializable, ILendingPool, LendingPoolStorage {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant LENDINGPOOL_REVISION = 0x2;\\n\\n\\tILeverager public leverager;\\n\\n\\taddress public owner;\\n\\n\\tmodifier whenNotPaused() {\\n\\t\\t_whenNotPaused();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyLendingPoolConfigurator() {\\n\\t\\t_onlyLendingPoolConfigurator();\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _whenNotPaused() internal view {\\n\\t\\trequire(!_paused, Errors.LP_IS_PAUSED);\\n\\t}\\n\\n\\tfunction _onlyLendingPoolConfigurator() internal view {\\n\\t\\trequire(\\n\\t\\t\\t_addressesProvider.getLendingPoolConfigurator() == msg.sender,\\n\\t\\t\\tErrors.LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getRevision() internal pure override returns (uint256) {\\n\\t\\treturn LENDINGPOOL_REVISION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function is invoked by the proxy contract when the LendingPool contract is added to the\\n\\t * LendingPoolAddressesProvider of the market.\\n\\t * - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption\\n\\t *   on subsequent operations\\n\\t * @param provider The address of the LendingPoolAddressesProvider\\n\\t **/\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\\n\\t\\t_addressesProvider = provider;\\n\\t\\t_maxStableRateBorrowSizePercent = 2500;\\n\\t\\t_flashLoanPremiumTotal = 9;\\n\\t\\t_maxNumberOfReserves = 128;\\n\\t\\towner = tx.origin;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) public override whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tValidationLogic.validateDeposit(reserve, amount);\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\n\\t\\treserve.updateState();\\n\\t\\treserve.updateInterestRates(asset, aToken, amount, 0);\\n\\n\\t\\tIERC20(asset).safeTransferFrom(msg.sender, aToken, amount);\\n\\n\\t\\tif (IAToken(aToken).balanceOf(onBehalfOf) == 0) {\\n\\t\\t\\t_usersConfig[onBehalfOf].setUsingAsCollateral(reserve.id, true);\\n\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\\n\\t\\t}\\n\\n\\t\\tIAToken(aToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\\n\\n\\t\\temit Deposit(asset, msg.sender, onBehalfOf, amount, referralCode);\\n\\t}\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external override whenNotPaused {\\n\\t\\trequire(tx.origin == onBehalfOf);\\n\\t\\tdeposit(asset, amount, onBehalfOf, referralCode);\\n\\t\\tleverager.zapWETHWithBorrow(leverager.wethToZap(onBehalfOf), onBehalfOf);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external override whenNotPaused returns (uint256) {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\n\\t\\tuint256 userBalance = IAToken(aToken).balanceOf(msg.sender);\\n\\n\\t\\tuint256 amountToWithdraw = amount;\\n\\n\\t\\tif (amount == type(uint256).max) {\\n\\t\\t\\tamountToWithdraw = userBalance;\\n\\t\\t}\\n\\n\\t\\tValidationLogic.validateWithdraw(\\n\\t\\t\\tasset,\\n\\t\\t\\tamountToWithdraw,\\n\\t\\t\\tuserBalance,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\treserve.updateInterestRates(asset, aToken, 0, amountToWithdraw);\\n\\n\\t\\tif (amountToWithdraw == userBalance) {\\n\\t\\t\\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, false);\\n\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n\\t\\t}\\n\\n\\t\\tIAToken(aToken).burn(msg.sender, to, amountToWithdraw, reserve.liquidityIndex);\\n\\n\\t\\temit Withdraw(asset, msg.sender, to, amountToWithdraw);\\n\\n\\t\\treturn amountToWithdraw;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external override whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t_executeBorrow(\\n\\t\\t\\tExecuteBorrowParams(\\n\\t\\t\\t\\tasset,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tinterestRateMode,\\n\\t\\t\\t\\treserve.aTokenAddress,\\n\\t\\t\\t\\treferralCode,\\n\\t\\t\\t\\ttrue\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 rateMode,\\n\\t\\taddress onBehalfOf\\n\\t) external override whenNotPaused returns (uint256) {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(onBehalfOf, reserve);\\n\\n\\t\\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\\n\\n\\t\\tValidationLogic.validateRepay(reserve, amount, interestRateMode, onBehalfOf, stableDebt, variableDebt);\\n\\n\\t\\tuint256 paybackAmount = interestRateMode == DataTypes.InterestRateMode.STABLE ? stableDebt : variableDebt;\\n\\n\\t\\tif (amount < paybackAmount) {\\n\\t\\t\\tpaybackAmount = amount;\\n\\t\\t}\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(onBehalfOf, paybackAmount);\\n\\t\\t} else {\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\\n\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\tpaybackAmount,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\t\\treserve.updateInterestRates(asset, aToken, paybackAmount, 0);\\n\\n\\t\\tif (stableDebt.add(variableDebt).sub(paybackAmount) == 0) {\\n\\t\\t\\t_usersConfig[onBehalfOf].setBorrowing(reserve.id, false);\\n\\t\\t}\\n\\n\\t\\tIERC20(asset).safeTransferFrom(msg.sender, aToken, paybackAmount);\\n\\n\\t\\tIAToken(aToken).handleRepayment(msg.sender, paybackAmount);\\n\\n\\t\\temit Repay(asset, onBehalfOf, msg.sender, paybackAmount);\\n\\n\\t\\treturn paybackAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external override whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(msg.sender, reserve);\\n\\n\\t\\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\\n\\n\\t\\tValidationLogic.validateSwapRateMode(\\n\\t\\t\\treserve,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\tstableDebt,\\n\\t\\t\\tvariableDebt,\\n\\t\\t\\tinterestRateMode\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(msg.sender, stableDebt);\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).mint(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tstableDebt,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvariableDebt,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).mint(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvariableDebt,\\n\\t\\t\\t\\treserve.currentStableBorrowRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treserve.updateInterestRates(asset, reserve.aTokenAddress, 0, 0);\\n\\n\\t\\temit Swap(asset, msg.sender, rateMode);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external override whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tIERC20 stableDebtToken = IERC20(reserve.stableDebtTokenAddress);\\n\\t\\tIERC20 variableDebtToken = IERC20(reserve.variableDebtTokenAddress);\\n\\t\\taddress aTokenAddress = reserve.aTokenAddress;\\n\\n\\t\\tuint256 stableDebt = IERC20(stableDebtToken).balanceOf(user);\\n\\n\\t\\tValidationLogic.validateRebalanceStableBorrowRate(\\n\\t\\t\\treserve,\\n\\t\\t\\tasset,\\n\\t\\t\\tstableDebtToken,\\n\\t\\t\\tvariableDebtToken,\\n\\t\\t\\taTokenAddress\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tIStableDebtToken(address(stableDebtToken)).burn(user, stableDebt);\\n\\t\\tIStableDebtToken(address(stableDebtToken)).mint(user, user, stableDebt, reserve.currentStableBorrowRate);\\n\\n\\t\\treserve.updateInterestRates(asset, aTokenAddress, 0, 0);\\n\\n\\t\\temit RebalanceStableBorrowRate(asset, user);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external override whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tValidationLogic.validateSetUseReserveAsCollateral(\\n\\t\\t\\treserve,\\n\\t\\t\\tasset,\\n\\t\\t\\tuseAsCollateral,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, useAsCollateral);\\n\\n\\t\\tif (useAsCollateral) {\\n\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, msg.sender);\\n\\t\\t} else {\\n\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external override whenNotPaused {\\n\\t\\taddress collateralManager = _addressesProvider.getLendingPoolCollateralManager();\\n\\t\\taddress liquidationFeeTo = _addressesProvider.getLiquidationFeeTo();\\n\\t\\tif (liquidationFeeTo == address(0)) {\\n\\t\\t\\tliquidationFeeTo = msg.sender;\\n\\t\\t}\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\t(bool success, bytes memory result) = collateralManager.delegatecall(\\n\\t\\t\\tabi.encodeWithSignature(\\n\\t\\t\\t\\t\\\"liquidationCall(address,address,address,uint256,bool,address)\\\",\\n\\t\\t\\t\\tcollateralAsset,\\n\\t\\t\\t\\tdebtAsset,\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tdebtToCover,\\n\\t\\t\\t\\treceiveAToken,\\n\\t\\t\\t\\tliquidationFeeTo\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\trequire(success, Errors.LP_LIQUIDATION_CALL_FAILED);\\n\\n\\t\\t(uint256 returnCode, string memory returnMessage) = abi.decode(result, (uint256, string));\\n\\n\\t\\trequire(returnCode == 0, string(abi.encodePacked(returnMessage)));\\n\\t}\\n\\n\\tstruct FlashLoanLocalVars {\\n\\t\\tIFlashLoanReceiver receiver;\\n\\t\\taddress oracle;\\n\\t\\tuint256 i;\\n\\t\\taddress currentAsset;\\n\\t\\taddress currentATokenAddress;\\n\\t\\tuint256 currentAmount;\\n\\t\\tuint256 currentPremium;\\n\\t\\tuint256 currentAmountPlusPremium;\\n\\t\\taddress debtToken;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external override whenNotPaused {\\n\\t\\tFlashLoanLocalVars memory vars;\\n\\n\\t\\tValidationLogic.validateFlashloan(assets, amounts);\\n\\n\\t\\taddress[] memory aTokenAddresses = new address[](assets.length);\\n\\t\\tuint256[] memory premiums = new uint256[](assets.length);\\n\\n\\t\\tvars.receiver = IFlashLoanReceiver(receiverAddress);\\n\\n\\t\\tfor (vars.i = 0; vars.i < assets.length; vars.i++) {\\n\\t\\t\\taTokenAddresses[vars.i] = _reserves[assets[vars.i]].aTokenAddress;\\n\\n\\t\\t\\tpremiums[vars.i] = amounts[vars.i].mul(_flashLoanPremiumTotal).div(10000);\\n\\n\\t\\t\\tIAToken(aTokenAddresses[vars.i]).transferUnderlyingTo(receiverAddress, amounts[vars.i]);\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.receiver.executeOperation(assets, amounts, premiums, msg.sender, params),\\n\\t\\t\\tErrors.LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN\\n\\t\\t);\\n\\n\\t\\tfor (vars.i = 0; vars.i < assets.length; vars.i++) {\\n\\t\\t\\tvars.currentAsset = assets[vars.i];\\n\\t\\t\\tvars.currentAmount = amounts[vars.i];\\n\\t\\t\\tvars.currentPremium = premiums[vars.i];\\n\\t\\t\\tvars.currentATokenAddress = aTokenAddresses[vars.i];\\n\\t\\t\\tvars.currentAmountPlusPremium = vars.currentAmount.add(vars.currentPremium);\\n\\n\\t\\t\\tif (DataTypes.InterestRateMode(modes[vars.i]) == DataTypes.InterestRateMode.NONE) {\\n\\t\\t\\t\\t_reserves[vars.currentAsset].updateState();\\n\\t\\t\\t\\t_reserves[vars.currentAsset].cumulateToLiquidityIndex(\\n\\t\\t\\t\\t\\tIERC20(vars.currentATokenAddress).totalSupply(),\\n\\t\\t\\t\\t\\tvars.currentPremium\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t_reserves[vars.currentAsset].updateInterestRates(\\n\\t\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\tvars.currentAmountPlusPremium,\\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tIERC20(vars.currentAsset).safeTransferFrom(\\n\\t\\t\\t\\t\\treceiverAddress,\\n\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\tvars.currentAmountPlusPremium\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If the user chose to not return the funds, the system checks if there is enough collateral and\\n\\t\\t\\t\\t// eventually opens a debt position\\n\\t\\t\\t\\t_executeBorrow(\\n\\t\\t\\t\\t\\tExecuteBorrowParams(\\n\\t\\t\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\t\\t\\tvars.currentAmount,\\n\\t\\t\\t\\t\\t\\tmodes[vars.i],\\n\\t\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\t\\treferralCode,\\n\\t\\t\\t\\t\\t\\tfalse\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\temit FlashLoan(\\n\\t\\t\\t\\treceiverAddress,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\tvars.currentAmount,\\n\\t\\t\\t\\tvars.currentPremium,\\n\\t\\t\\t\\treferralCode\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view override returns (DataTypes.ReserveData memory) {\\n\\t\\treturn _reserves[asset];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t)\\n\\t{\\n\\t\\t(totalCollateralETH, totalDebtETH, ltv, currentLiquidationThreshold, healthFactor) = GenericLogic\\n\\t\\t\\t.calculateUserAccountData(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\t_reserves,\\n\\t\\t\\t\\t_usersConfig[user],\\n\\t\\t\\t\\t_reservesList,\\n\\t\\t\\t\\t_reservesCount,\\n\\t\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t\\t);\\n\\n\\t\\tavailableBorrowsETH = GenericLogic.calculateAvailableBorrowsETH(totalCollateralETH, totalDebtETH, ltv);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view override returns (DataTypes.ReserveConfigurationMap memory) {\\n\\t\\treturn _reserves[asset].configuration;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view override returns (DataTypes.UserConfigurationMap memory) {\\n\\t\\treturn _usersConfig[user];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the normalized income per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view virtual override returns (uint256) {\\n\\t\\treturn _reserves[asset].getNormalizedIncome();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view override returns (uint256) {\\n\\t\\treturn _reserves[asset].getNormalizedDebt();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns if the LendingPool is paused\\n\\t */\\n\\tfunction paused() external view override returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the list of the initialized reserves\\n\\t **/\\n\\tfunction getReservesList() external view override returns (address[] memory) {\\n\\t\\taddress[] memory _activeReserves = new address[](_reservesCount);\\n\\n\\t\\tfor (uint256 i = 0; i < _reservesCount; i++) {\\n\\t\\t\\t_activeReserves[i] = _reservesList[i];\\n\\t\\t}\\n\\t\\treturn _activeReserves;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the cached LendingPoolAddressesProvider connected to this contract\\n\\t **/\\n\\tfunction getAddressesProvider() external view override returns (ILendingPoolAddressesProvider) {\\n\\t\\treturn _addressesProvider;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n\\t */\\n\\tfunction MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view returns (uint256) {\\n\\t\\treturn _maxStableRateBorrowSizePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the fee on flash loans\\n\\t */\\n\\tfunction FLASHLOAN_PREMIUM_TOTAL() public view returns (uint256) {\\n\\t\\treturn _flashLoanPremiumTotal;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the maximum number of reserves supported to be listed in this LendingPool\\n\\t */\\n\\tfunction MAX_NUMBER_RESERVES() public view returns (uint256) {\\n\\t\\treturn _maxNumberOfReserves;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates and finalizes an aToken transfer\\n\\t * - Only callable by the overlying aToken of the `asset`\\n\\t * @param asset The address of the underlying asset of the aToken\\n\\t * @param from The user from which the aTokens are transferred\\n\\t * @param to The user receiving the aTokens\\n\\t * @param amount The amount being transferred/withdrawn\\n\\t * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n\\t * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n\\t */\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromBefore,\\n\\t\\tuint256 balanceToBefore\\n\\t) external override whenNotPaused {\\n\\t\\trequire(msg.sender == _reserves[asset].aTokenAddress, Errors.LP_CALLER_MUST_BE_AN_ATOKEN);\\n\\n\\t\\tValidationLogic.validateTransfer(\\n\\t\\t\\tfrom,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[from],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\tuint256 reserveId = _reserves[asset].id;\\n\\n\\t\\tif (from != to) {\\n\\t\\t\\tif (balanceFromBefore.sub(amount) == 0) {\\n\\t\\t\\t\\tDataTypes.UserConfigurationMap storage fromConfig = _usersConfig[from];\\n\\t\\t\\t\\tfromConfig.setUsingAsCollateral(reserveId, false);\\n\\t\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, from);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (balanceToBefore == 0 && amount != 0) {\\n\\t\\t\\t\\tDataTypes.UserConfigurationMap storage toConfig = _usersConfig[to];\\n\\t\\t\\t\\ttoConfig.setUsingAsCollateral(reserveId, true);\\n\\t\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, to);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n\\t * interest rate strategy\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n\\t * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n\\t * @param aTokenAddress The address of the VariableDebtToken that will be assigned to the reserve\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction initReserve(\\n\\t\\taddress asset,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external override onlyLendingPoolConfigurator {\\n\\t\\trequire(Address.isContract(asset), Errors.LP_NOT_CONTRACT);\\n\\t\\t_reserves[asset].init(aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress);\\n\\t\\t_addReserveToList(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the address of the interest rate strategy contract\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param rateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction setReserveInterestRateStrategyAddress(\\n\\t\\taddress asset,\\n\\t\\taddress rateStrategyAddress\\n\\t) external override onlyLendingPoolConfigurator {\\n\\t\\t_reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the configuration bitmap of the reserve as a whole\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param configuration The new configuration bitmap\\n\\t **/\\n\\tfunction setConfiguration(address asset, uint256 configuration) external override onlyLendingPoolConfigurator {\\n\\t\\t_reserves[asset].configuration.data = configuration;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Set the _pause state of a reserve\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param val `true` to pause the reserve, `false` to un-pause it\\n\\t */\\n\\tfunction setPause(bool val) external override onlyLendingPoolConfigurator {\\n\\t\\t_paused = val;\\n\\t\\tif (_paused) {\\n\\t\\t\\temit Paused();\\n\\t\\t} else {\\n\\t\\t\\temit Unpaused();\\n\\t\\t}\\n\\t}\\n\\n\\tstruct ExecuteBorrowParams {\\n\\t\\taddress asset;\\n\\t\\taddress user;\\n\\t\\taddress onBehalfOf;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 interestRateMode;\\n\\t\\taddress aTokenAddress;\\n\\t\\tuint16 referralCode;\\n\\t\\tbool releaseUnderlying;\\n\\t}\\n\\n\\tfunction _executeBorrow(ExecuteBorrowParams memory vars) internal {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[vars.asset];\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig = _usersConfig[vars.onBehalfOf];\\n\\n\\t\\taddress oracle = _addressesProvider.getPriceOracle();\\n\\n\\t\\tuint256 amountInETH = IPriceOracleGetter(oracle).getAssetPrice(vars.asset).mul(vars.amount).div(\\n\\t\\t\\t10 ** reserve.configuration.getDecimals()\\n\\t\\t);\\n\\n\\t\\tValidationLogic.validateBorrow(\\n\\t\\t\\tvars.asset,\\n\\t\\t\\treserve,\\n\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\tvars.amount,\\n\\t\\t\\tamountInETH,\\n\\t\\t\\tvars.interestRateMode,\\n\\t\\t\\t_maxStableRateBorrowSizePercent,\\n\\t\\t\\t_reserves,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tuint256 currentStableRate = 0;\\n\\n\\t\\tbool isFirstBorrowing = false;\\n\\t\\tif (DataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tcurrentStableRate = reserve.currentStableBorrowRate;\\n\\n\\t\\t\\tisFirstBorrowing = IStableDebtToken(reserve.stableDebtTokenAddress).mint(\\n\\t\\t\\t\\tvars.user,\\n\\t\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\t\\tvars.amount,\\n\\t\\t\\t\\tcurrentStableRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tisFirstBorrowing = IVariableDebtToken(reserve.variableDebtTokenAddress).mint(\\n\\t\\t\\t\\tvars.user,\\n\\t\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\t\\tvars.amount,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (isFirstBorrowing) {\\n\\t\\t\\tuserConfig.setBorrowing(reserve.id, true);\\n\\t\\t}\\n\\n\\t\\treserve.updateInterestRates(vars.asset, vars.aTokenAddress, 0, vars.releaseUnderlying ? vars.amount : 0);\\n\\n\\t\\tif (vars.releaseUnderlying) {\\n\\t\\t\\tIAToken(vars.aTokenAddress).transferUnderlyingTo(vars.user, vars.amount);\\n\\t\\t}\\n\\n\\t\\temit Borrow(\\n\\t\\t\\tvars.asset,\\n\\t\\t\\tvars.user,\\n\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\tvars.amount,\\n\\t\\t\\tvars.interestRateMode,\\n\\t\\t\\tDataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE\\n\\t\\t\\t\\t? currentStableRate\\n\\t\\t\\t\\t: reserve.currentVariableBorrowRate,\\n\\t\\t\\tvars.referralCode\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _addReserveToList(address asset) internal {\\n\\t\\tuint256 reservesCount = _reservesCount;\\n\\n\\t\\trequire(reservesCount < _maxNumberOfReserves, Errors.LP_NO_MORE_RESERVES_ALLOWED);\\n\\n\\t\\tbool reserveAlreadyAdded = _reserves[asset].id != 0 || _reservesList[0] == asset;\\n\\n\\t\\tif (!reserveAlreadyAdded) {\\n\\t\\t\\t_reserves[asset].id = uint8(reservesCount);\\n\\t\\t\\t_reservesList[reservesCount] = asset;\\n\\n\\t\\t\\t_reservesCount = reservesCount + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setLeverager(ILeverager _leverager) external {\\n\\t\\trequire(msg.sender == owner, \\\"!owner\\\");\\n\\t\\trequire(address(leverager) == address(0), \\\"Leverager Already Set\\\");\\n\\t\\tleverager = _leverager;\\n\\t}\\n\\n\\tfunction setNewOwner(address _newOwner) external {\\n\\t\\trequire(msg.sender == owner, \\\"!owner\\\");\\n\\t\\towner = _newOwner;\\n\\t}\\n}\\n\",\"keccak256\":\"0x9d9ec4288200828953f81d2f90e603910f3aac48acdba20650a027f2ef35cbc3\",\"license\":\"agpl-3.0\"},\"contracts/lending/lendingpool/LendingPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {UserConfiguration} from \\\"../libraries/configuration/UserConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ncontract LendingPoolStorage {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tILendingPoolAddressesProvider internal _addressesProvider;\\n\\n\\tmapping(address => DataTypes.ReserveData) internal _reserves;\\n\\tmapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\\n\\n\\t// the list of the available reserves, structured as a mapping for gas savings reasons\\n\\tmapping(uint256 => address) internal _reservesList;\\n\\n\\tuint256 internal _reservesCount;\\n\\n\\tbool internal _paused;\\n\\n\\tuint256 internal _maxStableRateBorrowSizePercent;\\n\\n\\tuint256 internal _flashLoanPremiumTotal;\\n\\n\\tuint256 internal _maxNumberOfReserves;\\n}\\n\",\"keccak256\":\"0x534babbdd118578164026371f62ad71362e9b741776808c15afc02926034414a\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tuint256 private lastInitializedRevision = 0;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\tuint256 revision = getRevision();\\n\\t\\trequire(\\n\\t\\t\\tinitializing || isConstructor() || revision > lastInitializedRevision,\\n\\t\\t\\t\\\"Contract instance has already been initialized\\\"\\n\\t\\t);\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tlastInitializedRevision = revision;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the revision number of the contract\\n\\t * Needs to be defined in the inherited class as a constant.\\n\\t **/\\n\\tfunction getRevision() internal pure virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns true if and only if the function is running in the constructor\\n\\t **/\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9981ca9b65d7d096711bda22b7951e5cf078576ab5cd7b843c8546c8a79db5bb\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa9757f5232d9c4b5a932277d13c10e6dd3f5885473f1e33911238adc52582d99\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n\\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n\\t/**\\n\\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param borrowing True if the user is borrowing the reserve, false otherwise\\n\\t **/\\n\\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction setUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap storage self,\\n\\t\\tuint256 reserveIndex,\\n\\t\\tbool usingAsCollateral\\n\\t) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n\\t\\t\\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateralOrBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing, false otherwise\\n\\t **/\\n\\tfunction isBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been borrowing from any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data & BORROWING_MASK != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has not been using any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data == 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x15a442ed09ad3b43a96c1a6d14c72f3c7dc94e46f1157e34ce5f5f0ce22726e4\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd8247701ad40f24d3bbba25e050a8b4e10f9fcecce670a92e6f6d1ca0a4fdb04\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/helpers/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Helpers library\\n * @author Aave\\n */\\nlibrary Helpers {\\n\\t/**\\n\\t * @dev Fetches the user current stable and variable debt balances\\n\\t * @param user The user address\\n\\t * @param reserve The reserve data object\\n\\t * @return The stable and variable debt balance\\n\\t **/\\n\\tfunction getUserCurrentDebt(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData storage reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getUserCurrentDebtMemory(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData memory reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5125b0ab6f0363a9ddda8db9596704bf0f50bf5978c22d210b8947cb65a60f9e\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title GenericLogic library\\n * @author Aave\\n * @title Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\n\\n\\tstruct balanceDecreaseAllowedLocalVars {\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 amountToDecreaseInETH;\\n\\t\\tuint256 collateralBalanceAfterDecrease;\\n\\t\\tuint256 liquidationThresholdAfterDecrease;\\n\\t\\tuint256 healthFactorAfterDecrease;\\n\\t\\tbool reserveUsageAsCollateralEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if a specific balance decrease is allowed\\n\\t * (i.e. doesn't bring the user borrow position health factor under HEALTH_FACTOR_LIQUIDATION_THRESHOLD)\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param user The address of the user\\n\\t * @param amount The amount to decrease\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The list of all the active reserves\\n\\t * @param oracle The address of the oracle contract\\n\\t * @return true if the decrease of the balance is allowed\\n\\t **/\\n\\tfunction balanceDecreaseAllowed(\\n\\t\\taddress asset,\\n\\t\\taddress user,\\n\\t\\tuint256 amount,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap calldata userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view returns (bool) {\\n\\t\\tif (!userConfig.isBorrowingAny() || !userConfig.isUsingAsCollateral(reservesData[asset].id)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbalanceDecreaseAllowedLocalVars memory vars;\\n\\n\\t\\t(, vars.liquidationThreshold, , vars.decimals, ) = reservesData[asset].configuration.getParams();\\n\\n\\t\\tif (vars.liquidationThreshold == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t(vars.totalCollateralInETH, vars.totalDebtInETH, , vars.avgLiquidationThreshold, ) = calculateUserAccountData(\\n\\t\\t\\tuser,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\tif (vars.totalDebtInETH == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tvars.amountToDecreaseInETH = IPriceOracleGetter(oracle).getAssetPrice(asset).mul(amount).div(\\n\\t\\t\\t10 ** vars.decimals\\n\\t\\t);\\n\\n\\t\\tvars.collateralBalanceAfterDecrease = vars.totalCollateralInETH.sub(vars.amountToDecreaseInETH);\\n\\n\\t\\t//if there is a borrow, there can't be 0 collateral\\n\\t\\tif (vars.collateralBalanceAfterDecrease == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tvars.liquidationThresholdAfterDecrease = vars\\n\\t\\t\\t.totalCollateralInETH\\n\\t\\t\\t.mul(vars.avgLiquidationThreshold)\\n\\t\\t\\t.sub(vars.amountToDecreaseInETH.mul(vars.liquidationThreshold))\\n\\t\\t\\t.div(vars.collateralBalanceAfterDecrease);\\n\\n\\t\\tuint256 healthFactorAfterDecrease = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.collateralBalanceAfterDecrease,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.liquidationThresholdAfterDecrease\\n\\t\\t);\\n\\n\\t\\treturn healthFactorAfterDecrease >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\\n\\t}\\n\\n\\tstruct CalculateUserAccountDataVars {\\n\\t\\tuint256 reserveUnitPrice;\\n\\t\\tuint256 tokenUnit;\\n\\t\\tuint256 compoundedLiquidityBalance;\\n\\t\\tuint256 compoundedBorrowBalance;\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 ltv;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 i;\\n\\t\\tuint256 healthFactor;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLtv;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 reservesLength;\\n\\t\\tbool healthFactorBelowThreshold;\\n\\t\\taddress currentReserveAddress;\\n\\t\\tbool usageAsCollateralEnabled;\\n\\t\\tbool userUsesReserveAsCollateral;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the user data across the reserves.\\n\\t * this includes the total liquidity/collateral/borrow balances in ETH,\\n\\t * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n\\t * @param user The address of the user\\n\\t * @param reservesData Data of all the reserves\\n\\t * @param userConfig The configuration of the user\\n\\t * @param reserves The list of the available reserves\\n\\t * @param oracle The price oracle address\\n\\t * @return The total collateral and total debt of the user in ETH, the avg ltv, liquidation threshold and the HF\\n\\t **/\\n\\tfunction calculateUserAccountData(\\n\\t\\taddress user,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap memory userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tCalculateUserAccountDataVars memory vars;\\n\\n\\t\\tif (userConfig.isEmpty()) {\\n\\t\\t\\treturn (0, 0, 0, 0, type(uint256).max);\\n\\t\\t}\\n\\t\\tfor (vars.i = 0; vars.i < reservesCount; vars.i++) {\\n\\t\\t\\tif (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvars.currentReserveAddress = reserves[vars.i];\\n\\t\\t\\tDataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n\\t\\t\\t(vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve.configuration.getParams();\\n\\n\\t\\t\\tvars.tokenUnit = 10 ** vars.decimals;\\n\\t\\t\\tvars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\\n\\n\\t\\t\\tif (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\\n\\n\\t\\t\\t\\tuint256 liquidityBalanceETH = vars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(\\n\\t\\t\\t\\t\\tvars.tokenUnit\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\\n\\n\\t\\t\\t\\tvars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\\n\\t\\t\\t\\tvars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\\n\\t\\t\\t\\t\\tliquidityBalanceETH.mul(vars.liquidationThreshold)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (userConfig.isBorrowing(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(user);\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\\n\\t\\t\\t\\t\\tIERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalDebtInETH = vars.totalDebtInETH.add(\\n\\t\\t\\t\\t\\tvars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\\n\\t\\tvars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\\n\\t\\t\\t? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\\n\\t\\t\\t: 0;\\n\\n\\t\\tvars.healthFactor = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLiquidationThreshold\\n\\t\\t);\\n\\t\\treturn (\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLtv,\\n\\t\\t\\tvars.avgLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the health factor from the corresponding balances\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total debt in ETH\\n\\t * @param liquidationThreshold The avg liquidation threshold\\n\\t * @return The health factor calculated from the balances provided\\n\\t **/\\n\\tfunction calculateHealthFactorFromBalances(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 liquidationThreshold\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (totalDebtInETH == 0) return type(uint256).max;\\n\\n\\t\\treturn (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\\n\\t * average Loan To Value\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total borrow balance\\n\\t * @param ltv The average loan to value\\n\\t * @return the amount available to borrow in ETH for the user\\n\\t **/\\n\\n\\tfunction calculateAvailableBorrowsETH(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 ltv\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\\n\\n\\t\\tif (availableBorrowsETH < totalDebtInETH) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tavailableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\\n\\t\\treturn availableBorrowsETH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x585bcece3559b600d7c214ac29199674d44715e52163c2ddb6ef4c766902722f\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IAToken} from \\\"../../../interfaces/IAToken.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized income for the reserve\\n\\t * A value of 1e27 means there is no income. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n\\t * @param reserve The reserve object\\n\\t * @return the normalized income. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.liquidityIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n\\t\\t\\treserve.liquidityIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized variable debt for the reserve\\n\\t * A value of 1e27 means there is no debt. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n\\t * @param reserve The reserve object\\n\\t * @return The normalized variable debt. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.variableBorrowIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the liquidity cumulative index and the variable borrow index.\\n\\t * @param reserve the reserve object\\n\\t **/\\n\\tfunction updateState(DataTypes.ReserveData storage reserve) internal {\\n\\t\\tuint256 scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\n\\t\\tuint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\n\\t\\tuint256 previousLiquidityIndex = reserve.liquidityIndex;\\n\\t\\tuint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t(uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) = _updateIndexes(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousLiquidityIndex,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\n\\t\\t_mintToTreasury(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tnewLiquidityIndex,\\n\\t\\t\\tnewVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example to accumulate\\n\\t * the flashloan fee to the reserve, and spread it between all the depositors\\n\\t * @param reserve The reserve object\\n\\t * @param totalLiquidity The total liquidity available in the reserve\\n\\t * @param amount The amount to accomulate\\n\\t **/\\n\\tfunction cumulateToLiquidityIndex(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 totalLiquidity,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tuint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\\n\\n\\t\\tuint256 result = amountToLiquidityRatio.add(WadRayMath.ray());\\n\\n\\t\\tresult = result.rayMul(reserve.liquidityIndex);\\n\\t\\trequire(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\treserve.liquidityIndex = uint128(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes a reserve\\n\\t * @param reserve The reserve object\\n\\t * @param aTokenAddress The address of the overlying atoken contract\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction init(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtTokenAddress,\\n\\t\\taddress variableDebtTokenAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external {\\n\\t\\trequire(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\\n\\n\\t\\treserve.liquidityIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.variableBorrowIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.aTokenAddress = aTokenAddress;\\n\\t\\treserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n\\t\\treserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n\\t\\treserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n\\t}\\n\\n\\tstruct UpdateInterestRatesLocalVars {\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 totalStableDebt;\\n\\t\\tuint256 newLiquidityRate;\\n\\t\\tuint256 newStableRate;\\n\\t\\tuint256 newVariableRate;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 totalVariableDebt;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n\\t * @param reserve The address of the reserve to be updated\\n\\t * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\n\\t * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n\\t **/\\n\\tfunction updateInterestRates(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\taddress aTokenAddress,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken\\n\\t) internal {\\n\\t\\tUpdateInterestRatesLocalVars memory vars;\\n\\n\\t\\tvars.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n\\n\\t\\t(vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(vars.stableDebtTokenAddress)\\n\\t\\t\\t.getTotalSupplyAndAvgRate();\\n\\n\\t\\t//calculates the total variable debt locally using the scaled total supply instead\\n\\t\\t//of totalSupply(), as it's noticeably cheaper. Also, the index has been\\n\\t\\t//updated by the previous updateState() call\\n\\t\\tvars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply().rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\t(vars.newLiquidityRate, vars.newStableRate, vars.newVariableRate) = IReserveInterestRateStrategy(\\n\\t\\t\\treserve.interestRateStrategyAddress\\n\\t\\t).calculateInterestRates(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\taTokenAddress,\\n\\t\\t\\t\\tliquidityAdded,\\n\\t\\t\\t\\tliquidityTaken,\\n\\t\\t\\t\\tvars.totalStableDebt,\\n\\t\\t\\t\\tvars.totalVariableDebt,\\n\\t\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\t\\treserve.configuration.getReserveFactor()\\n\\t\\t\\t);\\n\\t\\trequire(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\\n\\t\\trequire(vars.newStableRate <= type(uint128).max, Errors.RL_STABLE_BORROW_RATE_OVERFLOW);\\n\\t\\trequire(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\\n\\n\\t\\treserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\n\\t\\treserve.currentStableBorrowRate = uint128(vars.newStableRate);\\n\\t\\treserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\n\\n\\t\\temit ReserveDataUpdated(\\n\\t\\t\\treserveAddress,\\n\\t\\t\\tvars.newLiquidityRate,\\n\\t\\t\\tvars.newStableRate,\\n\\t\\t\\tvars.newVariableRate,\\n\\t\\t\\treserve.liquidityIndex,\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\t}\\n\\n\\tstruct MintToTreasuryLocalVars {\\n\\t\\tuint256 currentStableDebt;\\n\\t\\tuint256 principalStableDebt;\\n\\t\\tuint256 previousStableDebt;\\n\\t\\tuint256 currentVariableDebt;\\n\\t\\tuint256 previousVariableDebt;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 cumulatedStableInterest;\\n\\t\\tuint256 totalDebtAccrued;\\n\\t\\tuint256 amountToMint;\\n\\t\\tuint256 reserveFactor;\\n\\t\\tuint40 stableSupplyUpdatedTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\n\\t * specific asset.\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The current scaled total variable debt\\n\\t * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\n\\t * @param newLiquidityIndex The new liquidity index\\n\\t * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\n\\t **/\\n\\tfunction _mintToTreasury(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 previousVariableBorrowIndex,\\n\\t\\tuint256 newLiquidityIndex,\\n\\t\\tuint256 newVariableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal {\\n\\t\\tMintToTreasuryLocalVars memory vars;\\n\\n\\t\\tvars.reserveFactor = reserve.configuration.getReserveFactor();\\n\\n\\t\\tif (vars.reserveFactor == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t//fetching the principal, total stable debt and the avg stable rate\\n\\t\\t(\\n\\t\\t\\tvars.principalStableDebt,\\n\\t\\t\\tvars.currentStableDebt,\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp\\n\\t\\t) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\\n\\n\\t\\t//calculate the last principal variable debt\\n\\t\\tvars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\n\\n\\t\\t//calculate the new total supply after accumulation of the index\\n\\t\\tvars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\n\\n\\t\\t//calculate the stable debt until the last timestamp update\\n\\t\\tvars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp,\\n\\t\\t\\ttimestamp\\n\\t\\t);\\n\\n\\t\\tvars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\\n\\n\\t\\t//debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n\\t\\tvars.totalDebtAccrued = vars.currentVariableDebt.add(vars.currentStableDebt).sub(vars.previousVariableDebt).sub(\\n\\t\\t\\tvars.previousStableDebt\\n\\t\\t);\\n\\n\\t\\tvars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\n\\n\\t\\tif (vars.amountToMint != 0) {\\n\\t\\t\\tIAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve indexes and the timestamp of the update\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The scaled variable debt\\n\\t * @param liquidityIndex The last stored liquidity index\\n\\t * @param variableBorrowIndex The last stored variable borrow index\\n\\t **/\\n\\tfunction _updateIndexes(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal returns (uint256, uint256) {\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\n\\t\\tuint256 newLiquidityIndex = liquidityIndex;\\n\\t\\tuint256 newVariableBorrowIndex = variableBorrowIndex;\\n\\n\\t\\t//only cumulating if there is any income being produced\\n\\t\\tif (currentLiquidityRate > 0) {\\n\\t\\t\\tuint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\n\\t\\t\\tnewLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\n\\t\\t\\trequire(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\t\\treserve.liquidityIndex = uint128(newLiquidityIndex);\\n\\n\\t\\t\\t//as the liquidity rate might come only from stable rate loans, we need to ensure\\n\\t\\t\\t//that there is actual variable debt before accumulating\\n\\t\\t\\tif (scaledVariableDebt != 0) {\\n\\t\\t\\t\\tuint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\t\\t\\treserve.currentVariableBorrowRate,\\n\\t\\t\\t\\t\\ttimestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tnewVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\n\\t\\t\\t\\trequire(newVariableBorrowIndex <= type(uint128).max, Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW);\\n\\t\\t\\t\\treserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\treserve.lastUpdateTimestamp = uint40(block.timestamp);\\n\\t\\treturn (newLiquidityIndex, newVariableBorrowIndex);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa81837bda8de0f18bf4671736af3e56769b88693f0fbcf5681a46faeaba57507\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {Helpers} from \\\"../helpers/Helpers.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\\n\\tuint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\\n\\n\\t/**\\n\\t * @dev Validates a deposit action\\n\\t * @param reserve The reserve object on which the user is depositing\\n\\t * @param amount The amount to be deposited\\n\\t */\\n\\tfunction validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\\n\\t\\t(bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a withdraw action\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param amount The amount to be withdrawn\\n\\t * @param userBalance The balance of the user\\n\\t * @param reservesData The reserves state\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The addresses of the reserves\\n\\t * @param reservesCount The number of reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateWithdraw(\\n\\t\\taddress reserveAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 userBalance,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n\\n\\t\\t(bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(\\n\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\treserves,\\n\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\toracle\\n\\t\\t\\t),\\n\\t\\t\\tErrors.VL_TRANSFER_NOT_ALLOWED\\n\\t\\t);\\n\\t}\\n\\n\\tstruct ValidateBorrowLocalVars {\\n\\t\\tuint256 currentLtv;\\n\\t\\tuint256 currentLiquidationThreshold;\\n\\t\\tuint256 amountOfCollateralNeededETH;\\n\\t\\tuint256 userCollateralBalanceETH;\\n\\t\\tuint256 userBorrowBalanceETH;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 healthFactor;\\n\\t\\tbool isActive;\\n\\t\\tbool isFrozen;\\n\\t\\tbool borrowingEnabled;\\n\\t\\tbool stableRateBorrowingEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a borrow action\\n\\t * @param asset The address of the asset to borrow\\n\\t * @param reserve The reserve state from which the user is borrowing\\n\\t * @param userAddress The address of the user\\n\\t * @param amount The amount to be borrowed\\n\\t * @param amountInETH The amount to be borrowed, in ETH\\n\\t * @param interestRateMode The interest rate mode at which the user is borrowing\\n\\t * @param maxStableLoanPercent The max amount of the liquidity that can be borrowed at stable rate, in percentage\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\n\\tfunction validateBorrow(\\n\\t\\taddress asset,\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountInETH,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint256 maxStableLoanPercent,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tValidateBorrowLocalVars memory vars;\\n\\n\\t\\t(vars.isActive, vars.isFrozen, vars.borrowingEnabled, vars.stableRateBorrowingEnabled) = reserve\\n\\t\\t\\t.configuration\\n\\t\\t\\t.getFlags();\\n\\n\\t\\trequire(vars.isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!vars.isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(vars.borrowingEnabled, Errors.VL_BORROWING_NOT_ENABLED);\\n\\n\\t\\t//validate interest rate mode\\n\\t\\trequire(\\n\\t\\t\\tuint256(DataTypes.InterestRateMode.VARIABLE) == interestRateMode ||\\n\\t\\t\\t\\tuint256(DataTypes.InterestRateMode.STABLE) == interestRateMode,\\n\\t\\t\\tErrors.VL_INVALID_INTEREST_RATE_MODE_SELECTED\\n\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tvars.userCollateralBalanceETH,\\n\\t\\t\\tvars.userBorrowBalanceETH,\\n\\t\\t\\tvars.currentLtv,\\n\\t\\t\\tvars.currentLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(vars.userCollateralBalanceETH > 0, Errors.VL_COLLATERAL_BALANCE_IS_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.healthFactor > GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n\\t\\t\\tErrors.VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n\\t\\t);\\n\\n\\t\\t//add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n\\t\\tvars.amountOfCollateralNeededETH = vars.userBorrowBalanceETH.add(amountInETH).percentDiv(vars.currentLtv); //LTV is calculated in percentage\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\\n\\t\\t\\tErrors.VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Following conditions need to be met if the user is borrowing at a stable rate:\\n\\t\\t * 1. Reserve must be enabled for stable rate borrowing\\n\\t\\t * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n\\t\\t *    they are borrowing, to prevent abuses.\\n\\t\\t * 3. Users will be able to borrow only a portion of the total available liquidity\\n\\t\\t **/\\n\\n\\t\\tif (interestRateMode == uint256(DataTypes.InterestRateMode.STABLE)) {\\n\\t\\t\\t//check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n\\t\\t\\trequire(vars.stableRateBorrowingEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tamount > IERC20(reserve.aTokenAddress).balanceOf(userAddress),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\\n\\n\\t\\t\\t//calculate the max available loan size in stable rate mode as a percentage of the\\n\\t\\t\\t//available liquidity\\n\\t\\t\\tuint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(maxStableLoanPercent);\\n\\n\\t\\t\\trequire(amount <= maxLoanSizeStable, Errors.VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a repay action\\n\\t * @param reserve The reserve state from which the user is repaying\\n\\t * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\n\\t * @param onBehalfOf The address of the user msg.sender is repaying for\\n\\t * @param stableDebt The borrow balance of the user\\n\\t * @param variableDebt The borrow balance of the user\\n\\t */\\n\\tfunction validateRepay(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 amountSent,\\n\\t\\tDataTypes.InterestRateMode rateMode,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt\\n\\t) external view {\\n\\t\\tbool isActive = reserve.configuration.getActive();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(amountSent > 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(\\n\\t\\t\\t(stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\\n\\t\\t\\t\\t(variableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\\n\\t\\t\\tErrors.VL_NO_DEBT_OF_SELECTED_TYPE\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tamountSent != type(uint256).max || msg.sender == onBehalfOf,\\n\\t\\t\\tErrors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a swap of borrow rate mode.\\n\\t * @param reserve The reserve state on which the user is swapping the rate\\n\\t * @param userConfig The user reserves configuration\\n\\t * @param stableDebt The stable debt of the user\\n\\t * @param variableDebt The variable debt of the user\\n\\t * @param currentRateMode The rate mode of the borrow\\n\\t */\\n\\tfunction validateSwapRateMode(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt,\\n\\t\\tDataTypes.InterestRateMode currentRateMode\\n\\t) external view {\\n\\t\\t(bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\n\\t\\tif (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\trequire(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t} else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n\\t\\t\\trequire(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t\\t/**\\n\\t\\t\\t * user wants to swap to stable, before swapping we need to ensure that\\n\\t\\t\\t * 1. stable borrow rate is enabled on the reserve\\n\\t\\t\\t * 2. user is not trying to abuse the reserve by depositing\\n\\t\\t\\t * more collateral than he is borrowing, artificially lowering\\n\\t\\t\\t * the interest rate, borrowing at variable, and switching to stable\\n\\t\\t\\t **/\\n\\t\\t\\trequire(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tstableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trevert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a stable borrow rate rebalance action\\n\\t * @param reserve The reserve state on which the user is getting rebalanced\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param stableDebtToken The stable debt token instance\\n\\t * @param variableDebtToken The variable debt token instance\\n\\t * @param aTokenAddress The address of the aToken contract\\n\\t */\\n\\tfunction validateRebalanceStableBorrowRate(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tIERC20 stableDebtToken,\\n\\t\\tIERC20 variableDebtToken,\\n\\t\\taddress aTokenAddress\\n\\t) external view {\\n\\t\\t(bool isActive, , , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\t//if the usage ratio is below 95%, no rebalances are needed\\n\\t\\tuint256 totalDebt = stableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\\n\\t\\tuint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\\n\\t\\tuint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n\\t\\t//if the liquidity rate is below REBALANCE_UP_THRESHOLD of the max variable APR at 95% usage,\\n\\t\\t//then we allow rebalancing of the stable rate positions.\\n\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\t\\tuint256 maxVariableBorrowRate = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\n\\t\\t\\t.getMaxVariableBorrowRate();\\n\\n\\t\\trequire(\\n\\t\\t\\tusageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\\n\\t\\t\\t\\tcurrentLiquidityRate <= maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\\n\\t\\t\\tErrors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the action of setting an asset as collateral\\n\\t * @param reserve The state of the reserve that the user is enabling or disabling as collateral\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateSetUseReserveAsCollateral(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tbool useAsCollateral,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tuint256 underlyingBalance = IERC20(reserve.aTokenAddress).balanceOf(msg.sender);\\n\\n\\t\\trequire(underlyingBalance > 0, Errors.VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tuseAsCollateral ||\\n\\t\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tunderlyingBalance,\\n\\t\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\t\\treserves,\\n\\t\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\t\\toracle\\n\\t\\t\\t\\t),\\n\\t\\t\\tErrors.VL_DEPOSIT_ALREADY_IN_USE\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a flashloan action\\n\\t * @param assets The assets being flashborrowed\\n\\t * @param amounts The amounts for each asset being borrowed\\n\\t **/\\n\\tfunction validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\\n\\t\\trequire(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the liquidation action\\n\\t * @param collateralReserve The reserve data of the collateral\\n\\t * @param principalReserve The reserve data of the principal\\n\\t * @param userConfig The user configuration\\n\\t * @param userHealthFactor The user's health factor\\n\\t * @param userStableDebt Total stable debt balance of the user\\n\\t * @param userVariableDebt Total variable debt balance of the user\\n\\t **/\\n\\tfunction validateLiquidationCall(\\n\\t\\tDataTypes.ReserveData storage collateralReserve,\\n\\t\\tDataTypes.ReserveData storage principalReserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 userHealthFactor,\\n\\t\\tuint256 userStableDebt,\\n\\t\\tuint256 userVariableDebt\\n\\t) internal view returns (uint256, string memory) {\\n\\t\\tif (!collateralReserve.configuration.getActive() || !principalReserve.configuration.getActive()) {\\n\\t\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ACTIVE_RESERVE), Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\t}\\n\\n\\t\\tif (userHealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\\n\\t\\t\\t\\tErrors.LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tbool isCollateralEnabled = collateralReserve.configuration.getLiquidationThreshold() > 0 &&\\n\\t\\t\\tuserConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n\\t\\t//if collateral isn't enabled as collateral by user, it cannot be liquidated\\n\\t\\tif (!isCollateralEnabled) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\\n\\t\\t\\t\\tErrors.LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (userStableDebt == 0 && userVariableDebt == 0) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.CURRRENCY_NOT_BORROWED),\\n\\t\\t\\t\\tErrors.LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates an aToken transfer\\n\\t * @param from The user from which the aTokens are being transferred\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateTransfer(\\n\\t\\taddress from,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view {\\n\\t\\t(, , , , uint256 healthFactor) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tfrom,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(healthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD, Errors.VL_TRANSFER_NOT_ALLOWED);\\n\\t}\\n}\\n\",\"keccak256\":\"0x739491574158b295d9a84aead89bde41c6158e599f5a762361fae4a1faa8da57\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\n\\t/// @dev Ignoring leap years\\n\\tuint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate linearly accumulated during the timeDelta, in ray\\n\\t **/\\n\\n\\tfunction calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\treturn (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest using a compounded interest rate formula\\n\\t * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n\\t *\\n\\t *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n\\t *\\n\\t * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n\\t * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n\\t *\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate compounded during the timeDelta, in ray\\n\\t **/\\n\\tfunction calculateCompoundedInterest(\\n\\t\\tuint256 rate,\\n\\t\\tuint40 lastUpdateTimestamp,\\n\\t\\tuint256 currentTimestamp\\n\\t) internal pure returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\tif (exp == 0) {\\n\\t\\t\\treturn WadRayMath.ray();\\n\\t\\t}\\n\\n\\t\\tuint256 expMinusOne = exp - 1;\\n\\n\\t\\tuint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n\\t\\tuint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n\\t\\tuint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n\\t\\tuint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n\\t\\tuint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n\\t\\tuint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n\\t\\treturn WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n\\t * @param rate The interest rate (in ray)\\n\\t * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n\\t **/\\n\\tfunction calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\treturn calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n\\t}\\n}\\n\",\"keccak256\":\"0x728dec21d8ebdb00ed3324e9822f99f3176a782b04551457a0c570c35a6f45f3\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n\\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n\\t/**\\n\\t * @dev Executes a percentage multiplication\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The percentage of value\\n\\t **/\\n\\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\tif (value == 0 || percentage == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a percentage division\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The value divided the percentage\\n\\t **/\\n\\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfPercentage = percentage / 2;\\n\\n\\t\\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4786d694d972a46d5f573846ebd5f98a026117e5bce85c834a37b158ff53b6f8\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant halfWAD = WAD / 2;\\n\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant halfRAY = RAY / 2;\\n\\n\\tuint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n\\t/**\\n\\t * @return One ray, 1e27\\n\\t **/\\n\\tfunction ray() internal pure returns (uint256) {\\n\\t\\treturn RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return One wad, 1e18\\n\\t **/\\n\\n\\tfunction wad() internal pure returns (uint256) {\\n\\t\\treturn WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e27/2\\n\\t **/\\n\\tfunction halfRay() internal pure returns (uint256) {\\n\\t\\treturn halfRAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e18/2\\n\\t **/\\n\\tfunction halfWad() internal pure returns (uint256) {\\n\\t\\treturn halfWAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a*b, in wad\\n\\t **/\\n\\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfWAD) / WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a/b, in wad\\n\\t **/\\n\\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * WAD + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a*b, in ray\\n\\t **/\\n\\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfRAY) / RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a/b, in ray\\n\\t **/\\n\\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * RAY + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Casts ray down to wad\\n\\t * @param a Ray\\n\\t * @return a casted to wad, rounded half up to the nearest wad\\n\\t **/\\n\\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\t\\tuint256 result = halfRatio + a;\\n\\t\\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n\\t\\treturn result / WAD_RAY_RATIO;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts wad up to ray\\n\\t * @param a Wad\\n\\t * @return a converted in ray\\n\\t **/\\n\\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 result = a * WAD_RAY_RATIO;\\n\\t\\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0xde61bc24a6eddf507673b7d09f917098b985ff38db433153e96437764415e138\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50615c4080620000256000396000f3fe608060405234801561001057600080fd5b506004361061020a5760003560e01c8063ae507f9c1161012a578063d1946dbc116100bd578063e8eda9df1161008c578063f5a1f5b411610071578063f5a1f5b414610637578063f8119d511461064a578063fe65acfe1461065257600080fd5b8063e8eda9df14610611578063f187186c1461062457600080fd5b8063d1946dbc146105ce578063d5ed3933146105e3578063db3e3461146105f6578063e82fec2f1461060957600080fd5b8063c44b11f7116100f9578063c44b11f714610553578063c4d66de814610595578063cd112382146105a8578063d15e0053146105bb57600080fd5b8063ae507f9c146104da578063b8d29276146104ed578063bedb86fb14610500578063bf92857c1461051357600080fd5b80635c975abb116101a25780638da5cb5b116101715780638da5cb5b1461047657806394ba89a2146104a1578063a415bcad146104b4578063ab9c4b5d146104c757600080fd5b80635c975abb1461043257806369328dec146104485780637a708e921461045b5780638afaff021461046e57600080fd5b8063386497fd116101de578063386497fd146103a85780634417a583146103bb578063573ade811461040c5780635a3b74b91461041f57600080fd5b8062a718a91461020f578063074b2e43146102245780631d2118f91461023b57806335ea6a751461024e575b600080fd5b61022261021d366004615036565b610663565b005b603b545b6040519081526020015b60405180910390f35b61022261024936600461509e565b610937565b61039b61025c3660046150d7565b604080516101a08101825260006101808201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152506001600160a01b0390811660009081526035602090815260409182902082516101a08101845281546101808201908152815260018201546001600160801b0380821694830194909452600160801b908190048416948201949094526002820154808416606083015284900483166080820152600382015492831660a08201529290910464ffffffffff1660c08301526004810154831660e0830152600581015483166101008301526006810154831661012083015260070154918216610140820152600160a01b90910460ff1661016082015290565b60405161023291906150f4565b6102286103b63660046150d7565b610970565b6103fd6103c93660046150d7565b60408051602080820183526000918290526001600160a01b0393909316815260368352819020815192830190915254815290565b60405190518152602001610232565b61022861041a366004615202565b610997565b61022261042d36600461524c565b610d12565b60395460ff166040519015158152602001610232565b61022861045636600461527a565b610efd565b6102226104693660046152bc565b611265565b610228600281565b603e54610489906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b6102226104af36600461531f565b611391565b6102226104c236600461535d565b611713565b6102226104d5366004615423565b611793565b6102226104e836600461551d565b611f22565b6102226104fb36600461531f565b61204b565b61022261050e36600461556e565b61206f565b6105266105213660046150d7565b6120e9565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610232565b6103fd6105613660046150d7565b60408051602080820183526000918290526001600160a01b0393909316815260358352819020815192830190915254815290565b6102226105a33660046150d7565b6121d6565b6102226105b636600461509e565b6122d4565b6102286105c93660046150d7565b61256f565b6105d6612590565b604051610232919061558b565b6102226105f13660046155d8565b612647565b603d54610489906001600160a01b031681565b603a54610228565b61022261061f36600461551d565b61289c565b6102226106323660046150d7565b612b54565b6102226106453660046150d7565b612c12565b603c54610228565b6034546001600160a01b0316610489565b61066b612c77565b603454604080517f712d917100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163712d91719160048083019260209291908290030181865afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f2919061563d565b90506000603460009054906101000a90046001600160a01b03166001600160a01b0316635afaf0186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061563d565b90506001600160a01b0381166107805750335b6040516001600160a01b038881166024830152878116604483015286811660648301526084820186905284151560a483015282811660c4830152600091829185169060e40160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3c42879700000000000000000000000000000000000000000000000000000000179052516108289190615686565b600060405180830381855af49150503d8060008114610863576040519150601f19603f3d011682016040523d82523d6000602084013e610868565b606091505b5091509150816040518060400160405280600281526020017f3233000000000000000000000000000000000000000000000000000000000000815250906108cb5760405162461bcd60e51b81526004016108c291906156a2565b60405180910390fd5b50600080828060200190518101906108e391906156eb565b9150915081600014816040516020016108fc9190615686565b604051602081830303815290604052906109295760405162461bcd60e51b81526004016108c291906156a2565b505050505050505050505050565b61093f612cd0565b6001600160a01b03918216600090815260356020526040902060070180546001600160a01b03191691909216179055565b6001600160a01b038116600090815260356020526040812061099190612db4565b92915050565b60006109a1612c77565b6001600160a01b038516600090815260356020526040812090806109c58584612e26565b9150915060008660028111156109dd576109dd6157a4565b6040517ffa0c214900000000000000000000000000000000000000000000000000000000815290915073f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE9063fa0c214990610a3a9087908c9086908c908a908a906004016157dc565b60006040518083038186803b158015610a5257600080fd5b505af4158015610a66573d6000803e3d6000fd5b506000925060019150610a769050565b826002811115610a8857610a886157a4565b14610a935782610a95565b835b905080891015610aa25750875b610aab85612f16565b6001826002811115610abf57610abf6157a4565b1415610b32576005850154604051632770a7eb60e21b81526001600160a01b0389811660048301526024820184905290911690639dc29fac90604401600060405180830381600087803b158015610b1557600080fd5b505af1158015610b29573d6000803e3d6000fd5b50505050610bb5565b60068501546001860154604051637a94c56560e11b81526001600160a01b038a8116600483015260248201859052600160801b9092046001600160801b0316604482015291169063f5298aca90606401600060405180830381600087803b158015610b9c57600080fd5b505af1158015610bb0573d6000803e3d6000fd5b505050505b60048501546001600160a01b0316610bd1868c83856000612fd4565b610be582610bdf878761340c565b90613418565b610c1d5760078601546001600160a01b0389166000908152603660205260408120610c1d929091600160a01b90910460ff1690613424565b610c326001600160a01b038c1633838561349a565b6040517f88dd91a1000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b038216906388dd91a190604401600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050336001600160a01b0316886001600160a01b03168c6001600160a01b03167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa85604051610cfa91815260200190565b60405180910390a4509450505050505b949350505050565b610d1a612c77565b6001600160a01b03808316600090815260356020818152604080842033855260368352938190206038546034548351631f94a27560e31b81529351969773f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE97635fa297e5978a978d978d9792969295603795939493169263fca513a8926004808401939192918290030181865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd1919061563d565b6040516001600160e01b031960e08b901b16815260048101989098526001600160a01b03968716602489015294151560448801526064870193909352608486019190915260a485015260c48401521660e48201526101040160006040518083038186803b158015610e4157600080fd5b505af4158015610e55573d6000803e3d6000fd5b505050506007810154336000908152603660205260409020610e8191600160a01b900460ff1684613528565b8115610ec15760405133906001600160a01b038516907e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f290600090a3505050565b60405133906001600160a01b038516907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b505050565b6000610f07612c77565b6001600160a01b0384811660009081526035602052604080822060048082015492516370a0823160e01b81523391810191909152909391909116919082906370a0823190602401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f919061581d565b905085600019811415610f9f5750805b73f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE63d09db04a898385603560366000336001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f919061563d565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152602481019790975260448701959095526064860193909352608485019190915260a484015260c483015290911660e48201526101040160006040518083038186803b1580156110d157600080fd5b505af41580156110e5573d6000803e3d6000fd5b505050506110f284612f16565b611100848985600085612fd4565b8181141561116a576007840154336000908152603660205260408120611133929091600160a01b90910460ff1690613528565b60405133906001600160a01b038a16907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b60018401546040517fd7020d0a0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038881166024830152604482018490526001600160801b0390921660648201529084169063d7020d0a90608401600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b0316896001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f78460405161125091815260200190565b60405180910390a493505050505b9392505050565b61126d612cd0565b60408051808201909152600281527f373800000000000000000000000000000000000000000000000000000000000060208201526001600160a01b0386163b6112c95760405162461bcd60e51b81526004016108c291906156a2565b506001600160a01b038581166000908152603560205260409081902090517f2b33897c0000000000000000000000000000000000000000000000000000000081526004810191909152858216602482015284821660448201528382166064820152908216608482015273cEedE471B51deF8Cf93A25bb670F2cc38339481f90632b33897c9060a40160006040518083038186803b15801561136957600080fd5b505af415801561137d573d6000803e3d6000fd5b5050505061138a856135a3565b5050505050565b611399612c77565b6001600160a01b038216600090815260356020526040812090806113bd3384612e26565b9150915060008460028111156113d5576113d56157a4565b336000908152603660205260409081902090517fa8695b1d00000000000000000000000000000000000000000000000000000000815291925073f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE9163a8695b1d9161143f91889190889088908890600401615836565b60006040518083038186803b15801561145757600080fd5b505af415801561146b573d6000803e3d6000fd5b5050505061147884612f16565b600181600281111561148c5761148c6157a4565b1415611597576005840154604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156114e057600080fd5b505af11580156114f4573d6000803e3d6000fd5b505050506006840154600185015460405163b3f1c93d60e01b81523360048201819052602482015260448101869052600160801b9091046001600160801b031660648201526001600160a01b039091169063b3f1c93d906084016020604051808303816000875af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611591919061586a565b506116ad565b60068401546001850154604051637a94c56560e11b815233600482015260248101859052600160801b9091046001600160801b031660448201526001600160a01b039091169063f5298aca90606401600060405180830381600087803b15801561160057600080fd5b505af1158015611614573d6000803e3d6000fd5b505050506005840154600385015460405163b3f1c93d60e01b815233600482018190526024820152604481018590526001600160801b0390911660648201526001600160a01b039091169063b3f1c93d906084016020604051808303816000875af1158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab919061586a565b505b60048401546116cb90859088906001600160a01b0316600080612fd4565b60405185815233906001600160a01b038816907fea368a40e9570069bb8e6511d668293ad2e1f03b0d982431fd223de9f3b70ca69060200160405180910390a3505050505050565b61171b612c77565b6001600160a01b038086166000818152603560209081526040918290208251610100810184529384523391840191909152848416918301919091526060820187905260808201869052600481015490921660a082015261ffff841660c0820152600160e082015261178b906136ea565b505050505050565b61179b612c77565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526118518b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613c7892505050565b60008a67ffffffffffffffff81111561186c5761186c6156d5565b604051908082528060200260200182016040528015611895578160200160208202803683370190505b50905060008b67ffffffffffffffff8111156118b3576118b36156d5565b6040519080825280602002602001820160405280156118dc578160200160208202803683370190505b506001600160a01b038f1684526000604085015290505b60408301518c1115611ace57603560008e8e866040015181811061191957611919615887565b905060200201602081019061192e91906150d7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160009054906101000a90046001600160a01b03168284604001518151811061197b5761197b615887565b60200260200101906001600160a01b031690816001600160a01b0316815250506119d86127106119d2603b548e8e88604001518181106119bd576119bd615887565b90506020020135613cd190919063ffffffff16565b90613cdd565b818460400151815181106119ee576119ee615887565b60200260200101818152505081836040015181518110611a1057611a10615887565b60200260200101516001600160a01b0316634efecaa58f8d8d8760400151818110611a3d57611a3d615887565b6040516001600160e01b031960e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af1158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab5919061581d565b5060408301805190611ac6826158b3565b9052506118f3565b82600001516001600160a01b031663920f5c848e8e8e8e86338d8d6040518963ffffffff1660e01b8152600401611b0c989796959493929190615932565b6020604051808303816000875af1158015611b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4f919061586a565b6040518060400160405280600281526020017f363600000000000000000000000000000000000000000000000000000000000081525090611ba35760405162461bcd60e51b81526004016108c291906156a2565b50600060408401525b60408301518c1115611f12578c8c8460400151818110611bce57611bce615887565b9050602002016020810190611be391906150d7565b6001600160a01b0316606084015260408301518b908b90818110611c0957611c09615887565b905060200201358360a001818152505080836040015181518110611c2f57611c2f615887565b60200260200101518360c001818152505081836040015181518110611c5657611c56615887565b60209081029190910101516001600160a01b0316608084015260c083015160a0840151611c829161340c565b60e0840152600089898560400151818110611c9f57611c9f615887565b905060200201356002811115611cb757611cb76157a4565b6002811115611cc857611cc86157a4565b1415611deb5760608301516001600160a01b03166000908152603560205260409020611cf390612f16565b611d8483608001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5c919061581d565b60c085015160608601516001600160a01b031660009081526035602052604090209190613ce9565b6060830151608084015160e08501516001600160a01b0383166000908152603560205260408120611dba94909390929091612fd4565b611de68e84608001518560e0015186606001516001600160a01b031661349a909392919063ffffffff16565b611e80565b611e8060405180610100016040528085606001516001600160a01b03168152602001336001600160a01b03168152602001896001600160a01b031681526020018560a0015181526020018b8b8760400151818110611e4b57611e4b615887565b90506020020135815260200185608001516001600160a01b031681526020018661ffff168152602001600015158152506136ea565b82606001516001600160a01b0316336001600160a01b03168f6001600160a01b03167f631042c832b07452973831137f2d73e395028b44b250dedc5abb0ee766e168ac8660a001518760c0015189604051611ef293929190928352602083019190915261ffff16604082015260600190565b60405180910390a460408301805190611f0a826158b3565b905250611bac565b5050505050505050505050505050565b611f2a612c77565b326001600160a01b03831614611f3f57600080fd5b611f4b8484848461289c565b603d546040517f03bf24e50000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063ec67ff739082906303bf24e590602401602060405180830381865afa158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda919061581d565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b03851660248201526044016020604051808303816000875af1158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a919061581d565b612053612cd0565b6001600160a01b03909116600090815260356020526040902055565b612077612cd0565b6039805460ff191682151590811790915560ff16156120bc576040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a150565b6040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a15b50565b6000806000806000806121b3876035603660008b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060200160405290816000820154815250506037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561218a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ae919061563d565b613db3565b939950919750909450925090506121cb8686846142dc565b935091939550919395565b60015460029060ff16806121e95750303b155b806121f5575060005481115b6122675760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a656400000000000000000000000000000000000060648201526084016108c2565b60015460ff16158015612286576001805460ff19168117905560008290555b603480546001600160a01b0385166001600160a01b0319918216179091556109c4603a556009603b556080603c55603e8054909116321790558015610ef8576001805460ff19169055505050565b6122dc612c77565b6001600160a01b038281166000908152603560205260408082206005810154600682015460048084015494516370a0823160e01b815288881691810191909152929591821694908216939091169184906370a0823190602401602060405180830381865afa158015612352573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612376919061581d565b6040517f548cad09000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b03808a166024830152808716604483015280861660648301528416608482015290915073f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE9063548cad099060a40160006040518083038186803b15801561240457600080fd5b505af4158015612418573d6000803e3d6000fd5b5050505061242585612f16565b604051632770a7eb60e21b81526001600160a01b03878116600483015260248201839052851690639dc29fac90604401600060405180830381600087803b15801561246f57600080fd5b505af1158015612483573d6000803e3d6000fd5b50505050600385015460405163b3f1c93d60e01b81526001600160a01b03888116600483018190526024830152604482018490526001600160801b0390921660648201529085169063b3f1c93d906084016020604051808303816000875af11580156124f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612517919061586a565b50612526858884600080612fd4565b856001600160a01b0316876001600160a01b03167f9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f530060405160405180910390a350505050505050565b6001600160a01b038116600090815260356020526040812061099190614310565b6060600060385467ffffffffffffffff8111156125af576125af6156d5565b6040519080825280602002602001820160405280156125d8578160200160208202803683370190505b50905060005b6038548110156126415760008181526037602052604090205482516001600160a01b039091169083908390811061261757612617615887565b6001600160a01b039092166020928302919091019091015280612639816158b3565b9150506125de565b50919050565b61264f612c77565b6001600160a01b03868116600090815260356020908152604091829020600401548251808401909352600283527f36330000000000000000000000000000000000000000000000000000000000009183019190915290911633146126c65760405162461bcd60e51b81526004016108c291906156a2565b5061277385603560366000896001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e919061563d565b61436c565b6001600160a01b03868116600090815260356020526040902060070154600160a01b900460ff169085811690871614612893576127b08385613418565b61281c576001600160a01b0386166000908152603660205260408120906127da9082908490613528565b866001600160a01b0316886001600160a01b03167f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd60405160405180910390a3505b8115801561282957508315155b15612893576001600160a01b038516600090815260366020526040902061285281836001613528565b856001600160a01b0316886001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a3505b50505050505050565b6128a4612c77565b6001600160a01b0384166000908152603560205260409081902090517f0eca322b000000000000000000000000000000000000000000000000000000008152600481018290526024810185905273f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE90630eca322b9060440160006040518083038186803b15801561292857600080fd5b505af415801561293c573d6000803e3d6000fd5b5050505060048101546001600160a01b031661295782612f16565b612965828783886000612fd4565b61297a6001600160a01b03871633838861349a565b6040516370a0823160e01b81526001600160a01b0385811660048301528216906370a0823190602401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e4919061581d565b612a5a5760078201546001600160a01b0385166000908152603660205260409020612a1a91600160a01b900460ff166001613528565b836001600160a01b0316866001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b60018201546040517f156e29f60000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018890526001600160801b0390921660448201529082169063156e29f6906064016020604051808303816000875af1158015612ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612afc919061586a565b50604080513381526020810187905261ffff8516916001600160a01b0380881692908a16917fde6857219544bb5b7746f48ed30be6386fefc61b2f864cacf559893bf50fd951910160405180910390a4505050505050565b603e546001600160a01b03163314612b975760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016108c2565b603d546001600160a01b031615612bf05760405162461bcd60e51b815260206004820152601560248201527f4c657665726167657220416c726561647920536574000000000000000000000060448201526064016108c2565b603d80546001600160a01b0319166001600160a01b0392909216919091179055565b603e546001600160a01b03163314612c555760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016108c2565b603e80546001600160a01b0319166001600160a01b0392909216919091179055565b60395460408051808201909152600281527f363400000000000000000000000000000000000000000000000000000000000060208201529060ff16156120e65760405162461bcd60e51b81526004016108c291906156a2565b603454604080517f85c858b1000000000000000000000000000000000000000000000000000000008152905133926001600160a01b0316916385c858b19160048083019260209291908290030181865afa158015612d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d56919061563d565b6001600160a01b0316146040518060400160405280600281526020017f3237000000000000000000000000000000000000000000000000000000000000815250906120e65760405162461bcd60e51b81526004016108c291906156a2565b600381015460009064ffffffffff600160801b9091048116904216811415612def57505060010154600160801b90046001600160801b031690565b60018301546002840154600091610d0a916001600160801b03600160801b92839004811692612e20920416856143fe565b9061440b565b60058101546040516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a0823190602401602060405180830381865afa158015612e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9a919061581d565b60068401546040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015612ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0a919061581d565b915091505b9250929050565b60068101546040805163b1bf962d60e01b815290516000926001600160a01b03169163b1bf962d9160048083019260209291908290030181865afa158015612f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f86919061581d565b60018301546003840154919250600160801b8082046001600160801b03908116939216910464ffffffffff16600080612fc287878688876144c6565b9150915061289387878785858861465e565b61302560405180610100016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60058601546001600160a01b0316808252604080517ff731e9be000000000000000000000000000000000000000000000000000000008152815163f731e9be926004808401939192918290030181865afa158015613087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ab9190615a18565b60c083015260408083019190915260018701546006880154825163b1bf962d60e01b8152925161314193600160801b9093046001600160801b0316926001600160a01b039092169163b1bf962d9160048083019260209291908290030181865afa15801561311d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e20919061581d565b60e082018190526007870154604083015160c08401516001600160a01b03909216926329db497d92899289928992899291906131858f5461ffff60409190911c1690565b6040516001600160e01b031960e08b901b1681526001600160a01b03988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260c483015260e482015261010401606060405180830381865afa1580156131f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321b9190615a3c565b60a084015260808301526060820181905260408051808201909152600281527f35330000000000000000000000000000000000000000000000000000000000006020820152906001600160801b0310156132885760405162461bcd60e51b81526004016108c291906156a2565b50608081015160408051808201909152600281527f35350000000000000000000000000000000000000000000000000000000000006020820152906001600160801b0310156132ea5760405162461bcd60e51b81526004016108c291906156a2565b5060a081015160408051808201909152600281527f35340000000000000000000000000000000000000000000000000000000000006020820152906001600160801b03101561334c5760405162461bcd60e51b81526004016108c291906156a2565b5060608181015160808084015160038a0180546fffffffffffffffffffffffffffffffff19166001600160801b038084169190911790915560a080870151828616600160801b82851681029190911760028f015560018e015460408051988952602089019690965294870191909152838316968601969096529490910416908201526001600160a01b038716917f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a910160405180910390a2505050505050565b600061125e8284615a6a565b600061125e8284615a82565b604080518082019091526002815261373760f01b60208201526080831061345e5760405162461bcd60e51b81526004016108c291906156a2565b5061346a826002615a99565b81613476576000613479565b60015b60ff16901b613489836002615a99565b8454600190911b1916179092555050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613522908590614893565b50505050565b604080518082019091526002815261373760f01b6020820152608083106135625760405162461bcd60e51b81526004016108c291906156a2565b5061356e826002615a99565b613579906001615a6a565b81613585576000613588565b60015b60ff16901b613598836002615a99565b613489906001615a6a565b603854603c5460408051808201909152600281527f363500000000000000000000000000000000000000000000000000000000000060208201529082106135fd5760405162461bcd60e51b81526004016108c291906156a2565b506001600160a01b038216600090815260356020526040812060070154600160a01b900460ff1615158061366657506000805260376020527fa0a618d80eda9243166be83cb7421d97e9dab6ddddd3c70ac7a6b4440256e8e7546001600160a01b038481169116145b905080610ef8576001600160a01b038316600081815260356020908152604080832060070180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b60ff8916021790558583526037909152902080546001600160a01b03191690911790556136e2826001615a6a565b603855505050565b80516001600160a01b0390811660009081526035602090815260408083208186015185168452603683528184206034548351631f94a27560e31b81529351929691959491169263fca513a892600480830193928290030181865afa158015613756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377a919061563d565b83549091506000906138139060301c60ff1661379790600a615b9c565b6060870151875160405163b3596f0760e01b81526001600160a01b0391821660048201526119d2929187169063b3596f0790602401602060405180830381865afa1580156137e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380d919061581d565b90613cd1565b8551604080880151606089015160808a0151603a5460385494517f721a92f90000000000000000000000000000000000000000000000000000000081526001600160a01b039687166004820152602481018c9052938616604485015260648401929092526084830186905260a483015260c4820152603560e48201526101048101879052603761012482015261014481019190915290841661016482015290915073f275d517B46A9e8C2FB246D03EB8411aFAD4aaAE9063721a92f9906101840160006040518083038186803b1580156138ec57600080fd5b505af4158015613900573d6000803e3d6000fd5b5050505061390d84612f16565b600080600187608001516002811115613928576139286157a4565b6002811115613939576139396157a4565b14156139ee576003860154600587015460208901516040808b015160608c0151915163b3f1c93d60e01b81526001600160a01b039384166004820152908316602482015260448101919091526001600160801b03909316606484018190529450169063b3f1c93d906084016020604051808303816000875af11580156139c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e7919061586a565b9050613a99565b600686015460208801516040808a015160608b015160018b0154925163b3f1c93d60e01b81526001600160a01b03948516600482015291841660248301526044820152600160801b9091046001600160801b0316606482015291169063b3f1c93d906084016020604051808303816000875af1158015613a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a96919061586a565b90505b8015613abb576007860154613abb908690600160a01b900460ff166001613424565b613aea87600001518860a0015160008a60e00151613ada576000613ae0565b8a606001515b8a93929190612fd4565b8660e0015115613b925760a0870151602088015160608901516040517f4efecaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201526024810191909152911690634efecaa5906044016020604051808303816000875af1158015613b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b90919061581d565b505b8660c0015161ffff1687604001516001600160a01b031688600001516001600160a01b03167fc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b8a602001518b606001518c6080015160016002811115613bfa57613bfa6157a4565b8e608001516002811115613c1057613c106157a4565b6002811115613c2157613c216157a4565b14613c405760028d0154600160801b90046001600160801b0316613c42565b885b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a450505050505050565b80518251146040518060400160405280600281526020017f373300000000000000000000000000000000000000000000000000000000000081525090610ef85760405162461bcd60e51b81526004016108c291906156a2565b600061125e8284615a99565b600061125e8284615ba8565b6000613d06613cf784614978565b613d0084614978565b906149db565b90506000613d20826b033b2e3c9fd0803ce800000061340c565b6001860154909150613d3c9082906001600160801b031661440b565b604080518082019091526002815261353160f01b60208201529091506001600160801b03821115613d805760405162461bcd60e51b81526004016108c291906156a2565b5060019490940180546fffffffffffffffffffffffffffffffff19166001600160801b0390951694909417909355505050565b6000806000806000613e58604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b8951613e775760008060008060001995509550955095509550506142ce565b600060e08201525b878160e00151101561422d5760e0810151613e9b908b90614ab1565b613ea457614215565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d90529020613f01815461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b506080860181905260c08601929092525060a0840191909152613f2590600a615b9c565b60208301526101e082015160405163b3596f0760e01b81526001600160a01b0391821660048201529089169063b3596f0790602401602060405180830381865afa158015613f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f9b919061581d565b825260c082015115801590613fbb575060e0820151613fbb908c90614b0c565b156140d9578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b815260040161401291906001600160a01b0391909116815260200190565b602060405180830381865afa15801561402f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614053919061581d565b604083018190526020830151835160009261407292916119d291613cd1565b610120840151909150614085908261340c565b61012084015260a08301516140ab9061409f908390613cd1565b6101608501519061340c565b61016084015260c08301516140d1906140c5908390613cd1565b6101808501519061340c565b610180840152505b60e08201516140e9908c90614b72565b156142135760058101546040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401602060405180830381865afa15801561413a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415e919061581d565b606083015260068101546040516370a0823160e01b81526001600160a01b038f811660048301526141e09216906370a0823190602401602060405180830381865afa1580156141b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d5919061581d565b60608401519061340c565b606083018190526020830151835161420c9261420092916119d291613cd1565b6101408401519061340c565b6101408301525b505b60e08101805190614225826158b3565b905250613e7f565b600081610120015111614241576000614256565b61012081015161016082015161425691613cdd565b61016082015261012081015161426d576000614282565b61012081015161018082015161428291613cdd565b610180820181905261012082015161014083015161429f92614bbd565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b6000806142e98584614be1565b9050838110156142fd57600091505061125e565b6143078185613418565b95945050505050565b600381015460009064ffffffffff600160801b9091048116904216811415614344575050600101546001600160801b031690565b60018301546002840154600091610d0a916001600160801b0391821691612e20911685614c6a565b60408051602081019091528454815260009061438e9088908890878787613db3565b945050505050670de0b6b3a76400008110156040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906143f45760405162461bcd60e51b81526004016108c291906156a2565b5050505050505050565b600061125e838342614caf565b6000821580614418575081155b1561442557506000610991565b8161443d60026b033b2e3c9fd0803ce8000000615ba8565b61444990600019615a82565b6144539190615ba8565b83111560405180604001604052806002815260200161068760f31b8152509061448f5760405162461bcd60e51b81526004016108c291906156a2565b506b033b2e3c9fd0803ce80000006144a8600282615ba8565b6144b28486615a99565b6144bc9190615a6a565b61125e9190615ba8565b600285015460009081906001600160801b0316858582156146185760006144ed8488614c6a565b90506144f9818a61440b565b604080518082019091526002815261353160f01b60208201529093506001600160801b0384111561453d5760405162461bcd60e51b81526004016108c291906156a2565b5060018b0180546fffffffffffffffffffffffffffffffff19166001600160801b03851617905589156146165760028b015460009061458c90600160801b90046001600160801b0316896143fe565b9050614598818a61440b565b60408051808201909152600281527f353200000000000000000000000000000000000000000000000000000000000060208201529093506001600160801b038411156145f75760405162461bcd60e51b81526004016108c291906156a2565b505060018b0180546001600160801b03808516600160801b0291161790555b505b60039990990180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff16600160801b4264ffffffffff1602179055989650505050505050565b6146c260405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff1681525090565b865460401c61ffff1661012082018190526146dd575061178b565b8660050160009054906101000a90046001600160a01b03166001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa158015614732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147569190615bca565b64ffffffffff1661014085015260a084015282526020820152614779868661440b565b6080820152614788868461440b565b606082015260a08101516101408201516147aa919064ffffffffff8516614caf565b60c0820181905260208201516147bf9161440b565b604082018190526080820151825160608401516147e49392610bdf929091839161340c565b60e082018190526101208201516147fb9190614be1565b610100820181905215612893576004878101546101008301516040517f7df5bd3b00000000000000000000000000000000000000000000000000000000815292830152602482018690526001600160a01b031690637df5bd3b90604401600060405180830381600087803b15801561487257600080fd5b505af1158015614886573d6000803e3d6000fd5b5050505050505050505050565b60006148e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dad9092919063ffffffff16565b805190915015610ef85780806020019051810190614906919061586a565b610ef85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108c2565b600080614989633b9aca0084615a99565b90508261499a633b9aca0083615ba8565b1460405180604001604052806002815260200161068760f31b815250906149d45760405162461bcd60e51b81526004016108c291906156a2565b5092915050565b604080518082019091526002815261035360f41b602082015260009082614a155760405162461bcd60e51b81526004016108c291906156a2565b506000614a23600284615ba8565b90506b033b2e3c9fd0803ce8000000614a3e82600019615a82565b614a489190615ba8565b84111560405180604001604052806002815260200161068760f31b81525090614a845760405162461bcd60e51b81526004016108c291906156a2565b508281614a9d6b033b2e3c9fd0803ce800000087615a99565b614aa79190615a6a565b610d0a9190615ba8565b60006080821060405180604001604052806002815260200161373760f01b81525090614af05760405162461bcd60e51b81526004016108c291906156a2565b50614afc826002615a99565b925190921c600316151592915050565b60006080821060405180604001604052806002815260200161373760f01b81525090614b4b5760405162461bcd60e51b81526004016108c291906156a2565b50614b57826002615a99565b614b62906001615a6a565b925190921c600116151592915050565b60006080821060405180604001604052806002815260200161373760f01b81525090614bb15760405162461bcd60e51b81526004016108c291906156a2565b50614b62826002615a99565b600082614bcd575060001961125e565b610d0a83614bdb8685614be1565b90614dbc565b6000821580614bee575081155b15614bfb57506000610991565b81614c096002612710615ba8565b614c1590600019615a82565b614c1f9190615ba8565b83111560405180604001604052806002815260200161068760f31b81525090614c5b5760405162461bcd60e51b81526004016108c291906156a2565b506127106144a8600282615ba8565b600080614c7e4264ffffffffff8516613418565b9050610d0a6b033b2e3c9fd0803ce80000006301e13380614c9f8785613cd1565b614ca99190615ba8565b9061340c565b600080614cc38364ffffffffff8616613418565b905080614cdf576b033b2e3c9fd0803ce800000091505061125e565b6000614cec600183615a82565b9050600060028311614cff576000614d0a565b614d0a600284615a82565b90506000614d1c6301e1338089615ba8565b90506000614d2a828061440b565b90506000614d38828461440b565b905060006002614d4c8461380d8a8a613cd1565b614d569190615ba8565b905060006006614d6c8461380d89818d8d613cd1565b614d769190615ba8565b9050614d9d81614ca98481614d8b8a8e613cd1565b6b033b2e3c9fd0803ce8000000614ca9565b9c9b505050505050505050505050565b6060610d0a8484600085614e76565b604080518082019091526002815261035360f41b602082015260009082614df65760405162461bcd60e51b81526004016108c291906156a2565b506000614e04600284615ba8565b9050670de0b6b3a7640000614e1b82600019615a82565b614e259190615ba8565b84111560405180604001604052806002815260200161068760f31b81525090614e615760405162461bcd60e51b81526004016108c291906156a2565b508281614a9d670de0b6b3a764000087615a99565b606082471015614eee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108c2565b600080866001600160a01b03168587604051614f0a9190615686565b60006040518083038185875af1925050503d8060008114614f47576040519150601f19603f3d011682016040523d82523d6000602084013e614f4c565b606091505b5091509150614f5d87838387614f68565b979650505050505050565b60608315614fd4578251614fcd576001600160a01b0385163b614fcd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c2565b5081610d0a565b610d0a8383815115614fe95781518083602001fd5b8060405162461bcd60e51b81526004016108c291906156a2565b6001600160a01b03811681146120e657600080fd5b803561502381615003565b919050565b80151581146120e657600080fd5b600080600080600060a0868803121561504e57600080fd5b853561505981615003565b9450602086013561506981615003565b9350604086013561507981615003565b925060608601359150608086013561509081615028565b809150509295509295909350565b600080604083850312156150b157600080fd5b82356150bc81615003565b915060208301356150cc81615003565b809150509250929050565b6000602082840312156150e957600080fd5b813561125e81615003565b81515181526101808101602083015161511860208401826001600160801b03169052565b50604083015161513360408401826001600160801b03169052565b50606083015161514e60608401826001600160801b03169052565b50608083015161516960808401826001600160801b03169052565b5060a083015161518460a08401826001600160801b03169052565b5060c083015161519d60c084018264ffffffffff169052565b5060e08301516151b860e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151909116908301526101609283015160ff16929091019190915290565b6000806000806080858703121561521857600080fd5b843561522381615003565b93506020850135925060408501359150606085013561524181615003565b939692955090935050565b6000806040838503121561525f57600080fd5b823561526a81615003565b915060208301356150cc81615028565b60008060006060848603121561528f57600080fd5b833561529a81615003565b92506020840135915060408401356152b181615003565b809150509250925092565b600080600080600060a086880312156152d457600080fd5b85356152df81615003565b945060208601356152ef81615003565b935060408601356152ff81615003565b9250606086013561530f81615003565b9150608086013561509081615003565b6000806040838503121561533257600080fd5b823561533d81615003565b946020939093013593505050565b803561ffff8116811461502357600080fd5b600080600080600060a0868803121561537557600080fd5b853561538081615003565b9450602086013593506040860135925061530f6060870161534b565b60008083601f8401126153ae57600080fd5b50813567ffffffffffffffff8111156153c657600080fd5b6020830191508360208260051b8501011115612f0f57600080fd5b60008083601f8401126153f357600080fd5b50813567ffffffffffffffff81111561540b57600080fd5b602083019150836020828501011115612f0f57600080fd5b600080600080600080600080600080600060e08c8e03121561544457600080fd5b61544d8c615018565b9a5067ffffffffffffffff8060208e0135111561546957600080fd5b6154798e60208f01358f0161539c565b909b50995060408d013581101561548f57600080fd5b61549f8e60408f01358f0161539c565b909950975060608d01358110156154b557600080fd5b6154c58e60608f01358f0161539c565b90975095506154d660808e01615018565b94508060a08e013511156154e957600080fd5b506154fa8d60a08e01358e016153e1565b909350915061550b60c08d0161534b565b90509295989b509295989b9093969950565b6000806000806080858703121561553357600080fd5b843561553e81615003565b935060208501359250604085013561555581615003565b91506155636060860161534b565b905092959194509250565b60006020828403121561558057600080fd5b813561125e81615028565b6020808252825182820181905260009190848201906040850190845b818110156155cc5783516001600160a01b0316835292840192918401916001016155a7565b50909695505050505050565b60008060008060008060c087890312156155f157600080fd5b86356155fc81615003565b9550602087013561560c81615003565b9450604087013561561c81615003565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121561564f57600080fd5b815161125e81615003565b60005b8381101561567557818101518382015260200161565d565b838111156135225750506000910152565b6000825161569881846020870161565a565b9190910192915050565b60208152600082518060208401526156c181604085016020870161565a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156156fe57600080fd5b82519150602083015167ffffffffffffffff8082111561571d57600080fd5b818501915085601f83011261573157600080fd5b815181811115615743576157436156d5565b604051601f8201601f19908116603f0116810190838211818310171561576b5761576b6156d5565b8160405282815288602084870101111561578457600080fd5b61579583602083016020880161565a565b80955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106157d857634e487b7160e01b600052602160045260246000fd5b9052565b8681526020810186905260c081016157f760408301876157ba565b6001600160a01b03851660608301528360808301528260a0830152979650505050505050565b60006020828403121561582f57600080fd5b5051919050565b600060a08201905086825285602083015284604083015283606083015261586060808301846157ba565b9695505050505050565b60006020828403121561587c57600080fd5b815161125e81615028565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156158c7576158c761589d565b5060010190565b600081518084526020808501945080840160005b838110156158fe578151875295820195908201906001016158e2565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252810188905260008960c08301825b8b81101561597557823561595881615003565b6001600160a01b0316825260209283019290910190600101615945565b5083810360208501528881527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8911156159ae57600080fd5b8860051b9150818a6020830137818101915050602081016000815260208483030160408501526159de81896158ce565b9150506159f660608401876001600160a01b03169052565b8281036080840152615a09818587615909565b9b9a5050505050505050505050565b60008060408385031215615a2b57600080fd5b505080516020909101519092909150565b600080600060608486031215615a5157600080fd5b8351925060208401519150604084015190509250925092565b60008219821115615a7d57615a7d61589d565b500190565b600082821015615a9457615a9461589d565b500390565b6000816000190483118215151615615ab357615ab361589d565b500290565b600181815b80851115615af3578160001904821115615ad957615ad961589d565b80851615615ae657918102915b93841c9390800290615abd565b509250929050565b600082615b0a57506001610991565b81615b1757506000610991565b8160018114615b2d5760028114615b3757615b53565b6001915050610991565b60ff841115615b4857615b4861589d565b50506001821b610991565b5060208310610133831016604e8410600b8410161715615b76575081810a610991565b615b808383615ab8565b8060001904821115615b9457615b9461589d565b029392505050565b600061125e8383615afb565b600082615bc557634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060808587031215615be057600080fd5b845193506020850151925060408501519150606085015164ffffffffff8116811461524157600080fdfea2646970667358221220ef3968a4482580e788624bedc57a7d56682ec8180041951ca0460165affcdedd64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020a5760003560e01c8063ae507f9c1161012a578063d1946dbc116100bd578063e8eda9df1161008c578063f5a1f5b411610071578063f5a1f5b414610637578063f8119d511461064a578063fe65acfe1461065257600080fd5b8063e8eda9df14610611578063f187186c1461062457600080fd5b8063d1946dbc146105ce578063d5ed3933146105e3578063db3e3461146105f6578063e82fec2f1461060957600080fd5b8063c44b11f7116100f9578063c44b11f714610553578063c4d66de814610595578063cd112382146105a8578063d15e0053146105bb57600080fd5b8063ae507f9c146104da578063b8d29276146104ed578063bedb86fb14610500578063bf92857c1461051357600080fd5b80635c975abb116101a25780638da5cb5b116101715780638da5cb5b1461047657806394ba89a2146104a1578063a415bcad146104b4578063ab9c4b5d146104c757600080fd5b80635c975abb1461043257806369328dec146104485780637a708e921461045b5780638afaff021461046e57600080fd5b8063386497fd116101de578063386497fd146103a85780634417a583146103bb578063573ade811461040c5780635a3b74b91461041f57600080fd5b8062a718a91461020f578063074b2e43146102245780631d2118f91461023b57806335ea6a751461024e575b600080fd5b61022261021d366004615036565b610663565b005b603b545b6040519081526020015b60405180910390f35b61022261024936600461509e565b610937565b61039b61025c3660046150d7565b604080516101a08101825260006101808201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152506001600160a01b0390811660009081526035602090815260409182902082516101a08101845281546101808201908152815260018201546001600160801b0380821694830194909452600160801b908190048416948201949094526002820154808416606083015284900483166080820152600382015492831660a08201529290910464ffffffffff1660c08301526004810154831660e0830152600581015483166101008301526006810154831661012083015260070154918216610140820152600160a01b90910460ff1661016082015290565b60405161023291906150f4565b6102286103b63660046150d7565b610970565b6103fd6103c93660046150d7565b60408051602080820183526000918290526001600160a01b0393909316815260368352819020815192830190915254815290565b60405190518152602001610232565b61022861041a366004615202565b610997565b61022261042d36600461524c565b610d12565b60395460ff166040519015158152602001610232565b61022861045636600461527a565b610efd565b6102226104693660046152bc565b611265565b610228600281565b603e54610489906001600160a01b031681565b6040516001600160a01b039091168152602001610232565b6102226104af36600461531f565b611391565b6102226104c236600461535d565b611713565b6102226104d5366004615423565b611793565b6102226104e836600461551d565b611f22565b6102226104fb36600461531f565b61204b565b61022261050e36600461556e565b61206f565b6105266105213660046150d7565b6120e9565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610232565b6103fd6105613660046150d7565b60408051602080820183526000918290526001600160a01b0393909316815260358352819020815192830190915254815290565b6102226105a33660046150d7565b6121d6565b6102226105b636600461509e565b6122d4565b6102286105c93660046150d7565b61256f565b6105d6612590565b604051610232919061558b565b6102226105f13660046155d8565b612647565b603d54610489906001600160a01b031681565b603a54610228565b61022261061f36600461551d565b61289c565b6102226106323660046150d7565b612b54565b6102226106453660046150d7565b612c12565b603c54610228565b6034546001600160a01b0316610489565b61066b612c77565b603454604080517f712d917100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163712d91719160048083019260209291908290030181865afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f2919061563d565b90506000603460009054906101000a90046001600160a01b03166001600160a01b0316635afaf0186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061563d565b90506001600160a01b0381166107805750335b6040516001600160a01b038881166024830152878116604483015286811660648301526084820186905284151560a483015282811660c4830152600091829185169060e40160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3c42879700000000000000000000000000000000000000000000000000000000179052516108289190615686565b600060405180830381855af49150503d8060008114610863576040519150601f19603f3d011682016040523d82523d6000602084013e610868565b606091505b5091509150816040518060400160405280600281526020017f3233000000000000000000000000000000000000000000000000000000000000815250906108cb5760405162461bcd60e51b81526004016108c291906156a2565b60405180910390fd5b50600080828060200190518101906108e391906156eb565b9150915081600014816040516020016108fc9190615686565b604051602081830303815290604052906109295760405162461bcd60e51b81526004016108c291906156a2565b505050505050505050505050565b61093f612cd0565b6001600160a01b03918216600090815260356020526040902060070180546001600160a01b03191691909216179055565b6001600160a01b038116600090815260356020526040812061099190612db4565b92915050565b60006109a1612c77565b6001600160a01b038516600090815260356020526040812090806109c58584612e26565b9150915060008660028111156109dd576109dd6157a4565b6040517ffa0c214900000000000000000000000000000000000000000000000000000000815290915073__$b3d62f3e31c25f3854f122e776043426c0$__9063fa0c214990610a3a9087908c9086908c908a908a906004016157dc565b60006040518083038186803b158015610a5257600080fd5b505af4158015610a66573d6000803e3d6000fd5b506000925060019150610a769050565b826002811115610a8857610a886157a4565b14610a935782610a95565b835b905080891015610aa25750875b610aab85612f16565b6001826002811115610abf57610abf6157a4565b1415610b32576005850154604051632770a7eb60e21b81526001600160a01b0389811660048301526024820184905290911690639dc29fac90604401600060405180830381600087803b158015610b1557600080fd5b505af1158015610b29573d6000803e3d6000fd5b50505050610bb5565b60068501546001860154604051637a94c56560e11b81526001600160a01b038a8116600483015260248201859052600160801b9092046001600160801b0316604482015291169063f5298aca90606401600060405180830381600087803b158015610b9c57600080fd5b505af1158015610bb0573d6000803e3d6000fd5b505050505b60048501546001600160a01b0316610bd1868c83856000612fd4565b610be582610bdf878761340c565b90613418565b610c1d5760078601546001600160a01b0389166000908152603660205260408120610c1d929091600160a01b90910460ff1690613424565b610c326001600160a01b038c1633838561349a565b6040517f88dd91a1000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b038216906388dd91a190604401600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050336001600160a01b0316886001600160a01b03168c6001600160a01b03167f4cdde6e09bb755c9a5589ebaec640bbfedff1362d4b255ebf8339782b9942faa85604051610cfa91815260200190565b60405180910390a4509450505050505b949350505050565b610d1a612c77565b6001600160a01b03808316600090815260356020818152604080842033855260368352938190206038546034548351631f94a27560e31b81529351969773__$b3d62f3e31c25f3854f122e776043426c0$__97635fa297e5978a978d978d9792969295603795939493169263fca513a8926004808401939192918290030181865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd1919061563d565b6040516001600160e01b031960e08b901b16815260048101989098526001600160a01b03968716602489015294151560448801526064870193909352608486019190915260a485015260c48401521660e48201526101040160006040518083038186803b158015610e4157600080fd5b505af4158015610e55573d6000803e3d6000fd5b505050506007810154336000908152603660205260409020610e8191600160a01b900460ff1684613528565b8115610ec15760405133906001600160a01b038516907e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f290600090a3505050565b60405133906001600160a01b038516907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b505050565b6000610f07612c77565b6001600160a01b0384811660009081526035602052604080822060048082015492516370a0823160e01b81523391810191909152909391909116919082906370a0823190602401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f919061581d565b905085600019811415610f9f5750805b73__$b3d62f3e31c25f3854f122e776043426c0$__63d09db04a898385603560366000336001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f919061563d565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152602481019790975260448701959095526064860193909352608485019190915260a484015260c483015290911660e48201526101040160006040518083038186803b1580156110d157600080fd5b505af41580156110e5573d6000803e3d6000fd5b505050506110f284612f16565b611100848985600085612fd4565b8181141561116a576007840154336000908152603660205260408120611133929091600160a01b90910460ff1690613528565b60405133906001600160a01b038a16907f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd90600090a35b60018401546040517fd7020d0a0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038881166024830152604482018490526001600160801b0390921660648201529084169063d7020d0a90608401600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b0316896001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f78460405161125091815260200190565b60405180910390a493505050505b9392505050565b61126d612cd0565b60408051808201909152600281527f373800000000000000000000000000000000000000000000000000000000000060208201526001600160a01b0386163b6112c95760405162461bcd60e51b81526004016108c291906156a2565b506001600160a01b038581166000908152603560205260409081902090517f2b33897c0000000000000000000000000000000000000000000000000000000081526004810191909152858216602482015284821660448201528382166064820152908216608482015273__$4865ec58b7c392b1ada9ac1d68ac5219d4$__90632b33897c9060a40160006040518083038186803b15801561136957600080fd5b505af415801561137d573d6000803e3d6000fd5b5050505061138a856135a3565b5050505050565b611399612c77565b6001600160a01b038216600090815260356020526040812090806113bd3384612e26565b9150915060008460028111156113d5576113d56157a4565b336000908152603660205260409081902090517fa8695b1d00000000000000000000000000000000000000000000000000000000815291925073__$b3d62f3e31c25f3854f122e776043426c0$$b3d62f3e31c25f3854f122e776043426c0$__9063548cad099060a40160006040518083038186803b15801561240457600080fd5b505af4158015612418573d6000803e3d6000fd5b5050505061242585612f16565b604051632770a7eb60e21b81526001600160a01b03878116600483015260248201839052851690639dc29fac90604401600060405180830381600087803b15801561246f57600080fd5b505af1158015612483573d6000803e3d6000fd5b50505050600385015460405163b3f1c93d60e01b81526001600160a01b03888116600483018190526024830152604482018490526001600160801b0390921660648201529085169063b3f1c93d906084016020604051808303816000875af11580156124f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612517919061586a565b50612526858884600080612fd4565b856001600160a01b0316876001600160a01b03167f9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f530060405160405180910390a350505050505050565b6001600160a01b038116600090815260356020526040812061099190614310565b6060600060385467ffffffffffffffff8111156125af576125af6156d5565b6040519080825280602002602001820160405280156125d8578160200160208202803683370190505b50905060005b6038548110156126415760008181526037602052604090205482516001600160a01b039091169083908390811061261757612617615887565b6001600160a01b039092166020928302919091019091015280612639816158b3565b9150506125de565b50919050565b61264f612c77565b6001600160a01b03868116600090815260356020908152604091829020600401548251808401909352600283527f36330000000000000000000000000000000000000000000000000000000000009183019190915290911633146126c65760405162461bcd60e51b81526004016108c291906156a2565b5061277385603560366000896001600160a01b03166001600160a01b031681526020019081526020016000206037603854603460009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e919061563d565b61436c565b6001600160a01b03868116600090815260356020526040902060070154600160a01b900460ff169085811690871614612893576127b08385613418565b61281c576001600160a01b0386166000908152603660205260408120906127da9082908490613528565b866001600160a01b0316886001600160a01b03167f44c58d81365b66dd4b1a7f36c25aa97b8c71c361ee4937adc1a00000227db5dd60405160405180910390a3505b8115801561282957508315155b15612893576001600160a01b038516600090815260366020526040902061285281836001613528565b856001600160a01b0316886001600160a01b03167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a3505b50505050505050565b6128a4612c77565b6001600160a01b0384166000908152603560205260409081902090517f0eca322b000000000000000000000000000000000000000000000000000000008152600481018290526024810185905273__$b3d62f3e31c25f3854f122e776043426c0$$b3d62f3e31c25f3854f122e776043426c0$__9063721a92f9906101840160006040518083038186803b1580156138ec57600080fd5b505af4158015613900573d6000803e3d6000fd5b5050505061390d84612f16565b600080600187608001516002811115613928576139286157a4565b6002811115613939576139396157a4565b14156139ee576003860154600587015460208901516040808b015160608c0151915163b3f1c93d60e01b81526001600160a01b039384166004820152908316602482015260448101919091526001600160801b03909316606484018190529450169063b3f1c93d906084016020604051808303816000875af11580156139c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e7919061586a565b9050613a99565b600686015460208801516040808a015160608b015160018b0154925163b3f1c93d60e01b81526001600160a01b03948516600482015291841660248301526044820152600160801b9091046001600160801b0316606482015291169063b3f1c93d906084016020604051808303816000875af1158015613a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a96919061586a565b90505b8015613abb576007860154613abb908690600160a01b900460ff166001613424565b613aea87600001518860a0015160008a60e00151613ada576000613ae0565b8a606001515b8a93929190612fd4565b8660e0015115613b925760a0870151602088015160608901516040517f4efecaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201526024810191909152911690634efecaa5906044016020604051808303816000875af1158015613b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b90919061581d565b505b8660c0015161ffff1687604001516001600160a01b031688600001516001600160a01b03167fc6a898309e823ee50bac64e45ca8adba6690e99e7841c45d754e2a38e9019d9b8a602001518b606001518c6080015160016002811115613bfa57613bfa6157a4565b8e608001516002811115613c1057613c106157a4565b6002811115613c2157613c216157a4565b14613c405760028d0154600160801b90046001600160801b0316613c42565b885b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a450505050505050565b80518251146040518060400160405280600281526020017f373300000000000000000000000000000000000000000000000000000000000081525090610ef85760405162461bcd60e51b81526004016108c291906156a2565b600061125e8284615a99565b600061125e8284615ba8565b6000613d06613cf784614978565b613d0084614978565b906149db565b90506000613d20826b033b2e3c9fd0803ce800000061340c565b6001860154909150613d3c9082906001600160801b031661440b565b604080518082019091526002815261353160f01b60208201529091506001600160801b03821115613d805760405162461bcd60e51b81526004016108c291906156a2565b5060019490940180546fffffffffffffffffffffffffffffffff19166001600160801b0390951694909417909355505050565b6000806000806000613e58604051806102400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160006001600160a01b031681526020016000151581526020016000151581525090565b8951613e775760008060008060001995509550955095509550506142ce565b600060e08201525b878160e00151101561422d5760e0810151613e9b908b90614ab1565b613ea457614215565b60e0810151600090815260208a81526040808320546001600160a01b03166101e085018190528352908d90529020613f01815461ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b506080860181905260c08601929092525060a0840191909152613f2590600a615b9c565b60208301526101e082015160405163b3596f0760e01b81526001600160a01b0391821660048201529089169063b3596f0790602401602060405180830381865afa158015613f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f9b919061581d565b825260c082015115801590613fbb575060e0820151613fbb908c90614b0c565b156140d9578060040160009054906101000a90046001600160a01b03166001600160a01b03166370a082318e6040518263ffffffff1660e01b815260040161401291906001600160a01b0391909116815260200190565b602060405180830381865afa15801561402f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614053919061581d565b604083018190526020830151835160009261407292916119d291613cd1565b610120840151909150614085908261340c565b61012084015260a08301516140ab9061409f908390613cd1565b6101608501519061340c565b61016084015260c08301516140d1906140c5908390613cd1565b6101808501519061340c565b610180840152505b60e08201516140e9908c90614b72565b156142135760058101546040516370a0823160e01b81526001600160a01b038f81166004830152909116906370a0823190602401602060405180830381865afa15801561413a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415e919061581d565b606083015260068101546040516370a0823160e01b81526001600160a01b038f811660048301526141e09216906370a0823190602401602060405180830381865afa1580156141b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d5919061581d565b60608401519061340c565b606083018190526020830151835161420c9261420092916119d291613cd1565b6101408401519061340c565b6101408301525b505b60e08101805190614225826158b3565b905250613e7f565b600081610120015111614241576000614256565b61012081015161016082015161425691613cdd565b61016082015261012081015161426d576000614282565b61012081015161018082015161428291613cdd565b610180820181905261012082015161014083015161429f92614bbd565b610100820181905261012082015161014083015161016084015161018090940151919850965091945090925090505b965096509650965096915050565b6000806142e98584614be1565b9050838110156142fd57600091505061125e565b6143078185613418565b95945050505050565b600381015460009064ffffffffff600160801b9091048116904216811415614344575050600101546001600160801b031690565b60018301546002840154600091610d0a916001600160801b0391821691612e20911685614c6a565b60408051602081019091528454815260009061438e9088908890878787613db3565b945050505050670de0b6b3a76400008110156040518060400160405280600181526020017f3600000000000000000000000000000000000000000000000000000000000000815250906143f45760405162461bcd60e51b81526004016108c291906156a2565b5050505050505050565b600061125e838342614caf565b6000821580614418575081155b1561442557506000610991565b8161443d60026b033b2e3c9fd0803ce8000000615ba8565b61444990600019615a82565b6144539190615ba8565b83111560405180604001604052806002815260200161068760f31b8152509061448f5760405162461bcd60e51b81526004016108c291906156a2565b506b033b2e3c9fd0803ce80000006144a8600282615ba8565b6144b28486615a99565b6144bc9190615a6a565b61125e9190615ba8565b600285015460009081906001600160801b0316858582156146185760006144ed8488614c6a565b90506144f9818a61440b565b604080518082019091526002815261353160f01b60208201529093506001600160801b0384111561453d5760405162461bcd60e51b81526004016108c291906156a2565b5060018b0180546fffffffffffffffffffffffffffffffff19166001600160801b03851617905589156146165760028b015460009061458c90600160801b90046001600160801b0316896143fe565b9050614598818a61440b565b60408051808201909152600281527f353200000000000000000000000000000000000000000000000000000000000060208201529093506001600160801b038411156145f75760405162461bcd60e51b81526004016108c291906156a2565b505060018b0180546001600160801b03808516600160801b0291161790555b505b60039990990180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff16600160801b4264ffffffffff1602179055989650505050505050565b6146c260405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600064ffffffffff1681525090565b865460401c61ffff1661012082018190526146dd575061178b565b8660050160009054906101000a90046001600160a01b03166001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa158015614732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147569190615bca565b64ffffffffff1661014085015260a084015282526020820152614779868661440b565b6080820152614788868461440b565b606082015260a08101516101408201516147aa919064ffffffffff8516614caf565b60c0820181905260208201516147bf9161440b565b604082018190526080820151825160608401516147e49392610bdf929091839161340c565b60e082018190526101208201516147fb9190614be1565b610100820181905215612893576004878101546101008301516040517f7df5bd3b00000000000000000000000000000000000000000000000000000000815292830152602482018690526001600160a01b031690637df5bd3b90604401600060405180830381600087803b15801561487257600080fd5b505af1158015614886573d6000803e3d6000fd5b5050505050505050505050565b60006148e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dad9092919063ffffffff16565b805190915015610ef85780806020019051810190614906919061586a565b610ef85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108c2565b600080614989633b9aca0084615a99565b90508261499a633b9aca0083615ba8565b1460405180604001604052806002815260200161068760f31b815250906149d45760405162461bcd60e51b81526004016108c291906156a2565b5092915050565b604080518082019091526002815261035360f41b602082015260009082614a155760405162461bcd60e51b81526004016108c291906156a2565b506000614a23600284615ba8565b90506b033b2e3c9fd0803ce8000000614a3e82600019615a82565b614a489190615ba8565b84111560405180604001604052806002815260200161068760f31b81525090614a845760405162461bcd60e51b81526004016108c291906156a2565b508281614a9d6b033b2e3c9fd0803ce800000087615a99565b614aa79190615a6a565b610d0a9190615ba8565b60006080821060405180604001604052806002815260200161373760f01b81525090614af05760405162461bcd60e51b81526004016108c291906156a2565b50614afc826002615a99565b925190921c600316151592915050565b60006080821060405180604001604052806002815260200161373760f01b81525090614b4b5760405162461bcd60e51b81526004016108c291906156a2565b50614b57826002615a99565b614b62906001615a6a565b925190921c600116151592915050565b60006080821060405180604001604052806002815260200161373760f01b81525090614bb15760405162461bcd60e51b81526004016108c291906156a2565b50614b62826002615a99565b600082614bcd575060001961125e565b610d0a83614bdb8685614be1565b90614dbc565b6000821580614bee575081155b15614bfb57506000610991565b81614c096002612710615ba8565b614c1590600019615a82565b614c1f9190615ba8565b83111560405180604001604052806002815260200161068760f31b81525090614c5b5760405162461bcd60e51b81526004016108c291906156a2565b506127106144a8600282615ba8565b600080614c7e4264ffffffffff8516613418565b9050610d0a6b033b2e3c9fd0803ce80000006301e13380614c9f8785613cd1565b614ca99190615ba8565b9061340c565b600080614cc38364ffffffffff8616613418565b905080614cdf576b033b2e3c9fd0803ce800000091505061125e565b6000614cec600183615a82565b9050600060028311614cff576000614d0a565b614d0a600284615a82565b90506000614d1c6301e1338089615ba8565b90506000614d2a828061440b565b90506000614d38828461440b565b905060006002614d4c8461380d8a8a613cd1565b614d569190615ba8565b905060006006614d6c8461380d89818d8d613cd1565b614d769190615ba8565b9050614d9d81614ca98481614d8b8a8e613cd1565b6b033b2e3c9fd0803ce8000000614ca9565b9c9b505050505050505050505050565b6060610d0a8484600085614e76565b604080518082019091526002815261035360f41b602082015260009082614df65760405162461bcd60e51b81526004016108c291906156a2565b506000614e04600284615ba8565b9050670de0b6b3a7640000614e1b82600019615a82565b614e259190615ba8565b84111560405180604001604052806002815260200161068760f31b81525090614e615760405162461bcd60e51b81526004016108c291906156a2565b508281614a9d670de0b6b3a764000087615a99565b606082471015614eee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108c2565b600080866001600160a01b03168587604051614f0a9190615686565b60006040518083038185875af1925050503d8060008114614f47576040519150601f19603f3d011682016040523d82523d6000602084013e614f4c565b606091505b5091509150614f5d87838387614f68565b979650505050505050565b60608315614fd4578251614fcd576001600160a01b0385163b614fcd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c2565b5081610d0a565b610d0a8383815115614fe95781518083602001fd5b8060405162461bcd60e51b81526004016108c291906156a2565b6001600160a01b03811681146120e657600080fd5b803561502381615003565b919050565b80151581146120e657600080fd5b600080600080600060a0868803121561504e57600080fd5b853561505981615003565b9450602086013561506981615003565b9350604086013561507981615003565b925060608601359150608086013561509081615028565b809150509295509295909350565b600080604083850312156150b157600080fd5b82356150bc81615003565b915060208301356150cc81615003565b809150509250929050565b6000602082840312156150e957600080fd5b813561125e81615003565b81515181526101808101602083015161511860208401826001600160801b03169052565b50604083015161513360408401826001600160801b03169052565b50606083015161514e60608401826001600160801b03169052565b50608083015161516960808401826001600160801b03169052565b5060a083015161518460a08401826001600160801b03169052565b5060c083015161519d60c084018264ffffffffff169052565b5060e08301516151b860e08401826001600160a01b03169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151909116908301526101609283015160ff16929091019190915290565b6000806000806080858703121561521857600080fd5b843561522381615003565b93506020850135925060408501359150606085013561524181615003565b939692955090935050565b6000806040838503121561525f57600080fd5b823561526a81615003565b915060208301356150cc81615028565b60008060006060848603121561528f57600080fd5b833561529a81615003565b92506020840135915060408401356152b181615003565b809150509250925092565b600080600080600060a086880312156152d457600080fd5b85356152df81615003565b945060208601356152ef81615003565b935060408601356152ff81615003565b9250606086013561530f81615003565b9150608086013561509081615003565b6000806040838503121561533257600080fd5b823561533d81615003565b946020939093013593505050565b803561ffff8116811461502357600080fd5b600080600080600060a0868803121561537557600080fd5b853561538081615003565b9450602086013593506040860135925061530f6060870161534b565b60008083601f8401126153ae57600080fd5b50813567ffffffffffffffff8111156153c657600080fd5b6020830191508360208260051b8501011115612f0f57600080fd5b60008083601f8401126153f357600080fd5b50813567ffffffffffffffff81111561540b57600080fd5b602083019150836020828501011115612f0f57600080fd5b600080600080600080600080600080600060e08c8e03121561544457600080fd5b61544d8c615018565b9a5067ffffffffffffffff8060208e0135111561546957600080fd5b6154798e60208f01358f0161539c565b909b50995060408d013581101561548f57600080fd5b61549f8e60408f01358f0161539c565b909950975060608d01358110156154b557600080fd5b6154c58e60608f01358f0161539c565b90975095506154d660808e01615018565b94508060a08e013511156154e957600080fd5b506154fa8d60a08e01358e016153e1565b909350915061550b60c08d0161534b565b90509295989b509295989b9093969950565b6000806000806080858703121561553357600080fd5b843561553e81615003565b935060208501359250604085013561555581615003565b91506155636060860161534b565b905092959194509250565b60006020828403121561558057600080fd5b813561125e81615028565b6020808252825182820181905260009190848201906040850190845b818110156155cc5783516001600160a01b0316835292840192918401916001016155a7565b50909695505050505050565b60008060008060008060c087890312156155f157600080fd5b86356155fc81615003565b9550602087013561560c81615003565b9450604087013561561c81615003565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121561564f57600080fd5b815161125e81615003565b60005b8381101561567557818101518382015260200161565d565b838111156135225750506000910152565b6000825161569881846020870161565a565b9190910192915050565b60208152600082518060208401526156c181604085016020870161565a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156156fe57600080fd5b82519150602083015167ffffffffffffffff8082111561571d57600080fd5b818501915085601f83011261573157600080fd5b815181811115615743576157436156d5565b604051601f8201601f19908116603f0116810190838211818310171561576b5761576b6156d5565b8160405282815288602084870101111561578457600080fd5b61579583602083016020880161565a565b80955050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106157d857634e487b7160e01b600052602160045260246000fd5b9052565b8681526020810186905260c081016157f760408301876157ba565b6001600160a01b03851660608301528360808301528260a0830152979650505050505050565b60006020828403121561582f57600080fd5b5051919050565b600060a08201905086825285602083015284604083015283606083015261586060808301846157ba565b9695505050505050565b60006020828403121561587c57600080fd5b815161125e81615028565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156158c7576158c761589d565b5060010190565b600081518084526020808501945080840160005b838110156158fe578151875295820195908201906001016158e2565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a0808252810188905260008960c08301825b8b81101561597557823561595881615003565b6001600160a01b0316825260209283019290910190600101615945565b5083810360208501528881527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8911156159ae57600080fd5b8860051b9150818a6020830137818101915050602081016000815260208483030160408501526159de81896158ce565b9150506159f660608401876001600160a01b03169052565b8281036080840152615a09818587615909565b9b9a5050505050505050505050565b60008060408385031215615a2b57600080fd5b505080516020909101519092909150565b600080600060608486031215615a5157600080fd5b8351925060208401519150604084015190509250925092565b60008219821115615a7d57615a7d61589d565b500190565b600082821015615a9457615a9461589d565b500390565b6000816000190483118215151615615ab357615ab361589d565b500290565b600181815b80851115615af3578160001904821115615ad957615ad961589d565b80851615615ae657918102915b93841c9390800290615abd565b509250929050565b600082615b0a57506001610991565b81615b1757506000610991565b8160018114615b2d5760028114615b3757615b53565b6001915050610991565b60ff841115615b4857615b4861589d565b50506001821b610991565b5060208310610133831016604e8410600b8410161715615b76575081810a610991565b615b808383615ab8565b8060001904821115615b9457615b9461589d565b029392505050565b600061125e8383615afb565b600082615bc557634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060808587031215615be057600080fd5b845193506020850151925060408501519150606085015164ffffffffff8116811461524157600080fdfea2646970667358221220ef3968a4482580e788624bedc57a7d56682ec8180041951ca0460165affcdedd64736f6c634300080c0033",
  "libraries": {
    "ValidationLogic": "0xf275d517B46A9e8C2FB246D03EB8411aFAD4aaAE",
    "ReserveLogic": "0xcEedE471B51deF8Cf93A25bb670F2cc38339481f"
  },
  "devdoc": {
    "author": "Aave*",
    "details": "Main point of interaction with an Aave protocol's market - Users can:   # Deposit   # Withdraw   # Borrow   # Repay   # Swap their loans between variable and stable rate   # Enable/disable their deposits as collateral rebalance stable rate borrow positions   # Liquidate positions   # Execute Flash Loans - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market - All admin functions are callable by the LendingPoolConfigurator contract defined also in the   LendingPoolAddressesProvider",
    "kind": "dev",
    "methods": {
      "FLASHLOAN_PREMIUM_TOTAL()": {
        "details": "Returns the fee on flash loans"
      },
      "MAX_NUMBER_RESERVES()": {
        "details": "Returns the maximum number of reserves supported to be listed in this LendingPool"
      },
      "MAX_STABLE_RATE_BORROW_SIZE_PERCENT()": {
        "details": "Returns the percentage of available liquidity that can be borrowed at once at stable rate"
      },
      "borrow(address,uint256,uint256,uint16,address)": {
        "details": "Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`",
        "params": {
          "amount": "The amount to be borrowed",
          "asset": "The address of the underlying asset to borrow",
          "interestRateMode": "The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
          "onBehalfOf": "Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
        }
      },
      "deposit(address,uint256,address,uint16)": {
        "details": "Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC",
        "params": {
          "amount": "The amount to be deposited",
          "asset": "The address of the underlying asset to deposit",
          "onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*"
        }
      },
      "finalizeTransfer(address,address,address,uint256,uint256,uint256)": {
        "details": "Validates and finalizes an aToken transfer - Only callable by the overlying aToken of the `asset`",
        "params": {
          "amount": "The amount being transferred/withdrawn",
          "asset": "The address of the underlying asset of the aToken",
          "balanceFromBefore": "The aToken balance of the `from` user before the transfer",
          "balanceToBefore": "The aToken balance of the `to` user before the transfer",
          "from": "The user from which the aTokens are transferred",
          "to": "The user receiving the aTokens"
        }
      },
      "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": {
        "details": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com",
        "params": {
          "amounts": "The amounts amounts being flash-borrowed",
          "assets": "The addresses of the assets being flash-borrowed",
          "modes": "Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address",
          "onBehalfOf": "The address  that will receive the debt in the case of using on `modes` 1 or 2",
          "params": "Variadic packed params to pass to the receiver as extra information",
          "receiverAddress": "The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*"
        }
      },
      "getAddressesProvider()": {
        "details": "Returns the cached LendingPoolAddressesProvider connected to this contract*"
      },
      "getConfiguration(address)": {
        "details": "Returns the configuration of the reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The configuration of the reserve*"
        }
      },
      "getReserveData(address)": {
        "details": "Returns the state and configuration of the reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getReserveNormalizedIncome(address)": {
        "details": "Returns the normalized income per unit of asset",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve's normalized income"
        }
      },
      "getReserveNormalizedVariableDebt(address)": {
        "details": "Returns the normalized variable debt per unit of asset",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve normalized variable debt"
        }
      },
      "getReservesList()": {
        "details": "Returns the list of the initialized reserves*"
      },
      "getUserAccountData(address)": {
        "details": "Returns the user account data across all the reserves",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "availableBorrowsETH": "the borrowing power left of the user",
          "currentLiquidationThreshold": "the liquidation threshold of the user",
          "healthFactor": "the current health factor of the user*",
          "ltv": "the loan to value of the user",
          "totalCollateralETH": "the total collateral in ETH of the user",
          "totalDebtETH": "the total debt in ETH of the user"
        }
      },
      "getUserConfiguration(address)": {
        "details": "Returns the configuration of the user across all the reserves",
        "params": {
          "user": "The user address"
        },
        "returns": {
          "_0": "The configuration of the user*"
        }
      },
      "initReserve(address,address,address,address,address)": {
        "details": "Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy - Only callable by the LendingPoolConfigurator contract",
        "params": {
          "aTokenAddress": "The address of the VariableDebtToken that will be assigned to the reserve",
          "asset": "The address of the underlying asset of the reserve",
          "interestRateStrategyAddress": "The address of the interest rate strategy contract*",
          "stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the LendingPool contract is added to the LendingPoolAddressesProvider of the market. - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption   on subsequent operations",
        "params": {
          "provider": "The address of the LendingPoolAddressesProvider*"
        }
      },
      "liquidationCall(address,address,address,uint256,bool)": {
        "details": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk",
        "params": {
          "collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
          "debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
          "debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
          "receiveAToken": "`true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*",
          "user": "The address of the borrower getting liquidated"
        }
      },
      "paused()": {
        "details": "Returns if the LendingPool is paused"
      },
      "rebalanceStableBorrowRate(address,address)": {
        "details": "Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough",
        "params": {
          "asset": "The address of the underlying asset borrowed",
          "user": "The address of the user to be rebalanced*"
        }
      },
      "repay(address,uint256,uint256,address)": {
        "params": {
          "amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
          "asset": "The address of the borrowed underlying asset previously borrowed",
          "onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed",
          "rateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable"
        },
        "returns": {
          "_0": "The final amount repaid*"
        }
      },
      "setConfiguration(address,uint256)": {
        "details": "Sets the configuration bitmap of the reserve as a whole - Only callable by the LendingPoolConfigurator contract",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "configuration": "The new configuration bitmap*"
        }
      },
      "setPause(bool)": {
        "details": "Set the _pause state of a reserve - Only callable by the LendingPoolConfigurator contract",
        "params": {
          "val": "`true` to pause the reserve, `false` to un-pause it"
        }
      },
      "setReserveInterestRateStrategyAddress(address,address)": {
        "details": "Updates the address of the interest rate strategy contract - Only callable by the LendingPoolConfigurator contract",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "rateStrategyAddress": "The address of the interest rate strategy contract*"
        }
      },
      "setUserUseReserveAsCollateral(address,bool)": {
        "details": "Allows depositors to enable/disable a specific deposited asset as collateral",
        "params": {
          "asset": "The address of the underlying asset deposited",
          "useAsCollateral": "`true` if the user wants to use the deposit as collateral, `false` otherwise*"
        }
      },
      "swapBorrowRateMode(address,uint256)": {
        "details": "Allows a borrower to swap his debt between stable and variable mode, or viceversa",
        "params": {
          "asset": "The address of the underlying asset borrowed",
          "rateMode": "The rate mode that the user wants to swap to*"
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC",
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        },
        "returns": {
          "_0": "The final amount withdrawn*"
        }
      }
    },
    "title": "LendingPool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "repay(address,uint256,uint256,address)": {
        "notice": "Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34830,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 34833,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 34903,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34652,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_addressesProvider",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ILendingPoolAddressesProvider)22605"
      },
      {
        "astId": 34657,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reserves",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(ReserveData)39347_storage)"
      },
      {
        "astId": 34662,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_usersConfig",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_struct(UserConfigurationMap)39353_storage)"
      },
      {
        "astId": 34666,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reservesList",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 34668,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_reservesCount",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 34670,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "57",
        "type": "t_bool"
      },
      {
        "astId": 34672,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_maxStableRateBorrowSizePercent",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 34674,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_flashLoanPremiumTotal",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 34676,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "_maxNumberOfReserves",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 30583,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "leverager",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ILeverager)22931"
      },
      {
        "astId": 30585,
        "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
        "label": "owner",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILendingPoolAddressesProvider)22605": {
        "encoding": "inplace",
        "label": "contract ILendingPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(ILeverager)22931": {
        "encoding": "inplace",
        "label": "contract ILeverager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ReserveData)39347_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)39347_storage"
      },
      "t_mapping(t_address,t_struct(UserConfigurationMap)39353_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.UserConfigurationMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UserConfigurationMap)39353_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ReserveConfigurationMap)39350_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveConfigurationMap",
        "members": [
          {
            "astId": 39349,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)39347_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 39324,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)39350_storage"
          },
          {
            "astId": 39326,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "liquidityIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 39328,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "variableBorrowIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 39330,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "currentLiquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 39332,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "currentVariableBorrowRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 39334,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "currentStableBorrowRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 39336,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "lastUpdateTimestamp",
            "offset": 16,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 39338,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "aTokenAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 39340,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "stableDebtTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 39342,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "variableDebtTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 39344,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 39346,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "id",
            "offset": 20,
            "slot": "7",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserConfigurationMap)39353_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.UserConfigurationMap",
        "members": [
          {
            "astId": 39352,
            "contract": "contracts/lending/lendingpool/LendingPool.sol:LendingPool",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}