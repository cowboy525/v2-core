{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n//solhint-disable-next-line compiler-version\npragma solidity >=0.5.0;\n\n//solhint-disable func-name-mixedcase\ninterface IUniswapV2ERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n//solhint-disable-next-line compiler-version\npragma solidity >=0.5.0;\n\n//solhint-disable func-name-mixedcase\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(\n        address to\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.12;\n\n//solhint-disable avoid-low-level-calls\n//solhint-disable reason-string\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(\n            success,\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\n        );\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.12;\n\n//solhint-disable reason-string\n\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\nlibrary UniswapV2Library {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xff),\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"443533a897cfad2762695078bf6ee9b78b4edcda64ec31e1c83066cee4c90a7e\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 997;\n        amountIn = numerator / denominator + 1;\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1]\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i]\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/dependencies/math/BConst.sol": {
      "content": "// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.12;\n\ncontract BConst {\n\tuint public constant BONE = 10 ** 18;\n\n\tuint public constant MIN_BOUND_TOKENS = 2;\n\tuint public constant MAX_BOUND_TOKENS = 8;\n\n\tuint public constant MIN_FEE = BONE / 10 ** 6;\n\tuint public constant MAX_FEE = BONE / 10;\n\tuint public constant EXIT_FEE = 0;\n\n\tuint public constant MIN_WEIGHT = BONE;\n\tuint public constant MAX_WEIGHT = BONE * 50;\n\tuint public constant MAX_TOTAL_WEIGHT = BONE * 50;\n\tuint public constant MIN_BALANCE = BONE / 10 ** 12;\n\n\tuint public constant INIT_POOL_SUPPLY = BONE * 100;\n\n\tuint public constant MIN_BPOW_BASE = 1 wei;\n\tuint public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\n\tuint public constant BPOW_PRECISION = BONE / 10 ** 10;\n\n\tuint public constant MAX_IN_RATIO = BONE / 2;\n\tuint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n}\n"
    },
    "contracts/dependencies/math/BNum.sol": {
      "content": "// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.12;\n\nimport \"./BConst.sol\";\n\ncontract BNum is BConst {\n\tfunction btoi(uint a) internal pure returns (uint) {\n\t\treturn a / BONE;\n\t}\n\n\tfunction bfloor(uint a) internal pure returns (uint) {\n\t\treturn btoi(a) * BONE;\n\t}\n\n\tfunction badd(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a + b;\n\t\trequire(c >= a, \"ERR_ADD_OVERFLOW\");\n\t\treturn c;\n\t}\n\n\tfunction bsub(uint a, uint b) internal pure returns (uint) {\n\t\t(uint c, bool flag) = bsubSign(a, b);\n\t\trequire(!flag, \"ERR_SUB_UNDERFLOW\");\n\t\treturn c;\n\t}\n\n\tfunction bsubSign(uint a, uint b) internal pure returns (uint, bool) {\n\t\tif (a >= b) {\n\t\t\treturn (a - b, false);\n\t\t} else {\n\t\t\treturn (b - a, true);\n\t\t}\n\t}\n\n\tfunction bmul(uint a, uint b) internal pure returns (uint) {\n\t\tuint c0 = a * b;\n\t\trequire(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n\t\tuint c1 = c0 + (BONE / 2);\n\t\trequire(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n\t\tuint c2 = c1 / BONE;\n\t\treturn c2;\n\t}\n\n\tfunction bdiv(uint a, uint b) internal pure returns (uint) {\n\t\trequire(b != 0, \"ERR_DIV_ZERO\");\n\t\tuint c0 = a * BONE;\n\t\trequire(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n\t\tuint c1 = c0 + (b / 2);\n\t\trequire(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n\t\tuint c2 = c1 / b;\n\t\treturn c2;\n\t}\n\n\t// DSMath.wpow\n\tfunction bpowi(uint a, uint n) internal pure returns (uint) {\n\t\tuint z = n % 2 != 0 ? a : BONE;\n\n\t\tfor (n /= 2; n != 0; n /= 2) {\n\t\t\ta = bmul(a, a);\n\n\t\t\tif (n % 2 != 0) {\n\t\t\t\tz = bmul(z, a);\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n\n\t// Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n\t// Use `bpowi` for `b^e` and `bpowK` for k iterations\n\t// of approximation of b^0.w\n\tfunction bpow(uint base, uint exp) internal pure returns (uint) {\n\t\trequire(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n\t\trequire(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n\t\tuint whole = bfloor(exp);\n\t\tuint remain = bsub(exp, whole);\n\n\t\tuint wholePow = bpowi(base, btoi(whole));\n\n\t\tif (remain == 0) {\n\t\t\treturn wholePow;\n\t\t}\n\n\t\tuint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n\t\treturn bmul(wholePow, partialResult);\n\t}\n\n\tfunction bpowApprox(uint base, uint exp, uint precision) internal pure returns (uint) {\n\t\t// term 0:\n\t\tuint a = exp;\n\t\t(uint x, bool xneg) = bsubSign(base, BONE);\n\t\tuint term = BONE;\n\t\tuint sum = term;\n\t\tbool negative = false;\n\n\t\t// term(k) = numer / denom\n\t\t//         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n\t\t// each iteration, multiply previous term by (a-(k-1)) * x / k\n\t\t// continue until term is less than precision\n\t\tfor (uint i = 1; term >= precision; i++) {\n\t\t\tuint bigK = i * BONE;\n\t\t\t(uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n\t\t\tterm = bmul(term, bmul(c, x));\n\t\t\tterm = bdiv(term, bigK);\n\t\t\tif (term == 0) break;\n\n\t\t\tif (xneg) negative = !negative;\n\t\t\tif (cneg) negative = !negative;\n\t\t\tif (negative) {\n\t\t\t\tsum = bsub(sum, term);\n\t\t\t} else {\n\t\t\t\tsum = badd(sum, term);\n\t\t\t}\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n"
    },
    "contracts/dependencies/math/HomoraMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary HomoraMath {\n\tusing SafeMath for uint;\n\n\tfunction divCeil(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.add(rhs).sub(1) / rhs;\n\t}\n\n\tfunction fmul(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.mul(rhs) / (2 ** 112);\n\t}\n\n\tfunction fdiv(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.mul(2 ** 112) / rhs;\n\t}\n\n\t// implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n\t// original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n\tfunction sqrt(uint x) internal pure returns (uint) {\n\t\tif (x == 0) return 0;\n\t\tuint xx = x;\n\t\tuint r = 1;\n\n\t\tif (xx >= 0x100000000000000000000000000000000) {\n\t\t\txx >>= 128;\n\t\t\tr <<= 64;\n\t\t}\n\n\t\tif (xx >= 0x10000000000000000) {\n\t\t\txx >>= 64;\n\t\t\tr <<= 32;\n\t\t}\n\t\tif (xx >= 0x100000000) {\n\t\t\txx >>= 32;\n\t\t\tr <<= 16;\n\t\t}\n\t\tif (xx >= 0x10000) {\n\t\t\txx >>= 16;\n\t\t\tr <<= 8;\n\t\t}\n\t\tif (xx >= 0x100) {\n\t\t\txx >>= 8;\n\t\t\tr <<= 4;\n\t\t}\n\t\tif (xx >= 0x10) {\n\t\t\txx >>= 4;\n\t\t\tr <<= 2;\n\t\t}\n\t\tif (xx >= 0x8) {\n\t\t\tr <<= 1;\n\t\t}\n\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1; // Seven iterations should be enough\n\t\tuint r1 = x / r;\n\t\treturn (r < r1 ? r : r1);\n\t}\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\n\ncontract ContextUpgradeable is Initializable {\n\tfunction __Context_init() internal onlyInitializing {}\n\n\tfunction __Context_init_unchained() internal onlyInitializing {}\n\n\tfunction _msgSender() internal view virtual returns (address payable) {\n\t\treturn payable(msg.sender);\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes memory) {\n\t\tthis;\n\t\treturn msg.data;\n\t}\n\n\tuint256[50] private __gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/Initializable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\t/**\n\t * @dev Indicates that the contract has been initialized.\n\t */\n\tbool private initialized;\n\n\t/**\n\t * @dev Indicates that the contract is in the process of being initialized.\n\t */\n\tbool private initializing;\n\n\t/**\n\t * @dev Modifier to use in the initializer function of a contract.\n\t */\n\tmodifier initializer() {\n\t\trequire(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n\t\tbool isTopLevelCall = !initializing;\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = true;\n\t\t\tinitialized = true;\n\t\t}\n\n\t\t_;\n\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = false;\n\t\t}\n\t}\n\n\t/// @dev Returns true if and only if the function is running in the constructor\n\tfunction isConstructor() private view returns (bool) {\n\t\t// extcodesize checks the size of the code stored in an address, and\n\t\t// address returns the current address. Since the code is still not\n\t\t// deployed when running a constructor, any checks on its code size will\n\t\t// yield zero, making it an effective way to detect if a contract is\n\t\t// under construction or not.\n\t\tuint256 cs;\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\tcs := extcodesize(address())\n\t\t}\n\t\treturn cs == 0;\n\t}\n\n\tmodifier onlyInitializing() {\n\t\trequire(initializing, \"Initializable: contract is not initializing\");\n\t\t_;\n\t}\n\n\t// Reserved storage space to allow for layout changes in the future.\n\tuint256[50] private ______gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tfunction __Ownable_init() internal onlyInitializing {\n\t\t__Ownable_init_unchained();\n\t}\n\n\tfunction __Ownable_init_unchained() internal onlyInitializing {\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\tfunction owner() public view virtual returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\t_transferOwnership(address(0));\n\t}\n\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\tfunction _transferOwnership(address newOwner) internal virtual {\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n\n\tuint256[49] private __gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n\t/**\n\t * @dev Emitted when the pause is triggered by `account`.\n\t */\n\tevent Paused(address account);\n\n\t/**\n\t * @dev Emitted when the pause is lifted by `account`.\n\t */\n\tevent Unpaused(address account);\n\n\tbool private _paused;\n\n\t/**\n\t * @dev Initializes the contract in unpaused state.\n\t */\n\tfunction __Pausable_init() internal onlyInitializing {\n\t\t__Pausable_init_unchained();\n\t}\n\n\tfunction __Pausable_init_unchained() internal onlyInitializing {\n\t\t_paused = false;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must not be paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\t_requireNotPaused();\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must be paused.\n\t */\n\tmodifier whenPaused() {\n\t\t_requirePaused();\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Returns true if the contract is paused, and false otherwise.\n\t */\n\tfunction paused() public view virtual returns (bool) {\n\t\treturn _paused;\n\t}\n\n\t/**\n\t * @dev Throws if the contract is paused.\n\t */\n\tfunction _requireNotPaused() internal view virtual {\n\t\trequire(!paused(), \"Pausable: paused\");\n\t}\n\n\t/**\n\t * @dev Throws if the contract is not paused.\n\t */\n\tfunction _requirePaused() internal view virtual {\n\t\trequire(paused(), \"Pausable: not paused\");\n\t}\n\n\t/**\n\t * @dev Triggers stopped state.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must not be paused.\n\t */\n\tfunction _pause() internal virtual whenNotPaused {\n\t\t_paused = true;\n\t\temit Paused(_msgSender());\n\t}\n\n\t/**\n\t * @dev Returns to normal state.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must be paused.\n\t */\n\tfunction _unpause() internal virtual whenPaused {\n\t\t_paused = false;\n\t\temit Unpaused(_msgSender());\n\t}\n\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\tuint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface AggregatorInterface {\n\tfunction latestAnswer() external view returns (int256);\n\n\tfunction latestTimestamp() external view returns (uint256);\n\n\tfunction latestRound() external view returns (uint256);\n\n\tfunction getAnswer(uint256 roundId) external view returns (int256);\n\n\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\n\n\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "contracts/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface AggregatorV3Interface {\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\t// getRoundData and latestRoundData should both raise \"No data present\"\n\t// if they do not have data to report, instead of returning unset values\n\t// which could be misinterpreted as actual reported values.\n\tfunction getRoundData(\n\t\tuint80 _roundId\n\t)\n\t\texternal\n\t\tview\n\t\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n\tfunction latestRoundData()\n\t\texternal\n\t\tview\n\t\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/interfaces/balancer/IWeightedPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma abicoder v2;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBasePool is IERC20 {\n\tfunction getSwapFeePercentage() external view returns (uint256);\n\n\tfunction setSwapFeePercentage(uint256 swapFeePercentage) external;\n\n\tfunction setAssetManagerPoolConfig(IERC20 token, IAssetManager.PoolConfig memory poolConfig) external;\n\n\tfunction setPaused(bool paused) external;\n\n\tfunction getVault() external view returns (IVault);\n\n\tfunction getPoolId() external view returns (bytes32);\n\n\tfunction getOwner() external view returns (address);\n}\n\ninterface IWeightedPoolFactory {\n\tfunction create(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tIERC20[] memory tokens,\n\t\tuint256[] memory weights,\n\t\taddress[] memory rateProviders,\n\t\tuint256 swapFeePercentage,\n\t\taddress owner\n\t) external returns (address);\n}\n\ninterface IWeightedPool is IBasePool {\n\tfunction getSwapEnabled() external view returns (bool);\n\n\tfunction getNormalizedWeights() external view returns (uint256[] memory);\n\n\tfunction getGradualWeightUpdateParams()\n\t\texternal\n\t\tview\n\t\treturns (uint256 startTime, uint256 endTime, uint256[] memory endWeights);\n\n\tfunction setSwapEnabled(bool swapEnabled) external;\n\n\tfunction updateWeightsGradually(uint256 startTime, uint256 endTime, uint256[] memory endWeights) external;\n\n\tfunction withdrawCollectedManagementFees(address recipient) external;\n\n\tenum JoinKind {\n\t\tINIT,\n\t\tEXACT_TOKENS_IN_FOR_BPT_OUT,\n\t\tTOKEN_IN_FOR_EXACT_BPT_OUT\n\t}\n\tenum ExitKind {\n\t\tEXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n\t\tEXACT_BPT_IN_FOR_TOKENS_OUT,\n\t\tBPT_IN_FOR_EXACT_TOKENS_OUT\n\t}\n}\n\ninterface IAssetManager {\n\tstruct PoolConfig {\n\t\tuint64 targetPercentage;\n\t\tuint64 criticalPercentage;\n\t\tuint64 feePercentage;\n\t}\n\n\tfunction setPoolConfig(bytes32 poolId, PoolConfig calldata config) external;\n}\n\ninterface IAsset {}\n\ninterface IVault {\n\tfunction hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n\tfunction setRelayerApproval(address sender, address relayer, bool approved) external;\n\n\tevent RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n\tfunction getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n\tfunction manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n\tstruct UserBalanceOp {\n\t\tUserBalanceOpKind kind;\n\t\tIAsset asset;\n\t\tuint256 amount;\n\t\taddress sender;\n\t\taddress payable recipient;\n\t}\n\n\tenum UserBalanceOpKind {\n\t\tDEPOSIT_INTERNAL,\n\t\tWITHDRAW_INTERNAL,\n\t\tTRANSFER_INTERNAL,\n\t\tTRANSFER_EXTERNAL\n\t}\n\tevent InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\tevent ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n\tenum PoolSpecialization {\n\t\tGENERAL,\n\t\tMINIMAL_SWAP_INFO,\n\t\tTWO_TOKEN\n\t}\n\n\tfunction registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n\tevent PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n\tfunction getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n\tfunction registerTokens(bytes32 poolId, IERC20[] memory tokens, address[] memory assetManagers) external;\n\n\tevent TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n\tfunction deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n\tevent TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n\tfunction getPoolTokenInfo(\n\t\tbytes32 poolId,\n\t\tIERC20 token\n\t) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\n\n\tfunction getPoolTokens(\n\t\tbytes32 poolId\n\t) external view returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\n\n\tfunction joinPool(\n\t\tbytes32 poolId,\n\t\taddress sender,\n\t\taddress recipient,\n\t\tJoinPoolRequest memory request\n\t) external payable;\n\n\tstruct JoinPoolRequest {\n\t\tIAsset[] assets;\n\t\tuint256[] maxAmountsIn;\n\t\tbytes userData;\n\t\tbool fromInternalBalance;\n\t}\n\n\tfunction exitPool(\n\t\tbytes32 poolId,\n\t\taddress sender,\n\t\taddress payable recipient,\n\t\tExitPoolRequest memory request\n\t) external;\n\n\tstruct ExitPoolRequest {\n\t\tIAsset[] assets;\n\t\tuint256[] minAmountsOut;\n\t\tbytes userData;\n\t\tbool toInternalBalance;\n\t}\n\n\tevent PoolBalanceChanged(\n\t\tbytes32 indexed poolId,\n\t\taddress indexed liquidityProvider,\n\t\tIERC20[] tokens,\n\t\tint256[] deltas,\n\t\tuint256[] protocolFeeAmounts\n\t);\n\n\tenum PoolBalanceChangeKind {\n\t\tJOIN,\n\t\tEXIT\n\t}\n\n\tenum SwapKind {\n\t\tGIVEN_IN,\n\t\tGIVEN_OUT\n\t}\n\n\tfunction swap(\n\t\tSingleSwap memory singleSwap,\n\t\tFundManagement memory funds,\n\t\tuint256 limit,\n\t\tuint256 deadline\n\t) external payable returns (uint256);\n\n\tstruct SingleSwap {\n\t\tbytes32 poolId;\n\t\tSwapKind kind;\n\t\tIAsset assetIn;\n\t\tIAsset assetOut;\n\t\tuint256 amount;\n\t\tbytes userData;\n\t}\n\n\tfunction batchSwap(\n\t\tSwapKind kind,\n\t\tBatchSwapStep[] memory swaps,\n\t\tIAsset[] memory assets,\n\t\tFundManagement memory funds,\n\t\tint256[] memory limits,\n\t\tuint256 deadline\n\t) external payable returns (int256[] memory);\n\n\tstruct BatchSwapStep {\n\t\tbytes32 poolId;\n\t\tuint256 assetInIndex;\n\t\tuint256 assetOutIndex;\n\t\tuint256 amount;\n\t\tbytes userData;\n\t}\n\n\tevent Swap(\n\t\tbytes32 indexed poolId,\n\t\tIERC20 indexed tokenIn,\n\t\tIERC20 indexed tokenOut,\n\t\tuint256 amountIn,\n\t\tuint256 amountOut\n\t);\n\tstruct FundManagement {\n\t\taddress sender;\n\t\tbool fromInternalBalance;\n\t\taddress payable recipient;\n\t\tbool toInternalBalance;\n\t}\n\n\tfunction queryBatchSwap(\n\t\tSwapKind kind,\n\t\tBatchSwapStep[] memory swaps,\n\t\tIAsset[] memory assets,\n\t\tFundManagement memory funds\n\t) external returns (int256[] memory assetDeltas);\n\n\tfunction managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n\tstruct PoolBalanceOp {\n\t\tPoolBalanceOpKind kind;\n\t\tbytes32 poolId;\n\t\tIERC20 token;\n\t\tuint256 amount;\n\t}\n\n\tenum PoolBalanceOpKind {\n\t\tWITHDRAW,\n\t\tDEPOSIT,\n\t\tUPDATE\n\t}\n\tevent PoolBalanceManaged(\n\t\tbytes32 indexed poolId,\n\t\taddress indexed assetManager,\n\t\tIERC20 indexed token,\n\t\tint256 cashDelta,\n\t\tint256 managedDelta\n\t);\n\n\tfunction setPaused(bool paused) external;\n}\n"
    },
    "contracts/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IAaveIncentivesController {\n\tevent RewardsAccrued(address indexed user, uint256 amount);\n\n\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\n\n\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\n\n\tevent ClaimerSet(address indexed user, address indexed claimer);\n\n\t/*\n\t * @dev Returns the configuration of the distribution for a certain asset\n\t * @param asset The address of the reference asset of the distribution\n\t * @return The asset index, the emission per second and the last updated timestamp\n\t **/\n\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\n\n\t/**\n\t * @dev Whitelists an address to claim the rewards on behalf of another address\n\t * @param user The address of the user\n\t * @param claimer The address of the claimer\n\t */\n\tfunction setClaimer(address user, address claimer) external;\n\n\t/**\n\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n\t * @param user The address of the user\n\t * @return The claimer address\n\t */\n\tfunction getClaimer(address user) external view returns (address);\n\n\t/**\n\t * @dev Configure assets for a certain rewards emission\n\t * @param assets The assets to incentivize\n\t * @param emissionsPerSecond The emission for each asset\n\t */\n\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t **/\n\tfunction handleActionBefore(address user) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t * @param userBalance The balance of the user of the asset in the lending pool\n\t * @param totalSupply The total supply of the asset in the lending pool\n\t **/\n\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\n\n\t/**\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n\t * @param user The address of the user\n\t * @return The rewards\n\t **/\n\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n\t/**\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n\t * @param amount Amount of rewards to claim\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\n\n\t/**\n\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n\t * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n\t * @param amount Amount of rewards to claim\n\t * @param user Address to check and claim rewards\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewardsOnBehalf(\n\t\taddress[] calldata assets,\n\t\tuint256 amount,\n\t\taddress user,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev returns the unclaimed rewards of the user\n\t * @param user the address of the user\n\t * @return the unclaimed user rewards\n\t */\n\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\n\n\t/**\n\t * @dev returns the unclaimed rewards of the user\n\t * @param user the address of the user\n\t * @param asset The asset to incentivize\n\t * @return the user index for the asset\n\t */\n\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\n\n\t/**\n\t * @dev for backward compatibility with previous implementation of the Incentives controller\n\t */\n\tfunction REWARD_TOKEN() external view returns (address);\n\n\t/**\n\t * @dev for backward compatibility with previous implementation of the Incentives controller\n\t */\n\tfunction PRECISION() external view returns (uint8);\n\n\t/**\n\t * @dev Gets the distribution end timestamp of the emissions\n\t */\n\tfunction DISTRIBUTION_END() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IAaveOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title IAaveOracle interface\n * @notice Interface for the Aave oracle.\n **/\n\ninterface IAaveOracle {\n\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\n\n\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\n\n\t/***********\n    @dev returns the asset price in ETH\n     */\n\tfunction getAssetPrice(address asset) external view returns (uint256);\n\n\tfunction getSourceOfAsset(address asset) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\nimport {IInitializableAToken} from \"./IInitializableAToken.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\n\t/**\n\t * @dev Emitted after the mint action\n\t * @param from The address performing the mint\n\t * @param value The amount being\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent Mint(address indexed from, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Mints `amount` aTokens to `user`\n\t * @param user The address receiving the minted tokens\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t * @return `true` if the the previous balance of the user was 0\n\t */\n\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\n\n\t/**\n\t * @dev Emitted after aTokens are burned\n\t * @param from The owner of the aTokens, getting them burned\n\t * @param target The address that will receive the underlying\n\t * @param value The amount being burned\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Emitted during the transfer action\n\t * @param from The user whose tokens are being transferred\n\t * @param to The recipient\n\t * @param value The amount being transferred\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n\t * @param user The owner of the aTokens, getting them burned\n\t * @param receiverOfUnderlying The address that will receive the underlying\n\t * @param amount The amount being burned\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\n\n\t/**\n\t * @dev Mints aTokens to the reserve treasury\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t */\n\tfunction mintToTreasury(uint256 amount, uint256 index) external;\n\n\t/**\n\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n\t * @param from The address getting liquidated, current owner of the aTokens\n\t * @param to The recipient\n\t * @param value The amount of tokens getting transferred\n\t **/\n\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\n\n\t/**\n\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n\t * assets in borrow(), withdraw() and flashLoan()\n\t * @param user The recipient of the underlying\n\t * @param amount The amount getting transferred\n\t * @return The amount transferred\n\t **/\n\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n\n\t/**\n\t * @dev Invoked to execute actions on the aToken side after a repayment.\n\t * @param user The user executing the repayment\n\t * @param amount The amount getting repaid\n\t **/\n\tfunction handleRepayment(address user, uint256 amount) external;\n\n\t/**\n\t * @dev Returns the address of the incentives controller contract\n\t **/\n\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\n\n\t/**\n\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t **/\n\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IChainlinkAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\n\npragma solidity 0.8.12;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "contracts/interfaces/IChefIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IChefIncentivesController {\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t **/\n\tfunction handleActionBefore(address user) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t * @param userBalance The balance of the user of the asset in the lending pool\n\t * @param totalSupply The total supply of the asset in the lending pool\n\t **/\n\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\n\n\t/**\n\t * @dev Called by the locking contracts after locking or unlocking happens\n\t * @param user The address of the user\n\t **/\n\tfunction beforeLockUpdate(address user) external;\n\n\t/**\n\t * @notice Hook for lock update.\n\t * @dev Called by the locking contracts after locking or unlocking happens\n\t */\n\tfunction afterLockUpdate(address _user) external;\n\n\tfunction addPool(address _token, uint256 _allocPoint) external;\n\n\tfunction claim(address _user, address[] calldata _tokens) external;\n\n\tfunction setClaimReceiver(address _user, address _receiver) external;\n\n\tfunction getRegisteredTokens() external view returns (address[] memory);\n\n\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\n\n\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\n\n\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\n\n\tfunction claimAll(address _user) external;\n\n\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\n\n\tfunction setEligibilityExempt(address _address, bool _value) external;\n}\n"
    },
    "contracts/interfaces/IEligibilityDataProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IEligibilityDataProvider {\n\tfunction refresh(address user) external;\n\n\tfunction updatePrice() external;\n\n\tfunction requiredEthValue(address user) external view returns (uint256 required);\n\n\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\n\n\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\n\n\tfunction lockedUsdValue(address user) external view returns (uint256);\n\n\tfunction requiredUsdValue(address user) external view returns (uint256 required);\n\n\tfunction lastEligibleStatus(address user) external view returns (bool);\n\n\tfunction isMarketDisqualified(address user) external view returns (bool);\n\n\tfunction rewardEligibleAmount(address token) external view returns (uint256);\n\n\tfunction setDqTime(address _user, uint256 _time) external;\n\n\tfunction getDqTime(address _user) external view returns (uint256);\n\n\tfunction autoprune() external returns (uint256 processed);\n\n\tfunction requiredDepositRatio() external view returns (uint256);\n\n\tfunction RATIO_DIVISOR() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC20DetailedBytes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20DetailedBytes is IERC20 {\n\tfunction name() external view returns (bytes32);\n\n\tfunction symbol() external view returns (bytes32);\n\n\tfunction decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./LockedBalance.sol\";\n\ninterface IFeeDistribution {\n\tstruct RewardData {\n\t\taddress token;\n\t\tuint256 amount;\n\t}\n\n\tfunction addReward(address rewardsToken) external;\n\n\tfunction lockedBalances(\n\t\taddress user\n\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\n}\n"
    },
    "contracts/interfaces/IInitializableAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {ILendingPool} from \"./ILendingPool.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\n/**\n * @title IInitializableAToken\n * @notice Interface for the initialize function on AToken\n * @author Aave\n **/\ninterface IInitializableAToken {\n\t/**\n\t * @dev Emitted when an aToken is initialized\n\t * @param underlyingAsset The address of the underlying asset\n\t * @param pool The address of the associated lending pool\n\t * @param treasury The address of the treasury\n\t * @param incentivesController The address of the incentives controller for this aToken\n\t * @param aTokenDecimals the decimals of the underlying\n\t * @param aTokenName the name of the aToken\n\t * @param aTokenSymbol the symbol of the aToken\n\t * @param params A set of encoded parameters for additional initialization\n\t **/\n\tevent Initialized(\n\t\taddress indexed underlyingAsset,\n\t\taddress indexed pool,\n\t\taddress treasury,\n\t\taddress incentivesController,\n\t\tuint8 aTokenDecimals,\n\t\tstring aTokenName,\n\t\tstring aTokenSymbol,\n\t\tbytes params\n\t);\n\n\t/**\n\t * @dev Initializes the aToken\n\t * @param pool The address of the lending pool where this aToken will be used\n\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t * @param incentivesController The smart contract managing potential incentives distribution\n\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n\t * @param aTokenName The name of the aToken\n\t * @param aTokenSymbol The symbol of the aToken\n\t */\n\tfunction initialize(\n\t\tILendingPool pool,\n\t\taddress treasury,\n\t\taddress underlyingAsset,\n\t\tIAaveIncentivesController incentivesController,\n\t\tuint8 aTokenDecimals,\n\t\tstring calldata aTokenName,\n\t\tstring calldata aTokenSymbol,\n\t\tbytes calldata params\n\t) external;\n}\n"
    },
    "contracts/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../lending/libraries/types/DataTypes.sol\";\n\ninterface ILendingPool {\n\t/**\n\t * @dev Emitted on deposit()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address initiating the deposit\n\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n\t * @param amount The amount deposited\n\t * @param referral The referral code used\n\t **/\n\tevent Deposit(\n\t\taddress indexed reserve,\n\t\taddress user,\n\t\taddress indexed onBehalfOf,\n\t\tuint256 amount,\n\t\tuint16 indexed referral\n\t);\n\n\t/**\n\t * @dev Emitted on withdraw()\n\t * @param reserve The address of the underlyng asset being withdrawn\n\t * @param user The address initiating the withdrawal, owner of aTokens\n\t * @param to Address that will receive the underlying\n\t * @param amount The amount to be withdrawn\n\t **/\n\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n\t/**\n\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n\t * @param reserve The address of the underlying asset being borrowed\n\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n\t * initiator of the transaction on flashLoan()\n\t * @param onBehalfOf The address that will be getting the debt\n\t * @param amount The amount borrowed out\n\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n\t * @param borrowRate The numeric rate at which the user has borrowed\n\t * @param referral The referral code used\n\t **/\n\tevent Borrow(\n\t\taddress indexed reserve,\n\t\taddress user,\n\t\taddress indexed onBehalfOf,\n\t\tuint256 amount,\n\t\tuint256 borrowRateMode,\n\t\tuint256 borrowRate,\n\t\tuint16 indexed referral\n\t);\n\n\t/**\n\t * @dev Emitted on repay()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The beneficiary of the repayment, getting his debt reduced\n\t * @param repayer The address of the user initiating the repay(), providing the funds\n\t * @param amount The amount repaid\n\t **/\n\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n\t/**\n\t * @dev Emitted on swapBorrowRateMode()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user swapping his rate mode\n\t * @param rateMode The rate mode that the user wants to swap to\n\t **/\n\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n\t/**\n\t * @dev Emitted on setUserUseReserveAsCollateral()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user enabling the usage as collateral\n\t **/\n\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on setUserUseReserveAsCollateral()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user enabling the usage as collateral\n\t **/\n\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on rebalanceStableBorrowRate()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user for which the rebalance has been executed\n\t **/\n\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on flashLoan()\n\t * @param target The address of the flash loan receiver contract\n\t * @param initiator The address initiating the flash loan\n\t * @param asset The address of the asset being flash borrowed\n\t * @param amount The amount flash borrowed\n\t * @param premium The fee flash borrowed\n\t * @param referralCode The referral code used\n\t **/\n\tevent FlashLoan(\n\t\taddress indexed target,\n\t\taddress indexed initiator,\n\t\taddress indexed asset,\n\t\tuint256 amount,\n\t\tuint256 premium,\n\t\tuint16 referralCode\n\t);\n\n\t/**\n\t * @dev Emitted when the pause is triggered.\n\t */\n\tevent Paused();\n\n\t/**\n\t * @dev Emitted when the pause is lifted.\n\t */\n\tevent Unpaused();\n\n\t/**\n\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n\t * LendingPoolCollateral manager using a DELEGATECALL\n\t * This allows to have the events in the generated ABI for LendingPool.\n\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n\t * @param user The address of the borrower getting liquidated\n\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n\t * @param liquidator The address of the liquidator\n\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n\t * to receive the underlying collateral asset directly\n\t **/\n\tevent LiquidationCall(\n\t\taddress indexed collateralAsset,\n\t\taddress indexed debtAsset,\n\t\taddress indexed user,\n\t\tuint256 debtToCover,\n\t\tuint256 liquidatedCollateralAmount,\n\t\taddress liquidator,\n\t\tbool receiveAToken\n\t);\n\n\t/**\n\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n\t * gets added to the LendingPool ABI\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param liquidityRate The new liquidity rate\n\t * @param stableBorrowRate The new stable borrow rate\n\t * @param variableBorrowRate The new variable borrow rate\n\t * @param liquidityIndex The new liquidity index\n\t * @param variableBorrowIndex The new variable borrow index\n\t **/\n\tevent ReserveDataUpdated(\n\t\taddress indexed reserve,\n\t\tuint256 liquidityRate,\n\t\tuint256 stableBorrowRate,\n\t\tuint256 variableBorrowRate,\n\t\tuint256 liquidityIndex,\n\t\tuint256 variableBorrowIndex\n\t);\n\n\t/**\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n\t * @param asset The address of the underlying asset to deposit\n\t * @param amount The amount to be deposited\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n\t *   is a different wallet\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n\t/**\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n\t * @param asset The address of the underlying asset to withdraw\n\t * @param amount The underlying amount to be withdrawn\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n\t *   different wallet\n\t * @return The final amount withdrawn\n\t **/\n\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n\t/**\n\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n\t * corresponding debt token (StableDebtToken or VariableDebtToken)\n\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n\t * @param asset The address of the underlying asset to borrow\n\t * @param amount The amount to be borrowed\n\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n\t * if he has been given credit delegation allowance\n\t **/\n\tfunction borrow(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 interestRateMode,\n\t\tuint16 referralCode,\n\t\taddress onBehalfOf\n\t) external;\n\n\t/**\n\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n\t * @param asset The address of the borrowed underlying asset previously borrowed\n\t * @param amount The amount to repay\n\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n\t * other borrower whose debt should be removed\n\t * @return The final amount repaid\n\t **/\n\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\n\n\t/**\n\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n\t * @param asset The address of the underlying asset borrowed\n\t * @param rateMode The rate mode that the user wants to swap to\n\t **/\n\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n\t/**\n\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n\t * - Users can be rebalanced if the following conditions are satisfied:\n\t *     1. Usage ratio is above 95%\n\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n\t *        borrowed at a stable rate and depositors are not earning enough\n\t * @param asset The address of the underlying asset borrowed\n\t * @param user The address of the user to be rebalanced\n\t **/\n\tfunction rebalanceStableBorrowRate(address asset, address user) external;\n\n\t/**\n\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n\t * @param asset The address of the underlying asset deposited\n\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n\t **/\n\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n\t/**\n\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n\t * @param user The address of the borrower getting liquidated\n\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n\t * to receive the underlying collateral asset directly\n\t **/\n\tfunction liquidationCall(\n\t\taddress collateralAsset,\n\t\taddress debtAsset,\n\t\taddress user,\n\t\tuint256 debtToCover,\n\t\tbool receiveAToken\n\t) external;\n\n\t/**\n\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n\t * as long as the amount taken plus a fee is returned.\n\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n\t * For further details please visit https://developers.aave.com\n\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n\t * @param assets The addresses of the assets being flash-borrowed\n\t * @param amounts The amounts amounts being flash-borrowed\n\t * @param modes Types of the debt to open if the flash loan is not returned:\n\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n\t * @param params Variadic packed params to pass to the receiver as extra information\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction flashLoan(\n\t\taddress receiverAddress,\n\t\taddress[] calldata assets,\n\t\tuint256[] calldata amounts,\n\t\tuint256[] calldata modes,\n\t\taddress onBehalfOf,\n\t\tbytes calldata params,\n\t\tuint16 referralCode\n\t) external;\n\n\t/**\n\t * @dev Returns the user account data across all the reserves\n\t * @param user The address of the user\n\t * @return totalCollateralETH the total collateral in ETH of the user\n\t * @return totalDebtETH the total debt in ETH of the user\n\t * @return availableBorrowsETH the borrowing power left of the user\n\t * @return currentLiquidationThreshold the liquidation threshold of the user\n\t * @return ltv the loan to value of the user\n\t * @return healthFactor the current health factor of the user\n\t **/\n\tfunction getUserAccountData(\n\t\taddress user\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256 totalCollateralETH,\n\t\t\tuint256 totalDebtETH,\n\t\t\tuint256 availableBorrowsETH,\n\t\t\tuint256 currentLiquidationThreshold,\n\t\t\tuint256 ltv,\n\t\t\tuint256 healthFactor\n\t\t);\n\n\tfunction initReserve(\n\t\taddress reserve,\n\t\taddress aTokenAddress,\n\t\taddress stableDebtAddress,\n\t\taddress variableDebtAddress,\n\t\taddress interestRateStrategyAddress\n\t) external;\n\n\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n\tfunction setConfiguration(address reserve, uint256 configuration) external;\n\n\t/**\n\t * @dev Returns the configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The configuration of the reserve\n\t **/\n\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n\t/**\n\t * @dev Returns the configuration of the user across all the reserves\n\t * @param user The user address\n\t * @return The configuration of the user\n\t **/\n\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n\t/**\n\t * @dev Returns the normalized income normalized income of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve's normalized income\n\t */\n\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the normalized variable debt per unit of asset\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve normalized variable debt\n\t */\n\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the state and configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The state of the reserve\n\t **/\n\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n\tfunction finalizeTransfer(\n\t\taddress asset,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tuint256 balanceFromAfter,\n\t\tuint256 balanceToBefore\n\t) external;\n\n\tfunction getReservesList() external view returns (address[] memory);\n\n\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n\tfunction setPause(bool val) external;\n\n\tfunction paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n\tevent MarketIdSet(string newMarketId);\n\tevent LendingPoolUpdated(address indexed newAddress);\n\tevent ConfigurationAdminUpdated(address indexed newAddress);\n\tevent EmergencyAdminUpdated(address indexed newAddress);\n\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\n\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\n\tevent PriceOracleUpdated(address indexed newAddress);\n\tevent LendingRateOracleUpdated(address indexed newAddress);\n\tevent ProxyCreated(bytes32 id, address indexed newAddress);\n\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n\tfunction getMarketId() external view returns (string memory);\n\n\tfunction setMarketId(string calldata marketId) external;\n\n\tfunction setAddress(bytes32 id, address newAddress) external;\n\n\tfunction setAddressAsProxy(bytes32 id, address impl) external;\n\n\tfunction getAddress(bytes32 id) external view returns (address);\n\n\tfunction getLendingPool() external view returns (address);\n\n\tfunction setLendingPoolImpl(address pool) external;\n\n\tfunction getLendingPoolConfigurator() external view returns (address);\n\n\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\n\n\tfunction getLendingPoolCollateralManager() external view returns (address);\n\n\tfunction setLendingPoolCollateralManager(address manager) external;\n\n\tfunction getPoolAdmin() external view returns (address);\n\n\tfunction setPoolAdmin(address admin) external;\n\n\tfunction getEmergencyAdmin() external view returns (address);\n\n\tfunction setEmergencyAdmin(address admin) external;\n\n\tfunction getPriceOracle() external view returns (address);\n\n\tfunction setPriceOracle(address priceOracle) external;\n\n\tfunction getLendingRateOracle() external view returns (address);\n\n\tfunction setLendingRateOracle(address lendingRateOracle) external;\n\n\tfunction getLiquidationFeeTo() external view returns (address);\n\n\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\n}\n"
    },
    "contracts/interfaces/ILiquidityZap.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface ILiquidityZap {\n\tfunction _WETH() external view returns (address);\n\n\tfunction _token() external view returns (address);\n\n\tfunction _tokenWETHPair() external view returns (address);\n\n\tfunction addLiquidityETHOnly(address to) external returns (uint256 liquidity);\n\n\tfunction addLiquidityTokensOnly(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) external returns (uint256 liquidity);\n\n\tfunction getLPTokenPerEthUnit(uint256 ethAmt) external view returns (uint256 liquidity);\n\n\tfunction initLiquidityZap(\n\t\taddress token,\n\t\taddress WETH,\n\t\taddress tokenWethPair,\n\t\taddress helper\n\t) external;\n\n\tfunction quote(uint256 wethAmount) external view returns (uint256 optimalTokenAmount);\n\n\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\n\n\tfunction removeAllLiquidityETHOnly(address to) external returns (uint256 amount);\n\n\tfunction removeAllLiquidityTokenOnly(address to) external returns (uint256 amount);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint256 liquidity,\n\t\taddress to\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETHOnly(address to, uint256 liquidity) external returns (uint256 amountOut);\n\n\tfunction removeLiquidityTokenOnly(address to, uint256 liquidity) external returns (uint256 amount);\n\n\tfunction standardAdd(\n\t\tuint256 tokenAmount,\n\t\tuint256 _wethAmt,\n\t\taddress to\n\t) external payable returns (uint256 liquidity);\n\n\tfunction unzap() external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction unzapToETH() external returns (uint256 amount);\n\n\tfunction unzapToTokens() external returns (uint256 amount);\n\n\tfunction zapETH(address payable _onBehalf) external payable returns (uint256 liquidity);\n\n\tfunction zapTokens(uint256 amount) external returns (uint256 liquidity);\n\n\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) external returns (uint256 liquidity);\n}\n"
    },
    "contracts/interfaces/ILockZap.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface ILockZap {\n\tfunction zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\tuint256 _lockTypeIndex\n\t) external returns (uint256 liquidity);\n\n\tfunction zapOnBehalf(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _onBehalf\n\t) external returns (uint256 liquidity);\n}\n"
    },
    "contracts/interfaces/IMintableToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableToken is IERC20 {\n\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\n\n\tfunction burn(uint256 _amount) external returns (bool);\n\n\tfunction setMinter(address _minter) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IMultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./LockedBalance.sol\";\nimport \"./IFeeDistribution.sol\";\nimport \"./IMintableToken.sol\";\n\ninterface IMultiFeeDistribution is IFeeDistribution {\n\tfunction exit(bool claimRewards) external;\n\n\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\n\n\tfunction rdntToken() external view returns (IMintableToken);\n\n\tfunction getPriceProvider() external view returns (address);\n\n\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\n\n\tfunction autocompoundEnabled(address user) external view returns (bool);\n\n\tfunction defaultLockIndex(address _user) external view returns (uint256);\n\n\tfunction autoRelockDisabled(address user) external view returns (bool);\n\n\tfunction totalBalance(address user) external view returns (uint256);\n\n\tfunction zapVestingToLp(address _address) external returns (uint256);\n\n\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\n\n\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\n\n\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\n\n\tfunction daoTreasury() external view returns (address);\n\n\tfunction stakingToken() external view returns (address);\n\n\tfunction claimFromConverter(address) external;\n\n\tfunction mint(address user, uint256 amount, bool withPenalty) external;\n}\n\ninterface IMFDPlus is IMultiFeeDistribution {\n\tfunction getLastClaimTime(address _user) external returns (uint256);\n\n\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\n\n\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\n\n\tfunction setAutocompound(bool _newVal) external;\n\n\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IPoolHelper {\n\tfunction lpTokenAddr() external view returns (address);\n\n\tfunction zapWETH(uint256 amount) external returns (uint256);\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) external returns (uint256);\n\n\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\n\n\tfunction getLpPrice(uint rdntPriceInEth) external view returns (uint256 priceInEth);\n\n\tfunction getReserves() external view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply);\n\n\tfunction getPrice() external view returns (uint256 priceInEth);\n}\n\ninterface IBalancerPoolHelper is IPoolHelper {\n\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\n}\n\ninterface IUniswapPoolHelper is IPoolHelper {\n\tfunction initializePool() external;\n}\n\ninterface ITestPoolHelper is IPoolHelper {\n\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\ninterface IPriceProvider {\n\tfunction getTokenPrice() external view returns (uint256);\n\n\tfunction getTokenPriceUsd() external view returns (uint256);\n\n\tfunction getLpTokenPrice() external view returns (uint256);\n\n\tfunction getLpTokenPriceUsd() external view returns (uint256);\n\n\tfunction decimals() external view returns (uint256);\n\n\tfunction update() external;\n\n\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IRouterETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\ninterface IRouterETH {\n\tfunction swapETH(\n\t\tuint16 _dstChainId, // destination Stargate chainId\n\t\taddress payable _refundAddress, // refund additional messageFee to this address\n\t\tbytes calldata _toAddress, // the receiver of the destination ETH\n\t\tuint256 _amountLD, // the amount, in Local Decimals, to be swapped\n\t\tuint256 _minAmountLD // the minimum amount accepted out on destination\n\t) external payable;\n}\n"
    },
    "contracts/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IScaledBalanceToken {\n\t/**\n\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\n\t * @param user The user whose balance is calculated\n\t * @return The scaled balance of the user\n\t **/\n\tfunction scaledBalanceOf(address user) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the scaled balance of the user and the scaled total supply.\n\t * @param user The address of the user\n\t * @return The scaled balance of the user\n\t * @return The scaled balance and the scaled total supply\n\t **/\n\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n\t/**\n\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n\t * @return The scaled total supply\n\t **/\n\tfunction scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\ninterface IStargateRouter {\n\tstruct lzTxObj {\n\t\tuint256 dstGasForCall;\n\t\tuint256 dstNativeAmount;\n\t\tbytes dstNativeAddr;\n\t}\n\n\tfunction addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\n\n\tfunction swap(\n\t\tuint16 _dstChainId,\n\t\tuint256 _srcPoolId,\n\t\tuint256 _dstPoolId,\n\t\taddress payable _refundAddress,\n\t\tuint256 _amountLD,\n\t\tuint256 _minAmountLD,\n\t\tlzTxObj memory _lzTxParams,\n\t\tbytes calldata _to,\n\t\tbytes calldata _payload\n\t) external payable;\n\n\tfunction redeemRemote(\n\t\tuint16 _dstChainId,\n\t\tuint256 _srcPoolId,\n\t\tuint256 _dstPoolId,\n\t\taddress payable _refundAddress,\n\t\tuint256 _amountLP,\n\t\tuint256 _minAmountLD,\n\t\tbytes calldata _to,\n\t\tlzTxObj memory _lzTxParams\n\t) external payable;\n\n\tfunction instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\n\n\tfunction redeemLocal(\n\t\tuint16 _dstChainId,\n\t\tuint256 _srcPoolId,\n\t\tuint256 _dstPoolId,\n\t\taddress payable _refundAddress,\n\t\tuint256 _amountLP,\n\t\tbytes calldata _to,\n\t\tlzTxObj memory _lzTxParams\n\t) external payable;\n\n\tfunction sendCredits(\n\t\tuint16 _dstChainId,\n\t\tuint256 _srcPoolId,\n\t\tuint256 _dstPoolId,\n\t\taddress payable _refundAddress\n\t) external payable;\n\n\tfunction quoteLayerZeroFee(\n\t\tuint16 _dstChainId,\n\t\tuint8 _functionType,\n\t\tbytes calldata _toAddress,\n\t\tbytes calldata _transferAndCallPayload,\n\t\tlzTxObj memory _lzTxParams\n\t) external view returns (uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IWETH {\n\tfunction balanceOf(address) external returns (uint);\n\n\tfunction deposit() external payable;\n\n\tfunction withdraw(uint256) external;\n\n\tfunction approve(address guy, uint256 wad) external returns (bool);\n\n\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\n\n\tfunction transfer(address to, uint value) external returns (bool);\n\n\tfunction allowance(address owner, address spender) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IWETHGateway.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IWETHGateway {\n\tfunction depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable;\n\n\tfunction withdrawETH(address lendingPool, uint256 amount, address onBehalfOf) external;\n\n\tfunction repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\n\n\tfunction borrowETH(address lendingPool, uint256 amount, uint256 interesRateMode, uint16 referralCode) external;\n\n\tfunction withdrawFromWETH(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/LockedBalance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nstruct LockedBalance {\n\tuint256 amount;\n\tuint256 unlockTime;\n\tuint256 multiplier;\n\tuint256 duration;\n}\n\nstruct EarnedBalance {\n\tuint256 amount;\n\tuint256 unlockTime;\n\tuint256 penalty;\n}\n\nstruct Reward {\n\tuint256 periodFinish;\n\tuint256 rewardPerSecond;\n\tuint256 lastUpdateTime;\n\tuint256 rewardPerTokenStored;\n\t// tracks already-added balances to handle accrued interest in aToken rewards\n\t// for the stakingToken this value is unused and will always be 0\n\tuint256 balance;\n}\n\nstruct Balances {\n\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\n\tuint256 unlocked; // RDNT token\n\tuint256 locked; // LP token or RDNT token\n\tuint256 lockedWithMultiplier; // Multiplied locked amount\n\tuint256 earned; // RDNT token\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IUniswapV2Router01 {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint amountADesired,\n\t\tuint amountBDesired,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB, uint liquidity);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETH(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapExactETHForTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactETH(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapETHForExactTokens(\n\t\tuint amountOut,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint[] memory amounts);\n\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountETH);\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountETH);\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable;\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n}\n"
    },
    "contracts/lending/libraries/configuration/ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title ReserveConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the reserve configuration\n */\nlibrary ReserveConfiguration {\n\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n\n\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\n\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\n\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n\n\tuint256 constant MAX_VALID_LTV = 65535;\n\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n\tuint256 constant MAX_VALID_DECIMALS = 255;\n\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\n\n\t/**\n\t * @dev Sets the Loan to Value of the reserve\n\t * @param self The reserve configuration\n\t * @param ltv the new ltv\n\t **/\n\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n\t\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\n\n\t\tself.data = (self.data & LTV_MASK) | ltv;\n\t}\n\n\t/**\n\t * @dev Gets the Loan to Value of the reserve\n\t * @param self The reserve configuration\n\t * @return The loan to value\n\t **/\n\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn self.data & ~LTV_MASK;\n\t}\n\n\t/**\n\t * @dev Sets the liquidation threshold of the reserve\n\t * @param self The reserve configuration\n\t * @param threshold The new liquidation threshold\n\t **/\n\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\n\t\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\n\n\t\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the liquidation threshold of the reserve\n\t * @param self The reserve configuration\n\t * @return The liquidation threshold\n\t **/\n\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the liquidation bonus of the reserve\n\t * @param self The reserve configuration\n\t * @param bonus The new liquidation bonus\n\t **/\n\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\n\t\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\n\n\t\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the liquidation bonus of the reserve\n\t * @param self The reserve configuration\n\t * @return The liquidation bonus\n\t **/\n\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the decimals of the underlying asset of the reserve\n\t * @param self The reserve configuration\n\t * @param decimals The decimals\n\t **/\n\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\n\t\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\n\n\t\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the decimals of the underlying asset of the reserve\n\t * @param self The reserve configuration\n\t * @return The decimals of the asset\n\t **/\n\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the active state of the reserve\n\t * @param self The reserve configuration\n\t * @param active The active state\n\t **/\n\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n\t\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the active state of the reserve\n\t * @param self The reserve configuration\n\t * @return The active state\n\t **/\n\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~ACTIVE_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Sets the frozen state of the reserve\n\t * @param self The reserve configuration\n\t * @param frozen The frozen state\n\t **/\n\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n\t\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the frozen state of the reserve\n\t * @param self The reserve configuration\n\t * @return The frozen state\n\t **/\n\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~FROZEN_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Enables or disables borrowing on the reserve\n\t * @param self The reserve configuration\n\t * @param enabled True if the borrowing needs to be enabled, false otherwise\n\t **/\n\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n\t\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the borrowing state of the reserve\n\t * @param self The reserve configuration\n\t * @return The borrowing state\n\t **/\n\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~BORROWING_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Enables or disables stable rate borrowing on the reserve\n\t * @param self The reserve configuration\n\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n\t **/\n\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n\t\tself.data =\n\t\t\t(self.data & STABLE_BORROWING_MASK) |\n\t\t\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the stable rate borrowing state of the reserve\n\t * @param self The reserve configuration\n\t * @return The stable rate borrowing state\n\t **/\n\tfunction getStableRateBorrowingEnabled(\n\t\tDataTypes.ReserveConfigurationMap storage self\n\t) internal view returns (bool) {\n\t\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Sets the reserve factor of the reserve\n\t * @param self The reserve configuration\n\t * @param reserveFactor The reserve factor\n\t **/\n\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\n\t\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\n\n\t\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the reserve factor of the reserve\n\t * @param self The reserve configuration\n\t * @return The reserve factor\n\t **/\n\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Gets the configuration flags of the reserve\n\t * @param self The reserve configuration\n\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n\t **/\n\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\n\t\tuint256 dataLocal = self.data;\n\n\t\treturn (\n\t\t\t(dataLocal & ~ACTIVE_MASK) != 0,\n\t\t\t(dataLocal & ~FROZEN_MASK) != 0,\n\t\t\t(dataLocal & ~BORROWING_MASK) != 0,\n\t\t\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration paramters of the reserve\n\t * @param self The reserve configuration\n\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n\t **/\n\tfunction getParams(\n\t\tDataTypes.ReserveConfigurationMap storage self\n\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\n\t\tuint256 dataLocal = self.data;\n\n\t\treturn (\n\t\t\tdataLocal & ~LTV_MASK,\n\t\t\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n\t\t\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n\t\t\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n\t\t\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration paramters of the reserve from a memory object\n\t * @param self The reserve configuration\n\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n\t **/\n\tfunction getParamsMemory(\n\t\tDataTypes.ReserveConfigurationMap memory self\n\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tself.data & ~LTV_MASK,\n\t\t\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n\t\t\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n\t\t\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n\t\t\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration flags of the reserve from a memory object\n\t * @param self The reserve configuration\n\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n\t **/\n\tfunction getFlagsMemory(\n\t\tDataTypes.ReserveConfigurationMap memory self\n\t) internal pure returns (bool, bool, bool, bool) {\n\t\treturn (\n\t\t\t(self.data & ~ACTIVE_MASK) != 0,\n\t\t\t(self.data & ~FROZEN_MASK) != 0,\n\t\t\t(self.data & ~BORROWING_MASK) != 0,\n\t\t\t(self.data & ~STABLE_BORROWING_MASK) != 0\n\t\t);\n\t}\n}\n"
    },
    "contracts/lending/libraries/configuration/UserConfiguration.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title UserConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the user configuration\n */\nlibrary UserConfiguration {\n\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\n\n\t/**\n\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @param borrowing True if the user is borrowing the reserve, false otherwise\n\t **/\n\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\n\t}\n\n\t/**\n\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\n\t **/\n\tfunction setUsingAsCollateral(\n\t\tDataTypes.UserConfigurationMap storage self,\n\t\tuint256 reserveIndex,\n\t\tbool usingAsCollateral\n\t) internal {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\tself.data =\n\t\t\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\n\t\t\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\n\t **/\n\tfunction isUsingAsCollateralOrBorrowing(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve for borrowing\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve for borrowing, false otherwise\n\t **/\n\tfunction isBorrowing(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve as collateral\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve as collateral, false otherwise\n\t **/\n\tfunction isUsingAsCollateral(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been borrowing from any reserve\n\t * @param self The configuration object\n\t * @return True if the user has been borrowing any reserve, false otherwise\n\t **/\n\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\n\t\treturn self.data & BORROWING_MASK != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has not been using any reserve\n\t * @param self The configuration object\n\t * @return True if the user has been borrowing any reserve, false otherwise\n\t **/\n\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\n\t\treturn self.data == 0;\n\t}\n}\n"
    },
    "contracts/lending/libraries/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n * @dev Error messages prefix glossary:\n *  - VL = ValidationLogic\n *  - MATH = Math libraries\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\n *  - AT = AToken\n *  - SDT = StableDebtToken\n *  - VDT = VariableDebtToken\n *  - LP = LendingPool\n *  - LPAPR = LendingPoolAddressesProviderRegistry\n *  - LPC = LendingPoolConfiguration\n *  - RL = ReserveLogic\n *  - LPCM = LendingPoolCollateralManager\n *  - P = Pausable\n */\nlibrary Errors {\n\t//common errors\n\tstring public constant CALLER_NOT_POOL_ADMIN = \"33\"; // 'The caller must be the pool admin'\n\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \"59\"; // User borrows on behalf, but allowance are too small\n\n\t//contract specific errors\n\tstring public constant VL_INVALID_AMOUNT = \"1\"; // 'Amount must be greater than 0'\n\tstring public constant VL_NO_ACTIVE_RESERVE = \"2\"; // 'Action requires an active reserve'\n\tstring public constant VL_RESERVE_FROZEN = \"3\"; // 'Action cannot be performed because the reserve is frozen'\n\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \"4\"; // 'The current liquidity is not enough'\n\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \"5\"; // 'User cannot withdraw more than the available balance'\n\tstring public constant VL_TRANSFER_NOT_ALLOWED = \"6\"; // 'Transfer cannot be allowed.'\n\tstring public constant VL_BORROWING_NOT_ENABLED = \"7\"; // 'Borrowing is not enabled'\n\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \"8\"; // 'Invalid interest rate mode selected'\n\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \"9\"; // 'The collateral balance is 0'\n\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \"10\"; // 'Health factor is lesser than the liquidation threshold'\n\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \"11\"; // 'There is not enough collateral to cover a new borrow'\n\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \"12\"; // stable borrowing not enabled\n\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \"13\"; // collateral is (mostly) the same currency that is being borrowed\n\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \"14\"; // 'The requested amount is greater than the max loan size in stable rate mode\n\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \"15\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\n\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \"16\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\n\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \"17\"; // 'User does not have a stable rate loan in progress on this reserve'\n\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \"18\"; // 'User does not have a variable rate loan in progress on this reserve'\n\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \"19\"; // 'The underlying balance needs to be greater than 0'\n\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \"20\"; // 'User deposit is already being used as collateral'\n\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \"21\"; // 'User does not have any stable rate loan for this reserve'\n\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \"22\"; // 'Interest rate rebalance conditions were not met'\n\tstring public constant LP_LIQUIDATION_CALL_FAILED = \"23\"; // 'Liquidation call failed'\n\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \"24\"; // 'There is not enough liquidity available to borrow'\n\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \"25\"; // 'The requested amount is too small for a FlashLoan.'\n\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \"26\"; // 'The actual balance of the protocol is inconsistent'\n\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \"27\"; // 'The caller of the function is not the lending pool configurator'\n\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \"28\";\n\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \"29\"; // 'The caller of this function must be a lending pool'\n\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \"30\"; // 'User cannot give allowance to himself'\n\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \"31\"; // 'Transferred amount needs to be greater than zero'\n\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \"32\"; // 'Reserve has already been initialized'\n\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \"34\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \"35\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \"36\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \"37\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \"38\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \"39\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \"40\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_CONFIGURATION = \"75\"; // 'Invalid risk parameters for the reserve'\n\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \"76\"; // 'The caller must be the emergency admin'\n\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \"41\"; // 'Provider is not registered'\n\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \"42\"; // 'Health factor is not below the threshold'\n\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \"43\"; // 'The collateral chosen cannot be liquidated'\n\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \"44\"; // 'User did not borrow the specified currency'\n\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \"45\"; // \"There isn't enough liquidity available to liquidate\"\n\tstring public constant LPCM_NO_ERRORS = \"46\"; // 'No errors'\n\tstring public constant LP_INVALID_FLASHLOAN_MODE = \"47\"; //Invalid flashloan mode selected\n\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \"48\";\n\tstring public constant MATH_ADDITION_OVERFLOW = \"49\";\n\tstring public constant MATH_DIVISION_BY_ZERO = \"50\";\n\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \"51\"; //  Liquidity index overflows uint128\n\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \"52\"; //  Variable borrow index overflows uint128\n\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \"53\"; //  Liquidity rate overflows uint128\n\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \"54\"; //  Variable borrow rate overflows uint128\n\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \"55\"; //  Stable borrow rate overflows uint128\n\tstring public constant CT_INVALID_MINT_AMOUNT = \"56\"; //invalid amount to mint\n\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \"57\";\n\tstring public constant CT_INVALID_BURN_AMOUNT = \"58\"; //invalid amount to burn\n\tstring public constant LP_FAILED_COLLATERAL_SWAP = \"60\";\n\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \"61\";\n\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \"62\";\n\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \"63\";\n\tstring public constant LP_IS_PAUSED = \"64\"; // 'Pool is paused'\n\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \"65\";\n\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \"66\";\n\tstring public constant RC_INVALID_LTV = \"67\";\n\tstring public constant RC_INVALID_LIQ_THRESHOLD = \"68\";\n\tstring public constant RC_INVALID_LIQ_BONUS = \"69\";\n\tstring public constant RC_INVALID_DECIMALS = \"70\";\n\tstring public constant RC_INVALID_RESERVE_FACTOR = \"71\";\n\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \"72\";\n\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \"73\";\n\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \"74\";\n\tstring public constant UL_INVALID_INDEX = \"77\";\n\tstring public constant LP_NOT_CONTRACT = \"78\";\n\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \"79\";\n\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \"80\";\n\n\tenum CollateralManagerErrors {\n\t\tNO_ERROR,\n\t\tNO_COLLATERAL_AVAILABLE,\n\t\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\n\t\tCURRRENCY_NOT_BORROWED,\n\t\tHEALTH_FACTOR_ABOVE_THRESHOLD,\n\t\tNOT_ENOUGH_LIQUIDITY,\n\t\tNO_ACTIVE_RESERVE,\n\t\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\n\t\tINVALID_EQUAL_ASSETS_TO_SWAP,\n\t\tFROZEN_RESERVE\n\t}\n}\n"
    },
    "contracts/lending/libraries/helpers/Helpers.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title Helpers library\n * @author Aave\n */\nlibrary Helpers {\n\t/**\n\t * @dev Fetches the user current stable and variable debt balances\n\t * @param user The user address\n\t * @param reserve The reserve data object\n\t * @return The stable and variable debt balance\n\t **/\n\tfunction getUserCurrentDebt(\n\t\taddress user,\n\t\tDataTypes.ReserveData storage reserve\n\t) internal view returns (uint256, uint256) {\n\t\treturn (\n\t\t\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\n\t\t\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\n\t\t);\n\t}\n\n\tfunction getUserCurrentDebtMemory(\n\t\taddress user,\n\t\tDataTypes.ReserveData memory reserve\n\t) internal view returns (uint256, uint256) {\n\t\treturn (\n\t\t\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\n\t\t\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\n\t\t);\n\t}\n}\n"
    },
    "contracts/lending/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nlibrary DataTypes {\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n\tstruct ReserveData {\n\t\t//stores the reserve configuration\n\t\tReserveConfigurationMap configuration;\n\t\t//the liquidity index. Expressed in ray\n\t\tuint128 liquidityIndex;\n\t\t//variable borrow index. Expressed in ray\n\t\tuint128 variableBorrowIndex;\n\t\t//the current supply rate. Expressed in ray\n\t\tuint128 currentLiquidityRate;\n\t\t//the current variable borrow rate. Expressed in ray\n\t\tuint128 currentVariableBorrowRate;\n\t\t//the current stable borrow rate. Expressed in ray\n\t\tuint128 currentStableBorrowRate;\n\t\tuint40 lastUpdateTimestamp;\n\t\t//tokens addresses\n\t\taddress aTokenAddress;\n\t\taddress stableDebtTokenAddress;\n\t\taddress variableDebtTokenAddress;\n\t\t//address of the interest rate strategy\n\t\taddress interestRateStrategyAddress;\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\n\t\tuint8 id;\n\t}\n\n\tstruct ReserveConfigurationMap {\n\t\t//bit 0-15: LTV\n\t\t//bit 16-31: Liq. threshold\n\t\t//bit 32-47: Liq. bonus\n\t\t//bit 48-55: Decimals\n\t\t//bit 56: Reserve is active\n\t\t//bit 57: reserve is frozen\n\t\t//bit 58: borrowing is enabled\n\t\t//bit 59: stable rate borrowing enabled\n\t\t//bit 60-63: reserved\n\t\t//bit 64-79: reserve factor\n\t\tuint256 data;\n\t}\n\n\tstruct UserConfigurationMap {\n\t\tuint256 data;\n\t}\n\n\tenum InterestRateMode {\n\t\tNONE,\n\t\tSTABLE,\n\t\tVARIABLE\n\t}\n}\n"
    },
    "contracts/lending/WETHGateway.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IWETH} from \"../interfaces/IWETH.sol\";\nimport {IWETHGateway} from \"../interfaces/IWETHGateway.sol\";\nimport {ILendingPool} from \"../interfaces/ILendingPool.sol\";\nimport {IAToken} from \"../interfaces/IAToken.sol\";\nimport {ReserveConfiguration} from \"./libraries/configuration/ReserveConfiguration.sol\";\nimport {UserConfiguration} from \"./libraries/configuration/UserConfiguration.sol\";\nimport {Helpers} from \"./libraries/helpers/Helpers.sol\";\nimport {DataTypes} from \"./libraries/types/DataTypes.sol\";\n\ncontract WETHGateway is IWETHGateway, Ownable {\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\tusing UserConfiguration for DataTypes.UserConfigurationMap;\n\n\tIWETH internal immutable WETH;\n\n\t/**\n\t * @dev Sets the WETH address and the LendingPoolAddressesProvider address. Infinite approves lending pool.\n\t * @param weth Address of the Wrapped Ether contract\n\t **/\n\tconstructor(address weth) {\n\t\tWETH = IWETH(weth);\n\t}\n\n\tfunction authorizeLendingPool(address lendingPool) external onlyOwner {\n\t\tWETH.approve(lendingPool, type(uint256).max);\n\t}\n\n\t/**\n\t * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens)\n\t * is minted.\n\t * @param lendingPool address of the targeted underlying lending pool\n\t * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\n\t * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\n\t **/\n\tfunction depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable override {\n\t\tWETH.deposit{value: msg.value}();\n\t\tILendingPool(lendingPool).deposit(address(WETH), msg.value, onBehalfOf, referralCode);\n\t}\n\n\tfunction depositETHWithAutoDLP(address lendingPool, address onBehalfOf, uint16 referralCode) external payable {\n\t\tWETH.deposit{value: msg.value}();\n\t\tILendingPool(lendingPool).depositWithAutoDLP(address(WETH), msg.value, onBehalfOf, referralCode);\n\t}\n\n\t/**\n\t * @dev withdraws the WETH _reserves of msg.sender.\n\t * @param lendingPool address of the targeted underlying lending pool\n\t * @param amount amount of aWETH to withdraw and receive native ETH\n\t * @param to address of the user who will receive native ETH\n\t */\n\tfunction withdrawETH(address lendingPool, uint256 amount, address to) external override {\n\t\tIAToken aWETH = IAToken(ILendingPool(lendingPool).getReserveData(address(WETH)).aTokenAddress);\n\t\tuint256 userBalance = aWETH.balanceOf(msg.sender);\n\t\tuint256 amountToWithdraw = amount;\n\n\t\t// if amount is equal to uint(-1), the user wants to redeem everything\n\t\tif (amount == type(uint256).max) {\n\t\t\tamountToWithdraw = userBalance;\n\t\t}\n\t\taWETH.transferFrom(msg.sender, address(this), amountToWithdraw);\n\t\tILendingPool(lendingPool).withdraw(address(WETH), amountToWithdraw, address(this));\n\t\tWETH.withdraw(amountToWithdraw);\n\t\t_safeTransferETH(to, amountToWithdraw);\n\t}\n\n\t/**\n\t * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\n\t * @param lendingPool address of the targeted underlying lending pool\n\t * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\n\t * @param rateMode the rate mode to repay\n\t * @param onBehalfOf the address for which msg.sender is repaying\n\t */\n\tfunction repayETH(\n\t\taddress lendingPool,\n\t\tuint256 amount,\n\t\tuint256 rateMode,\n\t\taddress onBehalfOf\n\t) external payable override {\n\t\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebtMemory(\n\t\t\tonBehalfOf,\n\t\t\tILendingPool(lendingPool).getReserveData(address(WETH))\n\t\t);\n\n\t\tuint256 paybackAmount = DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE\n\t\t\t? stableDebt\n\t\t\t: variableDebt;\n\n\t\tif (amount < paybackAmount) {\n\t\t\tpaybackAmount = amount;\n\t\t}\n\t\trequire(msg.value >= paybackAmount, \"msg.value is less than repayment amount\");\n\t\tWETH.deposit{value: paybackAmount}();\n\t\tILendingPool(lendingPool).repay(address(WETH), msg.value, rateMode, onBehalfOf);\n\n\t\t// refund remaining dust eth\n\t\tif (msg.value > paybackAmount) _safeTransferETH(msg.sender, msg.value - paybackAmount);\n\t}\n\n\t/**\n\t * @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `LendingPool.borrow`.\n\t * @param lendingPool address of the targeted underlying lending pool\n\t * @param amount the amount of ETH to borrow\n\t * @param interesRateMode the interest rate mode\n\t * @param referralCode integrators are assigned a referral code and can potentially receive rewards\n\t */\n\tfunction borrowETH(\n\t\taddress lendingPool,\n\t\tuint256 amount,\n\t\tuint256 interesRateMode,\n\t\tuint16 referralCode\n\t) external override {\n\t\tILendingPool(lendingPool).borrow(address(WETH), amount, interesRateMode, referralCode, msg.sender);\n\t\tWETH.withdraw(amount);\n\t\t_safeTransferETH(msg.sender, amount);\n\t}\n\n\tfunction withdrawFromWETH(uint256 amount) external override{\n\t\tWETH.transferFrom(msg.sender, address(this), amount);\n\t\tWETH.withdraw(amount);\n\t\t_safeTransferETH(msg.sender, amount);\n\t}\n\n\t/**\n\t * @dev transfer ETH to an address, revert if it fails.\n\t * @param to recipient of the transfer\n\t * @param value the amount to send\n\t */\n\tfunction _safeTransferETH(address to, uint256 value) internal {\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"ETH_TRANSFER_FAILED\");\n\t}\n\n\t/**\n\t * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n\t * direct transfers to the contract address.\n\t * @param token token to transfer\n\t * @param to recipient of the transfer\n\t * @param amount amount to send\n\t */\n\tfunction emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n\t\tIERC20(token).transfer(to, amount);\n\t}\n\n\t/**\n\t * @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether\n\t * due selfdestructs or transfer ether to pre-computated contract address before deployment.\n\t * @param to recipient of the transfer\n\t * @param amount amount to send\n\t */\n\tfunction emergencyEtherTransfer(address to, uint256 amount) external onlyOwner {\n\t\t_safeTransferETH(to, amount);\n\t}\n\n\t/**\n\t * @dev Get WETH address used by WETHGateway\n\t */\n\tfunction getWETHAddress() external view returns (address) {\n\t\treturn address(WETH);\n\t}\n\n\t/**\n\t * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\n\t */\n\treceive() external payable {\n\t\trequire(msg.sender == address(WETH), \"Receive not allowed\");\n\t}\n\n\t/**\n\t * @dev Revert fallback calls\n\t */\n\tfallback() external payable {\n\t\trevert(\"Fallback not allowed\");\n\t}\n}\n"
    },
    "contracts/radiant/accessories/Leverager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/IEligibilityDataProvider.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\nimport \"../../interfaces/IChefIncentivesController.sol\";\nimport \"../../interfaces/ILockZap.sol\";\nimport \"../../interfaces/IAaveOracle.sol\";\nimport \"../../interfaces/IWETH.sol\";\nimport \"../../interfaces/IWETHGateway.sol\";\n\n/// @title Leverager Contract\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract Leverager is OwnableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t/// @notice Ratio Divisor\n\tuint256 public constant RATIO_DIVISOR = 10000;\n\n\t/// @notice Mock ETH address\n\taddress public constant API_ETH_MOCK_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n\t/// @notice Lending Pool address\n\tILendingPool public lendingPool;\n\n\t/// @notice EligibilityDataProvider contract address\n\tIEligibilityDataProvider public eligibilityDataProvider;\n\n\t/// @notice LockZap contract address\n\tILockZap public lockZap;\n\n\t/// @notice ChefIncentivesController contract address\n\tIChefIncentivesController public cic;\n\n\t/// @notice Wrapped ETH contract address\n\tIWETH public weth;\n\n\t/// @notice WETHGateway contract address\n\tIWETHGateway public wethGateway;\n\n\t/// @notice Aave oracle address\n\tIAaveOracle public aaveOracle;\n\n\t/// @notice Fee ratio\n\tuint256 public feePercent;\n\n\t/// @notice Treasury address\n\taddress public treasury;\n\n\t/// @notice Emitted when fee ratio is updated\n\tevent FeePercentUpdated(uint256 _feePercent);\n\n\t/// @notice Emitted when treasury is updated\n\tevent TreasuryUpdated(address indexed _treasury);\n\n\t/**\n\t * @notice Constructor\n\t * @param _lendingPool Address of lending pool.\n\t * @param _rewardEligibleDataProvider EligibilityProvider address.\n\t * @param _aaveOracle address.\n\t * @param _lockZap address.\n\t * @param _weth WETH address.\n\t * @param _feePercent leveraging fee ratio.\n\t * @param _treasury address.\n\t */\n\tfunction initialize(\n\t\tILendingPool _lendingPool,\n\t\tIEligibilityDataProvider _rewardEligibleDataProvider,\n\t\tIAaveOracle _aaveOracle,\n\t\tILockZap _lockZap,\n\t\tIChefIncentivesController _cic,\n\t\tIWETH _weth,\n\t\tIWETHGateway _wethGateway,\n\t\tuint256 _feePercent,\n\t\taddress _treasury\n\t) public initializer {\n\t\trequire(address(_lendingPool) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_rewardEligibleDataProvider) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_aaveOracle) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_lockZap) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_cic) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_weth) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_wethGateway) != (address(0)), \"Not a valid address\");\n\t\trequire(_treasury != address(0), \"Not a valid address\");\n\t\trequire(_feePercent <= 1e4, \"Invalid ratio\");\n\n\t\t__Ownable_init();\n\n\t\tlendingPool = _lendingPool;\n\t\teligibilityDataProvider = _rewardEligibleDataProvider;\n\t\tlockZap = _lockZap;\n\t\taaveOracle = _aaveOracle;\n\t\tcic = _cic;\n\t\tweth = _weth;\n\t\twethGateway = _wethGateway;\n\t\tfeePercent = _feePercent;\n\t\ttreasury = _treasury;\n\t}\n\n\t/**\n\t * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\n\t */\n\treceive() external payable {\n\t\trequire(msg.sender == address(weth), \"Receive not allowed\");\n\t}\n\n\t/**\n\t * @dev Revert fallback calls\n\t */\n\tfallback() external payable {\n\t\trevert(\"Fallback not allowed\");\n\t}\n\n\t/**\n\t * @notice Sets fee ratio\n\t * @param _feePercent fee ratio.\n\t */\n\tfunction setFeePercent(uint256 _feePercent) external onlyOwner {\n\t\trequire(_feePercent <= 1e4, \"Invalid ratio\");\n\t\tfeePercent = _feePercent;\n\t\temit FeePercentUpdated(_feePercent);\n\t}\n\n\t/**\n\t * @notice Sets fee ratio\n\t * @param _treasury address\n\t */\n\tfunction setTreasury(address _treasury) external onlyOwner {\n\t\trequire(_treasury != address(0), \"treasury is 0 address\");\n\t\ttreasury = _treasury;\n\t\temit TreasuryUpdated(_treasury);\n\t}\n\n\t/**\n\t * @dev Returns the configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The configuration of the reserve\n\t **/\n\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory) {\n\t\treturn lendingPool.getConfiguration(asset);\n\t}\n\n\t/**\n\t * @dev Returns variable debt token address of asset\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return varaiableDebtToken address of the asset\n\t **/\n\tfunction getVDebtToken(address asset) public view returns (address) {\n\t\tDataTypes.ReserveData memory reserveData = lendingPool.getReserveData(asset);\n\t\treturn reserveData.variableDebtTokenAddress;\n\t}\n\n\t/**\n\t * @dev Returns loan to value\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return ltv of the asset\n\t **/\n\tfunction ltv(address asset) public view returns (uint256) {\n\t\tDataTypes.ReserveConfigurationMap memory conf = lendingPool.getConfiguration(asset);\n\t\treturn conf.data % (2 ** 16);\n\t}\n\n\t/**\n\t * @dev Loop the deposit and borrow of an asset\n\t * @param asset for loop\n\t * @param amount for the initial deposit\n\t * @param interestRateMode stable or variable borrow mode\n\t * @param borrowRatio Ratio of tokens to borrow\n\t * @param loopCount Repeat count for loop\n\t * @param isBorrow true when the loop without deposit tokens\n\t **/\n\tfunction loop(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 interestRateMode,\n\t\tuint256 borrowRatio,\n\t\tuint256 loopCount,\n\t\tbool isBorrow\n\t) external {\n\t\trequire(borrowRatio <= RATIO_DIVISOR, \"Invalid ratio\");\n\t\tuint16 referralCode = 0;\n\t\tuint256 fee;\n\t\tif (!isBorrow) {\n\t\t\tIERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\n\t\t\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\t\tIERC20(asset).safeTransfer(treasury, fee);\n\t\t\tamount = amount.sub(fee);\n\t\t}\n\t\tif (IERC20(asset).allowance(address(this), address(lendingPool)) == 0) {\n\t\t\tIERC20(asset).safeApprove(address(lendingPool), type(uint256).max);\n\t\t}\n\t\tif (IERC20(asset).allowance(address(this), address(treasury)) == 0) {\n\t\t\tIERC20(asset).safeApprove(treasury, type(uint256).max);\n\t\t}\n\n\t\tif (!isBorrow) {\n\t\t\tlendingPool.deposit(asset, amount, msg.sender, referralCode);\n\t\t}\n\n\t\tcic.setEligibilityExempt(msg.sender, true);\n\n\t\tfor (uint256 i = 0; i < loopCount; i += 1) {\n\t\t\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\n\t\t\tlendingPool.borrow(asset, amount, interestRateMode, referralCode, msg.sender);\n\n\t\t\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\t\tIERC20(asset).safeTransfer(treasury, fee);\n\t\t\tlendingPool.deposit(asset, amount.sub(fee), msg.sender, referralCode);\n\t\t}\n\n\t\tcic.setEligibilityExempt(msg.sender, false);\n\n\t\tzapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\n\t}\n\n\t/**\n\t * @dev Loop the deposit and borrow of ETH\n\t * @param interestRateMode stable or variable borrow mode\n\t * @param borrowRatio Ratio of tokens to borrow\n\t * @param loopCount Repeat count for loop\n\t **/\n\tfunction loopETH(uint256 interestRateMode, uint256 borrowRatio, uint256 loopCount) external payable {\n\t\trequire(borrowRatio <= RATIO_DIVISOR, \"Invalid ratio\");\n\t\tuint16 referralCode = 0;\n\t\tuint256 amount = msg.value;\n\t\tif (IERC20(address(weth)).allowance(address(this), address(lendingPool)) == 0) {\n\t\t\tIERC20(address(weth)).safeApprove(address(lendingPool), type(uint256).max);\n\t\t}\n\t\tif (IERC20(address(weth)).allowance(address(this), address(treasury)) == 0) {\n\t\t\tIERC20(address(weth)).safeApprove(treasury, type(uint256).max);\n\t\t}\n\n\t\tuint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\t_safeTransferETH(treasury, fee);\n\n\t\tamount = amount.sub(fee);\n\n\t\tweth.deposit{value: amount}();\n\t\tlendingPool.deposit(address(weth), amount, msg.sender, referralCode);\n\n\t\tfor (uint256 i = 0; i < loopCount; i += 1) {\n\t\t\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\n\t\t\tlendingPool.borrow(address(weth), amount, interestRateMode, referralCode, msg.sender);\n\t\t\tif(weth.allowance(address(this), address(wethGateway)) < amount) {\n\t\t\t\tweth.approve(address(wethGateway), amount);\n\t\t\t}\n\t\t\twethGateway.withdrawFromWETH(amount);\n\n\t\t\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\t\t_safeTransferETH(treasury, fee);\n\n\t\t\tweth.deposit{value: amount.sub(fee)}();\n\t\t\tlendingPool.deposit(address(weth), amount.sub(fee), msg.sender, referralCode);\n\t\t}\n\n\t\tzapWETHWithBorrow(wethToZap(msg.sender), msg.sender);\n\t}\n\n\t/**\n\t * @notice Return estimated zap WETH amount for eligbility after loop.\n\t * @param user for zap\n\t * @param asset src token\n\t * @param amount of `asset`\n\t * @param borrowRatio Single ratio of borrow\n\t * @param loopCount Repeat count for loop\n\t **/\n\tfunction wethToZapEstimation(\n\t\taddress user,\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 borrowRatio,\n\t\tuint256 loopCount\n\t) external view returns (uint256) {\n\t\tif (asset == API_ETH_MOCK_ADDRESS) {\n\t\t\tasset = address(weth);\n\t\t}\n\t\tuint256 required = eligibilityDataProvider.requiredUsdValue(user);\n\t\tuint256 locked = eligibilityDataProvider.lockedUsdValue(user);\n\n\t\tuint256 fee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\tamount = amount.sub(fee);\n\n\t\trequired = required.add(requiredLocked(asset, amount));\n\n\t\tfor (uint256 i = 0; i < loopCount; i += 1) {\n\t\t\tamount = amount.mul(borrowRatio).div(RATIO_DIVISOR);\n\t\t\tfee = amount.mul(feePercent).div(RATIO_DIVISOR);\n\t\t\trequired = required.add(requiredLocked(asset, amount.sub(fee)));\n\t\t}\n\n\t\tif (locked >= required) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tuint256 deltaUsdValue = required.sub(locked); //decimals === 8\n\t\t\tuint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\n\t\t\tuint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\n\t\t\tuint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\n\t\t\twethAmount = wethAmount.add(wethAmount.mul(6).div(100));\n\t\t\treturn wethAmount;\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return estimated zap WETH amount for eligbility.\n\t * @param user for zap\n\t **/\n\tfunction wethToZap(address user) public view returns (uint256) {\n\t\tuint256 required = eligibilityDataProvider.requiredUsdValue(user);\n\t\tuint256 locked = eligibilityDataProvider.lockedUsdValue(user);\n\t\tif (locked >= required) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tuint256 deltaUsdValue = required.sub(locked); //decimals === 8\n\t\t\tuint256 wethPrice = aaveOracle.getAssetPrice(address(weth));\n\t\t\tuint8 priceDecimal = IChainlinkAggregator(aaveOracle.getSourceOfAsset(address(weth))).decimals();\n\t\t\tuint256 wethAmount = deltaUsdValue.mul(10 ** 18).mul(10 ** priceDecimal).div(wethPrice).div(10 ** 8);\n\t\t\twethAmount = wethAmount.add(wethAmount.mul(6).div(100));\n\t\t\treturn wethAmount;\n\t\t}\n\t}\n\n\t/**\n\t * @notice Zap WETH by borrowing.\n\t * @param amount to zap\n\t * @param borrower to zap\n\t * @return liquidity amount by zapping\n\t **/\n\tfunction zapWETHWithBorrow(uint256 amount, address borrower) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == borrower || msg.sender == address(lendingPool), \"!borrower||lendingpool\");\n\n\t\tif (amount > 0) {\n\t\t\tuint16 referralCode = 0;\n\t\t\tlendingPool.borrow(address(weth), amount, 2, referralCode, borrower);\n\t\t\tif (IERC20(address(weth)).allowance(address(this), address(lockZap)) == 0) {\n\t\t\t\tIERC20(address(weth)).safeApprove(address(lockZap), type(uint256).max);\n\t\t\t}\n\t\t\tliquidity = lockZap.zapOnBehalf(false, amount, 0, borrower);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Returns required LP lock amount.\n\t * @param asset underlyig asset\n\t * @param amount of tokens\n\t **/\n\tfunction requiredLocked(address asset, uint256 amount) internal view returns (uint256) {\n\t\tuint256 assetPrice = aaveOracle.getAssetPrice(asset);\n\t\tuint8 assetDecimal = IERC20Metadata(asset).decimals();\n\t\tuint256 requiredVal = assetPrice\n\t\t\t.mul(amount)\n\t\t\t.div(10 ** assetDecimal)\n\t\t\t.mul(eligibilityDataProvider.requiredDepositRatio())\n\t\t\t.div(eligibilityDataProvider.RATIO_DIVISOR());\n\t\treturn requiredVal;\n\t}\n\n\t/**\n\t * @dev transfer ETH to an address, revert if it fails.\n\t * @param to recipient of the transfer\n\t * @param value the amount to send\n\t */\n\tfunction _safeTransferETH(address to, uint256 value) internal {\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"ETH_TRANSFER_FAILED\");\n\t}\n}\n"
    },
    "contracts/radiant/accessories/StargateBorrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../interfaces/IStargateRouter.sol\";\nimport \"../../interfaces/IRouterETH.sol\";\nimport \"../../interfaces/ILendingPool.sol\";\nimport {IWETH} from \"../../interfaces/IWETH.sol\";\n\n/*\n    Chain Ids\n        Ethereum: 101\n        BSC: 102\n        Avalanche: 106\n        Polygon: 109\n        Arbitrum: 110\n        Optimism: 111\n        Fantom: 112\n        Swimmer: 114\n        DFK: 115\n        Harmony: 116\n        Moonbeam: 126\n\n    Pool Ids\n        Ethereum\n            USDC: 1\n            USDT: 2\n            ETH: 13\n        BSC\n            USDT: 2\n            BUSD: 5\n        Avalanche\n            USDC: 1\n            USDT: 2\n        Polygon\n            USDC: 1\n            USDT: 2\n        Arbitrum\n            USDC: 1\n            USDT: 2\n            ETH: 13\n        Optimism\n            USDC: 1\n            ETH: 13\n        Fantom\n            USDC: 1\n */\n\n/// @title Borrow gate via stargate\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract StargateBorrow is OwnableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t/// @notice FEE ratio DIVISOR\n\tuint256 public constant FEE_PERCENT_DIVISOR = 10000;\n\n\t// ETH pool Id\n\tuint256 private constant POOL_ID_ETH = 13;\n\n\t// ETH address\n\taddress private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n\t/// @notice Stargate Router\n\tIStargateRouter public router;\n\n\t/// @notice Stargate Router ETH\n\tIRouterETH public routerETH;\n\n\t/// @notice Lending Pool address\n\tILendingPool public lendingPool;\n\n\t// Weth address\n\tIWETH internal weth;\n\n\t/// @notice asset => poolId; at the moment, pool IDs for USDC and USDT are the same accross all chains\n\tmapping(address => uint256) public poolIdPerChain;\n\n\t/// @notice DAO wallet\n\taddress public daoTreasury;\n\n\t/// @notice Cross chain borrow fee ratio\n\tuint256 public xChainBorrowFeePercent;\n\n\t/// @notice Emitted when DAO address is updated\n\tevent DAOTreasuryUpdated(address indexed _daoTreasury);\n\n\t/// @notice Emitted when fee info is updated\n\tevent XChainBorrowFeePercentUpdated(uint256 percent);\n\n\t/// @notice Emited when pool ids of assets are updated\n\tevent PoolIDsUpdated(address[] assets, uint256[] poolIDs);\n\n\t/**\n\t * @notice Constructor\n\t * @param _router Stargate Router address\n\t * @param _routerETH Stargate Router for ETH\n\t * @param _lendingPool Lending pool\n\t * @param _weth WETH address\n\t * @param _treasury Treasury address\n\t * @param _xChainBorrowFeePercent Cross chain borrow fee ratio\n\t */\n\tfunction initialize(\n\t\tIStargateRouter _router,\n\t\tIRouterETH _routerETH,\n\t\tILendingPool _lendingPool,\n\t\tIWETH _weth,\n\t\taddress _treasury,\n\t\tuint256 _xChainBorrowFeePercent\n\t) public initializer {\n\t\trequire(address(_router) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_lendingPool) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_weth) != (address(0)), \"Not a valid address\");\n\t\trequire(_treasury != address(0), \"Not a valid address\");\n\t\trequire(_xChainBorrowFeePercent <= uint256(1e4), \"Not a valid number\");\n\n\t\trouter = _router;\n\t\trouterETH = _routerETH;\n\t\tlendingPool = _lendingPool;\n\t\tdaoTreasury = _treasury;\n\t\txChainBorrowFeePercent = _xChainBorrowFeePercent;\n\t\tweth = _weth;\n\t\t__Ownable_init();\n\t}\n\n\treceive() external payable {}\n\n\t/**\n\t * @notice Set DAO Treasury.\n\t * @param _daoTreasury DAO Treasury address.\n\t */\n\tfunction setDAOTreasury(address _daoTreasury) external onlyOwner {\n\t\trequire(_daoTreasury != address(0), \"daoTreasury is 0 address\");\n\t\tdaoTreasury = _daoTreasury;\n\t\temit DAOTreasuryUpdated(_daoTreasury);\n\t}\n\n\t/**\n\t * @notice Set Cross Chain Borrow Fee Percent.\n\t * @param percent Fee ratio.\n\t */\n\tfunction setXChainBorrowFeePercent(uint256 percent) external onlyOwner {\n\t\trequire(percent <= 1e4, \"Invalid ratio\");\n\t\txChainBorrowFeePercent = percent;\n\t\temit XChainBorrowFeePercentUpdated(percent);\n\t}\n\n\t/**\n\t * @notice Set pool ids of assets.\n\t * @param assets array.\n\t * @param poolIDs array.\n\t */\n\tfunction setPoolIDs(address[] memory assets, uint256[] memory poolIDs) external onlyOwner {\n\t\trequire(assets.length == poolIDs.length, \"length mismatch\");\n\t\tfor (uint256 i = 0; i < assets.length; i += 1) {\n\t\t\tpoolIdPerChain[assets[i]] = poolIDs[i];\n\t\t}\n\t\temit PoolIDsUpdated(assets, poolIDs);\n\t}\n\n\t/**\n\t * @notice Get Cross Chain Borrow Fee amount.\n\t * @param amount Fee cost.\n\t */\n\tfunction getXChainBorrowFeeAmount(uint256 amount) public view returns (uint256) {\n\t\tuint256 feeAmount = amount.mul(xChainBorrowFeePercent).div(FEE_PERCENT_DIVISOR);\n\t\treturn feeAmount;\n\t}\n\n\t/**\n\t * @notice Quote LZ swap fee\n\t * @dev Call Router.sol method to get the value for swap()\n\t */\n\tfunction quoteLayerZeroSwapFee(\n\t\tuint16 _dstChainId,\n\t\tuint8 _functionType,\n\t\tbytes calldata _toAddress,\n\t\tbytes calldata _transferAndCallPayload,\n\t\tIStargateRouter.lzTxObj memory _lzTxParams\n\t) external view returns (uint256, uint256) {\n\t\treturn router.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\n\t}\n\n\t/**\n\t * @dev Loop the deposit and borrow of an asset\n\t * @param asset for loop\n\t * @param amount for the initial deposit\n\t * @param interestRateMode stable or variable borrow mode\n\t * @param dstChainId Destination chain id\n\t **/\n\tfunction borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 dstChainId) external payable {\n\t\tif (address(asset) == ETH_ADDRESS && address(routerETH) != address(0)) {\n\t\t\tborrowETH(amount, interestRateMode, dstChainId);\n\t\t} else {\n\t\t\tlendingPool.borrow(asset, amount, interestRateMode, 0, msg.sender);\n\t\t\tuint256 feeAmount = getXChainBorrowFeeAmount(amount);\n\t\t\tIERC20(asset).safeTransfer(daoTreasury, feeAmount);\n\t\t\tamount = amount.sub(feeAmount);\n\t\t\tIERC20(asset).safeApprove(address(router), 0);\n\t\t\tIERC20(asset).safeApprove(address(router), amount);\n\t\t\trouter.swap{value: msg.value}(\n\t\t\t\tdstChainId, // dest chain id\n\t\t\t\tpoolIdPerChain[asset], // src chain pool id\n\t\t\t\tpoolIdPerChain[asset], // dst chain pool id\n\t\t\t\tpayable(msg.sender), // receive address\n\t\t\t\tamount, // transfer amount\n\t\t\t\tamount.mul(99).div(100), // max slippage: 1%\n\t\t\t\tIStargateRouter.lzTxObj(0, 0, \"0x\"),\n\t\t\t\tabi.encodePacked(msg.sender),\n\t\t\t\tbytes(\"\")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Borrow ETH\n\t * @param amount for the initial deposit\n\t * @param interestRateMode stable or variable borrow mode\n\t * @param dstChainId Destination chain id\n\t **/\n\tfunction borrowETH(uint256 amount, uint256 interestRateMode, uint16 dstChainId) internal {\n\t\tlendingPool.borrow(address(weth), amount, interestRateMode, 0, msg.sender);\n\t\tweth.withdraw(amount);\n\t\tuint256 feeAmount = getXChainBorrowFeeAmount(amount);\n\t\t_safeTransferETH(daoTreasury, feeAmount);\n\t\tamount = amount.sub(feeAmount);\n\n\t\trouterETH.swapETH{value: amount.add(msg.value)}(\n\t\t\tdstChainId, // dest chain id\n\t\t\tpayable(msg.sender), // receive address\n\t\t\tabi.encodePacked(msg.sender),\n\t\t\tamount, // transfer amount\n\t\t\tamount.mul(99).div(100) // max slippage: 1%\n\t\t);\n\t}\n\n\t/**\n\t * @dev transfer ETH to an address, revert if it fails.\n\t * @param to recipient of the transfer\n\t * @param value the amount to send\n\t */\n\tfunction _safeTransferETH(address to, uint256 value) internal {\n\t\t(bool success, ) = to.call{value: value}(new bytes(0));\n\t\trequire(success, \"ETH_TRANSFER_FAILED\");\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/BalancerPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./DustRefunder.sol\";\nimport \"../../../dependencies/math/BNum.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\n\nimport \"../../../interfaces/ILiquidityZap.sol\";\nimport \"../../../interfaces/IPoolHelper.sol\";\nimport \"../../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../interfaces/ILendingPool.sol\";\nimport \"../../../interfaces/balancer/IWeightedPoolFactory.sol\";\n\n/// @title Balance Pool Helper Contract\n/// @author Radiant\ncontract BalancerPoolHelper is IBalancerPoolHelper, Initializable, OwnableUpgradeable, BNum, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\taddress public inTokenAddr;\n\taddress public outTokenAddr;\n\taddress public wethAddr;\n\taddress public override lpTokenAddr;\n\taddress public vaultAddr;\n\tbytes32 public poolId;\n\taddress public lockZap;\n\tIWeightedPoolFactory public poolFactory;\n\n\tfunction initialize(\n\t\taddress _inTokenAddr,\n\t\taddress _outTokenAddr,\n\t\taddress _wethAddr,\n\t\taddress _vault,\n\t\tIWeightedPoolFactory _poolFactory\n\t) external initializer {\n\t\trequire(_inTokenAddr != address(0), \"inTokenAddr is 0 address\");\n\t\trequire(_outTokenAddr != address(0), \"outTokenAddr is 0 address\");\n\t\trequire(_wethAddr != address(0), \"wethAddr is 0 address\");\n\t\trequire(_vault != address(0), \"vault is 0 address\");\n\t\t__Ownable_init();\n\t\tinTokenAddr = _inTokenAddr;\n\t\toutTokenAddr = _outTokenAddr;\n\t\twethAddr = _wethAddr;\n\t\tvaultAddr = _vault;\n\t\tpoolFactory = _poolFactory;\n\t}\n\n\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) public {\n\t\trequire(lpTokenAddr == address(0), \"Already initialized\");\n\n\t\t(address token0, address token1) = sortTokens(inTokenAddr, outTokenAddr);\n\n\t\tIERC20[] memory tokens = new IERC20[](2);\n\t\ttokens[0] = IERC20(token0);\n\t\ttokens[1] = IERC20(token1);\n\n\t\taddress[] memory rateProviders = new address[](2);\n\t\trateProviders[0] = 0x0000000000000000000000000000000000000000;\n\t\trateProviders[1] = 0x0000000000000000000000000000000000000000;\n\n\t\tuint256 swapFeePercentage = 1000000000000000;\n\n\t\tuint256[] memory weights = new uint256[](2);\n\n\t\tif (token0 == outTokenAddr) {\n\t\t\tweights[0] = 800000000000000000;\n\t\t\tweights[1] = 200000000000000000;\n\t\t} else {\n\t\t\tweights[0] = 200000000000000000;\n\t\t\tweights[1] = 800000000000000000;\n\t\t}\n\n\t\tlpTokenAddr = poolFactory.create(\n\t\t\t_tokenName,\n\t\t\t_tokenSymbol,\n\t\t\ttokens,\n\t\t\tweights,\n\t\t\trateProviders,\n\t\t\tswapFeePercentage,\n\t\t\taddress(this)\n\t\t);\n\n\t\tpoolId = IWeightedPool(lpTokenAddr).getPoolId();\n\n\t\tIERC20 outToken = IERC20(outTokenAddr);\n\t\tIERC20 inToken = IERC20(inTokenAddr);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tIERC20 weth = IERC20(wethAddr);\n\n\t\toutToken.safeApprove(vaultAddr, type(uint256).max);\n\t\tinToken.safeApprove(vaultAddr, type(uint256).max);\n\t\tweth.approve(vaultAddr, type(uint256).max);\n\n\t\tIAsset[] memory assets = new IAsset[](2);\n\t\tassets[0] = IAsset(token0);\n\t\tassets[1] = IAsset(token1);\n\n\t\tuint256 inTokenAmt = inToken.balanceOf(address(this));\n\t\tuint256 outTokenAmt = outToken.balanceOf(address(this));\n\n\t\tuint256[] memory maxAmountsIn = new uint256[](2);\n\t\tif (token0 == inTokenAddr) {\n\t\t\tmaxAmountsIn[0] = inTokenAmt;\n\t\t\tmaxAmountsIn[1] = outTokenAmt;\n\t\t} else {\n\t\t\tmaxAmountsIn[0] = outTokenAmt;\n\t\t\tmaxAmountsIn[1] = inTokenAmt;\n\t\t}\n\n\t\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(\n\t\t\tassets,\n\t\t\tmaxAmountsIn,\n\t\t\tabi.encode(0, maxAmountsIn),\n\t\t\tfalse\n\t\t);\n\t\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\n\t\tuint256 liquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t}\n\n\t/// @dev Return fair reserve amounts given spot reserves, weights, and fair prices.\n\t/// @param resA Reserve of the first asset\n\t/// @param resB Reserve of the second asset\n\t/// @param wA Weight of the first asset\n\t/// @param wB Weight of the second asset\n\t/// @param pxA Fair price of the first asset\n\t/// @param pxB Fair price of the second asset\n\tfunction computeFairReserves(\n\t\tuint256 resA,\n\t\tuint256 resB,\n\t\tuint256 wA,\n\t\tuint256 wB,\n\t\tuint256 pxA,\n\t\tuint256 pxB\n\t) internal pure returns (uint256 fairResA, uint256 fairResB) {\n\t\t// NOTE: wA + wB = 1 (normalize weights)\n\t\t// constant product = resA^wA * resB^wB\n\t\t// constraints:\n\t\t// - fairResA^wA * fairResB^wB = constant product\n\t\t// - fairResA * pxA / wA = fairResB * pxB / wB\n\t\t// Solving equations:\n\t\t// --> fairResA^wA * (fairResA * (pxA * wB) / (wA * pxB))^wB = constant product\n\t\t// --> fairResA / r1^wB = constant product\n\t\t// --> fairResA = resA^wA * resB^wB * r1^wB\n\t\t// --> fairResA = resA * (resB/resA)^wB * r1^wB = resA * (r1/r0)^wB\n\t\tuint256 r0 = bdiv(resA, resB);\n\t\tuint256 r1 = bdiv(bmul(wA, pxB), bmul(wB, pxA));\n\t\t// fairResA = resA * (r1 / r0) ^ wB\n\t\t// fairResB = resB * (r0 / r1) ^ wA\n\t\tif (r0 > r1) {\n\t\t\tuint256 ratio = bdiv(r1, r0);\n\t\t\tfairResA = bmul(resA, bpow(ratio, wB));\n\t\t\tfairResB = bdiv(resB, bpow(ratio, wA));\n\t\t} else {\n\t\t\tuint256 ratio = bdiv(r0, r1);\n\t\t\tfairResA = bdiv(resA, bpow(ratio, wB));\n\t\t\tfairResB = bmul(resB, bpow(ratio, wA));\n\t\t}\n\t}\n\n\tfunction getLpPrice(uint256 rdntPriceInEth) public view override returns (uint256 priceInEth) {\n\t\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\n\t\t(address token0, ) = sortTokens(inTokenAddr, outTokenAddr);\n\t\t(uint256 rdntBalance, uint256 wethBalance, ) = getReserves();\n\t\tuint256[] memory weights = pool.getNormalizedWeights();\n\n\t\tuint256 rdntWeight;\n\t\tuint256 wethWeight;\n\n\t\tif (token0 == outTokenAddr) {\n\t\t\trdntWeight = weights[0];\n\t\t\twethWeight = weights[1];\n\t\t} else {\n\t\t\trdntWeight = weights[1];\n\t\t\twethWeight = weights[0];\n\t\t}\n\n\t\t// RDNT in eth, 8 decis\n\t\tuint256 pxA = rdntPriceInEth;\n\t\t// ETH in eth, 8 decis\n\t\tuint256 pxB = 100000000;\n\n\t\t(uint256 fairResA, uint256 fairResB) = computeFairReserves(\n\t\t\trdntBalance,\n\t\t\twethBalance,\n\t\t\trdntWeight,\n\t\t\twethWeight,\n\t\t\tpxA,\n\t\t\tpxB\n\t\t);\n\t\t// use fairReserveA and fairReserveB to compute LP token price\n\t\t// LP price = (fairResA * pxA + fairResB * pxB) / totalLPSupply\n\t\tpriceInEth = fairResA.mul(pxA).add(fairResB.mul(pxB)).div(pool.totalSupply());\n\t}\n\n\tfunction getPrice() public view returns (uint256 priceInEth) {\n\t\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\n\t\tuint256 rdntBalance = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\n\t\tuint256 wethBalance = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\n\n\t\tuint256 poolWeight = 4;\n\n\t\treturn wethBalance.mul(1e8).div(rdntBalance.div(poolWeight));\n\t}\n\n\tfunction getReserves() public view override returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\n\t\tIERC20 lpToken = IERC20(lpTokenAddr);\n\n\t\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\n\n\t\trdnt = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\n\t\tweth = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\n\n\t\tlpTokenSupply = lpToken.totalSupply().div(1e18);\n\t}\n\n\tfunction joinPool(uint256 _wethAmt, uint256 _rdntAmt) internal returns (uint256 liquidity) {\n\t\t(address token0, address token1) = sortTokens(outTokenAddr, inTokenAddr);\n\t\tIAsset[] memory assets = new IAsset[](2);\n\t\tassets[0] = IAsset(token0);\n\t\tassets[1] = IAsset(token1);\n\n\t\tuint256[] memory maxAmountsIn = new uint256[](2);\n\t\tif (token0 == inTokenAddr) {\n\t\t\tmaxAmountsIn[0] = _wethAmt;\n\t\t\tmaxAmountsIn[1] = _rdntAmt;\n\t\t} else {\n\t\t\tmaxAmountsIn[0] = _rdntAmt;\n\t\t\tmaxAmountsIn[1] = _wethAmt;\n\t\t}\n\n\t\tbytes memory userDataEncoded = abi.encode(IWeightedPool.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, maxAmountsIn, 0);\n\t\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(assets, maxAmountsIn, userDataEncoded, false);\n\t\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\n\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tliquidity = lp.balanceOf(address(this));\n\t}\n\n\tfunction zapWETH(uint256 amount) public override returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap\");\n\t\tIWETH(wethAddr).transferFrom(msg.sender, address(this), amount);\n\t\tliquidity = joinPool(amount, 0);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(outTokenAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public override returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap\");\n\t\tIWETH(wethAddr).transferFrom(msg.sender, address(this), _wethAmt);\n\t\tIERC20(outTokenAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\n\t\tliquidity = joinPool(_wethAmt, _rdntAmt);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\n\t\trefundDust(outTokenAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n\t\trequire(tokenA != tokenB, \"BalancerZap: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"BalancerZap: ZERO_ADDRESS\");\n\t}\n\n\tfunction quoteFromToken(uint256 tokenAmount) public view override returns (uint256 optimalWETHAmount) {\n\t\tuint256 rdntPriceInEth = getPrice();\n\t\tuint256 p1 = rdntPriceInEth.mul(1e10);\n\t\tuint256 ethRequiredBeforeWeight = tokenAmount.mul(p1).div(1e18);\n\t\toptimalWETHAmount = ethRequiredBeforeWeight.div(4);\n\t}\n\n\tfunction swap(\n\t\tuint256 _amount,\n\t\taddress _tokenInAddress,\n\t\taddress _tokenOutAddress,\n\t\taddress _lpAddr\n\t) internal returns (uint256 amountOut) {\n\t\tIAsset tokenInAddress = IAsset(_tokenInAddress);\n\t\tIAsset tokenOutAddress = IAsset(_tokenOutAddress);\n\n\t\tbytes32 _poolId = IWeightedPool(_lpAddr).getPoolId();\n\n\t\tbytes memory userDataEncoded = abi.encode(); //https://dev.balancer.fi/helpers/encoding\n\t\tIVault.SingleSwap memory singleSwapRequest = IVault.SingleSwap(\n\t\t\t_poolId,\n\t\t\tIVault.SwapKind.GIVEN_IN,\n\t\t\ttokenInAddress,\n\t\t\ttokenOutAddress,\n\t\t\t_amount,\n\t\t\tuserDataEncoded\n\t\t);\n\t\tIVault.FundManagement memory fundManagementRequest = IVault.FundManagement(\n\t\t\taddress(this),\n\t\t\tfalse,\n\t\t\tpayable(address(this)),\n\t\t\tfalse\n\t\t);\n\n\t\tuint256 limit = 0;\n\n\t\tamountOut = IVault(vaultAddr).swap(\n\t\t\tsingleSwapRequest,\n\t\t\tfundManagementRequest,\n\t\t\tlimit,\n\t\t\t(block.timestamp + 3 minutes)\n\t\t);\n\t}\n\n\tfunction setLockZap(address _lockZap) external onlyOwner {\n\t\trequire(_lockZap != address(0), \"lockZap is 0 address\");\n\t\tlockZap = _lockZap;\n\t}\n\n\tfunction getSwapFeePercentage() public onlyOwner returns (uint256 fee) {\n\t\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\n\t\tfee = pool.getSwapFeePercentage();\n\t}\n\n\tfunction setSwapFeePercentage(uint256 _fee) public onlyOwner {\n\t\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\n\t\tpool.setSwapFeePercentage(_fee);\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/DustRefunder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../../interfaces/IWETH.sol\";\n\ncontract DustRefunder {\n\tusing SafeERC20 for IERC20;\n\n\tfunction refundDust(address _rdnt, address _weth, address _refundAddress) internal {\n\t\tIERC20 rdnt = IERC20(_rdnt);\n\t\tIWETH weth = IWETH(_weth);\n\n\t\tuint256 dustWETH = weth.balanceOf(address(this));\n\t\tif (dustWETH > 0) {\n\t\t\tweth.transfer(_refundAddress, dustWETH);\n\t\t}\n\t\tuint256 dustRdnt = rdnt.balanceOf(address(this));\n\t\tif (dustRdnt > 0) {\n\t\t\trdnt.safeTransfer(_refundAddress, dustRdnt);\n\t\t}\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/LiquidityZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n//\n// LiquidityZAP takes ETH and converts to  liquidity tokens.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// Attribution: CORE / cvault.finance\n//  https://github.com/cVault-finance/CORE-periphery/blob/master/contracts/COREv1Router.sol\n//\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n//----------------------------------------------------------------------------------\n//    I n s t a n t\n//\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'\n//\n//----------------------------------------------------------------------------------\n\nimport \"@uniswap/lib/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@uniswap/lib/contracts/libraries/UniswapV2Library.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\n\ncontract LiquidityZap is Initializable, OwnableUpgradeable {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\taddress public _token;\n\taddress public _tokenWETHPair;\n\tIWETH public weth;\n\tbool private initialized;\n\taddress public poolHelper;\n\n\tfunction initialize() external initializer {\n\t\t__Ownable_init();\n\t}\n\n\tfunction initLiquidityZap(address token, address _weth, address tokenWethPair, address _helper) external {\n\t\trequire(!initialized, \"already initialized\");\n\t\t_token = token;\n\t\tweth = IWETH(_weth);\n\t\t_tokenWETHPair = tokenWethPair;\n\t\tinitialized = true;\n\t\tpoolHelper = _helper;\n\t}\n\n\tfallback() external payable {\n\t\tif (msg.sender != address(weth)) {\n\t\t\taddLiquidityETHOnly(payable(msg.sender));\n\t\t}\n\t}\n\n\tfunction zapETH(address payable _onBehalf) external payable returns (uint256 liquidity) {\n\t\trequire(msg.value > 0, \"LiquidityZAP: ETH amount must be greater than 0\");\n\t\treturn addLiquidityETHOnly(_onBehalf);\n\t}\n\n\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == poolHelper, \"!poolhelper\");\n\t\trequire(to != address(0), \"Invalid address\");\n\t\tuint256 buyAmount = _amount.div(2);\n\t\trequire(buyAmount > 0, \"Insufficient ETH amount\");\n\n\t\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\n\t\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\n\n\t\tweth.transfer(_tokenWETHPair, buyAmount);\n\n\t\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), _token);\n\t\tIUniswapV2Pair(_tokenWETHPair).swap(\n\t\t\t_token == token0 ? outTokens : 0,\n\t\t\t_token == token1 ? outTokens : 0,\n\t\t\taddress(this),\n\t\t\t\"\"\n\t\t);\n\n\t\treturn _addLiquidity(outTokens, buyAmount, to);\n\t}\n\n\tfunction addLiquidityETHOnly(address payable to) public payable returns (uint256 liquidity) {\n\t\trequire(to != address(0), \"LiquidityZAP: Invalid address\");\n\t\tuint256 buyAmount = msg.value.div(2);\n\t\trequire(buyAmount > 0, \"LiquidityZAP: Insufficient ETH amount\");\n\t\tweth.deposit{value: msg.value}();\n\n\t\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\n\t\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\n\n\t\tweth.transfer(_tokenWETHPair, buyAmount);\n\n\t\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), _token);\n\t\tIUniswapV2Pair(_tokenWETHPair).swap(\n\t\t\t_token == token0 ? outTokens : 0,\n\t\t\t_token == token1 ? outTokens : 0,\n\t\t\taddress(this),\n\t\t\t\"\"\n\t\t);\n\n\t\treturn _addLiquidity(outTokens, buyAmount, to);\n\t}\n\n\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\n\t\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\n\t\toptimalWETHAmount = UniswapV2Library.quote(tokenAmount, tokenReserve, wethReserve);\n\t}\n\n\tfunction quote(uint256 wethAmount) public view returns (uint256 optimalTokenAmount) {\n\t\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\n\t\toptimalTokenAmount = UniswapV2Library.quote(wethAmount, wethReserve, tokenReserve);\n\t}\n\n\t// use with quote\n\tfunction standardAdd(uint256 tokenAmount, uint256 _wethAmt, address payable to) public returns (uint256 liquidity) {\n\t\tIERC20(_token).safeTransferFrom(msg.sender, address(this), tokenAmount);\n\t\tweth.transferFrom(msg.sender, address(this), _wethAmt);\n\t\treturn _addLiquidity(tokenAmount, _wethAmt, to);\n\t}\n\n\tfunction _addLiquidity(\n\t\tuint256 tokenAmount,\n\t\tuint256 wethAmount,\n\t\taddress payable to\n\t) internal returns (uint256 liquidity) {\n\t\t(uint256 wethReserve, uint256 tokenReserve) = getPairReserves();\n\n\t\tuint256 optimalTokenAmount = UniswapV2Library.quote(wethAmount, wethReserve, tokenReserve);\n\n\t\tuint256 optimalWETHAmount;\n\t\tif (optimalTokenAmount > tokenAmount) {\n\t\t\toptimalWETHAmount = UniswapV2Library.quote(tokenAmount, tokenReserve, wethReserve);\n\t\t\toptimalTokenAmount = tokenAmount;\n\t\t} else optimalWETHAmount = wethAmount;\n\n\t\tassert(weth.transfer(_tokenWETHPair, optimalWETHAmount));\n\t\tIERC20(_token).safeTransfer(_tokenWETHPair, optimalTokenAmount);\n\n\t\tliquidity = IUniswapV2Pair(_tokenWETHPair).mint(to);\n\n\t\t//refund dust\n\t\tif (tokenAmount > optimalTokenAmount) IERC20(_token).safeTransfer(to, tokenAmount.sub(optimalTokenAmount));\n\t\tif (wethAmount > optimalWETHAmount) {\n\t\t\tweth.transfer(to, wethAmount.sub(optimalWETHAmount));\n\t\t}\n\t}\n\n\tfunction getLPTokenPerEthUnit(uint256 ethAmt) public view returns (uint256 liquidity) {\n\t\t(uint256 reserveWeth, uint256 reserveTokens) = getPairReserves();\n\t\tuint256 outTokens = UniswapV2Library.getAmountOut(ethAmt.div(2), reserveWeth, reserveTokens);\n\t\tuint256 _totalSupply = IUniswapV2Pair(_tokenWETHPair).totalSupply();\n\n\t\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), _token);\n\t\t(uint256 amount0, uint256 amount1) = token0 == _token ? (outTokens, ethAmt.div(2)) : (ethAmt.div(2), outTokens);\n\t\t(uint256 _reserve0, uint256 _reserve1) = token0 == _token\n\t\t\t? (reserveTokens, reserveWeth)\n\t\t\t: (reserveWeth, reserveTokens);\n\t\tliquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n\t}\n\n\tfunction getPairReserves() internal view returns (uint256 wethReserves, uint256 tokenReserves) {\n\t\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), _token);\n\t\t(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_tokenWETHPair).getReserves();\n\t\t(wethReserves, tokenReserves) = token0 == _token ? (reserve1, reserve0) : (reserve0, reserve1);\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/UniswapPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./DustRefunder.sol\";\nimport \"@uniswap/lib/contracts/libraries/UniswapV2Library.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\nimport \"../../../dependencies/math/HomoraMath.sol\";\n\nimport \"../../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../../interfaces/ILiquidityZap.sol\";\nimport \"../../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../interfaces/ILendingPool.sol\";\nimport \"../../../interfaces/IPoolHelper.sol\";\nimport \"../../../interfaces/IERC20DetailedBytes.sol\";\n\ncontract UniswapPoolHelper is Initializable, OwnableUpgradeable, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing HomoraMath for uint;\n\n\taddress public lpTokenAddr;\n\taddress public rdntAddr;\n\taddress public wethAddr;\n\n\tIUniswapV2Router02 public router;\n\tILiquidityZap public liquidityZap;\n\taddress public lockZap;\n\n\tfunction initialize(\n\t\taddress _rdntAddr,\n\t\taddress _wethAddr,\n\t\taddress _routerAddr,\n\t\tILiquidityZap _liquidityZap\n\t) external initializer {\n\t\t__Ownable_init();\n\n\t\trdntAddr = _rdntAddr;\n\t\twethAddr = _wethAddr;\n\n\t\trouter = IUniswapV2Router02(_routerAddr);\n\t\tliquidityZap = _liquidityZap;\n\t}\n\n\treceive() external payable {}\n\n\tfunction initializePool() public {\n\t\tlpTokenAddr = IUniswapV2Factory(router.factory()).createPair(rdntAddr, wethAddr);\n\n\t\tIERC20 rdnt = IERC20(rdntAddr);\n\t\trdnt.safeApprove(address(router), type(uint256).max);\n\t\trdnt.safeApprove(address(liquidityZap), type(uint256).max);\n\t\tIERC20(wethAddr).approve(address(liquidityZap), type(uint256).max);\n\t\tIERC20(wethAddr).approve(address(router), type(uint256).max);\n\n\t\trouter.addLiquidity(\n\t\t\taddress(rdnt),\n\t\t\twethAddr,\n\t\t\trdnt.balanceOf(address(this)),\n\t\t\tIERC20(wethAddr).balanceOf(address(this)),\n\t\t\t0,\n\t\t\t0,\n\t\t\taddress(this),\n\t\t\tblock.timestamp\n\t\t);\n\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, lp.balanceOf(address(this)));\n\n\t\tliquidityZap.initLiquidityZap(rdntAddr, wethAddr, lpTokenAddr, address(this));\n\t}\n\n\tfunction zapWETH(uint256 amount) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap only\");\n\t\tIWETH weth = IWETH(wethAddr);\n\t\tweth.transferFrom(msg.sender, address(liquidityZap), amount);\n\t\tliquidity = liquidityZap.addLiquidityWETHOnly(amount, payable(address(this)));\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\n\t\tliquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(rdntAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction getReserves() public view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\n\t\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\n\t\tweth = lpToken.token0() != address(rdntAddr) ? reserve0 : reserve1;\n\t\trdnt = lpToken.token0() == address(rdntAddr) ? reserve0 : reserve1;\n\n\t\tlpTokenSupply = lpToken.totalSupply();\n\t}\n\n\t// UniV2 / SLP LP Token Price\n\t// Alpha Homora Fair LP Pricing Method (flash loan resistant)\n\t// https://cmichel.io/pricing-lp-tokens/\n\t// https://blog.alphafinance.io/fair-lp-token-pricing/\n\t// https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol\n\tfunction getLpPrice(uint rdntPriceInEth) public view returns (uint256 priceInEth) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\n\t\t(uint reserve0, uint reserve1, ) = lpToken.getReserves();\n\t\tuint wethReserve = lpToken.token0() != address(rdntAddr) ? reserve0 : reserve1;\n\t\tuint rdntReserve = lpToken.token0() == address(rdntAddr) ? reserve0 : reserve1;\n\n\t\tuint lpSupply = lpToken.totalSupply();\n\n\t\tuint sqrtK = HomoraMath.sqrt(rdntReserve.mul(wethReserve)).fdiv(lpSupply); // in 2**112\n\n\t\t// rdnt in eth, decis 8\n\t\tuint px0 = rdntPriceInEth.mul(2 ** 112); // in 2**112\n\t\t// eth in eth, decis 8\n\t\tuint px1 = uint256(100000000).mul(2 ** 112); // in 2**112\n\n\t\t// fair token0 amt: sqrtK * sqrt(px1/px0)\n\t\t// fair token1 amt: sqrtK * sqrt(px0/px1)\n\t\t// fair lp price = 2 * sqrt(px0 * px1)\n\t\t// split into 2 sqrts multiplication to prevent uint overflow (note the 2**112)\n\t\tuint result = sqrtK.mul(2).mul(HomoraMath.sqrt(px0)).div(2 ** 56).mul(HomoraMath.sqrt(px1)).div(2 ** 56);\n\t\tpriceInEth = result.div(2 ** 112);\n\t}\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap only\");\n\t\tIWETH weth = IWETH(wethAddr);\n\t\tweth.transferFrom(msg.sender, address(this), _wethAmt);\n\t\tIERC20(rdntAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\t\tliquidity = liquidityZap.standardAdd(_rdntAmt, _wethAmt, address(this));\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tliquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(rdntAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\n\t\treturn liquidityZap.quoteFromToken(tokenAmount);\n\t}\n\n\tfunction getLiquidityZap() public view returns (address) {\n\t\treturn address(liquidityZap);\n\t}\n\n\tfunction setLiquidityZap(address _liquidityZap) external onlyOwner {\n\t\trequire(_liquidityZap != address(0), \"LiquidityZap can't be 0 address\");\n\t\tliquidityZap = ILiquidityZap(_liquidityZap);\n\t}\n\n\tfunction setLockZap(address _lockZap) external onlyOwner {\n\t\trequire(_lockZap != address(0), \"LockZap can't be 0 address\");\n\t\tlockZap = _lockZap;\n\t}\n\n\tfunction getPrice() public view returns (uint256 priceInEth) {\n\t\t(uint256 rdnt, uint256 weth, ) = getReserves();\n\t\tif (rdnt > 0) {\n\t\t\tpriceInEth = weth.mul(10 ** 8).div(rdnt);\n\t\t}\n\t}\n}\n"
    },
    "contracts/radiant/zap/LockZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./helpers/DustRefunder.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\";\n\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../interfaces/ILiquidityZap.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/IPoolHelper.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\nimport \"../../interfaces/IWETH.sol\";\n\n/// @title Borrow gate via stargate\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract LockZap is Initializable, OwnableUpgradeable, PausableUpgradeable, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\t/// @notice RAITO Divisor\n\tuint256 public constant RATIO_DIVISOR = 10000;\n\n\t/// @notice Acceptable ratio\n\tuint256 public ACCEPTABLE_RATIO;\n\n\t/// @notice Wrapped ETH\n\tIWETH public weth;\n\n\t/// @notice RDNT token address\n\taddress public rdntAddr;\n\n\t/// @notice Multi Fee distribution contract\n\tIMultiFeeDistribution public mfd;\n\n\t/// @notice Lending Pool contract\n\tILendingPool public lendingPool;\n\n\t/// @notice Pool helper contract\n\tIPoolHelper public poolHelper;\n\n\t/// @notice Price provider contract\n\tIPriceProvider public priceProvider;\n\n\t/// @notice ETH oracle contract\n\tIChainlinkAggregator public ethOracle;\n\n\t/// @notice Emitted when zap is done\n\tevent Zapped(\n\t\tbool _borrow,\n\t\tuint256 _ethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress indexed _from,\n\t\taddress indexed _onBehalf,\n\t\tuint256 _lockTypeIndex\n\t);\n\n\tevent SlippageRatioChanged(uint256 newRatio);\n\n\tuint256 public ethLPRatio; // paramter to set the ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\n\n\t/**\n\t * @notice Initializer\n\t * @param _poolHelper Pool helper address\n\t * @param _lendingPool Lending pool\n\t * @param _weth weth address\n\t * @param _rdntAddr RDNT token address\n\t */\n\tfunction initialize(\n\t\tIPoolHelper _poolHelper,\n\t\tILendingPool _lendingPool,\n\t\tIWETH _weth,\n\t\taddress _rdntAddr,\n\t\tuint256 _ethLPRatio,\n\t\tuint256 _ACCEPTABLE_RATIO\n\t) external initializer {\n\t\trequire(address(_poolHelper) != address(0), \"PoolHelper can't be 0 address\");\n\t\trequire(address(_lendingPool) != address(0), \"LendingPool can't be 0 address\");\n\t\trequire(address(_weth) != address(0), \"WETH can't be 0 address\");\n\t\trequire(_rdntAddr != address(0), \"RDNT can't be 0 address\");\n\t\trequire(_ethLPRatio > 0 && _ethLPRatio < 10_000, \"Invalid ethLPRatio\");\n\t\t__Ownable_init();\n\t\t__Pausable_init();\n\n\t\tlendingPool = _lendingPool;\n\t\tpoolHelper = _poolHelper;\n\t\tweth = _weth;\n\t\trdntAddr = _rdntAddr;\n\t\tethLPRatio = _ethLPRatio;\n\t\tACCEPTABLE_RATIO = _ACCEPTABLE_RATIO;\n\t}\n\n\treceive() external payable {}\n\n\t/**\n\t * @notice Set Price Provider.\n\t * @param _provider Price provider contract address.\n\t */\n\tfunction setPriceProvider(address _provider) external onlyOwner {\n\t\trequire(address(_provider) != address(0), \"PriceProvider can't be 0 address\");\n\t\tpriceProvider = IPriceProvider(_provider);\n\t\tethOracle = IChainlinkAggregator(priceProvider.baseTokenPriceInUsdProxyAggregator());\n\t}\n\n\t/**\n\t * @notice Set Multi fee distribution contract.\n\t * @param _mfdAddr New contract address.\n\t */\n\tfunction setMfd(address _mfdAddr) external onlyOwner {\n\t\trequire(address(_mfdAddr) != address(0), \"MFD can't be 0 address\");\n\t\tmfd = IMultiFeeDistribution(_mfdAddr);\n\t}\n\n\t/**\n\t * @notice Set Pool Helper contract\n\t * @param _poolHelper New PoolHelper contract address.\n\t */\n\tfunction setPoolHelper(address _poolHelper) external onlyOwner {\n\t\trequire(address(_poolHelper) != address(0), \"PoolHelper can't be 0 address\");\n\t\tpoolHelper = IPoolHelper(_poolHelper);\n\t}\n\n\t/**\n\t * @notice Returns pool helper address\n\t */\n\tfunction getPoolHelper() public view returns (address) {\n\t\treturn address(poolHelper);\n\t}\n\n\t/**\n\t * @notice Get Variable debt token address\n\t * @param _asset underlying.\n\t */\n\tfunction getVDebtToken(address _asset) public view returns (address) {\n\t\tDataTypes.ReserveData memory reserveData = lendingPool.getReserveData(_asset);\n\t\treturn reserveData.variableDebtTokenAddress;\n\t}\n\n\t/**\n\t * @notice Get quote from the pool\n\t * @param _tokenAmount amount of tokens.\n\t */\n\tfunction quoteFromToken(uint256 _tokenAmount) public view returns (uint256 optimalWETHAmount) {\n\t\toptimalWETHAmount = poolHelper.quoteFromToken(_tokenAmount).mul(100).div(97);\n\t}\n\n\t/**\n\t * @notice Zap tokens to stake LP\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _lockTypeIndex lock length index.\n\t */\n\tfunction zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\tuint256 _lockTypeIndex\n\t) public payable whenNotPaused returns (uint256 liquidity) {\n\t\treturn _zap(_borrow, _wethAmt, _rdntAmt, msg.sender, msg.sender, _lockTypeIndex, msg.sender);\n\t}\n\n\t/**\n\t * @notice Zap tokens to stake LP\n\t * @dev It will use default lock index\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _onBehalf user address to be zapped.\n\t */\n\tfunction zapOnBehalf(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _onBehalf\n\t) public payable whenNotPaused returns (uint256 liquidity) {\n\t\tuint256 duration = mfd.defaultLockIndex(_onBehalf);\n\t\treturn _zap(_borrow, _wethAmt, _rdntAmt, msg.sender, _onBehalf, duration, _onBehalf);\n\t}\n\n\t/**\n\t * @notice Zap tokens from vesting\n\t * @param _borrow option to borrow ETH\n\t * @param _lockTypeIndex lock length index.\n\t */\n\tfunction zapFromVesting(\n\t\tbool _borrow,\n\t\tuint256 _lockTypeIndex\n\t) public payable whenNotPaused returns (uint256 liquidity) {\n\t\tuint256 rdntAmt = mfd.zapVestingToLp(msg.sender);\n\t\tuint256 wethAmt = quoteFromToken(rdntAmt);\n\t\treturn _zap(_borrow, wethAmt, rdntAmt, address(this), msg.sender, _lockTypeIndex, msg.sender);\n\t}\n\n\t/**\n\t * @notice Borrow ETH\n\t * @param _amount of ETH\n\t */\n\tfunction _executeBorrow(uint256 _amount) internal {\n\t\t(, , uint256 availableBorrowsETH, , , ) = lendingPool.getUserAccountData(msg.sender);\n\t\tuint256 amountInETH = _amount.mul(10 ** 8).div(10 ** ERC20(address(weth)).decimals());\n\t\trequire(availableBorrowsETH > amountInETH, \"Not enough availableBorrowsETH\");\n\n\t\tuint16 referralCode = 0;\n\t\tlendingPool.borrow(address(weth), _amount, 2, referralCode, msg.sender);\n\t}\n\n\t/**\n\t * @notice Calculates slippage ratio from weth to LP\n\t * @param _ethAmt ETH amount\n\t * @param _liquidity LP token amount\n\t */\n\tfunction _calcSlippage(uint256 _ethAmt, uint256 _liquidity) internal returns (uint256 ratio) {\n\t\tpriceProvider.update();\n\t\tuint256 ethAmtUsd = _ethAmt.mul(uint256(ethOracle.latestAnswer())).div(1E18);\n\t\tuint256 lpAmtUsd = _liquidity * priceProvider.getLpTokenPriceUsd();\n\t\tratio = lpAmtUsd.mul(RATIO_DIVISOR).div(ethAmtUsd);\n\t\tratio = ratio.div(1E18);\n\t}\n\n\t/**\n\t * @notice Zap into LP\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _from src address of RDNT\n\t * @param _onBehalf of the user.\n\t * @param _lockTypeIndex lock length index.\n\t * @param _refundAddress dust is refunded to this address.\n\t */\n\tfunction _zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _from,\n\t\taddress _onBehalf,\n\t\tuint256 _lockTypeIndex,\n\t\taddress _refundAddress\n\t) internal returns (uint256 liquidity) {\n\t\trequire(_wethAmt != 0 || msg.value != 0, \"ETH required\");\n\t\tif (msg.value != 0) {\n\t\t\trequire(!_borrow, \"invalid zap ETH source\");\n\t\t\t_wethAmt = msg.value;\n\t\t\tweth.deposit{value: _wethAmt}();\n\t\t} else {\n\t\t\tif (_borrow) {\n\t\t\t\t_executeBorrow(_wethAmt);\n\t\t\t} else {\n\t\t\t\tweth.transferFrom(msg.sender, address(this), _wethAmt);\n\t\t\t}\n\t\t}\n\n\t\tuint256 totalWethValueIn;\n\t\tweth.approve(address(poolHelper), _wethAmt);\n\t\t//case where rdnt is matched with borrowed ETH\n\t\tif (_rdntAmt != 0) {\n\t\t\trequire(_wethAmt >= poolHelper.quoteFromToken(_rdntAmt), \"ETH sent is not enough\");\n\n\t\t\t// _from == this when zapping from vesting\n\t\t\tif (_from != address(this)) {\n\t\t\t\tIERC20(rdntAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\t\t\t}\n\n\t\t\tIERC20(rdntAddr).safeApprove(address(poolHelper), _rdntAmt);\n\t\t\tliquidity = poolHelper.zapTokens(_wethAmt, _rdntAmt);\n\t\t\ttotalWethValueIn = _wethAmt.mul(RATIO_DIVISOR).div(ethLPRatio);\n\t\t} else {\n\t\t\tliquidity = poolHelper.zapWETH(_wethAmt);\n\t\t\ttotalWethValueIn = _wethAmt;\n\t\t}\n\n\t\tif (address(priceProvider) != address(0)) {\n\t\t\tuint256 slippage = _calcSlippage(totalWethValueIn, liquidity);\n\t\t\trequire(slippage >= ACCEPTABLE_RATIO, \"too much slippage\");\n\t\t}\n\n\t\tIERC20(poolHelper.lpTokenAddr()).safeApprove(address(mfd), liquidity);\n\t\tmfd.stake(liquidity, _onBehalf, _lockTypeIndex);\n\t\temit Zapped(_borrow, _wethAmt, _rdntAmt, _from, _onBehalf, _lockTypeIndex);\n\n\t\trefundDust(rdntAddr, address(weth), _refundAddress);\n\t}\n\n\tfunction pause() external onlyOwner {\n\t\t_pause();\n\t}\n\n\tfunction unpause() external onlyOwner {\n\t\t_unpause();\n\t}\n\n\tfunction setAcceptableRatio(uint256 _newRatio) external onlyOwner {\n\t\trequire(_newRatio <= RATIO_DIVISOR, \"ratio too high\");\n\t\tACCEPTABLE_RATIO = _newRatio;\n\t\temit SlippageRatioChanged(ACCEPTABLE_RATIO);\n\t}\n}\n"
    },
    "contracts/test/TestBalancerPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/zap/helpers/BalancerPoolHelper.sol\";\n\ncontract TestBalancerPoolHelper is BalancerPoolHelper {\n\t// outToken is RDNT\n\tfunction sell(uint256 _amount) public returns (uint256 amountOut) {\n\t\treturn\n\t\t\tswap(\n\t\t\t\t_amount,\n\t\t\t\toutTokenAddr,\n\t\t\t\tinTokenAddr,\n\t\t\t\tlpTokenAddr\n\t\t\t);\n\t}\n}\n"
    },
    "contracts/test/TestLockZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/zap/LockZap.sol\";\nimport \"../interfaces/IPoolHelper.sol\";\n\ncontract TestnetLockZap is LockZap {\n\tfunction sell(uint256 _amount) public returns (uint256 ethOut) {\n\t\tIERC20(rdntAddr).transferFrom(msg.sender, address(poolHelper), _amount);\n\t\treturn ITestPoolHelper(address(poolHelper)).sell(_amount);\n\t}\n}\n"
    },
    "contracts/test/TestUniswapPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../radiant/zap/helpers/UniswapPoolHelper.sol\";\n\ncontract TestUniswapPoolHelper is UniswapPoolHelper {\n\tusing SafeERC20 for IERC20;\n\n\tfunction swap(uint256 _amount, address, address, address) public returns (uint256 amountOut) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\t\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\n\n\t\t(address token0, address token1) = UniswapV2Library.sortTokens(address(wethAddr), rdntAddr);\n\n\t\tuint256 reserveWeth = token0 == address(wethAddr) ? reserve0 : reserve1;\n\t\tuint256 reserveTokens = token0 == address(wethAddr) ? reserve1 : reserve0;\n\n\t\tuint256 outETH = UniswapV2Library.getAmountOut(_amount, reserveTokens, reserveWeth);\n\n\t\tIERC20(rdntAddr).safeTransfer(lpTokenAddr, _amount);\n\n\t\tIUniswapV2Pair(lpTokenAddr).swap(\n\t\t\taddress(wethAddr) == token0 ? outETH : 0,\n\t\t\taddress(wethAddr) == token1 ? outETH : 0,\n\t\t\taddress(this),\n\t\t\t\"\"\n\t\t);\n\n\t\tamountOut = IERC20(address(wethAddr)).balanceOf(address(this));\n\t}\n\n\tfunction sell(uint256 _amount) public returns (uint256 amountOut) {\n\t\treturn\n\t\t\tswap(\n\t\t\t\t_amount,\n\t\t\t\t0x0000000000000000000000000000000000000000,\n\t\t\t\t0x0000000000000000000000000000000000000000,\n\t\t\t\t0x0000000000000000000000000000000000000000\n\t\t\t);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}