{
  "address": "0xD9193B0C0cB304cec2C027aAe8f43CE2f09394EF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowStaleConsults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockTimestampLast",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consultLeniency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "enableFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethChainlinkFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackOracle",
      "outputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rdnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethChainlinkFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consultLeniency",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_allowStaleConsults",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswerInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowStaleConsults",
          "type": "bool"
        }
      ],
      "name": "setAllowStaleConsults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consultLeniency",
          "type": "uint256"
        }
      ],
      "name": "setConsultLeniency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fallback",
          "type": "address"
        }
      ],
      "name": "setFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda788cb245e3f5cec149f426bde50c2bf7bbbe7be82938540789e9a8dcf511fa",
  "receipt": {
    "to": null,
    "from": "0x225c6084086F83eCe4BC747403f292a7d324Fd2E",
    "contractAddress": "0xD9193B0C0cB304cec2C027aAe8f43CE2f09394EF",
    "transactionIndex": 206,
    "gasUsed": "1753740",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbf04cdb467fd9319c0e2c95102bb33fe7bf4379da03fbd681338ea2f418c93de",
    "transactionHash": "0xda788cb245e3f5cec149f426bde50c2bf7bbbe7be82938540789e9a8dcf511fa",
    "logs": [],
    "blockNumber": 26832031,
    "cumulativeGasUsed": "17400093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f54c80fadb1017091d92ff7e19a408d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowStaleConsults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultLeniency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethChainlinkFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackOracle\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rdnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethChainlinkFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consultLeniency\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowStaleConsults\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswerInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowStaleConsults\",\"type\":\"bool\"}],\"name\":\"setAllowStaleConsults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consultLeniency\",\"type\":\"uint256\"}],\"name\":\"setConsultLeniency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"setFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant team\",\"details\":\"Fixed window oracle that recomputes the average price for the entire period once every period Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\",\"kind\":\"dev\",\"methods\":{\"canUpdate()\":{\"details\":\"Check if update() can be called instead of wasting gas calling it.\"},\"enableFallback(bool)\":{\"params\":{\"_enabled\":\"Boolean value.\"}},\"initialize(address,address,address,uint256,uint256,bool)\":{\"params\":{\"_allowStaleConsults\":\"Enable/Disable stale.\",\"_consultLeniency\":\"Used for being able to consult past the period end.\",\"_ethChainlinkFeed\":\"Chainlink price feed for ETH.\",\"_pair\":\"Uniswap pair contract\",\"_period\":\"TWAP period.\",\"_rdnt\":\"RDNT token address.\"}},\"latestAnswer()\":{\"details\":\"supports 18 decimal token\",\"returns\":{\"price\":\"of token in decimal 8\"}},\"latestAnswerInEth()\":{\"details\":\"supports 18 decimal token\",\"returns\":{\"price\":\"of token in decimal 8.\"}},\"setAllowStaleConsults(bool)\":{\"params\":{\"_allowStaleConsults\":\"new value.\"}},\"setConsultLeniency(uint256)\":{\"params\":{\"_consultLeniency\":\"new value.\"}},\"setFallback(address)\":{\"params\":{\"_fallback\":\"Oracle address for fallback.\"}},\"setPeriod(uint256)\":{\"params\":{\"_period\":\"TWAP period.\"}}},\"title\":\"UniV2TwapOracle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowStaleConsults()\":{\"notice\":\"If false, consult() will fail if the TWAP is stale\"},\"blockTimestampLast()\":{\"notice\":\"Last updated timestamp\"},\"consult()\":{\"notice\":\"Returns current price.\"},\"consultLeniency()\":{\"notice\":\"Used for being able to consult past the period end\"},\"enableFallback(bool)\":{\"notice\":\"Enable/Disable use of fallback oracle\"},\"ethChainlinkFeed()\":{\"notice\":\"Chainlink price feed for ETH\"},\"fallbackEnabled()\":{\"notice\":\"Enable/Disable fallback\"},\"fallbackOracle()\":{\"notice\":\"Oracle to be used as a fallback\"},\"initialize(address,address,address,uint256,uint256,bool)\":{\"notice\":\"Initializer\"},\"latestAnswer()\":{\"notice\":\"Returns USD price in quote token.\"},\"latestAnswerInEth()\":{\"notice\":\"Returns USD price in ETH\"},\"pair()\":{\"notice\":\"Uniswap pair contract\"},\"period()\":{\"notice\":\"TWAP period\"},\"price0Average()\":{\"notice\":\"Average price of token0\"},\"price0CumulativeLast()\":{\"notice\":\"First token of the pair\"},\"price1Average()\":{\"notice\":\"Average price of token1\"},\"price1CumulativeLast()\":{\"notice\":\"First token of the pair\"},\"setAllowStaleConsults(bool)\":{\"notice\":\"Sets stale consult option.\"},\"setConsultLeniency(uint256)\":{\"notice\":\"Sets new consult leniency.\"},\"setFallback(address)\":{\"notice\":\"Sets fallback oracle\"},\"setPeriod(uint256)\":{\"notice\":\"Sets new period.\"},\"token()\":{\"notice\":\"Token for price\"},\"token0()\":{\"notice\":\"First token of the pair\"},\"token1()\":{\"notice\":\"Second token of the pair\"},\"update()\":{\"notice\":\"Updates price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/oracles/UniV2TwapOracle.sol\":\"UniV2TwapOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n\\tfunction __Context_init() internal onlyInitializing {}\\n\\n\\tfunction __Context_init_unchained() internal onlyInitializing {}\\n\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis;\\n\\t\\treturn msg.data;\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x320bed7499f85b69a3406a7500006a1798f9b3dcf1807af3669bbb33eb3c4099\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private initialized;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\trequire(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tinitialized = true;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns true if and only if the function is running in the constructor\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\tmodifier onlyInitializing() {\\n\\t\\trequire(initializing, \\\"Initializable: contract is not initializing\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xd7107a791a9598ec939c22a977e324f3521367a7a447f2875ab48829317e4a07\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction __Ownable_init() internal onlyInitializing {\\n\\t\\t__Ownable_init_unchained();\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained() internal onlyInitializing {\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf4467e9c77539c1294e57ca516fc329ecad0489f2868730c54c6bcaeea5f588e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/uniswap/contracts/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n\\t// credit for this implementation goes to\\n\\t// https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256) {\\n\\t\\tif (x == 0) return 0;\\n\\t\\t// this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n\\t\\t// however that code costs significantly more gas\\n\\t\\tuint256 xx = x;\\n\\t\\tuint256 r = 1;\\n\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\txx >>= 128;\\n\\t\\t\\tr <<= 64;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\txx >>= 64;\\n\\t\\t\\tr <<= 32;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\txx >>= 32;\\n\\t\\t\\tr <<= 16;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\txx >>= 16;\\n\\t\\t\\tr <<= 8;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100) {\\n\\t\\t\\txx >>= 8;\\n\\t\\t\\tr <<= 4;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10) {\\n\\t\\t\\txx >>= 4;\\n\\t\\t\\tr <<= 2;\\n\\t\\t}\\n\\t\\tif (xx >= 0x8) {\\n\\t\\t\\tr <<= 1;\\n\\t\\t}\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\tuint256 r1 = x / r;\\n\\t\\treturn (r < r1 ? r : r1);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6308988d5a6af6f7eede036af5a145fde738202af24559111ca744abe6d4faf3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n\\t// returns the 0 indexed position of the most significant bit of the input x\\n\\t// s.t. x >= 2**msb and x < 2**(msb+1)\\n\\tfunction mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n\\t\\tif (x >= 0x100000000000000000000000000000000) {\\n\\t\\t\\tx >>= 128;\\n\\t\\t\\tr += 128;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000000000000000) {\\n\\t\\t\\tx >>= 64;\\n\\t\\t\\tr += 64;\\n\\t\\t}\\n\\t\\tif (x >= 0x100000000) {\\n\\t\\t\\tx >>= 32;\\n\\t\\t\\tr += 32;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000) {\\n\\t\\t\\tx >>= 16;\\n\\t\\t\\tr += 16;\\n\\t\\t}\\n\\t\\tif (x >= 0x100) {\\n\\t\\t\\tx >>= 8;\\n\\t\\t\\tr += 8;\\n\\t\\t}\\n\\t\\tif (x >= 0x10) {\\n\\t\\t\\tx >>= 4;\\n\\t\\t\\tr += 4;\\n\\t\\t}\\n\\t\\tif (x >= 0x4) {\\n\\t\\t\\tx >>= 2;\\n\\t\\t\\tr += 2;\\n\\t\\t}\\n\\t\\tif (x >= 0x2) r += 1;\\n\\t}\\n\\n\\t// returns the 0 indexed position of the least significant bit of the input x\\n\\t// s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n\\t// i.e. the bit at the index is set and the mask of all lower bits is 0\\n\\tfunction leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n\\t\\tr = 255;\\n\\t\\tif (x & type(uint128).max > 0) {\\n\\t\\t\\tr -= 128;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 128;\\n\\t\\t}\\n\\t\\tif (x & type(uint64).max > 0) {\\n\\t\\t\\tr -= 64;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 64;\\n\\t\\t}\\n\\t\\tif (x & type(uint32).max > 0) {\\n\\t\\t\\tr -= 32;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 32;\\n\\t\\t}\\n\\t\\tif (x & type(uint16).max > 0) {\\n\\t\\t\\tr -= 16;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 16;\\n\\t\\t}\\n\\t\\tif (x & type(uint8).max > 0) {\\n\\t\\t\\tr -= 8;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 8;\\n\\t\\t}\\n\\t\\tif (x & 0xf > 0) {\\n\\t\\t\\tr -= 4;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 4;\\n\\t\\t}\\n\\t\\tif (x & 0x3 > 0) {\\n\\t\\t\\tr -= 2;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 2;\\n\\t\\t}\\n\\t\\tif (x & 0x1 > 0) r -= 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd26b027ad31ed84c11ba483f716bda0de2d769725d4421cd26537a58cd9fe8d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.12;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n\\t// range: [0, 2**112 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq112x112 {\\n\\t\\tuint224 _x;\\n\\t}\\n\\n\\t// range: [0, 2**144 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq144x112 {\\n\\t\\tuint256 _x;\\n\\t}\\n\\n\\tuint8 public constant RESOLUTION = 112;\\n\\tuint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n\\tuint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n\\tuint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n\\t// encode a uint112 as a UQ112x112\\n\\tfunction encode(uint112 x) internal pure returns (uq112x112 memory) {\\n\\t\\treturn uq112x112(uint224(x) << RESOLUTION);\\n\\t}\\n\\n\\t// encodes a uint144 as a UQ144x112\\n\\tfunction encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n\\t\\treturn uq144x112(uint256(x) << RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ112x112 into a uint112 by truncating after the radix point\\n\\tfunction decode(uq112x112 memory self) internal pure returns (uint112) {\\n\\t\\treturn uint112(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ144x112 into a uint144 by truncating after the radix point\\n\\tfunction decode144(uq144x112 memory self) internal pure returns (uint144) {\\n\\t\\treturn uint144(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a uint, returning a UQ144x112\\n\\t// reverts on overflow\\n\\tfunction mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n\\t\\tuint256 z = 0;\\n\\t\\trequire(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n\\t\\treturn uq144x112(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by an int and decode, returning an int\\n\\t// reverts on overflow\\n\\tfunction muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n\\t\\tuint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n\\t\\trequire(z < 2 ** 255, \\\"FixedPoint::muli: overflow\\\");\\n\\t\\treturn y < 0 ? -int256(z) : int256(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\t// lossy\\n\\tfunction muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x == 0 || other._x == 0) {\\n\\t\\t\\treturn uq112x112(0);\\n\\t\\t}\\n\\t\\tuint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n\\t\\tuint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n\\t\\t// partial products\\n\\t\\tuint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n\\t\\tuint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n\\t\\tuint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n\\t\\tuint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n\\t\\t// so the bit shift does not overflow\\n\\t\\trequire(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n\\t\\t// this cannot exceed 256 bits, all values are 224 bits\\n\\t\\tuint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n\\t\\t// so the cast does not overflow\\n\\t\\trequire(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n\\t\\treturn uq112x112(uint224(sum));\\n\\t}\\n\\n\\t// divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\tfunction divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n\\t\\tif (self._x == other._x) {\\n\\t\\t\\treturn uq112x112(uint224(Q112));\\n\\t\\t}\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\tuint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n\\t\\t\\trequire(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(value));\\n\\t\\t}\\n\\n\\t\\tuint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\treturn uq112x112(uint224(result));\\n\\t}\\n\\n\\t// returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n\\t// can be lossy\\n\\tfunction fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n\\t\\tif (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n\\t\\tif (numerator <= type(uint144).max) {\\n\\t\\t\\tuint256 result = (numerator << RESOLUTION) / denominator;\\n\\t\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t} else {\\n\\t\\t\\tuint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n\\t\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t}\\n\\t}\\n\\n\\t// take the reciprocal of a UQ112x112\\n\\t// reverts on overflow\\n\\t// lossy\\n\\tfunction reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n\\t\\trequire(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n\\t\\treturn uq112x112(uint224(Q224 / self._x));\\n\\t}\\n\\n\\t// square root of a UQ112x112\\n\\t// lossy between 0/1 and 40 bits\\n\\tfunction sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\treturn uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n\\t\\t}\\n\\n\\t\\tuint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n\\t\\tsafeShiftBits -= safeShiftBits % 2;\\n\\t\\treturn uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n\\t}\\n}\\n\",\"keccak256\":\"0x46164fe97f8bb97a788ddfc518dbdc5683bb1fbd36e01295965f90d75a443ada\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/FullMath.sol\":{\"content\":\"pragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n\\t/// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n\\tfunction mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n\\t\\t// 512-bit multiply [prod1 prod0] = a * b\\n\\t\\t// Compute the product mod 2**256 and mod 2**256 - 1\\n\\t\\t// then use the Chinese Remainder Theorem to reconstruct\\n\\t\\t// the 512 bit result. The result is stored in two 256\\n\\t\\t// variables such that product = prod1 * 2**256 + prod0\\n\\t\\tuint256 prod0; // Least significant 256 bits of the product\\n\\t\\tuint256 prod1; // Most significant 256 bits of the product\\n\\t\\tassembly {\\n\\t\\t\\tlet mm := mulmod(a, b, not(0))\\n\\t\\t\\tprod0 := mul(a, b)\\n\\t\\t\\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n\\t\\t}\\n\\n\\t\\t// Handle non-overflow cases, 256 by 256 division\\n\\t\\tif (prod1 == 0) {\\n\\t\\t\\trequire(denominator > 0);\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tresult := div(prod0, denominator)\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\t\\t// Make sure the result is less than 2**256.\\n\\t\\t// Also prevents denominator == 0\\n\\t\\trequire(denominator > prod1);\\n\\n\\t\\t///////////////////////////////////////////////\\n\\t\\t// 512 by 256 division.\\n\\t\\t///////////////////////////////////////////////\\n\\n\\t\\t// Make division exact by subtracting the remainder from [prod1 prod0]\\n\\t\\t// Compute remainder using mulmod\\n\\t\\tuint256 remainder;\\n\\t\\tassembly {\\n\\t\\t\\tremainder := mulmod(a, b, denominator)\\n\\t\\t}\\n\\t\\t// Subtract 256 bit number from 512 bit number\\n\\t\\tassembly {\\n\\t\\t\\tprod1 := sub(prod1, gt(remainder, prod0))\\n\\t\\t\\tprod0 := sub(prod0, remainder)\\n\\t\\t}\\n\\n\\t\\t// Factor powers of two out of denominator\\n\\t\\t// Compute largest power of two divisor of denominator.\\n\\t\\t// Always >= 1.\\n\\t\\tuint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n\\t\\t// Divide denominator by power of two\\n\\t\\tassembly {\\n\\t\\t\\tdenominator := div(denominator, twos)\\n\\t\\t}\\n\\n\\t\\t// Divide [prod1 prod0] by the factors of two\\n\\t\\tassembly {\\n\\t\\t\\tprod0 := div(prod0, twos)\\n\\t\\t}\\n\\t\\t// Shift in bits from prod1 into prod0. For this we need\\n\\t\\t// to flip `twos` such that it is 2**256 / twos.\\n\\t\\t// If twos is zero, then it becomes one\\n\\t\\tassembly {\\n\\t\\t\\ttwos := add(div(sub(0, twos), twos), 1)\\n\\t\\t}\\n\\t\\tprod0 |= prod1 * twos;\\n\\n\\t\\t// Invert denominator mod 2**256\\n\\t\\t// Now that denominator is an odd number, it has an inverse\\n\\t\\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n\\t\\t// Compute the inverse by starting with a seed that is correct\\n\\t\\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\t\\tuint256 inv = (3 * denominator) ^ 2;\\n\\t\\t// Now use Newton-Raphson iteration to improve the precision.\\n\\t\\t// Thanks to Hensel's lifting lemma, this also works in modular\\n\\t\\t// arithmetic, doubling the correct bits in each step.\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**8\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**16\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**32\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**64\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**128\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n\\t\\t// Because the division is now exact we can divide by multiplying\\n\\t\\t// with the modular inverse of denominator. This will give us the\\n\\t\\t// correct result modulo 2**256. Since the precoditions guarantee\\n\\t\\t// that the outcome is less than 2**256, this is the final result.\\n\\t\\t// We don't need to compute the high bits of the result and prod1\\n\\t\\t// is no longer required.\\n\\t\\tresult = prod0 * inv;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\tfunction mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n\\t\\tresult = mulDiv(a, b, denominator);\\n\\t\\tif (mulmod(a, b, denominator) > 0) {\\n\\t\\t\\trequire(result < type(uint256).max);\\n\\t\\t\\tresult++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x518059510896c1d06480c7a9a62d555fe2a5a4571fa4de751f19fd52c1d0b4c2\"},\"contracts/dependencies/uniswap/contracts/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n\\tusing FixedPoint for *;\\n\\n\\t// helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n\\tfunction currentBlockTimestamp() internal view returns (uint32) {\\n\\t\\treturn uint32(block.timestamp % 2 ** 32);\\n\\t}\\n\\n\\t// produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n\\tfunction currentCumulativePrices(\\n\\t\\taddress pair\\n\\t) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n\\t\\tblockTimestamp = currentBlockTimestamp();\\n\\t\\tprice0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n\\t\\tprice1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n\\t\\t// if time has elapsed since the last update on the pair, mock the accumulated price values\\n\\t\\t(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n\\t\\tif (blockTimestampLast != blockTimestamp) {\\n\\t\\t\\t// subtraction overflow is desired\\n\\t\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n\\t\\t\\t// addition overflow is desired\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xb41332b5f7542576a2433b628b6aaf744c3ed2fac702ebb08d5742acfbb9873b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBaseOracle {\\n\\tfunction latestAnswer() external view returns (uint256 price);\\n\\n\\tfunction latestAnswerInEth() external view returns (uint256 price);\\n\\n\\tfunction update() external;\\n\\n\\tfunction canUpdate() external view returns (bool);\\n\\n\\tfunction consult() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xaea33fc98413b52ae33c22aff071429893fbf61a67ba06e6ad0ae15e14b3c265\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/radiant/oracles/BaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../../interfaces/IBaseOracle.sol\\\";\\n\\n/// @title BaseOracle Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract BaseOracle is Initializable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\n\\t/// @notice Token for price\\n\\taddress public token;\\n\\n\\t/// @notice Chainlink price feed for ETH\\n\\taddress public ethChainlinkFeed;\\n\\n\\t/// @notice Enable/Disable fallback\\n\\tbool public fallbackEnabled;\\n\\n\\t/// @notice Oracle to be used as a fallback\\n\\tIBaseOracle public fallbackOracle;\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _token Token address.\\n\\t * @param _ethChainlinkFeed chainlink price feed for ETH.\\n\\t */\\n\\tfunction __BaseOracle_init(address _token, address _ethChainlinkFeed) internal onlyInitializing {\\n\\t\\t__Ownable_init();\\n\\t\\ttoken = _token;\\n\\t\\tethChainlinkFeed = _ethChainlinkFeed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets fallback oracle\\n\\t * @param _fallback Oracle address for fallback.\\n\\t */\\n\\tfunction setFallback(address _fallback) public onlyOwner {\\n\\t\\trequire(_fallback != address(0), \\\"invalid address\\\");\\n\\t\\tfallbackOracle = IBaseOracle(_fallback);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Enable/Disable use of fallback oracle\\n\\t * @param _enabled Boolean value.\\n\\t */\\n\\tfunction enableFallback(bool _enabled) public onlyOwner {\\n\\t\\trequire(address(fallbackOracle) != (address(0)), \\\"no fallback set\\\");\\n\\t\\tfallbackEnabled = _enabled;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns USD price in quote token.\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8\\n\\t */\\n\\tfunction latestAnswer() public view returns (uint256 price) {\\n\\t\\t// returns decimals 8\\n\\t\\tuint256 priceInEth = latestAnswerInEth();\\n\\n\\t\\t// returns decimals 8\\n\\t\\tuint256 ethPrice = uint256(IChainlinkAggregator(ethChainlinkFeed).latestAnswer());\\n\\n\\t\\tprice = priceInEth.mul(ethPrice).div(10 ** 8);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns USD price in ETH\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8.\\n\\t */\\n\\tfunction latestAnswerInEth() public view returns (uint256 price) {\\n\\t\\tif (!fallbackEnabled) {\\n\\t\\t\\tprice = consult();\\n\\t\\t} else {\\n\\t\\t\\tprice = fallbackOracle.consult();\\n\\t\\t}\\n\\t\\tprice = price.div(10 ** 10);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns possibility for update\\n\\t */\\n\\tfunction canUpdate() public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev implement in child contract\\n\\t */\\n\\tfunction consult() public view virtual returns (uint amountOut) {}\\n}\\n\",\"keccak256\":\"0xfa232c3d225cdeffbbf6ddaa9ce246e09a3789f49b0724d76b8ae9a4c25822ba\",\"license\":\"MIT\"},\"contracts/radiant/oracles/UniV2TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./BaseOracle.sol\\\";\\nimport \\\"../../dependencies/uniswap/contracts/FixedPoint.sol\\\";\\nimport \\\"../../dependencies/uniswap/contracts/UniswapV2OracleLibrary.sol\\\";\\n\\n/// @title UniV2TwapOracle Contract\\n/// @author Radiant team\\n/// @dev Fixed window oracle that recomputes the average price for the entire period once every period\\n/// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract UniV2TwapOracle is Initializable, BaseOracle {\\n\\tusing FixedPoint for *;\\n\\n\\t/// @notice TWAP period\\n\\tuint256 public period;\\n\\n\\t/// @notice Used for being able to consult past the period end\\n\\tuint256 public consultLeniency;\\n\\n\\t/// @notice If false, consult() will fail if the TWAP is stale\\n\\tbool public allowStaleConsults;\\n\\n\\t/// @notice Uniswap pair contract\\n\\tIUniswapV2Pair public pair;\\n\\n\\t/// @notice First token of the pair\\n\\taddress public token0;\\n\\n\\t/// @notice Second token of the pair\\n\\taddress public token1;\\n\\n\\t/// @notice First token of the pair\\n\\tuint256 public price0CumulativeLast;\\n\\n\\t/// @notice First token of the pair\\n\\tuint256 public price1CumulativeLast;\\n\\n\\t/// @notice Last updated timestamp\\n\\tuint32 public blockTimestampLast;\\n\\n\\t/// @notice Average price of token0\\n\\tFixedPoint.uq112x112 public price0Average;\\n\\n\\t/// @notice Average price of token1\\n\\tFixedPoint.uq112x112 public price1Average;\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _pair Uniswap pair contract\\n\\t * @param _rdnt RDNT token address.\\n\\t * @param _ethChainlinkFeed Chainlink price feed for ETH.\\n\\t * @param _period TWAP period.\\n\\t * @param _consultLeniency Used for being able to consult past the period end.\\n\\t * @param _allowStaleConsults Enable/Disable stale.\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _pair,\\n\\t\\taddress _rdnt,\\n\\t\\taddress _ethChainlinkFeed,\\n\\t\\tuint256 _period,\\n\\t\\tuint256 _consultLeniency,\\n\\t\\tbool _allowStaleConsults\\n\\t) external initializer {\\n\\t\\trequire(_pair != address(0), \\\"pair is 0 address\\\");\\n\\t\\trequire(_rdnt != address(0), \\\"rdnt is 0 address\\\");\\n\\t\\trequire(_ethChainlinkFeed != address(0), \\\"ethChainlinkFeed is 0 address\\\");\\n\\n\\t\\tpair = IUniswapV2Pair(_pair);\\n\\t\\ttoken0 = pair.token0();\\n\\t\\ttoken1 = pair.token1();\\n\\n\\t\\tprice0CumulativeLast = pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\\n\\t\\tprice1CumulativeLast = pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t\\t(reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n\\n\\t\\trequire(reserve0 != 0 && reserve1 != 0, \\\"NO_RESERVES\\\"); // Ensure that there's liquidity in the pair\\n\\t\\trequire(_period >= 10, \\\"PERIOD_BELOW_MIN\\\"); // Ensure period has a min time\\n\\n\\t\\tperiod = _period;\\n\\t\\tconsultLeniency = _consultLeniency;\\n\\t\\tallowStaleConsults = _allowStaleConsults;\\n\\n\\t\\t__BaseOracle_init(_rdnt, _ethChainlinkFeed);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new period.\\n\\t * @param _period TWAP period.\\n\\t */\\n\\tfunction setPeriod(uint256 _period) external onlyOwner {\\n\\t\\trequire(_period >= 10, \\\"PERIOD_BELOW_MIN\\\"); // Ensure period has a min time\\n\\t\\tperiod = _period;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new consult leniency.\\n\\t * @param _consultLeniency new value.\\n\\t */\\n\\tfunction setConsultLeniency(uint256 _consultLeniency) external onlyOwner {\\n\\t\\tconsultLeniency = _consultLeniency;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets stale consult option.\\n\\t * @param _allowStaleConsults new value.\\n\\t */\\n\\tfunction setAllowStaleConsults(bool _allowStaleConsults) external onlyOwner {\\n\\t\\tallowStaleConsults = _allowStaleConsults;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Check if update() can be called instead of wasting gas calling it.\\n\\t */\\n\\tfunction canUpdate() public view override returns (bool) {\\n\\t\\tuint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\t\\treturn (timeElapsed >= period);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates price\\n\\t */\\n\\tfunction update() external {\\n\\t\\t(uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\\n\\t\\t\\t.currentCumulativePrices(address(pair));\\n\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\n\\t\\t// Ensure that at least one full period has passed since the last update\\n\\t\\trequire(timeElapsed >= period, \\\"PERIOD_NOT_ELAPSED\\\");\\n\\n\\t\\t// Overflow is desired, casting never truncates\\n\\t\\t// Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n\\t\\tprice0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n\\t\\tprice1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\t\\tprice0CumulativeLast = price0Cumulative;\\n\\t\\tprice1CumulativeLast = price1Cumulative;\\n\\t\\tblockTimestampLast = blockTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev This will always return 0 before update has been called successfully for the first time.\\n\\t */\\n\\tfunction _consult(address _token, uint256 _amountIn) internal view returns (uint256 amountOut) {\\n\\t\\tuint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\n\\t\\t// Ensure that the price is not stale\\n\\t\\trequire((timeElapsed < (period + consultLeniency)) || allowStaleConsults, \\\"PRICE_IS_STALE_CALL_UPDATE\\\");\\n\\n\\t\\tif (_token == token0) {\\n\\t\\t\\tamountOut = price0Average.mul(_amountIn).decode144();\\n\\t\\t} else {\\n\\t\\t\\trequire(_token == token1, \\\"UniswapPairOracle: INVALID_TOKEN\\\");\\n\\t\\t\\tamountOut = price1Average.mul(_amountIn).decode144();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns current price.\\n\\t */\\n\\tfunction consult() public view override returns (uint256 amountOut) {\\n\\t\\tuint8 decimals = IERC20Metadata(token).decimals();\\n\\t\\treturn _consult(token, 10 ** decimals);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdab1d8c0c308c7d1a4462d83e5f3397c7ba1388400f79c68cc9f9ddecb70c5bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ed4806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a6bb4539116100a2578063ef78d4fd11610071578063ef78d4fd146103b4578063f1551aea146103bd578063f2fde38b146103d0578063fc0c546a146103e357600080fd5b8063a6bb453914610351578063a8aa1b3114610364578063c5700a021461037c578063d21220a7146103a157600080fd5b80638da5cb5b116100de5780638da5cb5b1461031d578063a17a26851461032e578063a2bc88dc14610336578063a2e620451461034957600080fd5b8063715018a6146103005780637eeda7031461030857806383f1cf5c1461031057600080fd5b806335c1bead116101715780635a3d54931161014b5780635a3d5493146102a65780635cb9a714146102af5780635e6aaf2c146102c2578063629838e5146102ed57600080fd5b806335c1bead1461028c57806350d25bcd146102955780635909c0d51461029d57600080fd5b8063251cdcd8116101ad578063251cdcd81461022c5780632e70a14d14610242578063316cefde1461026657806332b12eac1461027957600080fd5b80630dfe1681146101d45780630f3a9f651461020457806310535afe14610219575b600080fd5b609d546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610217610212366004611b36565b6103f6565b005b610217610227366004611b64565b6104ab565b610234610596565b6040519081526020016101fb565b60985461025690600160a01b900460ff1681565b60405190151581526020016101fb565b610217610274366004611b94565b610647565b610217610287366004611c00565b610c04565b610234609b5481565b610234610cd6565b610234609f5481565b61023460a05481565b6102176102bd366004611b36565b610d7d565b60a3546102d5906001600160e01b031681565b6040516001600160e01b0390911681526020016101fb565b6099546101e7906001600160a01b031681565b610217610ddc565b610234610e42565b609c546102569060ff1681565b6065546001600160a01b03166101e7565b610256610ee5565b6098546101e7906001600160a01b031681565b610217610f1d565b60a2546102d5906001600160e01b031681565b609c546101e79061010090046001600160a01b031681565b60a15461038c9063ffffffff1681565b60405163ffffffff90911681526020016101fb565b609e546101e7906001600160a01b031681565b610234609a5481565b6102176103cb366004611b64565b6110ad565b6102176103de366004611c00565b61111a565b6097546101e7906001600160a01b031681565b6065546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600a8110156104a65760405162461bcd60e51b815260206004820152601060248201527f504552494f445f42454c4f575f4d494e00000000000000000000000000000000604482015260640161044c565b609a55565b6065546001600160a01b031633146105055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6099546001600160a01b031661055d5760405162461bcd60e51b815260206004820152600f60248201527f6e6f2066616c6c6261636b207365740000000000000000000000000000000000604482015260640161044c565b60988054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b609854600090600160a01b900460ff166105b9576105b2610e42565b9050610633565b609960009054906101000a90046001600160a01b03166001600160a01b0316637eeda7036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190611c1d565b90505b610642816402540be4006111fc565b905090565b600054610100900460ff168061065c5750303b155b8061066a575060005460ff16155b6106dc5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840161044c565b600054610100900460ff161580156106fe576000805461ffff19166101011790555b6001600160a01b0387166107545760405162461bcd60e51b815260206004820152601160248201527f7061697220697320302061646472657373000000000000000000000000000000604482015260640161044c565b6001600160a01b0386166107aa5760405162461bcd60e51b815260206004820152601160248201527f72646e7420697320302061646472657373000000000000000000000000000000604482015260640161044c565b6001600160a01b0385166108005760405162461bcd60e51b815260206004820152601d60248201527f657468436861696e6c696e6b4665656420697320302061646472657373000000604482015260640161044c565b86609c60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550609c60019054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611c36565b609d80546001600160a01b0319166001600160a01b03928316179055609c54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516101009092049092169163d21220a79160048083019260209291908290030181865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190611c36565b609e80546001600160a01b0319166001600160a01b03928316179055609c54604080517f5909c0d5000000000000000000000000000000000000000000000000000000008152905161010090920490921691635909c0d59160048083019260209291908290030181865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190611c1d565b609f81905550609c60019054906101000a90046001600160a01b03166001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611c1d565b60a081905550600080609c60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190611c71565b60a1805463ffffffff191663ffffffff9290921691909117905590925090506dffffffffffffffffffffffffffff821615801590610b2857506dffffffffffffffffffffffffffff811615155b610b745760405162461bcd60e51b815260206004820152600b60248201527f4e4f5f5245534552564553000000000000000000000000000000000000000000604482015260640161044c565b600a861015610bc55760405162461bcd60e51b815260206004820152601060248201527f504552494f445f42454c4f575f4d494e00000000000000000000000000000000604482015260640161044c565b609a869055609b859055609c805460ff1916851515179055610be78888611211565b50508015610bfb576000805461ff00191690555b50505050505050565b6065546001600160a01b03163314610c5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6001600160a01b038116610cb45760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015260640161044c565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600080610ce1610596565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c9190611c1d565b9050610d766305f5e100610d7084846112b2565b906111fc565b9250505090565b6065546001600160a01b03163314610dd75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b609b55565b6065546001600160a01b03163314610e365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b610e4060006112be565b565b600080609760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611cc1565b609754909150610edf906001600160a01b0316610eda83600a611dde565b611310565b91505090565b600080610ef06114a9565b60a154909150600090610f099063ffffffff1683611ded565b609a5463ffffffff90911610159392505050565b6000806000610f40609c60019054906101000a90046001600160a01b03166114ba565b60a1549295509093509150600090610f5e9063ffffffff1683611ded565b9050609a548163ffffffff161015610fb85760405162461bcd60e51b815260206004820152601260248201527f504552494f445f4e4f545f454c41505345440000000000000000000000000000604482015260640161044c565b60405180602001604052808263ffffffff16609f5487610fd89190611e12565b610fe29190611e3f565b6001600160e01b03908116909152905160a280547fffffffff000000000000000000000000000000000000000000000000000000001691909216179055604080516020810190915260a054819063ffffffff8416906110419087611e12565b61104b9190611e3f565b6001600160e01b03908116909152905160a380547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550609f9290925560a05560a1805463ffffffff191663ffffffff909216919091179055565b6065546001600160a01b031633146111075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b609c805460ff1916911515919091179055565b6065546001600160a01b031633146111745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6001600160a01b0381166111f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044c565b6111f9816112be565b50565b60006112088284611e3f565b90505b92915050565b600054610100900460ff1661127c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b6112846116cd565b609780546001600160a01b039384166001600160a01b03199182161790915560988054929093169116179055565b60006112088284611e53565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061131b6114a9565b60a1549091506000906113349063ffffffff1683611ded565b9050609b54609a546113469190611e72565b8163ffffffff16108061135b5750609c5460ff165b6113a75760405162461bcd60e51b815260206004820152601a60248201527f50524943455f49535f5354414c455f43414c4c5f555044415445000000000000604482015260640161044c565b609d546001600160a01b038681169116141561140657604080516020810190915260a2546001600160e01b031681526113eb906113e49086611740565b5160701c90565b71ffffffffffffffffffffffffffffffffffff1692506114a1565b609e546001600160a01b038681169116146114635760405162461bcd60e51b815260206004820181905260248201527f556e6973776170506169724f7261636c653a20494e56414c49445f544f4b454e604482015260640161044c565b604080516020810190915260a3546001600160e01b0316815261148a906113e49086611740565b71ffffffffffffffffffffffffffffffffffff1692505b505092915050565b600061064264010000000042611e8a565b60008060006114c76114a9565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b9190611c1d565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190611c1d565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190611c71565b9250925092508363ffffffff168163ffffffff16146116c357600061161d8286611ded565b90508063ffffffff16611650846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff166117de565b5161166491906001600160e01b0316611e53565b61166e9088611e72565b96508063ffffffff166116a1856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166117de565b516116b591906001600160e01b0316611e53565b6116bf9087611e72565b9550505b5050509193909250565b600054610100900460ff166117385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b610e4061193b565b604080516020810190915260008152600082158061177d575083516001600160e01b03168361176f8183611e53565b925061177b9083611e3f565b145b6117c95760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015260640161044c565b60408051602081019091529081529392505050565b604080516020810190915260008152600082116118635760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161044c565b8261187d575060408051602081019091526000815261120b565b71ffffffffffffffffffffffffffffffffffff831161191f5760006118a683607086901b611e3f565b90506001600160e01b038111156118ff5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161044c565b6040518060200160405280826001600160e01b031681525091505061120b565b60006118a6846e010000000000000000000000000000856119af565b600054610100900460ff166119a65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b610e40336112be565b6000808060001985870985870292508281108382030391505080600014156119e957600084116119de57600080fd5b508290049050611b2f565b8084116119f557600080fd5b600084868809808403938111909203919050600085611a1681600019611e12565b611a21906001611e72565b16958690049593849004936000819003046001019050611a418184611e53565b909317926000611a52876003611e53565b6002189050611a618188611e53565b611a6c906002611e12565b611a769082611e53565b9050611a828188611e53565b611a8d906002611e12565b611a979082611e53565b9050611aa38188611e53565b611aae906002611e12565b611ab89082611e53565b9050611ac48188611e53565b611acf906002611e12565b611ad99082611e53565b9050611ae58188611e53565b611af0906002611e12565b611afa9082611e53565b9050611b068188611e53565b611b11906002611e12565b611b1b9082611e53565b9050611b278186611e53565b955050505050505b9392505050565b600060208284031215611b4857600080fd5b5035919050565b80358015158114611b5f57600080fd5b919050565b600060208284031215611b7657600080fd5b61120882611b4f565b6001600160a01b03811681146111f957600080fd5b60008060008060008060c08789031215611bad57600080fd5b8635611bb881611b7f565b95506020870135611bc881611b7f565b94506040870135611bd881611b7f565b93506060870135925060808701359150611bf460a08801611b4f565b90509295509295509295565b600060208284031215611c1257600080fd5b8135611b2f81611b7f565b600060208284031215611c2f57600080fd5b5051919050565b600060208284031215611c4857600080fd5b8151611b2f81611b7f565b80516dffffffffffffffffffffffffffff81168114611b5f57600080fd5b600080600060608486031215611c8657600080fd5b611c8f84611c53565b9250611c9d60208501611c53565b9150604084015163ffffffff81168114611cb657600080fd5b809150509250925092565b600060208284031215611cd357600080fd5b815160ff81168114611b2f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d35578160001904821115611d1b57611d1b611ce4565b80851615611d2857918102915b93841c9390800290611cff565b509250929050565b600082611d4c5750600161120b565b81611d595750600061120b565b8160018114611d6f5760028114611d7957611d95565b600191505061120b565b60ff841115611d8a57611d8a611ce4565b50506001821b61120b565b5060208310610133831016604e8410600b8410161715611db8575081810a61120b565b611dc28383611cfa565b8060001904821115611dd657611dd6611ce4565b029392505050565b600061120860ff841683611d3d565b600063ffffffff83811690831681811015611e0a57611e0a611ce4565b039392505050565b600082821015611e2457611e24611ce4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611e4e57611e4e611e29565b500490565b6000816000190483118215151615611e6d57611e6d611ce4565b500290565b60008219821115611e8557611e85611ce4565b500190565b600082611e9957611e99611e29565b50069056fea2646970667358221220a9c1e6266f86e0a4dddd01f9f988368a63d75fb35d97a002786751435b9be83764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a6bb4539116100a2578063ef78d4fd11610071578063ef78d4fd146103b4578063f1551aea146103bd578063f2fde38b146103d0578063fc0c546a146103e357600080fd5b8063a6bb453914610351578063a8aa1b3114610364578063c5700a021461037c578063d21220a7146103a157600080fd5b80638da5cb5b116100de5780638da5cb5b1461031d578063a17a26851461032e578063a2bc88dc14610336578063a2e620451461034957600080fd5b8063715018a6146103005780637eeda7031461030857806383f1cf5c1461031057600080fd5b806335c1bead116101715780635a3d54931161014b5780635a3d5493146102a65780635cb9a714146102af5780635e6aaf2c146102c2578063629838e5146102ed57600080fd5b806335c1bead1461028c57806350d25bcd146102955780635909c0d51461029d57600080fd5b8063251cdcd8116101ad578063251cdcd81461022c5780632e70a14d14610242578063316cefde1461026657806332b12eac1461027957600080fd5b80630dfe1681146101d45780630f3a9f651461020457806310535afe14610219575b600080fd5b609d546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610217610212366004611b36565b6103f6565b005b610217610227366004611b64565b6104ab565b610234610596565b6040519081526020016101fb565b60985461025690600160a01b900460ff1681565b60405190151581526020016101fb565b610217610274366004611b94565b610647565b610217610287366004611c00565b610c04565b610234609b5481565b610234610cd6565b610234609f5481565b61023460a05481565b6102176102bd366004611b36565b610d7d565b60a3546102d5906001600160e01b031681565b6040516001600160e01b0390911681526020016101fb565b6099546101e7906001600160a01b031681565b610217610ddc565b610234610e42565b609c546102569060ff1681565b6065546001600160a01b03166101e7565b610256610ee5565b6098546101e7906001600160a01b031681565b610217610f1d565b60a2546102d5906001600160e01b031681565b609c546101e79061010090046001600160a01b031681565b60a15461038c9063ffffffff1681565b60405163ffffffff90911681526020016101fb565b609e546101e7906001600160a01b031681565b610234609a5481565b6102176103cb366004611b64565b6110ad565b6102176103de366004611c00565b61111a565b6097546101e7906001600160a01b031681565b6065546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600a8110156104a65760405162461bcd60e51b815260206004820152601060248201527f504552494f445f42454c4f575f4d494e00000000000000000000000000000000604482015260640161044c565b609a55565b6065546001600160a01b031633146105055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6099546001600160a01b031661055d5760405162461bcd60e51b815260206004820152600f60248201527f6e6f2066616c6c6261636b207365740000000000000000000000000000000000604482015260640161044c565b60988054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b609854600090600160a01b900460ff166105b9576105b2610e42565b9050610633565b609960009054906101000a90046001600160a01b03166001600160a01b0316637eeda7036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190611c1d565b90505b610642816402540be4006111fc565b905090565b600054610100900460ff168061065c5750303b155b8061066a575060005460ff16155b6106dc5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840161044c565b600054610100900460ff161580156106fe576000805461ffff19166101011790555b6001600160a01b0387166107545760405162461bcd60e51b815260206004820152601160248201527f7061697220697320302061646472657373000000000000000000000000000000604482015260640161044c565b6001600160a01b0386166107aa5760405162461bcd60e51b815260206004820152601160248201527f72646e7420697320302061646472657373000000000000000000000000000000604482015260640161044c565b6001600160a01b0385166108005760405162461bcd60e51b815260206004820152601d60248201527f657468436861696e6c696e6b4665656420697320302061646472657373000000604482015260640161044c565b86609c60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550609c60019054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611c36565b609d80546001600160a01b0319166001600160a01b03928316179055609c54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516101009092049092169163d21220a79160048083019260209291908290030181865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190611c36565b609e80546001600160a01b0319166001600160a01b03928316179055609c54604080517f5909c0d5000000000000000000000000000000000000000000000000000000008152905161010090920490921691635909c0d59160048083019260209291908290030181865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de9190611c1d565b609f81905550609c60019054906101000a90046001600160a01b03166001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611c1d565b60a081905550600080609c60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb9190611c71565b60a1805463ffffffff191663ffffffff9290921691909117905590925090506dffffffffffffffffffffffffffff821615801590610b2857506dffffffffffffffffffffffffffff811615155b610b745760405162461bcd60e51b815260206004820152600b60248201527f4e4f5f5245534552564553000000000000000000000000000000000000000000604482015260640161044c565b600a861015610bc55760405162461bcd60e51b815260206004820152601060248201527f504552494f445f42454c4f575f4d494e00000000000000000000000000000000604482015260640161044c565b609a869055609b859055609c805460ff1916851515179055610be78888611211565b50508015610bfb576000805461ff00191690555b50505050505050565b6065546001600160a01b03163314610c5e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6001600160a01b038116610cb45760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420616464726573730000000000000000000000000000000000604482015260640161044c565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600080610ce1610596565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c9190611c1d565b9050610d766305f5e100610d7084846112b2565b906111fc565b9250505090565b6065546001600160a01b03163314610dd75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b609b55565b6065546001600160a01b03163314610e365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b610e4060006112be565b565b600080609760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190611cc1565b609754909150610edf906001600160a01b0316610eda83600a611dde565b611310565b91505090565b600080610ef06114a9565b60a154909150600090610f099063ffffffff1683611ded565b609a5463ffffffff90911610159392505050565b6000806000610f40609c60019054906101000a90046001600160a01b03166114ba565b60a1549295509093509150600090610f5e9063ffffffff1683611ded565b9050609a548163ffffffff161015610fb85760405162461bcd60e51b815260206004820152601260248201527f504552494f445f4e4f545f454c41505345440000000000000000000000000000604482015260640161044c565b60405180602001604052808263ffffffff16609f5487610fd89190611e12565b610fe29190611e3f565b6001600160e01b03908116909152905160a280547fffffffff000000000000000000000000000000000000000000000000000000001691909216179055604080516020810190915260a054819063ffffffff8416906110419087611e12565b61104b9190611e3f565b6001600160e01b03908116909152905160a380547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550609f9290925560a05560a1805463ffffffff191663ffffffff909216919091179055565b6065546001600160a01b031633146111075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b609c805460ff1916911515919091179055565b6065546001600160a01b031633146111745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b6001600160a01b0381166111f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044c565b6111f9816112be565b50565b60006112088284611e3f565b90505b92915050565b600054610100900460ff1661127c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b6112846116cd565b609780546001600160a01b039384166001600160a01b03199182161790915560988054929093169116179055565b60006112088284611e53565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061131b6114a9565b60a1549091506000906113349063ffffffff1683611ded565b9050609b54609a546113469190611e72565b8163ffffffff16108061135b5750609c5460ff165b6113a75760405162461bcd60e51b815260206004820152601a60248201527f50524943455f49535f5354414c455f43414c4c5f555044415445000000000000604482015260640161044c565b609d546001600160a01b038681169116141561140657604080516020810190915260a2546001600160e01b031681526113eb906113e49086611740565b5160701c90565b71ffffffffffffffffffffffffffffffffffff1692506114a1565b609e546001600160a01b038681169116146114635760405162461bcd60e51b815260206004820181905260248201527f556e6973776170506169724f7261636c653a20494e56414c49445f544f4b454e604482015260640161044c565b604080516020810190915260a3546001600160e01b0316815261148a906113e49086611740565b71ffffffffffffffffffffffffffffffffffff1692505b505092915050565b600061064264010000000042611e8a565b60008060006114c76114a9565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b9190611c1d565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190611c1d565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190611c71565b9250925092508363ffffffff168163ffffffff16146116c357600061161d8286611ded565b90508063ffffffff16611650846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff166117de565b5161166491906001600160e01b0316611e53565b61166e9088611e72565b96508063ffffffff166116a1856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166117de565b516116b591906001600160e01b0316611e53565b6116bf9087611e72565b9550505b5050509193909250565b600054610100900460ff166117385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b610e4061193b565b604080516020810190915260008152600082158061177d575083516001600160e01b03168361176f8183611e53565b925061177b9083611e3f565b145b6117c95760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015260640161044c565b60408051602081019091529081529392505050565b604080516020810190915260008152600082116118635760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161044c565b8261187d575060408051602081019091526000815261120b565b71ffffffffffffffffffffffffffffffffffff831161191f5760006118a683607086901b611e3f565b90506001600160e01b038111156118ff5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161044c565b6040518060200160405280826001600160e01b031681525091505061120b565b60006118a6846e010000000000000000000000000000856119af565b600054610100900460ff166119a65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161044c565b610e40336112be565b6000808060001985870985870292508281108382030391505080600014156119e957600084116119de57600080fd5b508290049050611b2f565b8084116119f557600080fd5b600084868809808403938111909203919050600085611a1681600019611e12565b611a21906001611e72565b16958690049593849004936000819003046001019050611a418184611e53565b909317926000611a52876003611e53565b6002189050611a618188611e53565b611a6c906002611e12565b611a769082611e53565b9050611a828188611e53565b611a8d906002611e12565b611a979082611e53565b9050611aa38188611e53565b611aae906002611e12565b611ab89082611e53565b9050611ac48188611e53565b611acf906002611e12565b611ad99082611e53565b9050611ae58188611e53565b611af0906002611e12565b611afa9082611e53565b9050611b068188611e53565b611b11906002611e12565b611b1b9082611e53565b9050611b278186611e53565b955050505050505b9392505050565b600060208284031215611b4857600080fd5b5035919050565b80358015158114611b5f57600080fd5b919050565b600060208284031215611b7657600080fd5b61120882611b4f565b6001600160a01b03811681146111f957600080fd5b60008060008060008060c08789031215611bad57600080fd5b8635611bb881611b7f565b95506020870135611bc881611b7f565b94506040870135611bd881611b7f565b93506060870135925060808701359150611bf460a08801611b4f565b90509295509295509295565b600060208284031215611c1257600080fd5b8135611b2f81611b7f565b600060208284031215611c2f57600080fd5b5051919050565b600060208284031215611c4857600080fd5b8151611b2f81611b7f565b80516dffffffffffffffffffffffffffff81168114611b5f57600080fd5b600080600060608486031215611c8657600080fd5b611c8f84611c53565b9250611c9d60208501611c53565b9150604084015163ffffffff81168114611cb657600080fd5b809150509250925092565b600060208284031215611cd357600080fd5b815160ff81168114611b2f57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611d35578160001904821115611d1b57611d1b611ce4565b80851615611d2857918102915b93841c9390800290611cff565b509250929050565b600082611d4c5750600161120b565b81611d595750600061120b565b8160018114611d6f5760028114611d7957611d95565b600191505061120b565b60ff841115611d8a57611d8a611ce4565b50506001821b61120b565b5060208310610133831016604e8410600b8410161715611db8575081810a61120b565b611dc28383611cfa565b8060001904821115611dd657611dd6611ce4565b029392505050565b600061120860ff841683611d3d565b600063ffffffff83811690831681811015611e0a57611e0a611ce4565b039392505050565b600082821015611e2457611e24611ce4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611e4e57611e4e611e29565b500490565b6000816000190483118215151615611e6d57611e6d611ce4565b500290565b60008219821115611e8557611e85611ce4565b500190565b600082611e9957611e99611e29565b50069056fea2646970667358221220a9c1e6266f86e0a4dddd01f9f988368a63d75fb35d97a002786751435b9be83764736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant team",
    "details": "Fixed window oracle that recomputes the average price for the entire period once every period Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period",
    "kind": "dev",
    "methods": {
      "canUpdate()": {
        "details": "Check if update() can be called instead of wasting gas calling it."
      },
      "enableFallback(bool)": {
        "params": {
          "_enabled": "Boolean value."
        }
      },
      "initialize(address,address,address,uint256,uint256,bool)": {
        "params": {
          "_allowStaleConsults": "Enable/Disable stale.",
          "_consultLeniency": "Used for being able to consult past the period end.",
          "_ethChainlinkFeed": "Chainlink price feed for ETH.",
          "_pair": "Uniswap pair contract",
          "_period": "TWAP period.",
          "_rdnt": "RDNT token address."
        }
      },
      "latestAnswer()": {
        "details": "supports 18 decimal token",
        "returns": {
          "price": "of token in decimal 8"
        }
      },
      "latestAnswerInEth()": {
        "details": "supports 18 decimal token",
        "returns": {
          "price": "of token in decimal 8."
        }
      },
      "setAllowStaleConsults(bool)": {
        "params": {
          "_allowStaleConsults": "new value."
        }
      },
      "setConsultLeniency(uint256)": {
        "params": {
          "_consultLeniency": "new value."
        }
      },
      "setFallback(address)": {
        "params": {
          "_fallback": "Oracle address for fallback."
        }
      },
      "setPeriod(uint256)": {
        "params": {
          "_period": "TWAP period."
        }
      }
    },
    "title": "UniV2TwapOracle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowStaleConsults()": {
        "notice": "If false, consult() will fail if the TWAP is stale"
      },
      "blockTimestampLast()": {
        "notice": "Last updated timestamp"
      },
      "consult()": {
        "notice": "Returns current price."
      },
      "consultLeniency()": {
        "notice": "Used for being able to consult past the period end"
      },
      "enableFallback(bool)": {
        "notice": "Enable/Disable use of fallback oracle"
      },
      "ethChainlinkFeed()": {
        "notice": "Chainlink price feed for ETH"
      },
      "fallbackEnabled()": {
        "notice": "Enable/Disable fallback"
      },
      "fallbackOracle()": {
        "notice": "Oracle to be used as a fallback"
      },
      "initialize(address,address,address,uint256,uint256,bool)": {
        "notice": "Initializer"
      },
      "latestAnswer()": {
        "notice": "Returns USD price in quote token."
      },
      "latestAnswerInEth()": {
        "notice": "Returns USD price in ETH"
      },
      "pair()": {
        "notice": "Uniswap pair contract"
      },
      "period()": {
        "notice": "TWAP period"
      },
      "price0Average()": {
        "notice": "Average price of token0"
      },
      "price0CumulativeLast()": {
        "notice": "First token of the pair"
      },
      "price1Average()": {
        "notice": "Average price of token1"
      },
      "price1CumulativeLast()": {
        "notice": "First token of the pair"
      },
      "setAllowStaleConsults(bool)": {
        "notice": "Sets stale consult option."
      },
      "setConsultLeniency(uint256)": {
        "notice": "Sets new consult leniency."
      },
      "setFallback(address)": {
        "notice": "Sets fallback oracle"
      },
      "setPeriod(uint256)": {
        "notice": "Sets new period."
      },
      "token()": {
        "notice": "Token for price"
      },
      "token0()": {
        "notice": "First token of the pair"
      },
      "token1()": {
        "notice": "Second token of the pair"
      },
      "update()": {
        "notice": "Updates price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17153,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17156,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17223,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17146,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17368,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 17473,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 47690,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 47693,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "ethChainlinkFeed",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 47696,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "fallbackEnabled",
        "offset": 20,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 47700,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "fallbackOracle",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IBaseOracle)21552"
      },
      {
        "astId": 48703,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "period",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 48706,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "consultLeniency",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 48709,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "allowStaleConsults",
        "offset": 0,
        "slot": "156",
        "type": "t_bool"
      },
      {
        "astId": 48713,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "pair",
        "offset": 1,
        "slot": "156",
        "type": "t_contract(IUniswapV2Pair)8028"
      },
      {
        "astId": 48716,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token0",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 48719,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token1",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 48722,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 48725,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 48728,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "blockTimestampLast",
        "offset": 0,
        "slot": "161",
        "type": "t_uint32"
      },
      {
        "astId": 48732,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price0Average",
        "offset": 0,
        "slot": "162",
        "type": "t_struct(uq112x112)18187_storage"
      },
      {
        "astId": 48736,
        "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price1Average",
        "offset": 0,
        "slot": "163",
        "type": "t_struct(uq112x112)18187_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaseOracle)21552": {
        "encoding": "inplace",
        "label": "contract IBaseOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)8028": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_struct(uq112x112)18187_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 18186,
            "contract": "contracts/radiant/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}