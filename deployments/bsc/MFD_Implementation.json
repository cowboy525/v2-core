{
  "address": "0x8b51d66DE3ffd5F7becABc33f26c2Ffe6acFfcF3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "IneligibleRewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockIndex",
          "type": "uint256"
        }
      ],
      "name": "Relocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LOCK_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUART",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHOLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardConverter",
          "type": "address"
        }
      ],
      "name": "addRewardConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autoRelockDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autocompoundEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimBounty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "issueBaseBounty",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalf",
          "type": "address"
        }
      ],
      "name": "claimFromConverter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFeeDistribution.RewardData[]",
          "name": "rewardsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultLockIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "earnedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            }
          ],
          "internalType": "struct EarnedBalance[]",
          "name": "earningsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockMultipliers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentivesController",
      "outputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "individualEarlyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdntToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userlist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsLookback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAutocompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedWithMultiplier",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "lockData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupplyWithMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "middleFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPenalty",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersAreSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardConverter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rptStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsLookback",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_middleFeeDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAutocompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bounty",
          "type": "address"
        }
      ],
      "name": "setBountyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRelockTypeIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "setLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_lockPeriod",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setLockTypeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lookback",
          "type": "uint256"
        }
      ],
      "name": "setLookback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_minters",
          "type": "address[]"
        }
      ],
      "name": "setMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setRelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startfleetTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userlist",
      "outputs": [
        {
          "internalType": "contract ILockerList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "withdrawExpiredLocksFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ignoreRelock",
          "type": "bool"
        }
      ],
      "name": "withdrawExpiredLocksForWithOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "zapVestingToLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51e32f125d261fd9cd0aa13276aafea46b074520433d799de3c7e6d3c90fa340",
  "receipt": {
    "to": null,
    "from": "0x225c6084086F83eCe4BC747403f292a7d324Fd2E",
    "contractAddress": "0x8b51d66DE3ffd5F7becABc33f26c2Ffe6acFfcF3",
    "transactionIndex": 73,
    "gasUsed": "4845756",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1ae71285c6426babe86e53aee83d66ac27a50deaf9b35c8c2461894bd4a76f34",
    "transactionHash": "0x51e32f125d261fd9cd0aa13276aafea46b074520433d799de3c7e6d3c90fa340",
    "logs": [],
    "blockNumber": 26832044,
    "cumulativeGasUsed": "15585885",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1dd3bb699eadb61496c93c4c78d9a267",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"IneligibleRewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_LOCK_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUART\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHOLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardConverter\",\"type\":\"address\"}],\"name\":\"addRewardConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoRelockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autocompoundEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"}],\"name\":\"claimFromConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistribution.RewardData[]\",\"name\":\"rewardsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultLockIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct EarnedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"individualEarlyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdntToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userlist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsLookback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAutocompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWithMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupplyWithMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersAreSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardConverter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rptStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLookback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_middleFeeDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutocompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setDefaultRelockTypeIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lockPeriod\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"setLockTypeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lookback\",\"type\":\"uint256\"}],\"name\":\"setLookback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startfleetTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userlist\",\"outputs\":[{\"internalType\":\"contract ILockerList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawExpiredLocksFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ignoreRelock\",\"type\":\"bool\"}],\"name\":\"withdrawExpiredLocksForWithOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"zapVestingToLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"claimBounty(address,bool)\":{\"details\":\"Remove expired locks\",\"params\":{\"_user\":\"address.\"}},\"claimableRewards(address)\":{\"params\":{\"account\":\"for rewards\"}},\"earnedBalances(address)\":{\"details\":\"Earned balances may be withdrawn immediately for a 50% penalty.\",\"returns\":{\"earningsData\":\"which is an array of all infos\",\"total\":\"earnings\",\"unlocked\":\"earnings\"}},\"getRewardForDuration(address)\":{\"params\":{\"_rewardToken\":\"for the reward\"}},\"initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.\",\"params\":{\"_lockDuration\":\"lock duration\",\"_rdntToken\":\"RDNT token address.\",\"_rewardsDuration\":\"set reward stream time.\",\"_rewardsLookback\":\"reward lookback\"}},\"lockedBalances(address)\":{\"returns\":{\"lockData\":\"which is an array of locks\",\"locked\":\"balance\",\"lockedWithMultiplier\":\"lockedWithMultiplier\",\"total\":\"balance of locks\",\"unlockable\":\"balance\"}},\"mint(address,uint256,bool)\":{\"details\":\"Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before vestDuration has passed.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardPerToken(address)\":{\"details\":\"Reward is distributed only for locks.\",\"params\":{\"_rewardToken\":\"for reward\"}},\"setMinters(address[])\":{\"details\":\"Can be called only once\"},\"stake(uint256,address,uint256)\":{\"details\":\"Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances.\"},\"withdrawableBalance(address)\":{\"details\":\"This is earnings, not locks.\"}},\"title\":\"Multi Fee Distribution Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEFAULT_LOCK_INDEX()\":{\"notice\":\"Default lock index\"},\"addReward(address)\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"burn()\":{\"notice\":\"Proportion of burn amount\"},\"claimBounty(address,bool)\":{\"notice\":\"Claims bounty.\"},\"claimableRewards(address)\":{\"notice\":\"Address and claimable amount of all reward tokens for the given account.\"},\"daoTreasury()\":{\"notice\":\"DAO wallet\"},\"defaultLockDuration()\":{\"notice\":\"Duration of lock/earned penalty period, used for earnings\"},\"earnedBalances(address)\":{\"notice\":\"Earnings which is locked yet\"},\"exit(bool)\":{\"notice\":\"Withdraw full unlocked balance and earnings, optionally claim pending rewards.\"},\"getAllRewards()\":{\"notice\":\"Claim all pending staking rewards.\"},\"getReward(address[])\":{\"notice\":\"Claim all pending staking rewards.\"},\"getRewardForDuration(address)\":{\"notice\":\"Reward amount of the duration.\"},\"incentivesController()\":{\"notice\":\"Address of CIC contract\"},\"individualEarlyExit(bool,uint256)\":{\"notice\":\"Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns reward applicable timestamp.\"},\"lockInfo(address)\":{\"notice\":\"Returns all locks of a user.\"},\"lockedBalances(address)\":{\"notice\":\"Information on a user's lockings\"},\"lockedSupply()\":{\"notice\":\"Total locked value\"},\"lockedSupplyWithMultiplier()\":{\"notice\":\"Total locked value in multipliers\"},\"middleFeeDistribution()\":{\"notice\":\"Address of Middle Fee Distribution Contract\"},\"mint(address,uint256,bool)\":{\"notice\":\"Add to earnings\"},\"minters(address)\":{\"notice\":\"Addresses approved to call mint\"},\"mintersAreSet()\":{\"notice\":\"Flag to prevent more minter addings\"},\"rdntToken()\":{\"notice\":\"Address of RDNT\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\"},\"relock()\":{\"notice\":\"Withdraw and restake assets.\"},\"rewardData(address)\":{\"notice\":\"Reward data per token\"},\"rewardPerToken(address)\":{\"notice\":\"Reward amount per token\"},\"rewardTokens(uint256)\":{\"notice\":\"Reward tokens being distributed\"},\"rewards(address,address)\":{\"notice\":\"user -> reward token -> amount; used to store reward amount\"},\"rewardsDuration()\":{\"notice\":\"Duration that rewards are streamed over\"},\"rewardsLookback()\":{\"notice\":\"Duration that rewards loop back\"},\"setAddresses(address,address,address)\":{\"notice\":\"Set CIC, MFD and Treasury.\"},\"setDefaultRelockTypeIndex(uint256)\":{\"notice\":\"Set default lock type index for user relock.\"},\"setLPToken(address)\":{\"notice\":\"Set LP token.\"},\"setLockTypeInfo(uint256[],uint256[])\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"setMinters(address[])\":{\"notice\":\"Set minters\"},\"setRelock(bool)\":{\"notice\":\"Set relock status\"},\"stake(uint256,address,uint256)\":{\"notice\":\"Stake tokens to receive rewards.\"},\"stakingToken()\":{\"notice\":\"Address of LP token\"},\"startfleetTreasury()\":{\"notice\":\"treasury wallet\"},\"totalBalance(address)\":{\"notice\":\"Total balance of an account, including unlocked, locked and earned tokens.\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"user -> reward token -> rpt; RPT for paid amount\"},\"vestDuration()\":{\"notice\":\"Duration of vesting RDNT\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw tokens from earnings and unlocked.\"},\"withdrawExpiredLocksFor(address)\":{\"notice\":\"Withdraw all currently locked tokens where the unlock time has passed.\"},\"withdrawableBalance(address)\":{\"notice\":\"Final balance received and penalty balance paid by user upon calling exit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/staking/MultiFeeDistribution.sol\":\"MultiFeeDistribution\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IBountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBountyManager {\\n\\tfunction quote(address _param) external returns (uint256 bounty);\\n\\n\\tfunction claim(address _param) external returns (uint256 bounty);\\n\\n\\tfunction minDLPBalance() external view returns (uint256 amt);\\n}\\n\",\"keccak256\":\"0xbde6f9fa73468967b9bf00d65ed2e060e918afb8610e7eb69190ff10e326c7bf\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n}\\n\",\"keccak256\":\"0x3f44ee9291069ef7a3b09c70293e745db5fe53b4f1b5ccdf72c97d1aad0f7720\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\\n\",\"keccak256\":\"0xb83ef87aeba0312ab242ba35657ef0283aaf3070df5919c280879bc173638aba\",\"license\":\"MIT\"},\"contracts/interfaces/ILockerList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface ILockerList {\\n\\tfunction lockersCount() external view returns (uint256);\\n\\n\\tfunction getUsers(uint256 page, uint256 limit) external view returns (address[] memory);\\n\\n\\tfunction addToList(address user) external;\\n\\n\\tfunction removeFromList(address user) external;\\n}\\n\",\"keccak256\":\"0x133d96ce837405afe6787a9da0c9d6558f0ecb4325f6c499961cd92977b67ba0\",\"license\":\"MIT\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getRdntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b3a8c0804f5004639275ac1928dbf8f277ab956be5b8af0dec28b2d08d54c3e\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdfddfa084983a65236cee7e6f939dfbf27e715f46e60b9e9dbccd5cd4e48ad10\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x06101420297ac4c13dd8b0436e1ff6098e2c21243927d7e762f15929f5a780e1\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/radiant/staking/MultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/IBountyManager.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/IMintableToken.sol\\\";\\nimport \\\"../../interfaces/ILockerList.sol\\\";\\nimport \\\"../../interfaces/LockedBalance.sol\\\";\\nimport \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../../interfaces/IPriceProvider.sol\\\";\\n\\n/// @title Multi Fee Distribution Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract MultiFeeDistribution is IMultiFeeDistribution, Initializable, PausableUpgradeable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IMintableToken;\\n\\n\\taddress private _priceProvider;\\n\\n\\t/********************** Constants ***********************/\\n\\n\\tuint256 public constant QUART = 25000; //  25%\\n\\tuint256 public constant HALF = 65000; //  65%\\n\\tuint256 public constant WHOLE = 100000; // 100%\\n\\n\\t/// @notice Proportion of burn amount\\n\\tuint256 public burn;\\n\\n\\t/// @notice Duration that rewards are streamed over\\n\\tuint256 public rewardsDuration;\\n\\n\\t/// @notice Duration that rewards loop back\\n\\tuint256 public rewardsLookback;\\n\\n\\t/// @notice Multiplier for earnings, fixed to 1\\n\\t// uint256 public constant DEFAULT_MUTLIPLIER = 1;\\n\\n\\t/// @notice Default lock index\\n\\tuint256 public constant DEFAULT_LOCK_INDEX = 1;\\n\\n\\t/// @notice Duration of lock/earned penalty period, used for earnings\\n\\tuint256 public defaultLockDuration;\\n\\n\\t/// @notice Duration of vesting RDNT\\n\\tuint256 public vestDuration;\\n\\n\\taddress public rewardConverter;\\n\\n\\t/********************** Contract Addresses ***********************/\\n\\n\\t/// @notice Address of Middle Fee Distribution Contract\\n\\tIMiddleFeeDistribution public middleFeeDistribution;\\n\\n\\t/// @notice Address of CIC contract\\n\\tIChefIncentivesController public incentivesController;\\n\\n\\t/// @notice Address of RDNT\\n\\tIMintableToken public override rdntToken;\\n\\n\\t/// @notice Address of LP token\\n\\taddress public override stakingToken;\\n\\n\\t// Address of Lock Zapper\\n\\taddress internal lockZap;\\n\\n\\t/********************** Lock & Earn Info ***********************/\\n\\n\\t// Private mappings for balance data\\n\\tmapping(address => Balances) private balances;\\n\\tmapping(address => LockedBalance[]) internal userLocks;\\n\\tmapping(address => LockedBalance[]) private userEarnings;\\n\\tmapping(address => bool) public override autocompoundEnabled;\\n\\tmapping(address => uint256) public lastAutocompound;\\n\\n\\t/// @notice Total locked value\\n\\tuint256 public lockedSupply;\\n\\n\\t/// @notice Total locked value in multipliers\\n\\tuint256 public lockedSupplyWithMultiplier;\\n\\n\\t// Time lengths\\n\\tuint256[] internal lockPeriod;\\n\\n\\t// Multipliers\\n\\tuint256[] internal rewardMultipliers;\\n\\n\\t/********************** Reward Info ***********************/\\n\\n\\t/// @notice Reward tokens being distributed\\n\\taddress[] public rewardTokens;\\n\\n\\t/// @notice Reward data per token\\n\\tmapping(address => Reward) public rewardData;\\n\\n\\t/// @notice user -> reward token -> rpt; RPT for paid amount\\n\\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n\\t/// @notice user -> reward token -> amount; used to store reward amount\\n\\tmapping(address => mapping(address => uint256)) public rewards;\\n\\n\\t/********************** Other Info ***********************/\\n\\n\\t/// @notice DAO wallet\\n\\taddress public override daoTreasury;\\n\\n\\t/// @notice treasury wallet\\n\\taddress public startfleetTreasury;\\n\\n\\t/// @notice Addresses approved to call mint\\n\\tmapping(address => bool) public minters;\\n\\n\\t// Addresses to relock\\n\\tmapping(address => bool) public override autoRelockDisabled;\\n\\n\\t// Default lock index for relock\\n\\tmapping(address => uint256) public override defaultLockIndex;\\n\\n\\t/// @notice Flag to prevent more minter addings\\n\\tbool public mintersAreSet;\\n\\n\\t// Users list\\n\\tILockerList public userlist;\\n\\n\\tmapping(address => uint256) public lastClaimTime;\\n\\n\\taddress public bountyManager;\\n\\n\\t// to prevent unbounded lock length iteration during withdraw/clean\\n\\n\\t/********************** Events ***********************/\\n\\n\\t//event RewardAdded(uint256 reward);\\n\\t// event Staked(address indexed user, uint256 amount, bool locked);\\n\\tevent Locked(address indexed user, uint256 amount, uint256 lockedBalance, bool isLP);\\n\\tevent Withdrawn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 receivedAmount,\\n\\t\\tuint256 lockedBalance,\\n\\t\\tuint256 penalty,\\n\\t\\tuint256 burn,\\n\\t\\tbool isLP\\n\\t);\\n\\tevent RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n\\tevent IneligibleRewardRemoved(address indexed user, address indexed rewardToken, uint256 reward);\\n\\tevent RewardsDurationUpdated(address token, uint256 newDuration);\\n\\tevent Recovered(address token, uint256 amount);\\n\\tevent Relocked(address indexed user, uint256 amount, uint256 lockIndex);\\n\\n\\t/**\\n\\t * @dev Constructor\\n\\t *  First reward MUST be the RDNT token or things will break\\n\\t *  related to the 50% penalty and distribution to locked balances.\\n\\t * @param _rdntToken RDNT token address.\\n\\t * @param _rewardsDuration set reward stream time.\\n\\t * @param _rewardsLookback reward lookback\\n\\t * @param _lockDuration lock duration\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _rdntToken,\\n\\t\\taddress _lockZap,\\n\\t\\taddress _dao,\\n\\t\\taddress _userlist,\\n\\t\\taddress priceProvider,\\n\\t\\tuint256 _rewardsDuration,\\n\\t\\tuint256 _rewardsLookback,\\n\\t\\tuint256 _lockDuration,\\n\\t\\tuint256 _burnRatio,\\n\\t\\tuint256 _vestDuration\\n\\t) public initializer {\\n\\t\\trequire(_rdntToken != address(0), \\\"0x0\\\");\\n\\t\\trequire(_lockZap != address(0), \\\"0x0\\\");\\n\\t\\trequire(_dao != address(0), \\\"0x0\\\");\\n\\t\\trequire(_userlist != address(0), \\\"0x0\\\");\\n\\t\\trequire(priceProvider != address(0), \\\"0x0\\\");\\n\\t\\trequire(_rewardsDuration != uint256(0), \\\"0x0\\\");\\n\\t\\trequire(_rewardsLookback != uint256(0), \\\"0x0\\\");\\n\\t\\trequire(_lockDuration != uint256(0), \\\"0x0\\\");\\n\\t\\trequire(_vestDuration != uint256(0), \\\"0x0\\\");\\n\\t\\trequire(_burnRatio <= WHOLE, \\\"invalid burn\\\");\\n\\t\\trequire(_rewardsLookback <= _rewardsDuration, \\\"invalid lookback\\\");\\n\\n\\t\\t__Pausable_init();\\n\\t\\t__Ownable_init();\\n\\n\\t\\trdntToken = IMintableToken(_rdntToken);\\n\\t\\tlockZap = _lockZap;\\n\\t\\tdaoTreasury = _dao;\\n\\t\\t_priceProvider = priceProvider;\\n\\t\\tuserlist = ILockerList(_userlist);\\n\\t\\trewardTokens.push(_rdntToken);\\n\\t\\trewardData[_rdntToken].lastUpdateTime = block.timestamp;\\n\\n\\t\\trewardsDuration = _rewardsDuration;\\n\\t\\trewardsLookback = _rewardsLookback;\\n\\t\\tdefaultLockDuration = _lockDuration;\\n\\t\\tburn = _burnRatio;\\n\\t\\tvestDuration = _vestDuration;\\n\\t}\\n\\n\\t/********************** Setters ***********************/\\n\\n\\t/**\\n\\t * @notice Set minters\\n\\t * @dev Can be called only once\\n\\t */\\n\\tfunction setMinters(address[] memory _minters) external onlyOwner {\\n\\t\\trequire(!mintersAreSet, \\\"minters set\\\");\\n\\t\\tfor (uint256 i; i < _minters.length; i++) {\\n\\t\\t\\trequire(_minters[i] != address(0), \\\"minter is 0 address\\\");\\n\\t\\t\\tminters[_minters[i]] = true;\\n\\t\\t}\\n\\t\\tmintersAreSet = true;\\n\\t}\\n\\n\\tfunction setBountyManager(address _bounty) external onlyOwner {\\n\\t\\trequire(_bounty != address(0), \\\"bounty is 0 address\\\");\\n\\t\\tbountyManager = _bounty;\\n\\t\\tminters[_bounty] = true;\\n\\t}\\n\\n\\tfunction addRewardConverter(address _rewardConverter) external onlyOwner {\\n\\t\\trequire(_rewardConverter != address(0), \\\"rewardConverter is 0 address\\\");\\n\\t\\trewardConverter = _rewardConverter;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t */\\n\\tfunction setLockTypeInfo(uint256[] memory _lockPeriod, uint256[] memory _rewardMultipliers) external onlyOwner {\\n\\t\\trequire(_lockPeriod.length == _rewardMultipliers.length, \\\"invalid lock period\\\");\\n\\t\\tdelete lockPeriod;\\n\\t\\tdelete rewardMultipliers;\\n\\t\\tfor (uint256 i = 0; i < _lockPeriod.length; i += 1) {\\n\\t\\t\\tlockPeriod.push(_lockPeriod[i]);\\n\\t\\t\\trewardMultipliers.push(_rewardMultipliers[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set CIC, MFD and Treasury.\\n\\t */\\n\\tfunction setAddresses(\\n\\t\\tIChefIncentivesController _controller,\\n\\t\\tIMiddleFeeDistribution _middleFeeDistribution,\\n\\t\\taddress _treasury\\n\\t) external onlyOwner {\\n\\t\\trequire(address(_controller) != address(0), \\\"controller is 0 address\\\");\\n\\t\\trequire(address(_middleFeeDistribution) != address(0), \\\"mfd is 0 address\\\");\\n\\t\\tincentivesController = _controller;\\n\\t\\tmiddleFeeDistribution = _middleFeeDistribution;\\n\\t\\tstartfleetTreasury = _treasury;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set LP token.\\n\\t */\\n\\tfunction setLPToken(address _stakingToken) external onlyOwner {\\n\\t\\trequire(_stakingToken != address(0), \\\"_stakingToken is 0 address\\\");\\n\\t\\trequire(stakingToken == address(0), \\\"already set\\\");\\n\\t\\tstakingToken = _stakingToken;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t */\\n\\tfunction addReward(address _rewardToken) external override {\\n\\t\\trequire(_rewardToken != address(0), \\\"rewardToken is 0 address\\\");\\n\\t\\trequire(minters[msg.sender], \\\"!minter\\\");\\n\\t\\trequire(rewardData[_rewardToken].lastUpdateTime == 0, \\\"already added\\\");\\n\\t\\trewardTokens.push(_rewardToken);\\n\\t\\trewardData[_rewardToken].lastUpdateTime = block.timestamp;\\n\\t\\trewardData[_rewardToken].periodFinish = block.timestamp;\\n\\t}\\n\\n\\t/********************** View functions ***********************/\\n\\n\\t/**\\n\\t * @notice Set default lock type index for user relock.\\n\\t */\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external override {\\n\\t\\trequire(_index < lockPeriod.length, \\\"invalid type\\\");\\n\\t\\tdefaultLockIndex[msg.sender] = _index;\\n\\t}\\n\\n\\tfunction setAutocompound(bool _status) external {\\n\\t\\tautocompoundEnabled[msg.sender] = _status;\\n\\t}\\n\\n\\tfunction getLockDurations() external view returns (uint256[] memory) {\\n\\t\\treturn lockPeriod;\\n\\t}\\n\\n\\tfunction getLockMultipliers() external view returns (uint256[] memory) {\\n\\t\\treturn rewardMultipliers;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set relock status\\n\\t */\\n\\tfunction setRelock(bool _status) external virtual {\\n\\t\\tautoRelockDisabled[msg.sender] = !_status;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns all locks of a user.\\n\\t */\\n\\tfunction lockInfo(address user) external view override returns (LockedBalance[] memory) {\\n\\t\\treturn userLocks[user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\trequire(rewardData[tokenAddress].lastUpdateTime == 0, \\\"active reward\\\");\\n\\t\\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw and restake assets.\\n\\t */\\n\\tfunction relock() external virtual {\\n\\t\\tuint256 amount = _withdrawExpiredLocksFor(msg.sender, true, true, userLocks[msg.sender].length);\\n\\t\\t_stake(amount, msg.sender, defaultLockIndex[msg.sender], false);\\n\\t\\temit Relocked(msg.sender, amount, defaultLockIndex[msg.sender]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Total balance of an account, including unlocked, locked and earned tokens.\\n\\t */\\n\\tfunction totalBalance(address user) external view override returns (uint256 amount) {\\n\\t\\tif (stakingToken == address(rdntToken)) {\\n\\t\\t\\treturn balances[user].total;\\n\\t\\t}\\n\\t\\treturn balances[user].locked;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Information on a user's lockings\\n\\t * @return total balance of locks\\n\\t * @return unlockable balance\\n\\t * @return locked balance\\n\\t * @return lockedWithMultiplier\\n\\t * @return lockData which is an array of locks\\n\\t */\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 total,\\n\\t\\t\\tuint256 unlockable,\\n\\t\\t\\tuint256 locked,\\n\\t\\t\\tuint256 lockedWithMultiplier,\\n\\t\\t\\tLockedBalance[] memory lockData\\n\\t\\t)\\n\\t{\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\t\\tuint256 idx;\\n\\t\\tfor (uint256 i = 0; i < locks.length; i++) {\\n\\t\\t\\tif (locks[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tlockData = new LockedBalance[](locks.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlockData[idx] = locks[i];\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\tlocked = locked.add(locks[i].amount);\\n\\t\\t\\t\\tlockedWithMultiplier = lockedWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlockable = unlockable.add(locks[i].amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (balances[user].locked, unlockable, locked, lockedWithMultiplier, lockData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Earnings which is locked yet\\n\\t * @dev Earned balances may be withdrawn immediately for a 50% penalty.\\n\\t * @return total earnings\\n\\t * @return unlocked earnings\\n\\t * @return earningsData which is an array of all infos\\n\\t */\\n\\tfunction earnedBalances(\\n\\t\\taddress user\\n\\t) public view returns (uint256 total, uint256 unlocked, EarnedBalance[] memory earningsData) {\\n\\t\\tunlocked = balances[user].unlocked;\\n\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\tuint256 idx;\\n\\t\\tfor (uint256 i = 0; i < earnings.length; i++) {\\n\\t\\t\\tif (earnings[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tearningsData = new EarnedBalance[](earnings.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t(, uint256 penaltyAmount, , ) = ieeWithdrawableBalances(user, earnings[i].unlockTime);\\n\\t\\t\\t\\tearningsData[idx].amount = earnings[i].amount;\\n\\t\\t\\t\\tearningsData[idx].unlockTime = earnings[i].unlockTime;\\n\\t\\t\\t\\tearningsData[idx].penalty = penaltyAmount;\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\ttotal = total.add(earnings[i].amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlocked = unlocked.add(earnings[i].amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (total, unlocked, earningsData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Final balance received and penalty balance paid by user upon calling exit.\\n\\t * @dev This is earnings, not locks.\\n\\t */\\n\\tfunction withdrawableBalance(\\n\\t\\taddress user\\n\\t) public view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount) {\\n\\t\\tuint256 earned = balances[user].earned;\\n\\t\\tif (earned > 0) {\\n\\t\\t\\tuint256 length = userEarnings[user].length;\\n\\t\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[user][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, , uint256 newPenaltyAmount, uint256 newBurnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(newPenaltyAmount);\\n\\t\\t\\t\\tburnAmount = burnAmount.add(newBurnAmount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tamount = balances[user].unlocked.add(earned).sub(penaltyAmount);\\n\\t\\treturn (amount, penaltyAmount, burnAmount);\\n\\t}\\n\\n\\tfunction _penaltyInfo(\\n\\t\\tLockedBalance memory earning\\n\\t) internal view returns (uint256 amount, uint256 penaltyFactor, uint256 penaltyAmount, uint256 burnAmount) {\\n\\t\\tif (earning.unlockTime > block.timestamp) {\\n\\t\\t\\t// 90% on day 1, decays to 25% on day 90\\n\\t\\t\\tpenaltyFactor = earning.unlockTime.sub(block.timestamp).mul(HALF).div(vestDuration).add(QUART); // 25% + timeLeft/vestDuration * 65%\\n\\t\\t}\\n\\t\\tpenaltyAmount = earning.amount.mul(penaltyFactor).div(WHOLE);\\n\\t\\tburnAmount = penaltyAmount.mul(burn).div(WHOLE);\\n\\t\\tamount = earning.amount.sub(penaltyAmount);\\n\\t}\\n\\n\\t/********************** Reward functions ***********************/\\n\\n\\t/**\\n\\t * @notice Reward amount of the duration.\\n\\t * @param _rewardToken for the reward\\n\\t */\\n\\tfunction getRewardForDuration(address _rewardToken) external view returns (uint256) {\\n\\t\\treturn rewardData[_rewardToken].rewardPerSecond.mul(rewardsDuration).div(1e12);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns reward applicable timestamp.\\n\\t */\\n\\tfunction lastTimeRewardApplicable(address _rewardToken) public view returns (uint256) {\\n\\t\\tuint256 periodFinish = rewardData[_rewardToken].periodFinish;\\n\\t\\treturn block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reward amount per token\\n\\t * @dev Reward is distributed only for locks.\\n\\t * @param _rewardToken for reward\\n\\t */\\n\\tfunction rewardPerToken(address _rewardToken) public view returns (uint256 rptStored) {\\n\\t\\trptStored = rewardData[_rewardToken].rewardPerTokenStored;\\n\\t\\tif (lockedSupplyWithMultiplier > 0) {\\n\\t\\t\\tuint256 newReward = lastTimeRewardApplicable(_rewardToken).sub(rewardData[_rewardToken].lastUpdateTime).mul(\\n\\t\\t\\t\\trewardData[_rewardToken].rewardPerSecond\\n\\t\\t\\t);\\n\\t\\t\\trptStored = rptStored.add(newReward.mul(1e18).div(lockedSupplyWithMultiplier));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address and claimable amount of all reward tokens for the given account.\\n\\t * @param account for rewards\\n\\t */\\n\\tfunction claimableRewards(\\n\\t\\taddress account\\n\\t) public view override returns (IFeeDistribution.RewardData[] memory rewardsData) {\\n\\t\\trewardsData = new IFeeDistribution.RewardData[](rewardTokens.length);\\n\\t\\tfor (uint256 i = 0; i < rewardsData.length; i++) {\\n\\t\\t\\trewardsData[i].token = rewardTokens[i];\\n\\t\\t\\trewardsData[i].amount = _earned(\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\trewardsData[i].token,\\n\\t\\t\\t\\tbalances[account].lockedWithMultiplier,\\n\\t\\t\\t\\trewardPerToken(rewardsData[i].token)\\n\\t\\t\\t).div(1e12);\\n\\t\\t}\\n\\t\\treturn rewardsData;\\n\\t}\\n\\n\\tfunction claimFromConverter(address onBehalf) external override whenNotPaused {\\n\\t\\trequire(msg.sender == rewardConverter, \\\"!converter\\\");\\n\\t\\t_updateReward(onBehalf);\\n\\t\\tmiddleFeeDistribution.forwardReward(rewardTokens);\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\taddress token = rewardTokens[i];\\n\\t\\t\\t_notifyUnseenReward(token);\\n\\t\\t\\tuint256 reward = rewards[onBehalf][token].div(1e12);\\n\\t\\t\\tif (reward > 0) {\\n\\t\\t\\t\\trewards[onBehalf][token] = 0;\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(reward);\\n\\n\\t\\t\\t\\tIERC20(token).safeTransfer(rewardConverter, reward);\\n\\t\\t\\t\\temit RewardPaid(onBehalf, token, reward);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\t\\tlastClaimTime[onBehalf] = block.timestamp;\\n\\t}\\n\\n\\t/********************** Operate functions ***********************/\\n\\n\\t/**\\n\\t * @notice Stake tokens to receive rewards.\\n\\t * @dev Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\\n\\t */\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external override {\\n\\t\\t_stake(amount, onBehalfOf, typeIndex, false);\\n\\t}\\n\\n\\tfunction _stake(uint256 amount, address onBehalfOf, uint256 typeIndex, bool isRelock) internal whenNotPaused {\\n\\t\\tif (amount == 0) return;\\n\\t\\tif (bountyManager != address(0)) {\\n\\t\\t\\trequire(amount >= IBountyManager(bountyManager).minDLPBalance(), \\\"min stake amt not met\\\");\\n\\t\\t}\\n\\t\\trequire(typeIndex < lockPeriod.length, \\\"invalid index\\\");\\n\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\tuint256 transferAmount = amount;\\n\\t\\tif (userLocks[onBehalfOf].length != 0) {\\n\\t\\t\\t//if user has any locks\\n\\t\\t\\tif (userLocks[onBehalfOf][0].unlockTime <= block.timestamp) {\\n\\t\\t\\t\\t//if users soonest unlock has already elapsed\\n\\t\\t\\t\\tif (onBehalfOf == msg.sender || msg.sender == lockZap) {\\n\\t\\t\\t\\t\\t//if the user is msg.sender or the lockzap contract\\n\\t\\t\\t\\t\\tuint256 withdrawnAmt;\\n\\t\\t\\t\\t\\tif (!autoRelockDisabled[onBehalfOf]) {\\n\\t\\t\\t\\t\\t\\twithdrawnAmt = _withdrawExpiredLocksFor(onBehalfOf, true, false, userLocks[onBehalfOf].length);\\n\\t\\t\\t\\t\\t\\tamount = amount.add(withdrawnAmt);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t_withdrawExpiredLocksFor(onBehalfOf, true, true, userLocks[onBehalfOf].length);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\n\\t\\tbal.locked = bal.locked.add(amount);\\n\\t\\tlockedSupply = lockedSupply.add(amount);\\n\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\n\\t\\t_insertLock(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tLockedBalance({\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tunlockTime: block.timestamp.add(lockPeriod[typeIndex]),\\n\\t\\t\\t\\tmultiplier: rewardMultipliers[typeIndex],\\n\\t\\t\\t\\tduration: lockPeriod[typeIndex]\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\tuserlist.addToList(onBehalfOf);\\n\\n\\t\\tif (!isRelock) {\\n\\t\\t\\tIERC20(stakingToken).safeTransferFrom(msg.sender, address(this), transferAmount);\\n\\t\\t}\\n\\n\\t\\tincentivesController.afterLockUpdate(onBehalfOf);\\n\\t\\temit Locked(onBehalfOf, amount, balances[onBehalfOf].locked, stakingToken != address(rdntToken));\\n\\t}\\n\\n\\tfunction _insertLock(address _user, LockedBalance memory newLock) internal {\\n\\t\\tLockedBalance[] storage locks = userLocks[_user];\\n\\t\\tuint256 length = locks.length;\\n\\t\\tuint256 i;\\n\\t\\twhile (i < length && locks[i].unlockTime < newLock.unlockTime) {\\n\\t\\t\\ti = i + 1;\\n\\t\\t}\\n\\t\\tlocks.push(newLock);\\n\\t\\tfor (uint256 j = length; j > i; j -= 1) {\\n\\t\\t\\tlocks[j] = locks[j - 1];\\n\\t\\t}\\n\\t\\tlocks[i] = newLock;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add to earnings\\n\\t * @dev Minted tokens receive rewards normally but incur a 50% penalty when\\n\\t *  withdrawn before vestDuration has passed.\\n\\t */\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external override whenNotPaused {\\n\\t\\trequire(minters[msg.sender], \\\"!minter\\\");\\n\\t\\tif (amount == 0) return;\\n\\n\\t\\tif (user == address(this)) {\\n\\t\\t\\t// minting to this contract adds the new tokens as incentives for lockers\\n\\t\\t\\t_notifyReward(address(rdntToken), amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tBalances storage bal = balances[user];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\t\\tif (withPenalty) {\\n\\t\\t\\tbal.earned = bal.earned.add(amount);\\n\\t\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\t\\tuint256 unlockTime = block.timestamp.add(vestDuration);\\n\\t\\t\\tearnings.push(\\n\\t\\t\\t\\tLockedBalance({amount: amount, unlockTime: unlockTime, multiplier: 1, duration: vestDuration})\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tbal.unlocked = bal.unlocked.add(amount);\\n\\t\\t}\\n\\t\\t//emit Staked(user, amount, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from earnings and unlocked.\\n\\t * @dev First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\\n\\t *  incurs a 50% penalty which is distributed based on locked balances.\\n\\t */\\n\\tfunction withdraw(uint256 amount) external {\\n\\t\\taddress _address = msg.sender;\\n\\t\\trequire(amount != 0, \\\"amt cannot be 0\\\");\\n\\n\\t\\tuint256 penaltyAmount;\\n\\t\\tuint256 burnAmount;\\n\\t\\tBalances storage bal = balances[_address];\\n\\n\\t\\tif (amount <= bal.unlocked) {\\n\\t\\t\\tbal.unlocked = bal.unlocked.sub(amount);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = amount.sub(bal.unlocked);\\n\\t\\t\\trequire(bal.earned >= remaining, \\\"invalid earned\\\");\\n\\t\\t\\tbal.unlocked = 0;\\n\\t\\t\\tuint256 sumEarned = bal.earned;\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tfor (i = 0; ; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[_address][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, uint256 penaltyFactor, , ) = _penaltyInfo(userEarnings[_address][i]);\\n\\n\\t\\t\\t\\t// Amount required from this lock, taking into account the penalty\\n\\t\\t\\t\\tuint256 requiredAmount = remaining.mul(WHOLE).div(WHOLE.sub(penaltyFactor));\\n\\t\\t\\t\\tif (requiredAmount >= earnedAmount) {\\n\\t\\t\\t\\t\\trequiredAmount = earnedAmount;\\n\\t\\t\\t\\t\\tremaining = remaining.sub(earnedAmount.mul(WHOLE.sub(penaltyFactor)).div(WHOLE)); // remaining -= earned * (1 - pentaltyFactor)\\n\\t\\t\\t\\t\\tif (remaining == 0) i++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuserEarnings[_address][i].amount = earnedAmount.sub(requiredAmount);\\n\\t\\t\\t\\t\\tremaining = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsumEarned = sumEarned.sub(requiredAmount);\\n\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(requiredAmount.mul(penaltyFactor).div(WHOLE)); // penalty += amount * penaltyFactor\\n\\t\\t\\t\\tburnAmount = burnAmount.add(penaltyAmount.mul(burn).div(WHOLE)); // burn += penalty * burnFactor\\n\\n\\t\\t\\t\\tif (remaining == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(sumEarned != 0, \\\"0 earned\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tfor (uint256 j = i; j < userEarnings[_address].length; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address][j - i] = userEarnings[_address][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (uint256 j = 0; j < i; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address].pop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbal.earned = sumEarned;\\n\\t\\t}\\n\\n\\t\\t// Update values\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(_address, amount, penaltyAmount, burnAmount, false);\\n\\t}\\n\\n\\tfunction ieeWithdrawableBalances(\\n\\t\\taddress user,\\n\\t\\tuint256 unlockTime\\n\\t) internal view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) {\\n\\t\\tfor (uint256 i = 0; i < userEarnings[user].length; i++) {\\n\\t\\t\\tif (userEarnings[user][i].unlockTime == unlockTime) {\\n\\t\\t\\t\\t(amount, , penaltyAmount, burnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\\n\\t */\\n\\tfunction individualEarlyExit(bool claimRewards, uint256 unlockTime) external {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\trequire(unlockTime > block.timestamp, \\\"!unlockTime\\\");\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) = ieeWithdrawableBalances(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tunlockTime\\n\\t\\t);\\n\\n\\t\\tif (index >= userEarnings[onBehalfOf].length) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = index + 1; i < userEarnings[onBehalfOf].length; i++) {\\n\\t\\t\\tuserEarnings[onBehalfOf][i - 1] = userEarnings[onBehalfOf][i];\\n\\t\\t}\\n\\t\\tuserEarnings[onBehalfOf].pop();\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\t\\tbal.earned = bal.earned.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw full unlocked balance and earnings, optionally claim pending rewards.\\n\\t */\\n\\tfunction exit(bool claimRewards) external override {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount) = withdrawableBalance(onBehalfOf);\\n\\n\\t\\tdelete userEarnings[onBehalfOf];\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\n\\t\\tbal.unlocked = 0;\\n\\t\\tbal.earned = 0;\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t */\\n\\tfunction getReward(address[] memory _rewardTokens) public {\\n\\t\\t_updateReward(msg.sender);\\n\\t\\t_getReward(msg.sender, _rewardTokens);\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t */\\n\\tfunction getAllRewards() external {\\n\\t\\treturn getReward(rewardTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate earnings.\\n\\t */\\n\\tfunction _earned(\\n\\t\\taddress _user,\\n\\t\\taddress _rewardToken,\\n\\t\\tuint256 _balance,\\n\\t\\tuint256 _currentRewardPerToken\\n\\t) internal view returns (uint256 earnings) {\\n\\t\\tearnings = rewards[_user][_rewardToken];\\n\\t\\tuint256 realRPT = _currentRewardPerToken.sub(userRewardPerTokenPaid[_user][_rewardToken]);\\n\\t\\tearnings = earnings.add(_balance.mul(realRPT).div(1e18));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update user reward info.\\n\\t */\\n\\tfunction _updateReward(address account) internal {\\n\\t\\tuint256 balance = balances[account].lockedWithMultiplier;\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\taddress token = rewardTokens[i];\\n\\t\\t\\tuint256 rpt = rewardPerToken(token);\\n\\n\\t\\t\\tReward storage r = rewardData[token];\\n\\t\\t\\tr.rewardPerTokenStored = rpt;\\n\\t\\t\\tr.lastUpdateTime = lastTimeRewardApplicable(token);\\n\\n\\t\\t\\tif (account != address(this)) {\\n\\t\\t\\t\\trewards[account][token] = _earned(account, token, balance, rpt);\\n\\t\\t\\t\\tuserRewardPerTokenPaid[account][token] = rpt;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new reward.\\n\\t * @dev If prev reward period is not done, then it resets `rewardPerSecond` and restarts period\\n\\t */\\n\\tfunction _notifyReward(address _rewardToken, uint256 reward) internal {\\n\\t\\tReward storage r = rewardData[_rewardToken];\\n\\t\\tif (block.timestamp >= r.periodFinish) {\\n\\t\\t\\tr.rewardPerSecond = reward.mul(1e12).div(rewardsDuration);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = r.periodFinish.sub(block.timestamp);\\n\\t\\t\\tuint256 leftover = remaining.mul(r.rewardPerSecond).div(1e12);\\n\\t\\t\\tr.rewardPerSecond = reward.add(leftover).mul(1e12).div(rewardsDuration);\\n\\t\\t}\\n\\n\\t\\tr.lastUpdateTime = block.timestamp;\\n\\t\\tr.periodFinish = block.timestamp.add(rewardsDuration);\\n\\t\\tr.balance = r.balance.add(reward);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Notify unseen rewards.\\n\\t * @dev for rewards other than stakingToken, every 24 hours we check if new\\n\\t *  rewards were sent to the contract or accrued via aToken interest.\\n\\t */\\n\\tfunction _notifyUnseenReward(address token) internal {\\n\\t\\trequire(token != address(0), \\\"Invalid Token\\\");\\n\\t\\tif (token == address(rdntToken)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tReward storage r = rewardData[token];\\n\\t\\tuint256 periodFinish = r.periodFinish;\\n\\t\\trequire(periodFinish != 0, \\\"invalid period finish\\\");\\n\\t\\tif (periodFinish < block.timestamp.add(rewardsDuration - rewardsLookback)) {\\n\\t\\t\\tuint256 unseen = IERC20(token).balanceOf(address(this)).sub(r.balance);\\n\\t\\t\\tif (unseen > 0) {\\n\\t\\t\\t\\t_notifyReward(token, unseen);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction onUpgrade() public {}\\n\\n\\tfunction setLookback(uint256 _lookback) public onlyOwner {\\n\\t\\trewardsLookback = _lookback;\\n\\t}\\n\\n\\t/**\\n\\t * @notice User gets reward\\n\\t */\\n\\tfunction _getReward(address _user, address[] memory _rewardTokens) internal whenNotPaused {\\n\\t\\tmiddleFeeDistribution.forwardReward(_rewardTokens);\\n\\t\\tuint256 length = _rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\taddress token = _rewardTokens[i];\\n\\t\\t\\t_notifyUnseenReward(token);\\n\\t\\t\\tuint256 reward = rewards[_user][token].div(1e12);\\n\\t\\t\\tif (reward > 0) {\\n\\t\\t\\t\\trewards[_user][token] = 0;\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(reward);\\n\\n\\t\\t\\t\\tIERC20(token).safeTransfer(_user, reward);\\n\\t\\t\\t\\temit RewardPaid(_user, token, reward);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from MFD\\n\\t */\\n\\tfunction _withdrawTokens(\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 penaltyAmount,\\n\\t\\tuint256 burnAmount,\\n\\t\\tbool claimRewards\\n\\t) internal {\\n\\t\\trequire(onBehalfOf == msg.sender, \\\"onBehalfOf != sender\\\");\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\trdntToken.safeTransfer(onBehalfOf, amount);\\n\\t\\tif (penaltyAmount > 0) {\\n\\t\\t\\tif (burnAmount > 0) {\\n\\t\\t\\t\\trdntToken.safeTransfer(startfleetTreasury, burnAmount);\\n\\t\\t\\t}\\n\\t\\t\\trdntToken.safeTransfer(daoTreasury, penaltyAmount.sub(burnAmount));\\n\\t\\t}\\n\\n\\t\\tif (claimRewards) {\\n\\t\\t\\t_getReward(onBehalfOf, rewardTokens);\\n\\t\\t\\tlastClaimTime[onBehalfOf] = block.timestamp;\\n\\t\\t}\\n\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\n\\t\\temit Withdrawn(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tamount,\\n\\t\\t\\tbalances[onBehalfOf].locked,\\n\\t\\t\\tpenaltyAmount,\\n\\t\\t\\tburnAmount,\\n\\t\\t\\tstakingToken != address(rdntToken)\\n\\t\\t);\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @notice Withdraw all lockings tokens where the unlock time has passed\\n\\t */\\n\\tfunction _cleanWithdrawableLocks(\\n\\t\\taddress user,\\n\\t\\tuint256 totalLock,\\n\\t\\tuint256 totalLockWithMultiplier,\\n\\t\\tuint256 limit\\n\\t) internal returns (uint256 lockAmount, uint256 lockAmountWithMultiplier) {\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\n\\t\\tif (locks.length != 0) {\\n\\t\\t\\tuint256 length = locks.length <= limit ? locks.length : limit;\\n\\t\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\t\\tif (locks[i].unlockTime <= block.timestamp) {\\n\\t\\t\\t\\t\\tlockAmount = lockAmount.add(locks[i].amount);\\n\\t\\t\\t\\t\\tlockAmountWithMultiplier = lockAmountWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t\\t\\tlocks[i] = locks[locks.length - 1];\\n\\t\\t\\t\\t\\tlocks.pop();\\n\\t\\t\\t\\t\\tlength = length.sub(1);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ti = i + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (locks.length == 0) {\\n\\t\\t\\t\\tlockAmount = totalLock;\\n\\t\\t\\t\\tlockAmountWithMultiplier = totalLockWithMultiplier;\\n\\t\\t\\t\\tdelete userLocks[user];\\n\\n\\t\\t\\t\\tuserlist.removeFromList(user);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t * @param _address of the user.\\n\\t */\\n\\tfunction _withdrawExpiredLocksFor(\\n\\t\\taddress _address,\\n\\t\\tbool isRelockAction,\\n\\t\\tbool doTransfer,\\n\\t\\tuint256 limit\\n\\t) internal whenNotPaused returns (uint256 amount) {\\n\\t\\t_updateReward(_address);\\n\\n\\t\\tuint256 amountWithMultiplier;\\n\\t\\tBalances storage bal = balances[_address];\\n\\t\\t(amount, amountWithMultiplier) = _cleanWithdrawableLocks(_address, bal.locked, bal.lockedWithMultiplier, limit);\\n\\t\\tbal.locked = bal.locked.sub(amount);\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.sub(amountWithMultiplier);\\n\\t\\tbal.total = bal.total.sub(amount);\\n\\t\\tlockedSupply = lockedSupply.sub(amount);\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.sub(amountWithMultiplier);\\n\\n\\t\\tif (!isRelockAction && !autoRelockDisabled[_address]) {\\n\\t\\t\\t_stake(amount, _address, defaultLockIndex[_address], true);\\n\\t\\t} else {\\n\\t\\t\\tif (doTransfer) {\\n\\t\\t\\t\\tIERC20(stakingToken).safeTransfer(_address, amount);\\n\\t\\t\\t\\tincentivesController.afterLockUpdate(_address);\\n\\t\\t\\t\\temit Withdrawn(_address, amount, balances[_address].locked, 0, 0, stakingToken != address(rdntToken));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t */\\n\\tfunction withdrawExpiredLocksFor(address _address) external override returns (uint256) {\\n\\t\\treturn _withdrawExpiredLocksFor(_address, false, true, userLocks[_address].length);\\n\\t}\\n\\n\\tfunction withdrawExpiredLocksForWithOptions(\\n\\t\\taddress _address,\\n\\t\\tuint256 _limit,\\n\\t\\tbool _ignoreRelock\\n\\t) external returns (uint256) {\\n\\t\\tif (_limit == 0) _limit = userLocks[_address].length;\\n\\n\\t\\treturn _withdrawExpiredLocksFor(_address, _ignoreRelock, true, _limit);\\n\\t}\\n\\n\\tfunction zapVestingToLp(address _user) external override returns (uint256 zapped) {\\n\\t\\trequire(msg.sender == lockZap, \\\"!lockZap\\\");\\n\\n\\t\\t_updateReward(_user);\\n\\n\\t\\tLockedBalance[] storage earnings = userEarnings[_user];\\n\\t\\tfor (uint256 i = earnings.length; i > 0; i -= 1) {\\n\\t\\t\\tif (earnings[i - 1].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tzapped = zapped.add(earnings[i - 1].amount);\\n\\t\\t\\t\\tearnings.pop();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trdntToken.safeTransfer(lockZap, zapped);\\n\\n\\t\\tBalances storage bal = balances[_user];\\n\\t\\tbal.earned = bal.earned.sub(zapped);\\n\\t\\tbal.total = bal.total.sub(zapped);\\n\\n\\t\\tIPriceProvider(_priceProvider).update();\\n\\n\\t\\treturn zapped;\\n\\t}\\n\\n\\tfunction getPriceProvider() external view override returns (address) {\\n\\t\\treturn _priceProvider;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claims bounty.\\n\\t * @dev Remove expired locks\\n\\t * @param _user address.\\n\\t */\\n\\tfunction claimBounty(address _user, bool _execute) public whenNotPaused returns (bool issueBaseBounty) {\\n\\t\\trequire(msg.sender == address(bountyManager), \\\"!bountyManager\\\");\\n\\n\\t\\t(, uint256 unlockable, , , ) = lockedBalances(_user);\\n\\t\\tif (unlockable == 0) {\\n\\t\\t\\treturn (false);\\n\\t\\t} else {\\n\\t\\t\\tissueBaseBounty = true;\\n\\t\\t}\\n\\n\\t\\tif (!_execute) {\\n\\t\\t\\treturn (issueBaseBounty);\\n\\t\\t}\\n\\t\\t// Withdraw the user's expried locks\\n\\t\\t_withdrawExpiredLocksFor(_user, false, true, userLocks[_user].length);\\n\\t}\\n\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n}\\n\",\"keccak256\":\"0xb1b8518287a7accaea7c3b3aa94561ebaeff9d2a0cbe8285405db376d7ff179e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506156d780620000216000396000f3fe608060405234801561001057600080fd5b50600436106105145760003560e01c8063757c4d22116102a1578063af1df2551161016b578063df379876116100e3578063f122977711610097578063f46eccc41161007c578063f46eccc414610b24578063f7ad360114610b47578063ff66a30514610b7457600080fd5b8063f122977714610afe578063f2fde38b14610b1157600080fd5b8063e6c91a15116100c8578063e6c91a1514610ab7578063e70b9e2714610aca578063e8999f4314610af557600080fd5b8063df37987614610a82578063e6af230d14610aa457600080fd5b8063bcd110141161013a578063ca5c7b911161011f578063ca5c7b9114610a46578063d1a1beb414610a4f578063dc01f60d14610a6257600080fd5b8063bcd1101414610a2b578063c53b573d14610a3e57600080fd5b8063af1df255146109d2578063b2d6e66d146109e5578063b36b9ffd146109f8578063b77cf9c614610a0b57600080fd5b80638980f11f1161021957806394761e2a116101cd5780639bd4ef50116101b25780639bd4ef50146109935780639c9b2e211461099c578063ada71bc2146109af57600080fd5b806394761e2a1461096757806398387a8d1461097057600080fd5b80638f40aab1116101fe5780638f40aab1146109345780638fd9f2ca14610947578063914f6e6d1461095457600080fd5b80638980f11f146109105780638da5cb5b1461092357600080fd5b80637bb7bed1116102705780638232e5f7116102555780638232e5f7146108ec5780638456cb59146108f557806387afa336146108fd57600080fd5b80637bb7bed1146108c65780637fd7d062146108d957600080fd5b8063757c4d221461088057806376520c6d1461089857806379022a9f146108a05780637ab8955d146108b357600080fd5b80633b26664f116103e25780635c975abb1161035a5780636eacd3981161030e5780637035ab98116102f35780637035ab981461083a578063715018a61461086557806372f702f31461086d57600080fd5b80636eacd398146108145780636fa75e6d1461082757600080fd5b80636a678a9c1161033f5780636a678a9c146107ce5780636bd3b87c146107e15780636e9c931c1461080157600080fd5b80635c975abb146107a4578063638634ee146107bb57600080fd5b806346e73271116103b15780634c6f7131116103965780634c6f713114610750578063547d009614610763578063556a795a1461077657600080fd5b806346e73271146106d857806348e5d9f8146106eb57600080fd5b80633b26664f146106ac5780633f4ba83a146106bf57806344df8e70146106c757806345b35f56146106d057600080fd5b80631824a46b116104905780632e88caa111610444578063363bf96411610429578063363bf9641461067d5780633824c76a14610690578063386a9525146106a357600080fd5b80632e88caa11461065457806332c991b51461067457600080fd5b806321cc01c91161047557806321cc01c91461061b5780632843b0191461062e5780632e1a7d4d1461064157600080fd5b80631824a46b1461060657806320212eaa1461060857600080fd5b80630c63469e116104e75780630fd6699b116104cc5780630fd6699b146105d55780631285deee146105de57806317053a7e146105e657600080fd5b80630c63469e146105ad5780630f63107f146105c057600080fd5b806302b62938146105195780630483a7f61461054c57806309eba343146105705780630a065fb614610588575b600080fd5b61052c610527366004614ece565b610b87565b604080519384526020840192909252908201526060015b60405180910390f35b61055f61055a366004614ece565b610d0f565b604051610543959493929190614f46565b61057a620186a081565b604051908152602001610543565b6097546001600160a01b03165b6040516001600160a01b039091168152602001610543565b61057a6105bb366004614ece565b610f6b565b6105c8610f9a565b6040516105439190614f71565b61057a609b5481565b61057a600181565b61057a6105f4366004614ece565b60a76020526000908152604090205481565b005b610606610616366004614ece565b610ff4565b609e54610595906001600160a01b031681565b61057a61063c366004614ece565b611079565b61060661064f366004614fb5565b61129c565b61057a610662366004614ece565b60b46020526000908152604090205481565b61057a61fde881565b61060661068b366004614fce565b611729565b609d54610595906001600160a01b031681565b61057a60995481565b6106066106ba3660046150ef565b61181c565b61060661191e565b61057a60985481565b61060661192e565b6106066106e6366004615153565b611991565b6107286106f9366004614ece565b60ad60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610543565b60a054610595906001600160a01b031681565b6106066107713660046151f0565b611e3e565b61060661078436600461528d565b33600090815260a660205260409020805460ff1916911515919091179055565b60335460ff165b6040519015158152602001610543565b61057a6107c9366004614ece565b611f8e565b6106066107dc366004614ece565b611fbd565b6107f46107ef366004614ece565b612096565b60405161054391906152aa565b61060661080f3660046152bd565b612133565b61057a610822366004614ece565b612140565b610606610835366004614fb5565b612197565b61057a6108483660046152f5565b60ae60209081526000928352604080842090915290825290205481565b6106066121fa565b60a154610595906001600160a01b031681565b60b5546105959061010090046001600160a01b031681565b6105c861220c565b60b054610595906001600160a01b031681565b6107ab6108c136600461532e565b612262565b6105956108d4366004614fb5565b612328565b6106066108e73660046151f0565b612352565b61057a609a5481565b6106066123c9565b60b154610595906001600160a01b031681565b61060661091e36600461535c565b6123d9565b6065546001600160a01b0316610595565b61057a610942366004615388565b6124b6565b60b5546107ab9060ff1681565b6106066109623660046153bf565b6124ee565b61057a609c5481565b6107ab61097e366004614ece565b60b36020526000908152604090205460ff1681565b61057a6161a881565b6106066109aa366004614ece565b612714565b6107ab6109bd366004614ece565b60a66020526000908152604090205460ff1681565b609f54610595906001600160a01b031681565b6106066109f3366004614ece565b612880565b60b754610595906001600160a01b031681565b61057a610a19366004614ece565b60b66020526000908152604090205481565b61057a610a39366004614ece565b612b29565b610606612b5f565b61057a60a85481565b610606610a5d366004615388565b612be9565b610a75610a70366004614ece565b612d53565b60405161054391906153dd565b610a95610a90366004614ece565b612ee3565b60405161054393929190615435565b610606610ab2366004614fb5565b61311e565b610606610ac536600461528d565b61312b565b61057a610ad83660046152f5565b60af60209081526000928352604080842090915290825290205481565b61057a60a95481565b61057a610b0c366004614ece565b6131bb565b610606610b1f366004614ece565b61324c565b6107ab610b32366004614ece565b60b26020526000908152604090205460ff1681565b610606610b5536600461528d565b33600090815260b360205260409020805460ff19169115919091179055565b610606610b82366004614ece565b6132dc565b6001600160a01b038116600090815260a36020526040812060040154819081908015610cd3576001600160a01b038516600090815260a56020526040812054905b81811015610cd0576001600160a01b038716600090815260a560205260408120805483908110610bfa57610bfa61549e565b90600052602060002090600402016000015490508060001415610c1d5750610cbe565b6001600160a01b038816600090815260a56020526040812080548291610c939186908110610c4d57610c4d61549e565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050613374565b935093505050610cac828961340390919063ffffffff16565b9750610cb88782613403565b96505050505b80610cc8816154ca565b915050610bc8565b50505b6001600160a01b038516600090815260a36020526040902060010154610d05908490610cff9084613403565b9061340f565b9350509193909250565b6001600160a01b038116600090815260a46020526040812081908190819060609082805b8254811015610f415742838281548110610d4f57610d4f61549e565b9060005260206000209060040201600101541115610eff5781610df1578254610d799082906154e5565b67ffffffffffffffff811115610d9157610d91615019565b604051908082528060200260200182016040528015610ded57816020015b610dda6040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200190600190039081610daf5790505b5093505b828181548110610e0357610e0361549e565b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050848381518110610e5657610e5661549e565b60200260200101819052508180610e6c906154ca565b925050610e9c838281548110610e8457610e8461549e565b60009182526020909120600490910201548790613403565b9550610ef8610ef1848381548110610eb657610eb661549e565b906000526020600020906004020160020154858481548110610eda57610eda61549e565b60009182526020909120600490910201549061341b565b8690613403565b9450610f2f565b610f2c838281548110610f1457610f1461549e565b60009182526020909120600490910201548890613403565b96505b80610f39816154ca565b915050610d33565b5050506001600160a01b038616600090815260a36020526040902060020154945091939590929450565b6001600160a01b038116600090815260a46020526040812054610f949083908390600190613427565b92915050565b606060ab805480602002602001604051908101604052809291908181526020018280548015610fe857602002820191906000526020600020905b815481526020019060010190808311610fd4575b5050505050905090565b565b610ffc61361f565b6001600160a01b0381166110575760405162461bcd60e51b815260206004820152601c60248201527f726577617264436f6e766572746572206973203020616464726573730000000060448201526064015b60405180910390fd5b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b60a2546000906001600160a01b031633146110d65760405162461bcd60e51b815260206004820152600860248201527f216c6f636b5a6170000000000000000000000000000000000000000000000000604482015260640161104e565b6110df82613679565b6001600160a01b038216600090815260a56020526040902080545b80156111c657428261110d6001846154e5565b8154811061111d5761111d61549e565b90600052602060002090600402016001015411156111af5761116c826111446001846154e5565b815481106111545761115461549e565b60009182526020909120600490910201548490613403565b92508180548061117e5761117e6154fc565b60008281526020812060046000199093019283020181815560018101829055600281018290556003015590556111b4565b6111c6565b6111bf6001826154e5565b90506110fa565b5060a25460a0546111e4916001600160a01b0391821691168461377a565b6001600160a01b038316600090815260a360205260409020600481015461120b908461340f565b6004820155805461121c908461340f565b8155609754604080517fa2e6204500000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163a2e620459160048082019260009290919082900301818387803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050505050919050565b33816112ea5760405162461bcd60e51b815260206004820152600f60248201527f616d742063616e6e6f7420626520300000000000000000000000000000000000604482015260640161104e565b6001600160a01b038116600090815260a3602052604081206001810154829190851161132957600181015461131f908661340f565b6001820155611700565b600061134282600101548761340f90919063ffffffff16565b905080826004015410156113985760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206561726e6564000000000000000000000000000000000000604482015260640161104e565b6000600183018190556004830154905b6001600160a01b038716600090815260a5602052604081208054839081106113d2576113d261549e565b906000526020600020906004020160000154905080600014156113f5575061159a565b6001600160a01b038816600090815260a5602052604081208054611424919085908110610c4d57610c4d61549e565b5050915050600061145761144483620186a061340f90919063ffffffff16565b61145188620186a061341b565b90613823565b90508281106114a1575081611487611480620186a0611451611479828761340f565b879061341b565b879061340f565b95508561149c5783611498816154ca565b9450505b6114eb565b6114ab838261340f565b6001600160a01b038b16600090815260a5602052604090208054869081106114d5576114d561549e565b6000918252602082206004909102019190915595505b6114f5858261340f565b945061151261150b620186a0611451848661341b565b8a90613403565b985061153a611533620186a06114516098548d61341b90919063ffffffff16565b8990613403565b975085611549575050506115ac565b846115965760405162461bcd60e51b815260206004820152600860248201527f30206561726e6564000000000000000000000000000000000000000000000000604482015260640161104e565b5050505b806115a4816154ca565b9150506113a8565b80156116f857805b6001600160a01b038816600090815260a56020526040902054811015611685576001600160a01b038816600090815260a5602052604090208054829081106115fe576115fe61549e565b600091825260208083206001600160a01b038c16845260a5909152604090922060049091029091019061163184846154e5565b815481106116415761164161549e565b60009182526020909120825460049092020190815560018083015490820155600280830154908201556003918201549101558061167d816154ca565b9150506115b4565b5060005b818110156116f6576001600160a01b038816600090815260a5602052604090208054806116b8576116b86154fc565b6000828152602081206004600019909301928302018181556001810182905560028101829055600301559055806116ee816154ca565b915050611689565b505b506004830155505b8054611712908490610cff908861340f565b815561172284868585600061382f565b5050505050565b61173161361f565b6001600160a01b0383166117875760405162461bcd60e51b815260206004820152601760248201527f636f6e74726f6c6c657220697320302061646472657373000000000000000000604482015260640161104e565b6001600160a01b0382166117dd5760405162461bcd60e51b815260206004820152601060248201527f6d66642069732030206164647265737300000000000000000000000000000000604482015260640161104e565b609f80546001600160a01b039485166001600160a01b031991821617909155609e80549385169382169390931790925560b18054919093169116179055565b61182461361f565b80518251146118755760405162461bcd60e51b815260206004820152601360248201527f696e76616c6964206c6f636b20706572696f6400000000000000000000000000604482015260640161104e565b61188160aa6000614e38565b61188d60ab6000614e38565b60005b82518110156119195760aa8382815181106118ad576118ad61549e565b60209081029190910181015182546001810184556000938452919092200155815160ab908390839081106118e3576118e361549e565b602090810291909101810151825460018181018555600094855292909320909201919091556119129082615512565b9050611890565b505050565b61192661361f565b610ff2613a6f565b610ff260ac80548060200260200160405190810160405280929190818152602001828054801561198757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611969575b5050505050612352565b600054610100900460ff16158080156119b15750600054600160ff909116105b806119cb5750303b1580156119cb575060005460ff166001145b611a3d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161104e565b6000805460ff191660011790558015611a60576000805461ff0019166101001790555b6001600160a01b038b16611a9c5760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b6001600160a01b038a16611ad85760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b6001600160a01b038916611b145760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b6001600160a01b038816611b505760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b6001600160a01b038716611b8c5760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b85611bbf5760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b84611bf25760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b83611c255760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b81611c585760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161104e565b620186a0831115611cab5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206275726e0000000000000000000000000000000000000000604482015260640161104e565b85851115611cfb5760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964206c6f6f6b6261636b00000000000000000000000000000000604482015260640161104e565b611d03613ac1565b611d0b613b34565b60a080546001600160a01b03808e166001600160a01b0319928316811790935560a280548e831690841617905560b080548d8316908416179055609780548b831690841617905560b58054918c16610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905560ac8054600181019091557f0a0a1bcadd9f6a5539376fa82276e043ae3cb4499daaaf8136572ecb1f9f0d6001805490911682179055600090815260ad60205260409020426002909101556099869055609a859055609b8490556098839055609c8290558015611e31576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611e4661361f565b60b55460ff1615611e995760405162461bcd60e51b815260206004820152600b60248201527f6d696e7465727320736574000000000000000000000000000000000000000000604482015260640161104e565b60005b8151811015611f7d5760006001600160a01b0316828281518110611ec257611ec261549e565b60200260200101516001600160a01b03161415611f215760405162461bcd60e51b815260206004820152601360248201527f6d696e7465722069732030206164647265737300000000000000000000000000604482015260640161104e565b600160b26000848481518110611f3957611f3961549e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611f75816154ca565b915050611e9c565b505060b5805460ff19166001179055565b6001600160a01b038116600090815260ad6020526040812054428111611fb45780611fb6565b425b9392505050565b611fc561361f565b6001600160a01b03811661201b5760405162461bcd60e51b815260206004820152601a60248201527f5f7374616b696e67546f6b656e20697320302061646472657373000000000000604482015260640161104e565b60a1546001600160a01b0316156120745760405162461bcd60e51b815260206004820152600b60248201527f616c726561647920736574000000000000000000000000000000000000000000604482015260640161104e565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260a460209081526040808320805482518185028101850190935280835260609492939192909184015b828210156121285783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815260200190600101906120ce565b505050509050919050565b6119198383836000613ba7565b60a05460a1546000916001600160a01b039182169116141561217857506001600160a01b0316600090815260a3602052604090205490565b506001600160a01b0316600090815260a3602052604090206002015490565b60aa5481106121e85760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420747970650000000000000000000000000000000000000000604482015260640161104e565b33600090815260b46020526040902055565b61220261361f565b610ff260006140b6565b606060aa805480602002602001604051908101604052809291908181526020018280548015610fe85760200282019190600052602060002090815481526020019060010190808311610fd4575050505050905090565b600061226c614108565b60b7546001600160a01b031633146122c65760405162461bcd60e51b815260206004820152600e60248201527f21626f756e74794d616e61676572000000000000000000000000000000000000604482015260640161104e565b60006122d184610d0f565b50505091505080600014156122ea576000915050610f94565b60019150826122f95750610f94565b6001600160a01b038416600090815260a46020526040812054612320918691600190613427565b505092915050565b60ac818154811061233857600080fd5b6000918252602090912001546001600160a01b0316905081565b61235b33613679565b612365338261415b565b609760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123b557600080fd5b505af1158015611722573d6000803e3d6000fd5b6123d161361f565b610ff2614304565b6123e161361f565b6001600160a01b038216600090815260ad60205260409020600201541561244a5760405162461bcd60e51b815260206004820152600d60248201527f6163746976652072657761726400000000000000000000000000000000000000604482015260640161104e565b61247061245f6065546001600160a01b031690565b6001600160a01b038416908361377a565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b6000826124d9576001600160a01b038416600090815260a4602052604090205492505b6124e68483600186613427565b949350505050565b3342821161253e5760405162461bcd60e51b815260206004820152600b60248201527f21756e6c6f636b54696d65000000000000000000000000000000000000000000604482015260640161104e565b60008060008061254e8587614341565b6001600160a01b038916600090815260a560205260409020549397509195509350915081106125805750505050505050565b600061258d826001615512565b90505b6001600160a01b038616600090815260a56020526040902054811015612662576001600160a01b038616600090815260a5602052604090208054829081106125da576125da61549e565b600091825260208083206001600160a01b038a16845260a5909152604090922060049091029091019061260e6001846154e5565b8154811061261e5761261e61549e565b60009182526020909120825460049092020190815560018083015490820155600280830154908201556003918201549101558061265a816154ca565b915050612590565b506001600160a01b038516600090815260a56020526040902080548061268a5761268a6154fc565b600082815260208082206004600019909401938402018281556001810183905560028101839055600301829055919092556001600160a01b038716825260a390526040902080546126e1908590610cff908861340f565b815560048101546126f8908590610cff908861340f565b600482015561270a868686868c61382f565b5050505050505050565b6001600160a01b03811661276a5760405162461bcd60e51b815260206004820152601860248201527f726577617264546f6b656e206973203020616464726573730000000000000000604482015260640161104e565b33600090815260b2602052604090205460ff166127b35760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015260640161104e565b6001600160a01b038116600090815260ad60205260409020600201541561281c5760405162461bcd60e51b815260206004820152600d60248201527f616c726561647920616464656400000000000000000000000000000000000000604482015260640161104e565b60ac8054600181019091557f0a0a1bcadd9f6a5539376fa82276e043ae3cb4499daaaf8136572ecb1f9f0d600180546001600160a01b039092166001600160a01b031990921682179055600090815260ad6020526040902042600282018190559055565b612888614108565b609d546001600160a01b031633146128e25760405162461bcd60e51b815260206004820152600a60248201527f21636f6e76657274657200000000000000000000000000000000000000000000604482015260640161104e565b6128eb81613679565b609e546040516308c51c6560e01b81526001600160a01b03909116906308c51c659061291c9060ac9060040161552a565b600060405180830381600087803b15801561293657600080fd5b505af115801561294a573d6000803e3d6000fd5b505060ac549150600090505b81811015612aa157600060ac82815481106129735761297361549e565b6000918252602090912001546001600160a01b031690506129938161440d565b6001600160a01b03808516600090815260af602090815260408083209385168352929052908120546129ca9064e8d4a51000613823565b90508015612a8c576001600160a01b03808616600090815260af60209081526040808320938616835292815282822082905560ad90522060040154612a0f908261340f565b6001600160a01b03808416600081815260ad6020526040902060040192909255609d54612a3e9291168361377a565b816001600160a01b0316856001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e83604051612a8391815260200190565b60405180910390a35b50508080612a99906154ca565b915050612956565b50609760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612af257600080fd5b505af1158015612b06573d6000803e3d6000fd5b5050506001600160a01b03909216600090815260b6602052604090204290555050565b6099546001600160a01b038216600090815260ad60205260408120600101549091610f949164e8d4a5100091611451919061341b565b33600081815260a460205260408120549091612b7f916001908190613427565b33600081815260b46020526040812054929350612b9e92849291613ba7565b33600081815260b46020908152604091829020548251858152918201527f4c46641520b3fedde433247f82a421df0d7a83ce24df3f229e9df96f386c8b0c910160405180910390a250565b612bf1614108565b33600090815260b2602052604090205460ff16612c3a5760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b604482015260640161104e565b81612c4457505050565b6001600160a01b038316301415612c6b5760a054611919906001600160a01b0316836145a3565b6001600160a01b038316600090815260a3602052604090208054612c8f9084613403565b81558115612d38576004810154612ca69084613403565b60048201556001600160a01b038416600090815260a560205260408120609c54909190612cd4904290613403565b6040805160808101825287815260208082019384526001928201838152609c54606084019081528754808601895560009889529290972092516004909202909201908155925191830191909155516002820155915160039092019190915550612d4d565b6001810154612d479084613403565b60018201555b50505050565b60ac5460609067ffffffffffffffff811115612d7157612d71615019565b604051908082528060200260200182016040528015612db657816020015b6040805180820190915260008082526020820152815260200190600190039081612d8f5790505b50905060005b8151811015612edd5760ac8181548110612dd857612dd861549e565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110612e0857612e0861549e565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050612eab64e8d4a5100061145185858581518110612e4b57612e4b61549e565b60200260200101516000015160a36000896001600160a01b03166001600160a01b0316815260200190815260200160002060030154612ea6888881518110612e9557612e9561549e565b6020026020010151600001516131bb565b61466b565b828281518110612ebd57612ebd61549e565b602090810291909101810151015280612ed5816154ca565b915050612dbc565b50919050565b6001600160a01b038116600090815260a3602090815260408083206001015460a5909252822060609083805b82548110156131145742838281548110612f2b57612f2b61549e565b90600052602060002090600402016001015411156130d25781612fc6578254612f559082906154e5565b67ffffffffffffffff811115612f6d57612f6d615019565b604051908082528060200260200182016040528015612fc257816020015b612faf60405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081612f8b5790505b5093505b6000612ff588858481548110612fde57612fde61549e565b906000526020600020906004020160010154614341565b505091505083828154811061300c5761300c61549e565b9060005260206000209060040201600001548584815181106130305761303061549e565b602002602001015160000181815250508382815481106130525761305261549e565b9060005260206000209060040201600101548584815181106130765761307661549e565b60200260200101516020018181525050808584815181106130995761309961549e565b602090810291909101015160400152826130b2816154ca565b9350506130ca848381548110610f1457610f1461549e565b965050613102565b6130ff8382815481106130e7576130e761549e565b60009182526020909120600490910201548690613403565b94505b8061310c816154ca565b915050612f0f565b5050509193909250565b61312661361f565b609a55565b336000808061313984610b87565b6001600160a01b038716600090815260a56020526040812093965091945092506131639190614e56565b6001600160a01b038416600090815260a3602052604090206004810154600182015482546131969291610cff919061340f565b815560006001820181905560048201556131b3858585858a61382f565b505050505050565b6001600160a01b038116600090815260ad602052604090206003015460a95415613247576001600160a01b038216600090815260ad60205260408120600181015460029091015461321a919061321490610cff87611f8e565b9061341b565b9050611fb661324060a954611451670de0b6b3a76400008561341b90919063ffffffff16565b8390613403565b919050565b61325461361f565b6001600160a01b0381166132d05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161104e565b6132d9816140b6565b50565b6132e461361f565b6001600160a01b03811661333a5760405162461bcd60e51b815260206004820152601360248201527f626f756e74792069732030206164647265737300000000000000000000000000604482015260640161104e565b60b780546001600160a01b039092166001600160a01b031990921682179055600090815260b260205260409020805460ff19166001179055565b60008060008042856020015111156133b8576133b56161a86133af609c5461145161fde8613214428c6020015161340f90919063ffffffff16565b90613403565b92505b84516133cd90620186a090611451908661341b565b91506133eb620186a06114516098548561341b90919063ffffffff16565b85519091506133fa908361340f565b93509193509193565b6000611fb68284615512565b6000611fb682846154e5565b6000611fb6828461556e565b6000613431614108565b61343a85613679565b6001600160a01b038516600090815260a36020526040812060028101546003820154613468918991876146db565b6002830154919450925061347c908461340f565b60028201556003810154613490908361340f565b600382015580546134a1908461340f565b815560a8546134b0908461340f565b60a85560a9546134c0908361340f565b60a955851580156134ea57506001600160a01b038716600090815260b3602052604090205460ff16155b1561351c576001600160a01b038716600090815260b4602052604090205461351790849089906001613ba7565b613615565b84156136155760a154613539906001600160a01b0316888561377a565b609f5460405163075b9bf960e31b81526001600160a01b03898116600483015290911690633adcdfc890602401600060405180830381600087803b15801561358057600080fd5b505af1158015613594573d6000803e3d6000fd5b505050506001600160a01b03878116600081815260a3602090815260408083206002015460a0805460a15484518c8152958601939093529284018590526060840194909452851694169390931415608084015290917fa236f2dcd2b940fd86168787a5f820805cdbd85131f7192d9d9c418556876fca910160405180910390a25b5050949350505050565b6065546001600160a01b03163314610ff25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161104e565b6001600160a01b038116600090815260a3602052604081206003015460ac5490915b81811015612d4d57600060ac82815481106136b8576136b861549e565b60009182526020822001546001600160a01b031691506136d7826131bb565b6001600160a01b038316600090815260ad602052604090206003810182905590915061370283611f8e565b60028201556001600160a01b0387163014613764576137238784888561466b565b6001600160a01b03808916600081815260af602090815260408083209489168084529482528083209590955591815260ae8252838120928152919052208290555b5050508080613772906154ca565b91505061369b565b6040516001600160a01b0383166024820152604481018290526119199084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261491a565b6000611fb6828461558d565b6001600160a01b03851633146138875760405162461bcd60e51b815260206004820152601460248201527f6f6e426568616c664f6620213d2073656e646572000000000000000000000000604482015260640161104e565b61389085613679565b60a0546138a7906001600160a01b0316868661377a565b82156138fd5781156138d05760b15460a0546138d0916001600160a01b0391821691168461377a565b60b0546138fd906001600160a01b03166138ea858561340f565b60a0546001600160a01b0316919061377a565b8015613983576139678560ac80548060200260200160405190810160405280929190818152602001828054801561395d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161393f575b505050505061415b565b6001600160a01b038516600090815260b6602052604090204290555b609760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156139d357600080fd5b505af11580156139e7573d6000803e3d6000fd5b505050506001600160a01b03858116600081815260a360209081526040918290206002015460a0805460a15485518c8152948501939093529383018990526060830188905292851694169390931415608084015290917fa236f2dcd2b940fd86168787a5f820805cdbd85131f7192d9d9c418556876fca910160405180910390a25050505050565b613a776149ff565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16613b2c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161104e565b610ff2614a51565b600054610100900460ff16613b9f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161104e565b610ff2614ac8565b613baf614108565b83613bb957612d4d565b60b7546001600160a01b031615613c905760b760009054906101000a90046001600160a01b03166001600160a01b031663d9cdd5136040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4191906155af565b841015613c905760405162461bcd60e51b815260206004820152601560248201527f6d696e207374616b6520616d74206e6f74206d65740000000000000000000000604482015260640161104e565b60aa548210613ce15760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e64657800000000000000000000000000000000000000604482015260640161104e565b613cea83613679565b6001600160a01b038316600090815260a46020526040902054849015613df8576001600160a01b038416600090815260a4602052604081208054429290613d3357613d3361549e565b90600052602060002090600402016001015411613df8576001600160a01b038416331480613d6b575060a2546001600160a01b031633145b15613df8576001600160a01b038416600090815260b3602052604081205460ff16613dcb576001600160a01b038516600090815260a46020526040812054613db891879160019190613427565b9050613dc48682613403565b9550613df6565b6001600160a01b038516600090815260a46020526040902054613df49086906001908190613427565b505b505b6001600160a01b038416600090815260a3602052604090208054613e1c9087613403565b81556002810154613e2d9087613403565b600282015560a854613e3f9087613403565b60a881905550613e83613e7860ab8681548110613e5e57613e5e61549e565b90600052602060002001548861341b90919063ffffffff16565b600383015490613403565b8160030181905550613ead613ea460ab8681548110613e5e57613e5e61549e565b60a95490613403565b60a981905550613f46856040518060800160405280898152602001613ef860aa8981548110613ede57613ede61549e565b90600052602060002001544261340390919063ffffffff16565b815260200160ab8881548110613f1057613f1061549e565b9060005260206000200154815260200160aa8881548110613f3357613f3361549e565b9060005260206000200154815250614b3c565b60b5546040517fbd6597840000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526101009092049091169063bd65978490602401600060405180830381600087803b158015613fac57600080fd5b505af1158015613fc0573d6000803e3d6000fd5b5050505082613fe15760a154613fe1906001600160a01b0316333085614cc7565b609f5460405163075b9bf960e31b81526001600160a01b03878116600483015290911690633adcdfc890602401600060405180830381600087803b15801561402857600080fd5b505af115801561403c573d6000803e3d6000fd5b505050506001600160a01b03858116600081815260a360209081526040918290206002015460a05460a15484518d81529384019290925285169416939093141590830152907fca8d506eda84f8ed07c2908ae102299d34888ef5e19b97f56e4d6fcd1104c31e9060600160405180910390a2505050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff1615610ff25760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161104e565b614163614108565b609e546040516308c51c6560e01b81526001600160a01b03909116906308c51c65906141939084906004016155c8565b600060405180830381600087803b1580156141ad57600080fd5b505af11580156141c1573d6000803e3d6000fd5b505082519150600090505b81811015612d4d5760008382815181106141e8576141e861549e565b602002602001015190506141fb8161440d565b6001600160a01b03808616600090815260af602090815260408083209385168352929052908120546142329064e8d4a51000613823565b905080156142ef576001600160a01b03808716600090815260af60209081526040808320938616835292815282822082905560ad90522060040154614277908261340f565b6001600160a01b038316600081815260ad60205260409020600401919091556142a190878361377a565b816001600160a01b0316866001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e836040516142e691815260200190565b60405180910390a35b505080806142fc906154ca565b9150506141cc565b61430c614108565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613aa43390565b60008060008060005b6001600160a01b038716600090815260a56020526040902054811015614403576001600160a01b038716600090815260a5602052604090208054879190839081106143975761439761549e565b90600052602060002090600402016001015414156143f1576001600160a01b038716600090815260a56020526040902080546143de919083908110610c4d57610c4d61549e565b9297509550909350909150819050614403565b806143fb816154ca565b91505061434a565b5092959194509250565b6001600160a01b0381166144635760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420546f6b656e00000000000000000000000000000000000000604482015260640161104e565b60a0546001600160a01b038281169116141561447c5750565b6001600160a01b038116600090815260ad602052604090208054806144e35760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420706572696f642066696e6973680000000000000000000000604482015260640161104e565b6144fd609a546099546144f691906154e5565b4290613403565b811015611919576004808301546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925260009161459591906001600160a01b038716906370a0823190602401602060405180830381865afa158015614571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff91906155af565b90508015612d4d57612d4d84825b6001600160a01b038216600090815260ad60205260409020805442106145e3576099546145d9906114518464e8d4a5100061341b565b600182015561463b565b80546000906145f2904261340f565b9050600061461664e8d4a5100061145185600101548561341b90919063ffffffff16565b6099549091506146339061145164e8d4a510006132148886613403565b600184015550505b42600282018190556099546146509190613403565b815560048101546146619083613403565b6004909101555050565b6001600160a01b03808516600081815260af602090815260408083209488168084529482528083205493835260ae8252808320948352939052918220549091906146b690849061340f565b90506146d1613240670de0b6b3a7640000611451878561341b565b9695505050505050565b6001600160a01b038416600090815260a46020526040812080548291901561491057805460009085101561470f5784614712565b81545b905060005b8181101561486157428382815481106147325761473261549e565b9060005260206000209060040201600101541161484f5761475e8382815481106130e7576130e761549e565b945061477f614778848381548110610eb657610eb661549e565b8590613403565b83549094508390614792906001906154e5565b815481106147a2576147a261549e565b90600052602060002090600402018382815481106147c2576147c261549e565b9060005260206000209060040201600082015481600001556001820154816001015560028201548160020155600382015481600301559050508280548061480b5761480b6154fc565b600082815260208120600460001990930192830201818155600181810183905560028201839055600390910191909155915561484890839061340f565b9150614717565b61485a816001615512565b9050614717565b50815461490e576001600160a01b038816600090815260a46020526040812088955087945061488f91614e56565b60b5546040517f257f9abf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301526101009092049091169063257f9abf90602401600060405180830381600087803b1580156148f557600080fd5b505af1158015614909573d6000803e3d6000fd5b505050505b505b5094509492505050565b600061496f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d189092919063ffffffff16565b805190915015611919578080602001905181019061498d9190615609565b6119195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161104e565b60335460ff16610ff25760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161104e565b600054610100900460ff16614abc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161104e565b6033805460ff19169055565b600054610100900460ff16614b335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161104e565b610ff2336140b6565b6001600160a01b038216600090815260a460205260408120805490915b8181108015614b8e57508360200151838281548110614b7a57614b7a61549e565b906000526020600020906004020160010154105b15614ba557614b9e816001615512565b9050614b59565b8254600181810185556000858152602090819020875160049094020192835586015190820155604085015160028201556060850151600390910155815b81811115614c735783614bf66001836154e5565b81548110614c0657614c0661549e565b9060005260206000209060040201848281548110614c2657614c2661549e565b906000526020600020906004020160008201548160000155600182015481600101556002820154816002015560038201548160030155905050600181614c6c91906154e5565b9050614be2565b5083838281548110614c8757614c8761549e565b9060005260206000209060040201600082015181600001556020820151816001015560408201518160020155606082015181600301559050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612d4d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016137bf565b60606124e6848460008585600080866001600160a01b03168587604051614d3f9190615652565b60006040518083038185875af1925050503d8060008114614d7c576040519150601f19603f3d011682016040523d82523d6000602084013e614d81565b606091505b5091509150614d9287838387614d9d565b979650505050505050565b60608315614e09578251614e02576001600160a01b0385163b614e025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161104e565b50816124e6565b6124e68383815115614e1e5781518083602001fd5b8060405162461bcd60e51b815260040161104e919061566e565b50805460008255906000526020600020908101906132d99190614e77565b50805460008255600402906000526020600020908101906132d99190614e90565b5b80821115614e8c5760008155600101614e78565b5090565b5b80821115614e8c57600080825560018201819055600282018190556003820155600401614e91565b6001600160a01b03811681146132d957600080fd5b600060208284031215614ee057600080fd5b8135611fb681614eb9565b600081518084526020808501945080840160005b83811015614f3b578151805188528381015184890152604080820151908901526060908101519088015260809096019590820190600101614eff565b509495945050505050565b85815284602082015283604082015282606082015260a060808201526000614d9260a0830184614eeb565b6020808252825182820181905260009190848201906040850190845b81811015614fa957835183529284019291840191600101614f8d565b50909695505050505050565b600060208284031215614fc757600080fd5b5035919050565b600080600060608486031215614fe357600080fd5b8335614fee81614eb9565b92506020840135614ffe81614eb9565b9150604084013561500e81614eb9565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561505857615058615019565b604052919050565b600067ffffffffffffffff82111561507a5761507a615019565b5060051b60200190565b600082601f83011261509557600080fd5b813560206150aa6150a583615060565b61502f565b82815260059290921b840181019181810190868411156150c957600080fd5b8286015b848110156150e457803583529183019183016150cd565b509695505050505050565b6000806040838503121561510257600080fd5b823567ffffffffffffffff8082111561511a57600080fd5b61512686838701615084565b9350602085013591508082111561513c57600080fd5b5061514985828601615084565b9150509250929050565b6000806000806000806000806000806101408b8d03121561517357600080fd5b8a3561517e81614eb9565b995060208b013561518e81614eb9565b985060408b013561519e81614eb9565b975060608b01356151ae81614eb9565b965060808b01356151be81614eb9565b999c989b50969995989760a0870135975060c08701359660e08101359650610100810135955061012001359350915050565b6000602080838503121561520357600080fd5b823567ffffffffffffffff81111561521a57600080fd5b8301601f8101851361522b57600080fd5b80356152396150a582615060565b81815260059190911b8201830190838101908783111561525857600080fd5b928401925b82841015614d9257833561527081614eb9565b8252928401929084019061525d565b80151581146132d957600080fd5b60006020828403121561529f57600080fd5b8135611fb68161527f565b602081526000611fb66020830184614eeb565b6000806000606084860312156152d257600080fd5b8335925060208401356152e481614eb9565b929592945050506040919091013590565b6000806040838503121561530857600080fd5b823561531381614eb9565b9150602083013561532381614eb9565b809150509250929050565b6000806040838503121561534157600080fd5b823561534c81614eb9565b915060208301356153238161527f565b6000806040838503121561536f57600080fd5b823561537a81614eb9565b946020939093013593505050565b60008060006060848603121561539d57600080fd5b83356153a881614eb9565b925060208401359150604084013561500e8161527f565b600080604083850312156153d257600080fd5b823561537a8161527f565b602080825282518282018190526000919060409081850190868401855b8281101561542857815180516001600160a01b031685528601518685015292840192908501906001016153fa565b5091979650505050505050565b600060608083018684526020868186015260408381870152828751808552608088019150838901945060005b8181101561548e578551805184528581015186850152840151848401529484019491860191600101615461565b50909a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156154de576154de6154b4565b5060010190565b6000828210156154f7576154f76154b4565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115615525576155256154b4565b500190565b6020808252825482820181905260008481528281209092916040850190845b81811015614fa95783546001600160a01b031683526001938401939285019201615549565b6000816000190483118215151615615588576155886154b4565b500290565b6000826155aa57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156155c157600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b81811015614fa95783516001600160a01b0316835292840192918401916001016155e4565b60006020828403121561561b57600080fd5b8151611fb68161527f565b60005b83811015615641578181015183820152602001615629565b83811115612d4d5750506000910152565b60008251615664818460208701615626565b9190910192915050565b602081526000825180602084015261568d816040850160208701615626565b601f01601f1916919091016040019291505056fea26469706673582212203ab2fa986d7f72bb2f155c433a86428c53bb28dd88b9ded9558d31058dd0993a64736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "claimBounty(address,bool)": {
        "details": "Remove expired locks",
        "params": {
          "_user": "address."
        }
      },
      "claimableRewards(address)": {
        "params": {
          "account": "for rewards"
        }
      },
      "earnedBalances(address)": {
        "details": "Earned balances may be withdrawn immediately for a 50% penalty.",
        "returns": {
          "earningsData": "which is an array of all infos",
          "total": "earnings",
          "unlocked": "earnings"
        }
      },
      "getRewardForDuration(address)": {
        "params": {
          "_rewardToken": "for the reward"
        }
      },
      "initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.",
        "params": {
          "_lockDuration": "lock duration",
          "_rdntToken": "RDNT token address.",
          "_rewardsDuration": "set reward stream time.",
          "_rewardsLookback": "reward lookback"
        }
      },
      "lockedBalances(address)": {
        "returns": {
          "lockData": "which is an array of locks",
          "locked": "balance",
          "lockedWithMultiplier": "lockedWithMultiplier",
          "total": "balance of locks",
          "unlockable": "balance"
        }
      },
      "mint(address,uint256,bool)": {
        "details": "Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before vestDuration has passed."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardPerToken(address)": {
        "details": "Reward is distributed only for locks.",
        "params": {
          "_rewardToken": "for reward"
        }
      },
      "setMinters(address[])": {
        "details": "Can be called only once"
      },
      "stake(uint256,address,uint256)": {
        "details": "Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances."
      },
      "withdrawableBalance(address)": {
        "details": "This is earnings, not locks."
      }
    },
    "title": "Multi Fee Distribution Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEFAULT_LOCK_INDEX()": {
        "notice": "Default lock index"
      },
      "addReward(address)": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "burn()": {
        "notice": "Proportion of burn amount"
      },
      "claimBounty(address,bool)": {
        "notice": "Claims bounty."
      },
      "claimableRewards(address)": {
        "notice": "Address and claimable amount of all reward tokens for the given account."
      },
      "daoTreasury()": {
        "notice": "DAO wallet"
      },
      "defaultLockDuration()": {
        "notice": "Duration of lock/earned penalty period, used for earnings"
      },
      "earnedBalances(address)": {
        "notice": "Earnings which is locked yet"
      },
      "exit(bool)": {
        "notice": "Withdraw full unlocked balance and earnings, optionally claim pending rewards."
      },
      "getAllRewards()": {
        "notice": "Claim all pending staking rewards."
      },
      "getReward(address[])": {
        "notice": "Claim all pending staking rewards."
      },
      "getRewardForDuration(address)": {
        "notice": "Reward amount of the duration."
      },
      "incentivesController()": {
        "notice": "Address of CIC contract"
      },
      "individualEarlyExit(bool,uint256)": {
        "notice": "Withdraw individual unlocked balance and earnings, optionally claim pending rewards."
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns reward applicable timestamp."
      },
      "lockInfo(address)": {
        "notice": "Returns all locks of a user."
      },
      "lockedBalances(address)": {
        "notice": "Information on a user's lockings"
      },
      "lockedSupply()": {
        "notice": "Total locked value"
      },
      "lockedSupplyWithMultiplier()": {
        "notice": "Total locked value in multipliers"
      },
      "middleFeeDistribution()": {
        "notice": "Address of Middle Fee Distribution Contract"
      },
      "mint(address,uint256,bool)": {
        "notice": "Add to earnings"
      },
      "minters(address)": {
        "notice": "Addresses approved to call mint"
      },
      "mintersAreSet()": {
        "notice": "Flag to prevent more minter addings"
      },
      "rdntToken()": {
        "notice": "Address of RDNT"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders."
      },
      "relock()": {
        "notice": "Withdraw and restake assets."
      },
      "rewardData(address)": {
        "notice": "Reward data per token"
      },
      "rewardPerToken(address)": {
        "notice": "Reward amount per token"
      },
      "rewardTokens(uint256)": {
        "notice": "Reward tokens being distributed"
      },
      "rewards(address,address)": {
        "notice": "user -> reward token -> amount; used to store reward amount"
      },
      "rewardsDuration()": {
        "notice": "Duration that rewards are streamed over"
      },
      "rewardsLookback()": {
        "notice": "Duration that rewards loop back"
      },
      "setAddresses(address,address,address)": {
        "notice": "Set CIC, MFD and Treasury."
      },
      "setDefaultRelockTypeIndex(uint256)": {
        "notice": "Set default lock type index for user relock."
      },
      "setLPToken(address)": {
        "notice": "Set LP token."
      },
      "setLockTypeInfo(uint256[],uint256[])": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "setMinters(address[])": {
        "notice": "Set minters"
      },
      "setRelock(bool)": {
        "notice": "Set relock status"
      },
      "stake(uint256,address,uint256)": {
        "notice": "Stake tokens to receive rewards."
      },
      "stakingToken()": {
        "notice": "Address of LP token"
      },
      "startfleetTreasury()": {
        "notice": "treasury wallet"
      },
      "totalBalance(address)": {
        "notice": "Total balance of an account, including unlocked, locked and earned tokens."
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "user -> reward token -> rpt; RPT for paid amount"
      },
      "vestDuration()": {
        "notice": "Duration of vesting RDNT"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw tokens from earnings and unlocked."
      },
      "withdrawExpiredLocksFor(address)": {
        "notice": "Withdraw all currently locked tokens where the unlock time has passed."
      },
      "withdrawableBalance(address)": {
        "notice": "Final balance received and penalty balance paid by user upon calling exit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2457,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_priceProvider",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 2469,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "burn",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 2472,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 2475,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardsLookback",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 2482,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "defaultLockDuration",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 2485,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "vestDuration",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 2487,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardConverter",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 2491,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "middleFeeDistribution",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IMiddleFeeDistribution)2146"
      },
      {
        "astId": 2495,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "incentivesController",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IChefIncentivesController)2044"
      },
      {
        "astId": 2500,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rdntToken",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(IMintableToken)2175"
      },
      {
        "astId": 2504,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "stakingToken",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 2506,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockZap",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 2511,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "balances",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_struct(Balances)2415_storage)"
      },
      {
        "astId": 2517,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userLocks",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)2386_storage)dyn_storage)"
      },
      {
        "astId": 2523,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userEarnings",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)2386_storage)dyn_storage)"
      },
      {
        "astId": 2528,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "autocompoundEnabled",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2532,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lastAutocompound",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2535,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockedSupply",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 2538,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockedSupplyWithMultiplier",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 2541,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "170",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2544,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardMultipliers",
        "offset": 0,
        "slot": "171",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2548,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "172",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2554,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewardData",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_address,t_struct(Reward)2404_storage)"
      },
      {
        "astId": 2561,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2568,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "rewards",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2572,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "daoTreasury",
        "offset": 0,
        "slot": "176",
        "type": "t_address"
      },
      {
        "astId": 2575,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "startfleetTreasury",
        "offset": 0,
        "slot": "177",
        "type": "t_address"
      },
      {
        "astId": 2580,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "minters",
        "offset": 0,
        "slot": "178",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2585,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "autoRelockDisabled",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2590,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "defaultLockIndex",
        "offset": 0,
        "slot": "180",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2593,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "mintersAreSet",
        "offset": 0,
        "slot": "181",
        "type": "t_bool"
      },
      {
        "astId": 2596,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userlist",
        "offset": 1,
        "slot": "181",
        "type": "t_contract(ILockerList)2104"
      },
      {
        "astId": 2600,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "182",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2602,
        "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "bountyManager",
        "offset": 0,
        "slot": "183",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockedBalance)2386_storage)dyn_storage": {
        "base": "t_struct(LockedBalance)2386_storage",
        "encoding": "dynamic_array",
        "label": "struct LockedBalance[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChefIncentivesController)2044": {
        "encoding": "inplace",
        "label": "contract IChefIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(ILockerList)2104": {
        "encoding": "inplace",
        "label": "contract ILockerList",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)2146": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)2175": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedBalance)2386_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LockedBalance[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedBalance)2386_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)2415_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)2415_storage"
      },
      "t_mapping(t_address,t_struct(Reward)2404_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)2404_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Balances)2415_storage": {
        "encoding": "inplace",
        "label": "struct Balances",
        "members": [
          {
            "astId": 2406,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2408,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2410,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "locked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2412,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "lockedWithMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2414,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "earned",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockedBalance)2386_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 2379,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2381,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2383,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "multiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2385,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Reward)2404_storage": {
        "encoding": "inplace",
        "label": "struct Reward",
        "members": [
          {
            "astId": 2395,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "periodFinish",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2397,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2399,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2401,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2403,
            "contract": "contracts/radiant/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "balance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}