{
  "address": "0x2f385c79595ab5AFeB7BAEe736F2A1e151F60EAe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Compounded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ineligInRdnt",
          "type": "uint256"
        }
      ],
      "name": "ExpiredLocksRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "IneligibleRewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLP",
          "type": "bool"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockIndex",
          "type": "uint256"
        }
      ],
      "name": "Relocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burn",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AC_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOUNTY_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_LOCK_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUART",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_LOOKBACK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STARFLEET_TREASURY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VEST_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHOLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bounty",
          "type": "address"
        }
      ],
      "name": "addBountyContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autoRelockDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "autocompoundEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autocompoundFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autocompoundThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "bountyForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFeeDistribution.RewardData[]",
          "name": "bounties",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bountyAmt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "issueBaseBounty",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimCompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFeeDistribution.RewardData[]",
          "name": "rewardsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundAcceptableSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "convertPendingRewardsToWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wethOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultLockIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "earnedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            }
          ],
          "internalType": "struct EarnedBalance[]",
          "name": "earningsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockMultipliers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentivesController",
      "outputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimRewards",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "individualEarlyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdntToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userlist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsLookback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAutocompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedWithMultiplier",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct LockedBalance[]",
          "name": "lockData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupplyWithMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mfdHelper",
      "outputs": [
        {
          "internalType": "contract IMFDHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "middleFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPenalty",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersAreSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteSelfCompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rptStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quote",
          "type": "uint256"
        }
      ],
      "name": "selfCompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_middleFeeDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAutocompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bountyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mfdHelper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bountyEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_acEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_autocompoundThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autocompoundFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_compoundAcceptableSlippage",
          "type": "uint256"
        }
      ],
      "name": "setCompoundOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRelockTypeIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "setLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_lockPeriod",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setLockTypeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_minters",
          "type": "address[]"
        }
      ],
      "name": "setMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setRelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userlist",
      "outputs": [
        {
          "internalType": "contract ILockerList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "withdrawExpiredLocksFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ignoreRelock",
          "type": "bool"
        }
      ],
      "name": "withdrawExpiredLocksForWithOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "zapVestingToLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "zapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c21cfd10c8f8e88718e0a9dd915b3df563c4eabeb6be3aba9413c27c0e7b8c7",
  "receipt": {
    "to": null,
    "from": "0xA3De96858FD006fd978eA2D55Efe6b125012f485",
    "contractAddress": "0x2f385c79595ab5AFeB7BAEe736F2A1e151F60EAe",
    "transactionIndex": 1,
    "gasUsed": "5349734",
    "logsBloom": "0x
    "blockHash": "0xa97323c56cf890d8481042779e7b77563bc6915b8f1c9b3fa8911a87ef75e712",
    "transactionHash": "0x3c21cfd10c8f8e88718e0a9dd915b3df563c4eabeb6be3aba9413c27c0e7b8c7",
    "logs": [],
    "blockNumber": 9905428,
    "cumulativeGasUsed": "5349734",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78995fe69be866012cdea8ea4c4842de",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Compounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ineligInRdnt\",\"type\":\"uint256\"}],\"name\":\"ExpiredLocksRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"IneligibleRewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AC_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOUNTY_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_LOCK_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUART\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_LOOKBACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STARFLEET_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VEST_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHOLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"addBountyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoRelockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autocompoundEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompoundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompoundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"bountyForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistribution.RewardData[]\",\"name\":\"bounties\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeDistribution.RewardData[]\",\"name\":\"rewardsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundAcceptableSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"convertPendingRewardsToWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultLockIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct EarnedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimRewards\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"individualEarlyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdntToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userlist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsLookback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAutocompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWithMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupplyWithMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfdHelper\",\"outputs\":[{\"internalType\":\"contract IMFDHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersAreSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteSelfCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rptStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quote\",\"type\":\"uint256\"}],\"name\":\"selfCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_middleFeeDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutocompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mfdHelper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bountyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_autocompoundThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autocompoundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundAcceptableSlippage\",\"type\":\"uint256\"}],\"name\":\"setCompoundOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setDefaultRelockTypeIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lockPeriod\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"setLockTypeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userlist\",\"outputs\":[{\"internalType\":\"contract ILockerList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawExpiredLocksFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ignoreRelock\",\"type\":\"bool\"}],\"name\":\"withdrawExpiredLocksForWithOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"zapVestingToLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"bountyForUser(address)\":{\"details\":\"Reward is in rTokens\"},\"claimBounty(address,bool)\":{\"details\":\"Remove expired locks\",\"params\":{\"_execute\":\"flag for actual claim.\",\"_user\":\"address.\"}},\"claimCompound(address,bool)\":{\"details\":\"Can be auto compound or manual compound\",\"params\":{\"_execute\":\"whether to execute txn, or just quote (expected amount out for bounty executor and slippage)\",\"_user\":\"user address\"}},\"claimableRewards(address)\":{\"params\":{\"account\":\"for rewards\"}},\"convertPendingRewardsToWeth(address)\":{\"params\":{\"_user\":\"address\"}},\"earnedBalances(address)\":{\"details\":\"Earned balances may be withdrawn immediately for a 50% penalty.\",\"returns\":{\"earningsData\":\"which is an array of all infos\",\"total\":\"earnings\",\"unlocked\":\"earnings\"}},\"getRewardForDuration(address)\":{\"params\":{\"_rewardToken\":\"for the reward\"}},\"initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.\",\"params\":{\"_lockDuration\":\"lock duration\",\"_rdntToken\":\"RDNT token address.\",\"_rewardsDuration\":\"set reward stream time.\",\"_rewardsLookback\":\"reward lookback\"}},\"lockedBalances(address)\":{\"returns\":{\"lockData\":\"which is an array of locks\",\"locked\":\"balance\",\"lockedWithMultiplier\":\"lockedWithMultiplier\",\"total\":\"balance of locks\",\"unlockable\":\"balance\"}},\"mint(address,uint256,bool)\":{\"details\":\"Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before VEST_DURATION has passed.\"},\"quoteSelfCompound()\":{\"details\":\"has own funcs because claimBounty above doesnt handle slippage\"},\"rewardPerToken(address)\":{\"details\":\"Reward is distributed only for locks.\",\"params\":{\"_rewardToken\":\"for reward\"}},\"selfCompound(uint256)\":{\"details\":\"has own funcs because claimBounty above doesnt handle slippage\",\"params\":{\"_quote\":\"expected amount WETH out, quoted before this txn\"}},\"setAutocompound(bool)\":{\"params\":{\"_status\":\"AC on?\"}},\"setMinters(address[])\":{\"details\":\"Can be called only once\"},\"stake(uint256,address,uint256)\":{\"details\":\"Locked tokens cannot be withdrawn for DEFAULT_LOCK_DURATION and are eligible to receive rewards.\"},\"withdraw(uint256)\":{\"details\":\"First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances.\"},\"withdrawableBalance(address)\":{\"details\":\"This is earnings, not locks.\"}},\"title\":\"MFD Plus Bounty and Compund\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BURN()\":{\"notice\":\"Proportion of burn amount\"},\"DEFAULT_LOCK_DURATION()\":{\"notice\":\"Duration of lock/earned penalty period, used for earnings\"},\"DEFAULT_LOCK_INDEX()\":{\"notice\":\"Default lock index\"},\"REWARDS_DURATION()\":{\"notice\":\"Duration that rewards are streamed over\"},\"REWARDS_LOOKBACK()\":{\"notice\":\"Duration that rewards loop back\"},\"STARFLEET_TREASURY()\":{\"notice\":\"treasury wallet\"},\"VEST_DURATION()\":{\"notice\":\"Duration of vesting RDNT\"},\"addReward(address)\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"bountyForUser(address)\":{\"notice\":\"Bounty amount of user per each reward token\"},\"claimBounty(address,bool)\":{\"notice\":\"Claims bounty.\"},\"claimCompound(address,bool)\":{\"notice\":\"Compound user's rewards\"},\"claimableRewards(address)\":{\"notice\":\"Address and claimable amount of all reward tokens for the given account.\"},\"convertPendingRewardsToWeth(address)\":{\"notice\":\"shortcut for above, using users claimable rewards\"},\"daoTreasury()\":{\"notice\":\"DAO wallet\"},\"earnedBalances(address)\":{\"notice\":\"Earnings which is locked yet\"},\"exit(bool)\":{\"notice\":\"Withdraw full unlocked balance and earnings, optionally claim pending rewards.\"},\"getAllRewards()\":{\"notice\":\"Claim all pending staking rewards.\"},\"getReward(address[])\":{\"notice\":\"Claim all pending staking rewards.\"},\"getRewardForDuration(address)\":{\"notice\":\"Reward amount of the duration.\"},\"incentivesController()\":{\"notice\":\"Address of CIC contract\"},\"individualEarlyExit(bool,uint256)\":{\"notice\":\"Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns reward applicable timestamp.\"},\"lockInfo(address)\":{\"notice\":\"Returns all locks of a user.\"},\"lockedBalances(address)\":{\"notice\":\"Information on a user's lockings\"},\"lockedSupply()\":{\"notice\":\"Total locked value\"},\"lockedSupplyWithMultiplier()\":{\"notice\":\"Total locked value in multipliers\"},\"middleFeeDistribution()\":{\"notice\":\"Address of Middle Fee Distribution Contract\"},\"mint(address,uint256,bool)\":{\"notice\":\"Add to earnings\"},\"minters(address)\":{\"notice\":\"Addresses approved to call mint\"},\"mintersAreSet()\":{\"notice\":\"Flag to prevent more minter addings\"},\"quoteSelfCompound()\":{\"notice\":\"Return expected amout our for a user to compound themself\"},\"rdntToken()\":{\"notice\":\"Address of RDNT\"},\"relock()\":{\"notice\":\"Withdraw and restake assets.\"},\"rewardData(address)\":{\"notice\":\"Reward data per token\"},\"rewardPerToken(address)\":{\"notice\":\"Reward amount per token\"},\"rewardTokens(uint256)\":{\"notice\":\"Reward tokens being distributed\"},\"rewards(address,address)\":{\"notice\":\"user -> reward token -> amount; used to store reward amount\"},\"selfCompound(uint256)\":{\"notice\":\"Compound msg.sender\"},\"setAddresses(address,address,address)\":{\"notice\":\"Set CIC, MFD and Treasury.\"},\"setAutocompound(bool)\":{\"notice\":\"set autocompound status for msg.sender\"},\"setDefaultRelockTypeIndex(uint256)\":{\"notice\":\"Set default lock type index for user relock.\"},\"setLPToken(address)\":{\"notice\":\"Set LP token.\"},\"setLockTypeInfo(uint256[],uint256[])\":{\"notice\":\"Add a new reward token to be distributed to stakers.\"},\"setMinters(address[])\":{\"notice\":\"Set minters\"},\"setRelock(bool)\":{\"notice\":\"Set relock status\"},\"stake(uint256,address,uint256)\":{\"notice\":\"Stake tokens to receive rewards.\"},\"stakingToken()\":{\"notice\":\"Address of LP token\"},\"totalBalance(address)\":{\"notice\":\"Total balance of an account, including unlocked, locked and earned tokens.\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"user -> reward token -> rpt; RPT for paid amount\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw tokens from earnings and unlocked.\"},\"withdrawExpiredLocksFor(address)\":{\"notice\":\"Withdraw all currently locked tokens where the unlock time has passed.\"},\"withdrawableBalance(address)\":{\"notice\":\"Final balance received and penalty balance paid by user upon calling exit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/MFDPlus.sol\":\"MFDPlus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0x4e990f6c2c10cda8ab25f171af1776b3bc871c2802607913893468742d29e51e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf94bd623f906d98f6eadd8e1f33a9be4a8172fdcc12d4870dc70924ca6aa66fb\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x1df359538876049d223fdcb393d0adda56f81763b9ac627e69aca4577a6c1baf\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {SafeMath} from './SafeMath.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8f31744049faa066958fef35100edab99dc064330530b1f71c2dba2ee8abb557\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x4679f49c198f8ee52a6b2107ccd543c89eaf718c4c9db6ac7aa01b4c2c832a8b\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x0b16a215990b3611c5c352eb914d8320a26f7149d8dcc007b97b40bd4e403565\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xa5f6f100094fd6a02b3f012d94b8bd2cdabb8a5d3d77ba052c4ef965d57684b2\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    \\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n   \\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    \\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdaf9847b1b084c0bfc20081e03cc924cc35ca524067067572c475227a6667297\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x682963fa630d6afc8e1fcc5b3ee6b49ec1216f30ac698bca43747bd6e8a19fd6\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x5cf082133e64f5f90f446c011681ea7ab719e2992c7247074b943771c176494a\",\"license\":\"MIT\"},\"contracts/interfaces/IBounty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IBounty {\\n    function quote(address _param) external returns (uint256 bounty);\\n    function claim(address _param) external returns(uint256 bounty);\\n    function minDLPBalance() external view returns (uint256 minDLPBalance);\\n    function onRelockUpdate(address _user, bool oldStatus, bool newStatus) external;\\n}\",\"keccak256\":\"0x0a9a6040bb06c8a2eb44c46161319bbaf9dd7e4d93892fa8c1c69c394f6ff871\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.7.6;\\n\\nimport './AggregatorInterface.sol';\\nimport './AggregatorV3Interface.sol';\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x0c3f73420cf8c3a80f3a9a3380c3fb54f7279e697c641382614971c2238edc26\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   **/\\n  function handleActionBefore(\\n    address user\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param user The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleActionAfter(\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Called by the locking contracts after locking or unlocking happens\\n   * @param user The address of the user\\n   **/\\n  function beforeLockUpdate(address user) external;\\n\\n  /**\\n    * @notice Hook for lock update.\\n    * @dev Called by the locking contracts after locking or unlocking happens\\n    */\\n  function afterLockUpdate(address _user) external;\\n\\n  function addPool(address _token, uint256 _allocPoint) external;\\n\\n  function claim(address _user, address[] calldata _tokens) external;\\n\\n  function setClaimReceiver(address _user, address _receiver) external;\\n  function getRegisteredTokens () external view returns (address[] memory);\\n  function disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n  function bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n  function allPendingRewards(address _user) external view returns (uint256 pending);\\n  function claimAll(address _user) external;\\n\\n  function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool useBountyReserve);\\n}\\n\",\"keccak256\":\"0x9c1b78487694af724a72b47d4910833a406533169c23412b819830de0876ce91\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n    function addReward(address rewardsToken) external;\\n    function lockedBalances(address user) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\",\"keccak256\":\"0x34593f732405652613fca6e84a22485acd7851b2a5dcb045773abcb6c512bc24\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositWithAutoDLP(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7394d2e721bb4b2e25c3bf1fddce39667911de9d9db87176548a99c4aeced76b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n\\n  function getLiquidationFeeTo() external view returns (address);\\n\\n  function setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x106ef9420d874acfc948c140b0b4ffff258a8fa664febf805c686fdbff278f62\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n    function zap(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, uint256 _lockTypeIndex) external returns (uint256 liquidity);\\n    function zapOnBehalf(bool _borrow, uint256 _wethAmt, uint256 _rdntAmt, address _onBehalf) external returns (uint256 liquidity);\\n\\n}\\n\",\"keccak256\":\"0x32a8e56ae3d9f17bb8e1d08c87067d55be089dbf4f52e05bd3520abf5c7d5b4e\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockerList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface ILockerList {\\n    function lockersCount() external view returns (uint256);\\n    function getUsers(uint256 page, uint256 limit) external view returns (address[] memory);\\n    function addToList(address user) external;\\n    function removeFromList(address user) external;\\n}\\n\",\"keccak256\":\"0x0bea2ec011dbd35710206b9d362607e2c005c30962a63360cc65a28cb23f82e1\",\"license\":\"MIT\"},\"contracts/interfaces/IMFDHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IFeeDistribution.sol\\\";\\ninterface IMFDHelper {\\n\\n    function getUnderlying(address token) external view returns (address underlying);\\n    function getLendingPool() external view returns (address);\\n    function getRewardToBaseRoute(address token) external view returns (address[] memory);\\n    function getRouteToRdnt() external view returns (address[] memory routeToRdnt);\\n    function quoteSelfCompound() external view returns (uint256 tokensOut); \\n\\n    function getIneligibleRewards(\\n        IFeeDistribution.RewardData[] memory pendingRewards,\\n        LockedBalance[] memory locks,\\n        uint256 lastClaimTime\\n    )\\n    external\\n    view\\n    returns (IFeeDistribution.RewardData[] memory bounties);\\n\\n\\n}\",\"keccak256\":\"0xff99cdf886c4a6f76ea8b51e54a34fcf6399c7f92a11db3d3575404507d9cd11\",\"license\":\"MIT\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n    function forwardReward(address[] memory _rewardTokens) external;\\n    function getMFDstatsAddress () external view returns (address);\\n    function lpLockingRewardRatio () external view returns (uint256);\\n    function getRdntTokenAddress () external view returns (address);\\n    function getLPFeeDistributionAddress () external view returns (address);\\n    function getMultiFeeDistributionAddress () external view returns (address);\\n    function operationExpenseRatio () external view returns (uint256);\\n    function operationExpenses () external view returns (address);\\n    function isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7cd6c42e2cca557d1f47ec97384758c3a751bc48c660938c0f4e2792d4a834e\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n    function mint(address _receiver, uint256 _amount) external returns (bool);\\n    function burn(uint256 _amount) external returns (bool);\\n    function setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x60e22d1995733ed58d9464a7e65c309739dda09b97303477f736b070b9718501\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n    function exit(bool claimRewards) external;\\n    function stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n    function lockInfo(address user) external view returns (LockedBalance[] memory);\\n    function defaultLockIndex(address _user) external view returns (uint256);\\n    function autoRelockDisabled(address user) external view returns (bool);\\n    function totalBalance(address user) external view returns (uint256);\\n    function zapVestingToLp (address _address) external returns (uint256);\\n    function withdrawExpiredLocksFor(address _address) external returns (uint256);\\n    function claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n    function setDefaultRelockTypeIndex(uint256 _index) external;\\n    function daoTreasury() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n    function getLastClaimTime(address _user) external returns (uint256);\\n    function claimFromConverter(address) external;\\n    function bountyForUser(address _user) external view returns (IFeeDistribution.RewardData[] memory bounties);\\n    function claimBounty(address _user, bool _execute) external returns (uint256 bountyAmt, bool issueBaseBounty);\\n    function claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n    function setAutocompound(bool _newVal) external;\\n    function getAutocompoundEnabled(address _user) external view returns(bool);\\n}\",\"keccak256\":\"0x7c16c4e91f717ca13a58bde2ff298128b315d6eaa60571b87926c78b328861b0\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IPriceProvider {\\n    function getTokenPrice() external view returns (uint256);\\n    function getTokenPriceUsd() external view returns (uint256);\\n    function getLpTokenPrice() external view returns (uint256);\\n    function getLpTokenPriceUsd() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function update() external;\\n    function baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\",\"keccak256\":\"0xc6769af9019da36c386c44cf3fd9f07841f1e953debf843356415d825258033a\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 multiplier;\\n    uint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 penalty;\\n}\",\"keccak256\":\"0x6511a1c116bd568dba24edd6d70b0a927bb249e499cbf29305803ed27e78055a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x4542e2cf81b3cbcda615ef4960a53dc09094e975649b40bc70274f6592975648\",\"license\":\"agpl-3.0\"},\"contracts/staking/MFDPlus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../staking/MultiFeeDistribution.sol\\\";\\nimport \\\"../uniswap/periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/IFeeDistribution.sol\\\";\\nimport \\\"../interfaces/ILockZap.sol\\\";\\nimport \\\"../interfaces/IMFDHelper.sol\\\";\\n\\n/// @title MFD Plus Bounty and Compund\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract MFDPlus is MultiFeeDistribution {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IMintableToken;\\n\\n\\t// Option flags\\n\\tbool public BOUNTY_ENABLED;\\n\\tbool public AC_ENABLED;\\n\\n\\t// note: relock disabled is default, autocompound default false\\n\\tmapping(address => bool) public autocompoundEnabled;\\n\\tmapping(address => uint256) public lastAutocompound;\\n\\n\\t// Compound params\\n\\tuint256 public autocompoundThreshold;\\n\\tuint256 public autocompoundFee;\\n\\tuint256 public compoundAcceptableSlippage;\\n\\n\\t// Contract Addresses\\n\\taddress public bountyManager;\\n\\taddress public baseToken; // weth\\n\\tIMFDHelper public mfdHelper;\\n\\taddress public uniRouter;\\n\\n\\tevent Compounded(address indexed _user, uint256 _amount);\\n\\tevent ExpiredLocksRemoved(address indexed _user, uint256 unlockable, uint256 ineligInRdnt);\\n\\n\\t/************************ Setters ************************/\\n\\n\\tfunction setCompoundOptions(\\n\\t\\taddress _baseToken,\\n\\t\\taddress _uniRouter,\\n\\t\\taddress _bountyManager,\\n\\t\\taddress _mfdHelper,\\n\\t\\tbool _bountyEnabled,\\n\\t\\tbool _acEnabled,\\n\\t\\tuint256 _autocompoundThreshold,\\n\\t\\tuint256 _autocompoundFee,\\n\\t\\tuint256 _compoundAcceptableSlippage\\n\\t) public onlyOwner {\\n\\t\\t// require(_uniRouter != address(0));\\n\\t\\t// require(_baseToken != address(0));\\n\\t\\t// require(_bountyManager != address(0));\\n\\t\\t// require(_mfdHelper != address(0));\\n\\t\\t// require(_autocompoundThreshold != uint256(0));\\n\\t\\t// require(_autocompoundFee != uint256(0));\\n\\t\\t// require(_compoundAcceptableSlippage != uint256(0));\\n\\n\\t\\tuniRouter = _uniRouter;\\n\\t\\tbaseToken = _baseToken;\\n\\t\\tbountyManager = _bountyManager;\\n\\t\\tmfdHelper = IMFDHelper(_mfdHelper);\\n\\t\\tautocompoundThreshold = _autocompoundThreshold; //RDNT\\n\\t\\tautocompoundFee = _autocompoundFee; //%\\n\\t\\tcompoundAcceptableSlippage = _compoundAcceptableSlippage;\\n\\t\\tBOUNTY_ENABLED = _bountyEnabled;\\n\\t\\tAC_ENABLED = _acEnabled;\\n\\t}\\n\\n\\t// function setAutoCompoundAndBountiesEnabled(bool _AC_ENABLED, bool _BOUNTY_ENABLED) public onlyOwner {\\n\\t// \\tAC_ENABLED = _AC_ENABLED;\\n\\t// \\tBOUNTY_ENABLED = _BOUNTY_ENABLED;\\n\\t// }\\n\\n\\t/**\\n\\t * @notice set autocompound status for msg.sender\\n\\t * @param _status AC on?\\n\\t */\\n\\tfunction setAutocompound(bool _status) external {\\n\\t\\tautocompoundEnabled[msg.sender] = _status;\\n\\t}\\n\\n\\t/************************ Execution ************************/\\n\\n\\t/**\\n\\t * @notice Claims bounty.\\n\\t * @dev Remove expired locks\\n\\t * @param _user address.\\n\\t * @param _execute flag for actual claim.\\n\\t */\\n\\tfunction claimBounty(address _user, bool _execute) public returns (uint256 bountyAmt, bool issueBaseBounty) {\\n\\t\\trequire(BOUNTY_ENABLED);\\n\\t\\trequire(msg.sender == address(bountyManager));\\n\\n\\t\\tif (_execute) {\\n\\t\\t\\t_updateReward(_user);\\n\\t\\t}\\n\\n\\t\\t(, uint256 unlockable, , , ) = lockedBalances(_user);\\n\\t\\tif (unlockable == 0) {\\n\\t\\t\\treturn (0, false);\\n\\t\\t}\\n\\n\\t\\t// If Relock is true, then issue base bounty\\n\\t\\tif (!autoRelockDisabled[_user]) {\\n\\t\\t\\tissueBaseBounty = true;\\n\\t\\t}\\n\\n\\t\\tif (!_execute) {\\n\\t\\t\\t// If relock is false, then calc bounty\\n\\t\\t\\tif (autoRelockDisabled[_user]) {\\n\\t\\t\\t\\tbountyAmt = _wethToRdnt(\\n\\t\\t\\t\\t\\t_convertPendingRewardsToWeth(_user, bountyForUser(_user), _execute, true),\\n\\t\\t\\t\\t\\tfalse\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\t// If relock is true, just issue base bounty\\n\\t\\t\\treturn (bountyAmt, issueBaseBounty);\\n\\t\\t} else {\\n\\t\\t\\t// If not relock, then remove ineleig plat rev\\n\\t\\t\\tif (autoRelockDisabled[_user]) {\\n\\t\\t\\t\\tbountyAmt = _removeIneligiblePlatRev(_user);\\n\\t\\t\\t}\\n\\t\\t\\t// Withdraw the user's expried locks\\n\\t\\t\\t_withdrawExpiredLocksFor(_user, false, true, userLocks[_user].length);\\n\\t\\t\\temit ExpiredLocksRemoved(_user, unlockable, bountyAmt);\\n\\t\\t\\trdntToken.safeApprove(address(bountyManager), bountyAmt);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove inelgible Platform Revenue.\\n\\t * @param _user address.\\n\\t */\\n\\tfunction _removeIneligiblePlatRev(address _user) internal returns (uint256 ineligRemovedInRdnt) {\\n\\t\\trequire(BOUNTY_ENABLED);\\n\\n\\t\\tIFeeDistribution.RewardData[] memory bounties = bountyForUser(_user);\\n\\t\\tIFeeDistribution.RewardData[] memory penalties = new IFeeDistribution.RewardData[](bounties.length);\\n\\n\\t\\tfor (uint256 i; i < bounties.length; i++) {\\n\\t\\t\\taddress token = bounties[i].token;\\n\\t\\t\\tuint256 penalty = bounties[i].amount;\\n\\t\\t\\tuint256 reward = rewards[_user][token].div(1e12);\\n\\n\\t\\t\\t// Avoid cases if reward not enough\\n\\t\\t\\tif (reward > penalty) {\\n\\t\\t\\t\\treward = reward.sub(penalty);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpenalty = reward;\\n\\t\\t\\t\\treward = 0;\\n\\t\\t\\t}\\n\\t\\t\\trewards[_user][token] = reward.mul(1e12);\\n\\n\\t\\t\\tpenalties[i].token = token;\\n\\t\\t\\tpenalties[i].amount = penalty;\\n\\n\\t\\t\\temit IneligibleRewardRemoved(_user, token, penalty);\\n\\t\\t}\\n\\n\\t\\tineligRemovedInRdnt = _wethToRdnt(_convertPendingRewardsToWeth(_user, penalties, true, false), true);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Bounty amount of user per each reward token\\n\\t * @dev Reward is in rTokens\\n\\t */\\n\\tfunction bountyForUser(address _user) public view returns (IFeeDistribution.RewardData[] memory bounties) {\\n\\t\\tIFeeDistribution.RewardData[] memory pending = claimableRewards(_user);\\n\\t\\tLockedBalance[] memory locks = userLocks[_user];\\n\\t\\tbounties = mfdHelper.getIneligibleRewards(pending, locks, lastClaimTime[_user]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Compound user's rewards\\n\\t * @dev Can be auto compound or manual compound\\n\\t * @param _user user address\\n\\t * @param _execute whether to execute txn, or just quote (expected amount out for bounty executor and slippage)\\n\\t */\\n\\tfunction claimCompound(address _user, bool _execute) public returns (uint256 tokensOut) {\\n\\t\\tbool isAutoCompound = _user != msg.sender;\\n\\n\\t\\tif (isAutoCompound && !autocompoundEnabled[_user]) {\\n\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\trevert();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (_execute) {\\n\\t\\t\\t_updateReward(_user);\\n\\t\\t}\\n\\n\\t\\tuint256 pendingInRdnt = _wethToRdnt(\\n\\t\\t\\t_convertPendingRewardsToWeth(_user, claimableRewards(_user), false, true),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\n\\t\\t// user is not eligible for AC: too low pending or too soon since last execute\\n\\t\\tif (\\n\\t\\t\\tisAutoCompound &&\\n\\t\\t\\t(pendingInRdnt < autocompoundThreshold || block.timestamp.sub(lastAutocompound[_user]) < 1 days)\\n\\t\\t) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t(uint256 wethZapped, uint256 feeInWeth) = _compoundUser(_user, isAutoCompound, _execute);\\n\\n\\t\\tif (isAutoCompound) {\\n\\t\\t\\ttokensOut = _wethToRdnt(feeInWeth, _execute);\\n\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\trdntToken.safeApprove(address(bountyManager), tokensOut);\\n\\t\\t\\t\\tlastAutocompound[_user] = block.timestamp;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ttokensOut = wethZapped;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return expected amout our for a user to compound themself\\n\\t * @dev has own funcs because claimBounty above doesnt handle slippage\\n\\t */\\n\\tfunction quoteSelfCompound() external view returns (uint256 tokensOut) {\\n\\t\\ttokensOut = IMFDHelper(mfdHelper).quoteSelfCompound();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Compound msg.sender\\n\\t * @dev has own funcs because claimBounty above doesnt handle slippage\\n\\t * @param _quote expected amount WETH out, quoted before this txn\\n\\t */\\n\\tfunction selfCompound(uint256 _quote) external returns (uint256 tokensOut) {\\n\\t\\trequire(_quote != 0);\\n\\t\\ttokensOut = claimCompound(msg.sender, true);\\n\\t\\tuint256 minAmountOut = _quote.sub(_quote.mul(compoundAcceptableSlippage).div(100));\\n\\t\\trequire(tokensOut >= minAmountOut);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Compound: zap user pending rewards into locked LP\\n\\t * @dev has own funcs because claimBounty above doesnt handle slippage\\n\\t * @param _user address\\n\\t * @param _takeFee whether to remove % fee from converted WETH to pay Bounty hunter\\n\\t * @param _execute execute txn or just quote\\n\\t */\\n\\tfunction _compoundUser(\\n\\t\\taddress _user,\\n\\t\\tbool _takeFee,\\n\\t\\tbool _execute\\n\\t) internal returns (uint256 wethZapped, uint256 feeInWeth) {\\n\\t\\twethZapped = _convertPendingRewardsToWeth(_user, claimableRewards(_user), _execute, true);\\n\\n\\t\\tif (_takeFee) {\\n\\t\\t\\tfeeInWeth = wethZapped.mul(autocompoundFee).div(100);\\n\\t\\t\\twethZapped = wethZapped.sub(feeInWeth);\\n\\t\\t}\\n\\n\\t\\tif (_execute) {\\n\\t\\t\\tIERC20(baseToken).safeApprove(lockZap, wethZapped);\\n\\t\\t\\tILockZap(lockZap).zapOnBehalf(false, wethZapped, 0, _user);\\n\\t\\t\\tlastClaimTime[_user] = block.timestamp;\\n\\n\\t\\t\\temit Compounded(_user, wethZapped);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Bounty amount of user per each reward token\\n\\t * @dev returns total WETH amount from swapping all token balances in _pending array\\n\\t * @param _user address\\n\\t * @param _pending array of {rToken, amount}. could be their pending, or an array of penalties already\\n\\t * removed from their pending\\n\\t * @param _execute execute txn or just quote\\n\\t * @param _decrementUserBalance for each rToken amount in _pending, remove from their pending balance\\n\\t */\\n\\tfunction _convertPendingRewardsToWeth(\\n\\t\\taddress _user,\\n\\t\\tIFeeDistribution.RewardData[] memory _pending,\\n\\t\\tbool _execute,\\n\\t\\tbool _decrementUserBalance\\n\\t) internal returns (uint256 wethOut) {\\n\\t\\tfor (uint256 i = 0; i < _pending.length; i++) {\\n\\t\\t\\taddress token = _pending[i].token;\\n\\t\\t\\tuint256 removedAmount = _pending[i].amount;\\n\\t\\t\\tif (removedAmount == 0 || IERC20(token).balanceOf(address(this)) == 0) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\taddress underlying = mfdHelper.getUnderlying(token);\\n\\n\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\tuint256 pendingReward = rewards[_user][token].div(1e12);\\n\\n\\t\\t\\t\\tif (_decrementUserBalance) {\\n\\t\\t\\t\\t\\trequire(pendingReward >= removedAmount);\\n\\t\\t\\t\\t\\trewards[_user][token] = rewards[_user][token].sub(removedAmount.mul(1e12));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(removedAmount);\\n\\t\\t\\t\\temit RewardPaid(_user, token, removedAmount);\\n\\n\\t\\t\\t\\tILendingPool lendingPool = ILendingPool(mfdHelper.getLendingPool());\\n\\t\\t\\t\\tremovedAmount = lendingPool.withdraw(underlying, removedAmount, address(this));\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (underlying == baseToken) {\\n\\t\\t\\t\\twethOut = wethOut.add(removedAmount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\t\\tIERC20(underlying).safeApprove(uniRouter, removedAmount);\\n\\t\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router02(uniRouter).swapExactTokensForTokens(\\n\\t\\t\\t\\t\\t\\tremovedAmount,\\n\\t\\t\\t\\t\\t\\t0, // slippage handled after this function\\n\\t\\t\\t\\t\\t\\tmfdHelper.getRewardToBaseRoute(underlying),\\n\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\tblock.timestamp + 10\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\twethOut = wethOut.add(amounts[amounts.length - 1]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router02(uniRouter).getAmountsOut(\\n\\t\\t\\t\\t\\t\\tremovedAmount, //amt in\\n\\t\\t\\t\\t\\t\\tmfdHelper.getRewardToBaseRoute(underlying) //path\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\twethOut = wethOut.add(amounts[amounts.length - 1]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice shortcut for above, using users claimable rewards\\n\\t * @param _user address\\n\\t */\\n\\tfunction convertPendingRewardsToWeth(address _user) public returns (uint256 wethOut) {\\n\\t\\treturn _convertPendingRewardsToWeth(_user, claimableRewards(_user), false, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice given WETH, return RDNT\\n\\t * @param _wethIn WETH in\\n\\t * @param _execute whether to execute swap, or return expected amt out\\n\\t */\\n\\tfunction _wethToRdnt(uint256 _wethIn, bool _execute) internal returns (uint256 rdntOut) {\\n\\t\\tif (_wethIn != 0) {\\n\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\tIERC20(baseToken).safeApprove(uniRouter, _wethIn);\\n\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router02(uniRouter).swapExactTokensForTokens(\\n\\t\\t\\t\\t\\t_wethIn,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\tmfdHelper.getRouteToRdnt(),\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tblock.timestamp + 600\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\trdntOut = amounts[amounts.length - 1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router02(uniRouter).getAmountsOut(\\n\\t\\t\\t\\t\\t_wethIn, //amt in\\n\\t\\t\\t\\t\\tmfdHelper.getRouteToRdnt()\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\trdntOut = amounts[amounts.length - 1];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x60b9639334adde94e7dc81fce4b6c32d971808d6a09381bc62d5eb68dc2037d4\",\"license\":\"MIT\"},\"contracts/staking/MultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IBounty.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../interfaces/IMintableToken.sol\\\";\\nimport \\\"../interfaces/ILockerList.sol\\\";\\nimport \\\"../interfaces/LockedBalance.sol\\\";\\nimport \\\"../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/SafeMath.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\n\\n/// @title Multi Fee Distribution Contract\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract MultiFeeDistribution is IMultiFeeDistribution, Initializable, OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IMintableToken;\\n\\n\\tstruct Reward {\\n\\t\\tuint256 periodFinish;\\n\\t\\tuint256 rewardPerSecond;\\n\\t\\tuint256 lastUpdateTime;\\n\\t\\tuint256 rewardPerTokenStored;\\n\\t\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t\\t// for the stakingToken this value is unused and will always be 0\\n\\t\\tuint256 balance;\\n\\t}\\n\\n\\tstruct Balances {\\n\\t\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\t\\tuint256 unlocked; // RDNT token\\n\\t\\tuint256 locked; // LP token or RDNT token\\n\\t\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\t\\tuint256 earned; // RDNT token\\n\\t}\\n\\n\\taddress private _priceProvider;\\n\\n\\t/********************** Constants ***********************/\\n\\n\\tuint256 public constant QUART = 25000; //  25%\\n\\tuint256 public constant HALF = 65000; //  65%\\n\\tuint256 public constant WHOLE = 100000; // 100%\\n\\n\\t/// @notice Proportion of burn amount\\n\\tuint256 public BURN;\\n\\n\\t/// @notice Duration that rewards are streamed over\\n\\tuint256 public REWARDS_DURATION;\\n\\n\\t/// @notice Duration that rewards loop back\\n\\tuint256 public REWARDS_LOOKBACK;\\n\\n\\t/// @notice Multiplier for earnings, fixed to 1\\n\\t// uint256 public constant DEFAULT_MUTLIPLIER = 1;\\n\\n\\t/// @notice Default lock index\\n\\tuint256 public constant DEFAULT_LOCK_INDEX = 1;\\n\\n\\t/// @notice Duration of lock/earned penalty period, used for earnings\\n\\tuint256 public DEFAULT_LOCK_DURATION;\\n\\n\\t/// @notice Duration of vesting RDNT\\n\\tuint256 public VEST_DURATION;\\n\\n\\t/********************** Contract Addresses ***********************/\\n\\n\\t/// @notice Address of Middle Fee Distribution Contract\\n\\tIMiddleFeeDistribution public middleFeeDistribution;\\n\\n\\t/// @notice Address of CIC contract\\n\\tIChefIncentivesController public incentivesController;\\n\\n\\t/// @notice Address of RDNT\\n\\tIMintableToken public rdntToken;\\n\\n\\t/// @notice Address of LP token\\n\\taddress public override stakingToken;\\n\\n\\t// Address of Lock Zapper\\n\\taddress internal lockZap;\\n\\n\\t/********************** Lock & Earn Info ***********************/\\n\\n\\t// Private mappings for balance data\\n\\tmapping(address => Balances) private balances;\\n\\tmapping(address => LockedBalance[]) internal userLocks;\\n\\tmapping(address => LockedBalance[]) private userEarnings;\\n\\n\\t/// @notice Total locked value\\n\\tuint256 public lockedSupply;\\n\\n\\t/// @notice Total locked value in multipliers\\n\\tuint256 public lockedSupplyWithMultiplier;\\n\\n\\t// Time lengths\\n\\tuint256[] internal lockPeriod;\\n\\n\\t// Multipliers\\n\\tuint256[] internal rewardMultipliers;\\n\\n\\t/********************** Reward Info ***********************/\\n\\n\\t/// @notice Reward tokens being distributed\\n\\taddress[] public rewardTokens;\\n\\n\\t/// @notice Reward data per token\\n\\tmapping(address => Reward) public rewardData;\\n\\n\\t/// @notice user -> reward token -> rpt; RPT for paid amount\\n\\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n\\t/// @notice user -> reward token -> amount; used to store reward amount\\n\\tmapping(address => mapping(address => uint256)) public rewards;\\n\\n\\t/********************** Other Info ***********************/\\n\\n\\t/// @notice DAO wallet\\n\\taddress public override daoTreasury;\\n\\n\\t/// @notice treasury wallet\\n\\taddress public STARFLEET_TREASURY;\\n\\n\\t/// @notice Addresses approved to call mint\\n\\tmapping(address => bool) public minters;\\n\\n\\t// Addresses to relock\\n\\tmapping(address => bool) public override autoRelockDisabled;\\n\\n\\t// Default lock index for relock\\n\\tmapping(address => uint256) public override defaultLockIndex;\\n\\n\\t/// @notice Flag to prevent more minter addings\\n\\tbool public mintersAreSet;\\n\\n\\t// Users list\\n\\tILockerList public userlist;\\n\\n\\tmapping(address => uint256) public lastClaimTime;\\n\\n\\taddress public BountyManager;\\n\\n\\t// to prevent unbounded lock length iteration during withdraw/clean\\n\\n\\t/********************** Events ***********************/\\n\\n\\tevent RewardAdded(uint256 reward);\\n\\tevent Staked(address indexed user, uint256 amount, bool locked);\\n\\tevent Locked(address indexed user, uint256 usdValue, bool isLP);\\n\\tevent Withdrawn(address indexed user, address indexed token, uint256 receivedAmount, uint256 penalty, uint256 burn);\\n\\tevent RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n\\tevent IneligibleRewardRemoved(address indexed user, address indexed rewardToken, uint256 reward);\\n\\tevent RewardsDurationUpdated(address token, uint256 newDuration);\\n\\tevent Recovered(address token, uint256 amount);\\n\\tevent Relocked(address indexed user, uint256 amount, uint256 lockIndex);\\n\\n\\t/**\\n\\t * @dev Constructor\\n\\t *  First reward MUST be the RDNT token or things will break\\n\\t *  related to the 50% penalty and distribution to locked balances.\\n\\t * @param _rdntToken RDNT token address.\\n\\t * @param _rewardsDuration set reward stream time.\\n\\t * @param _rewardsLookback reward lookback\\n\\t * @param _lockDuration lock duration\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _rdntToken,\\n\\t\\taddress _lockZap,\\n\\t\\taddress _dao,\\n\\t\\taddress _userlist,\\n\\t\\taddress priceProvider,\\n\\t\\tuint256 _rewardsDuration,\\n\\t\\tuint256 _rewardsLookback,\\n\\t\\tuint256 _lockDuration,\\n\\t\\tuint256 _burnRatio,\\n\\t\\tuint256 _vestDuration\\n\\t) public initializer {\\n\\t\\t// require(_rdntToken != address(0));\\n\\t\\t// require(_lockZap != address(0));\\n\\t\\t// require(_dao != address(0));\\n\\t\\t// require(_userlist != address(0));\\n\\t\\t// require(priceProvider != address(0));\\n\\t\\t// require(_rewardsDuration != uint256(0));\\n\\t\\t// require(_rewardsLookback != uint256(0));\\n\\t\\t// require(_lockDuration != uint256(0));\\n\\t\\t// require(_vestDuration != uint256(0));\\n\\t\\t// require(_burnRatio <= WHOLE);\\n\\t\\t// require(_rewardsLookback <= _rewardsDuration);\\n\\n\\t\\t__Ownable_init();\\n\\n\\t\\trdntToken = IMintableToken(_rdntToken);\\n\\t\\tlockZap = _lockZap;\\n\\t\\tdaoTreasury = _dao;\\n\\t\\t_priceProvider = priceProvider;\\n\\t\\tuserlist = ILockerList(_userlist);\\n\\t\\trewardTokens.push(_rdntToken);\\n\\t\\trewardData[_rdntToken].lastUpdateTime = block.timestamp;\\n\\n\\t\\tREWARDS_DURATION = _rewardsDuration;\\n\\t\\tREWARDS_LOOKBACK = _rewardsLookback;\\n\\t\\tDEFAULT_LOCK_DURATION = _lockDuration;\\n\\t\\tBURN = _burnRatio;\\n\\t\\tVEST_DURATION = _vestDuration;\\n\\t}\\n\\n\\t/********************** Setters ***********************/\\n\\n\\t/**\\n\\t * @notice Set minters\\n\\t * @dev Can be called only once\\n\\t */\\n\\tfunction setMinters(address[] memory _minters) external onlyOwner {\\n\\t\\trequire(!mintersAreSet);\\n\\t\\tfor (uint256 i; i < _minters.length; i++) {\\n\\t\\t\\tminters[_minters[i]] = true;\\n\\t\\t}\\n\\t\\tmintersAreSet = true;\\n\\t}\\n\\n\\tfunction addBountyContract(address _bounty) external onlyOwner {\\n\\t\\tBountyManager = _bounty;\\n\\t\\tminters[_bounty] = true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t */\\n\\tfunction setLockTypeInfo(uint256[] memory _lockPeriod, uint256[] memory _rewardMultipliers) external onlyOwner {\\n\\t\\trequire(_lockPeriod.length == _rewardMultipliers.length);\\n\\t\\tdelete lockPeriod;\\n\\t\\tdelete rewardMultipliers;\\n\\t\\tfor (uint256 i = 0; i < _lockPeriod.length; i += 1) {\\n\\t\\t\\tlockPeriod.push(_lockPeriod[i]);\\n\\t\\t\\trewardMultipliers.push(_rewardMultipliers[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set CIC, MFD and Treasury.\\n\\t */\\n\\tfunction setAddresses(\\n\\t\\tIChefIncentivesController _controller,\\n\\t\\tIMiddleFeeDistribution _middleFeeDistribution,\\n\\t\\taddress _treasury\\n\\t) external onlyOwner {\\n\\t\\tincentivesController = _controller;\\n\\t\\tmiddleFeeDistribution = _middleFeeDistribution;\\n\\t\\tSTARFLEET_TREASURY = _treasury;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set LP token.\\n\\t */\\n\\tfunction setLPToken(address _stakingToken) external onlyOwner {\\n\\t\\trequire(stakingToken == address(0));\\n\\t\\tstakingToken = _stakingToken;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers.\\n\\t */\\n\\tfunction addReward(address _rewardToken) external override {\\n\\t\\trequire(minters[msg.sender]);\\n\\t\\trequire(rewardData[_rewardToken].lastUpdateTime == 0);\\n\\t\\trewardTokens.push(_rewardToken);\\n\\t\\trewardData[_rewardToken].lastUpdateTime = block.timestamp;\\n\\t\\trewardData[_rewardToken].periodFinish = block.timestamp;\\n\\t}\\n\\n\\t/********************** View functions ***********************/\\n\\n\\t/**\\n\\t * @notice Set default lock type index for user relock.\\n\\t */\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external override {\\n\\t\\trequire(_index < lockPeriod.length);\\n\\t\\tdefaultLockIndex[msg.sender] = _index;\\n\\t}\\n\\n\\tfunction getLockDurations() external view returns (uint256[] memory) {\\n\\t\\treturn lockPeriod;\\n\\t}\\n\\n\\tfunction getLockMultipliers() external view returns (uint256[] memory) {\\n\\t\\treturn rewardMultipliers;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set relock status\\n\\t */\\n\\tfunction setRelock(bool _status) external {\\n\\t\\tif (BountyManager != address(0)) {\\n\\t\\t\\tIBounty(BountyManager).onRelockUpdate(msg.sender, !autoRelockDisabled[msg.sender], _status);\\n\\t\\t}\\n\\t\\tautoRelockDisabled[msg.sender] = !_status;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns all locks of a user.\\n\\t */\\n\\tfunction lockInfo(address user) external view override returns (LockedBalance[] memory) {\\n\\t\\treturn userLocks[user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\\n\\t */\\n\\t// function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t// \\trequire(rewardData[tokenAddress].lastUpdateTime == 0);\\n\\t// \\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n\\t// \\temit Recovered(tokenAddress, tokenAmount);\\n\\t// }\\n\\n\\t/**\\n\\t * @notice Withdraw and restake assets.\\n\\t */\\n\\tfunction relock() external {\\n\\t\\tuint256 amount = _withdrawExpiredLocksFor(msg.sender, true, true, userLocks[msg.sender].length);\\n\\t\\t_stake(amount, msg.sender, defaultLockIndex[msg.sender], false);\\n\\t\\temit Relocked(msg.sender, amount, defaultLockIndex[msg.sender]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Total balance of an account, including unlocked, locked and earned tokens.\\n\\t */\\n\\tfunction totalBalance(address user) external view override returns (uint256 amount) {\\n\\t\\tif (stakingToken == address(rdntToken)) {\\n\\t\\t\\treturn balances[user].total;\\n\\t\\t}\\n\\t\\treturn balances[user].locked;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Information on a user's lockings\\n\\t * @return total balance of locks\\n\\t * @return unlockable balance\\n\\t * @return locked balance\\n\\t * @return lockedWithMultiplier\\n\\t * @return lockData which is an array of locks\\n\\t */\\n\\tfunction lockedBalances(address user)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 total,\\n\\t\\t\\tuint256 unlockable,\\n\\t\\t\\tuint256 locked,\\n\\t\\t\\tuint256 lockedWithMultiplier,\\n\\t\\t\\tLockedBalance[] memory lockData\\n\\t\\t)\\n\\t{\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\t\\tuint256 idx;\\n\\t\\tfor (uint256 i = 0; i < locks.length; i++) {\\n\\t\\t\\tif (locks[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tlockData = new LockedBalance[](locks.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlockData[idx] = locks[i];\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\tlocked = locked.add(locks[i].amount);\\n\\t\\t\\t\\tlockedWithMultiplier = lockedWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlockable = unlockable.add(locks[i].amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (balances[user].locked, unlockable, locked, lockedWithMultiplier, lockData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Earnings which is locked yet\\n\\t * @dev Earned balances may be withdrawn immediately for a 50% penalty.\\n\\t * @return total earnings\\n\\t * @return unlocked earnings\\n\\t * @return earningsData which is an array of all infos\\n\\t */\\n\\tfunction earnedBalances(address user)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 total,\\n\\t\\t\\tuint256 unlocked,\\n\\t\\t\\tEarnedBalance[] memory earningsData\\n\\t\\t)\\n\\t{\\n\\t\\tunlocked = balances[user].unlocked;\\n\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\tuint256 idx;\\n\\t\\tfor (uint256 i = 0; i < earnings.length; i++) {\\n\\t\\t\\tif (earnings[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tif (idx == 0) {\\n\\t\\t\\t\\t\\tearningsData = new EarnedBalance[](earnings.length - i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t(, uint256 penaltyAmount, , ) = ieeWithdrawableBalances(user, earnings[i].unlockTime);\\n\\t\\t\\t\\tearningsData[idx].amount = earnings[i].amount;\\n\\t\\t\\t\\tearningsData[idx].unlockTime = earnings[i].unlockTime;\\n\\t\\t\\t\\tearningsData[idx].penalty = penaltyAmount;\\n\\t\\t\\t\\tidx++;\\n\\t\\t\\t\\ttotal = total.add(earnings[i].amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tunlocked = unlocked.add(earnings[i].amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (total, unlocked, earningsData);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Final balance received and penalty balance paid by user upon calling exit.\\n\\t * @dev This is earnings, not locks.\\n\\t */\\n\\tfunction withdrawableBalance(address user)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 amount,\\n\\t\\t\\tuint256 penaltyAmount,\\n\\t\\t\\tuint256 burnAmount\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 earned = balances[user].earned;\\n\\t\\tif (earned > 0) {\\n\\t\\t\\tuint256 length = userEarnings[user].length;\\n\\t\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[user][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, , uint256 newPenaltyAmount, uint256 newBurnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(newPenaltyAmount);\\n\\t\\t\\t\\tburnAmount = burnAmount.add(newBurnAmount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tamount = balances[user].unlocked.add(earned).sub(penaltyAmount);\\n\\t\\treturn (amount, penaltyAmount, burnAmount);\\n\\t}\\n\\n\\tfunction _penaltyInfo(LockedBalance memory earning)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 amount,\\n\\t\\t\\tuint256 penaltyFactor,\\n\\t\\t\\tuint256 penaltyAmount,\\n\\t\\t\\tuint256 burnAmount\\n\\t\\t)\\n\\t{\\n\\t\\tif (earning.unlockTime > block.timestamp) {\\n\\t\\t\\t// 90% on day 1, decays to 25% on day 90\\n\\t\\t\\tpenaltyFactor = earning.unlockTime.sub(block.timestamp).mul(HALF).div(VEST_DURATION).add(QUART); // 25% + timeLeft/VEST_DURATION * 65%\\n\\t\\t}\\n\\t\\tpenaltyAmount = earning.amount.mul(penaltyFactor).div(WHOLE);\\n\\t\\tburnAmount = penaltyAmount.mul(BURN).div(WHOLE);\\n\\t\\tamount = earning.amount.sub(penaltyAmount);\\n\\t}\\n\\n\\t/********************** Reward functions ***********************/\\n\\n\\t/**\\n\\t * @notice Reward amount of the duration.\\n\\t * @param _rewardToken for the reward\\n\\t */\\n\\tfunction getRewardForDuration(address _rewardToken) external view returns (uint256) {\\n\\t\\treturn rewardData[_rewardToken].rewardPerSecond.mul(REWARDS_DURATION).div(1e12);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns reward applicable timestamp.\\n\\t */\\n\\tfunction lastTimeRewardApplicable(address _rewardToken) public view returns (uint256) {\\n\\t\\tuint256 periodFinish = rewardData[_rewardToken].periodFinish;\\n\\t\\treturn block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reward amount per token\\n\\t * @dev Reward is distributed only for locks.\\n\\t * @param _rewardToken for reward\\n\\t */\\n\\tfunction rewardPerToken(address _rewardToken) public view returns (uint256 rptStored) {\\n\\t\\trptStored = rewardData[_rewardToken].rewardPerTokenStored;\\n\\t\\tif (lockedSupplyWithMultiplier > 0) {\\n\\t\\t\\tuint256 newReward = lastTimeRewardApplicable(_rewardToken).sub(rewardData[_rewardToken].lastUpdateTime).mul(\\n\\t\\t\\t\\trewardData[_rewardToken].rewardPerSecond\\n\\t\\t\\t);\\n\\t\\t\\trptStored = rptStored.add(newReward.mul(1e18).div(lockedSupplyWithMultiplier));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Address and claimable amount of all reward tokens for the given account.\\n\\t * @param account for rewards\\n\\t */\\n\\tfunction claimableRewards(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (IFeeDistribution.RewardData[] memory rewardsData)\\n\\t{\\n\\t\\trewardsData = new IFeeDistribution.RewardData[](rewardTokens.length);\\n\\t\\tfor (uint256 i = 0; i < rewardsData.length; i++) {\\n\\t\\t\\trewardsData[i].token = rewardTokens[i];\\n\\t\\t\\trewardsData[i].amount = _earned(\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\trewardsData[i].token,\\n\\t\\t\\t\\tbalances[account].lockedWithMultiplier,\\n\\t\\t\\t\\trewardPerToken(rewardsData[i].token)\\n\\t\\t\\t).div(1e12);\\n\\t\\t}\\n\\t\\treturn rewardsData;\\n\\t}\\n\\n\\t/********************** Operate functions ***********************/\\n\\n\\t/**\\n\\t * @notice Stake tokens to receive rewards.\\n\\t * @dev Locked tokens cannot be withdrawn for DEFAULT_LOCK_DURATION and are eligible to receive rewards.\\n\\t */\\n\\tfunction stake(\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 typeIndex\\n\\t) external override {\\n\\t\\t// Exceptional case is\\n\\t\\t// - User locked, default index is 1\\n\\t\\t// - User set default index as 0\\n\\t\\t// - User unlocked all\\n\\t\\t// - User locks again, default index is reset to 1\\n\\t\\tif (defaultLockIndex[onBehalfOf] == 0 && userLocks[onBehalfOf].length == 0) {\\n\\t\\t\\tdefaultLockIndex[onBehalfOf] = DEFAULT_LOCK_INDEX;\\n\\t\\t}\\n\\t\\t_stake(amount, onBehalfOf, typeIndex, false);\\n\\t}\\n\\n\\tfunction _stake(\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 typeIndex,\\n\\t\\tbool isRelock\\n\\t) internal {\\n\\t\\tif (amount == 0) return;\\n\\t\\tif (BountyManager != address(0)) {\\n\\t\\t\\trequire(amount >= IBounty(BountyManager).minDLPBalance());\\n\\t\\t}\\n\\t\\trequire(typeIndex < lockPeriod.length);\\n\\n\\t\\tincentivesController.beforeLockUpdate(onBehalfOf);\\n\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\tuint256 transferAmount = amount;\\n\\t\\tif (onBehalfOf == msg.sender || msg.sender == lockZap) {\\n\\t\\t\\tuint256 withdrawnAmt;\\n\\t\\t\\tif (!autoRelockDisabled[onBehalfOf]) {\\n\\t\\t\\t\\twithdrawnAmt = _withdrawExpiredLocksFor(onBehalfOf, true, false, userLocks[onBehalfOf].length);\\n\\t\\t\\t\\tamount = amount.add(withdrawnAmt);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_withdrawExpiredLocksFor(onBehalfOf, true, true, userLocks[onBehalfOf].length);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\n\\t\\tbal.locked = bal.locked.add(amount);\\n\\t\\tlockedSupply = lockedSupply.add(amount);\\n\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\\n\\n\\t\\t_insertLock(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tLockedBalance({\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tunlockTime: block.timestamp.add(lockPeriod[typeIndex]),\\n\\t\\t\\t\\tmultiplier: rewardMultipliers[typeIndex],\\n\\t\\t\\t\\tduration: lockPeriod[typeIndex]\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\tuserlist.addToList(onBehalfOf);\\n\\n\\t\\tif (!isRelock) {\\n\\t\\t\\tIERC20(stakingToken).safeTransferFrom(msg.sender, address(this), transferAmount);\\n\\t\\t}\\n\\n\\t\\tincentivesController.afterLockUpdate(onBehalfOf);\\n\\n\\t\\tuint256 stakingTokenPrice;\\n\\t\\tif (stakingToken == address(rdntToken)) {\\n\\t\\t\\tstakingTokenPrice = IPriceProvider(_priceProvider).getTokenPriceUsd();\\n\\t\\t} else {\\n\\t\\t\\tstakingTokenPrice = IPriceProvider(_priceProvider).getLpTokenPriceUsd();\\n\\t\\t}\\n\\t\\tuint8 stakingTokenDecimals = IERC20Detailed(stakingToken).decimals();\\n\\t\\tuint256 usdValue = stakingTokenPrice.mul(amount).mul(10**18).div(10**8).div(10**stakingTokenDecimals);\\n\\n\\t\\temit Staked(onBehalfOf, amount, true);\\n\\t\\temit Locked(onBehalfOf, usdValue, stakingToken != address(rdntToken));\\n\\t}\\n\\n\\tfunction _insertLock(address _user, LockedBalance memory newLock) internal {\\n\\t\\tLockedBalance[] storage locks = userLocks[_user];\\n\\t\\tuint256 length = locks.length;\\n\\t\\tuint256 i;\\n\\t\\twhile (i < length && locks[i].unlockTime < newLock.unlockTime) {\\n\\t\\t\\ti = i + 1;\\n\\t\\t}\\n\\t\\tlocks.push(newLock);\\n\\t\\tfor (uint256 j = length; j > i; j -= 1) {\\n\\t\\t\\tlocks[j] = locks[j - 1];\\n\\t\\t}\\n\\t\\tlocks[i] = newLock;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add to earnings\\n\\t * @dev Minted tokens receive rewards normally but incur a 50% penalty when\\n\\t *  withdrawn before VEST_DURATION has passed.\\n\\t */\\n\\tfunction mint(\\n\\t\\taddress user,\\n\\t\\tuint256 amount,\\n\\t\\tbool withPenalty\\n\\t) external override {\\n\\t\\trequire(minters[msg.sender]);\\n\\t\\tif (amount == 0) return;\\n\\n\\t\\t_updateReward(user);\\n\\n\\t\\tif (user == address(this)) {\\n\\t\\t\\t// minting to this contract adds the new tokens as incentives for lockers\\n\\t\\t\\t_notifyReward(address(rdntToken), amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tBalances storage bal = balances[user];\\n\\t\\tbal.total = bal.total.add(amount);\\n\\t\\tif (withPenalty) {\\n\\t\\t\\tbal.earned = bal.earned.add(amount);\\n\\t\\t\\tLockedBalance[] storage earnings = userEarnings[user];\\n\\t\\t\\tuint256 unlockTime = block.timestamp.add(VEST_DURATION);\\n\\t\\t\\tearnings.push(\\n\\t\\t\\t\\tLockedBalance({amount: amount, unlockTime: unlockTime, multiplier: 1, duration: VEST_DURATION})\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tbal.unlocked = bal.unlocked.add(amount);\\n\\t\\t}\\n\\t\\temit Staked(user, amount, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from earnings and unlocked.\\n\\t * @dev First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\\n\\t *  incurs a 50% penalty which is distributed based on locked balances.\\n\\t */\\n\\tfunction withdraw(uint256 amount) external {\\n\\t\\taddress _address = msg.sender;\\n\\t\\trequire(amount != 0);\\n\\n\\t\\tuint256 penaltyAmount;\\n\\t\\tuint256 burnAmount;\\n\\t\\tBalances storage bal = balances[_address];\\n\\n\\t\\tif (amount <= bal.unlocked) {\\n\\t\\t\\tbal.unlocked = bal.unlocked.sub(amount);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = amount.sub(bal.unlocked);\\n\\t\\t\\trequire(bal.earned >= remaining);\\n\\t\\t\\tbal.unlocked = 0;\\n\\t\\t\\tuint256 sumEarned = bal.earned;\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tfor (i = 0; ; i++) {\\n\\t\\t\\t\\tuint256 earnedAmount = userEarnings[_address][i].amount;\\n\\t\\t\\t\\tif (earnedAmount == 0) continue;\\n\\t\\t\\t\\t(, uint256 penaltyFactor, , ) = _penaltyInfo(userEarnings[_address][i]);\\n\\n\\t\\t\\t\\t// Amount required from this lock, taking into account the penalty\\n\\t\\t\\t\\tuint256 requiredAmount = remaining.mul(WHOLE).div(WHOLE.sub(penaltyFactor));\\n\\t\\t\\t\\tif (requiredAmount >= earnedAmount) {\\n\\t\\t\\t\\t\\trequiredAmount = earnedAmount;\\n\\t\\t\\t\\t\\tremaining = remaining.sub(earnedAmount.mul(WHOLE.sub(penaltyFactor)).div(WHOLE)); // remaining -= earned * (1 - pentaltyFactor)\\n\\t\\t\\t\\t\\tif (remaining == 0) i++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuserEarnings[_address][i].amount = earnedAmount.sub(requiredAmount);\\n\\t\\t\\t\\t\\tremaining = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsumEarned = sumEarned.sub(requiredAmount);\\n\\n\\t\\t\\t\\tpenaltyAmount = penaltyAmount.add(requiredAmount.mul(penaltyFactor).div(WHOLE)); // penalty += amount * penaltyFactor\\n\\t\\t\\t\\tburnAmount = burnAmount.add(penaltyAmount.mul(BURN).div(WHOLE)); // burn += penalty * burnFactor\\n\\n\\t\\t\\t\\tif (remaining == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(sumEarned != 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tfor (uint256 j = i; j < userEarnings[_address].length; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address][j - i] = userEarnings[_address][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (uint256 j = 0; j < i; j++) {\\n\\t\\t\\t\\t\\tuserEarnings[_address].pop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbal.earned = sumEarned;\\n\\t\\t}\\n\\n\\t\\t// Update values\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(_address, amount, penaltyAmount, burnAmount, false);\\n\\t}\\n\\n\\tfunction ieeWithdrawableBalances(address user, uint256 unlockTime)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 amount,\\n\\t\\t\\tuint256 penaltyAmount,\\n\\t\\t\\tuint256 burnAmount,\\n\\t\\t\\tuint256 index\\n\\t\\t)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < userEarnings[user].length; i++) {\\n\\t\\t\\tif (userEarnings[user][i].unlockTime == unlockTime) {\\n\\t\\t\\t\\t(amount, , penaltyAmount, burnAmount) = _penaltyInfo(userEarnings[user][i]);\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\\n\\t */\\n\\tfunction individualEarlyExit(bool claimRewards, uint256 unlockTime) external {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\trequire(unlockTime > block.timestamp);\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) = ieeWithdrawableBalances(\\n\\t\\t\\tonBehalfOf,\\n\\t\\t\\tunlockTime\\n\\t\\t);\\n\\n\\t\\tif (index >= userEarnings[onBehalfOf].length) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = index + 1; i < userEarnings[onBehalfOf].length; i++) {\\n\\t\\t\\tuserEarnings[onBehalfOf][i - 1] = userEarnings[onBehalfOf][i];\\n\\t\\t}\\n\\t\\tuserEarnings[onBehalfOf].pop();\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\\n\\t\\tbal.earned = bal.earned.sub(amount).sub(penaltyAmount);\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw full unlocked balance and earnings, optionally claim pending rewards.\\n\\t */\\n\\tfunction exit(bool claimRewards) external override {\\n\\t\\taddress onBehalfOf = msg.sender;\\n\\t\\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount) = withdrawableBalance(onBehalfOf);\\n\\n\\t\\tdelete userEarnings[onBehalfOf];\\n\\n\\t\\tBalances storage bal = balances[onBehalfOf];\\n\\t\\tbal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\n\\t\\tbal.unlocked = 0;\\n\\t\\tbal.earned = 0;\\n\\n\\t\\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t */\\n\\tfunction getReward(address[] memory _rewardTokens) public {\\n\\t\\t_updateReward(msg.sender);\\n\\t\\t_getReward(msg.sender, _rewardTokens);\\n\\t\\tlastClaimTime[msg.sender] = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim all pending staking rewards.\\n\\t */\\n\\tfunction getAllRewards() external {\\n\\t\\treturn getReward(rewardTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate earnings.\\n\\t */\\n\\tfunction _earned(\\n\\t\\taddress _user,\\n\\t\\taddress _rewardToken,\\n\\t\\tuint256 _balance,\\n\\t\\tuint256 _currentRewardPerToken\\n\\t) internal view returns (uint256 earnings) {\\n\\t\\tearnings = rewards[_user][_rewardToken];\\n\\t\\tuint256 realRPT = _currentRewardPerToken.sub(userRewardPerTokenPaid[_user][_rewardToken]);\\n\\t\\tearnings = earnings.add(_balance.mul(realRPT).div(1e18));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update user reward info.\\n\\t */\\n\\tfunction _updateReward(address account) internal {\\n\\t\\tuint256 balance = balances[account].lockedWithMultiplier;\\n\\t\\tuint256 length = rewardTokens.length;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\taddress token = rewardTokens[i];\\n\\t\\t\\tuint256 rpt = rewardPerToken(token);\\n\\n\\t\\t\\tReward storage r = rewardData[token];\\n\\t\\t\\tr.rewardPerTokenStored = rpt;\\n\\t\\t\\tr.lastUpdateTime = lastTimeRewardApplicable(token);\\n\\n\\t\\t\\tif (account != address(this)) {\\n\\t\\t\\t\\trewards[account][token] = _earned(account, token, balance, rpt);\\n\\t\\t\\t\\tuserRewardPerTokenPaid[account][token] = rpt;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new reward.\\n\\t * @dev If prev reward period is not done, then it resets `rewardPerSecond` and restarts period\\n\\t */\\n\\tfunction _notifyReward(address _rewardToken, uint256 reward) internal {\\n\\t\\tReward storage r = rewardData[_rewardToken];\\n\\t\\tif (block.timestamp >= r.periodFinish) {\\n\\t\\t\\tr.rewardPerSecond = reward.mul(1e12).div(REWARDS_DURATION);\\n\\t\\t} else {\\n\\t\\t\\tuint256 remaining = r.periodFinish.sub(block.timestamp);\\n\\t\\t\\tuint256 leftover = remaining.mul(r.rewardPerSecond).div(1e12);\\n\\t\\t\\tr.rewardPerSecond = reward.add(leftover).mul(1e12).div(REWARDS_DURATION);\\n\\t\\t}\\n\\n\\t\\tr.lastUpdateTime = block.timestamp;\\n\\t\\tr.periodFinish = block.timestamp.add(REWARDS_DURATION);\\n\\t\\tr.balance = r.balance.add(reward);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Notify unseen rewards.\\n\\t * @dev for rewards other than stakingToken, every 24 hours we check if new\\n\\t *  rewards were sent to the contract or accrued via aToken interest.\\n\\t */\\n\\tfunction _notifyUnseenReward(address token) internal {\\n\\t\\trequire(token != address(0));\\n\\t\\tif (token == address(rdntToken)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tReward storage r = rewardData[token];\\n\\t\\tuint256 periodFinish = r.periodFinish;\\n\\t\\trequire(periodFinish != 0);\\n\\t\\tif (periodFinish < block.timestamp.add(REWARDS_DURATION - REWARDS_LOOKBACK)) {\\n\\t\\t\\tuint256 unseen = IERC20(token).balanceOf(address(this)).sub(r.balance);\\n\\t\\t\\tif (unseen > 0) {\\n\\t\\t\\t\\t_notifyReward(token, unseen);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice User gets reward\\n\\t */\\n\\tfunction _getReward(address _user, address[] memory _rewardTokens) internal {\\n\\t\\tmiddleFeeDistribution.forwardReward(_rewardTokens);\\n\\t\\tuint256 length = _rewardTokens.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\taddress token = _rewardTokens[i];\\n\\t\\t\\t_notifyUnseenReward(token);\\n\\t\\t\\tuint256 reward = rewards[_user][token].div(1e12);\\n\\t\\t\\tif (reward > 0) {\\n\\t\\t\\t\\trewards[_user][token] = 0;\\n\\t\\t\\t\\trewardData[token].balance = rewardData[token].balance.sub(reward);\\n\\n\\t\\t\\t\\tIERC20(token).safeTransfer(_user, reward);\\n\\n\\t\\t\\t\\temit RewardPaid(_user, token, reward);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw tokens from MFD\\n\\t */\\n\\tfunction _withdrawTokens(\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 penaltyAmount,\\n\\t\\tuint256 burnAmount,\\n\\t\\tbool claimRewards\\n\\t) internal {\\n\\t\\trequire(onBehalfOf == msg.sender);\\n\\t\\t_updateReward(onBehalfOf);\\n\\n\\t\\trdntToken.safeTransfer(onBehalfOf, amount);\\n\\t\\tif (penaltyAmount > 0) {\\n\\t\\t\\tif (burnAmount > 0) {\\n\\t\\t\\t\\trdntToken.safeTransfer(STARFLEET_TREASURY, burnAmount);\\n\\t\\t\\t}\\n\\t\\t\\trdntToken.safeTransfer(daoTreasury, penaltyAmount.sub(burnAmount));\\n\\t\\t}\\n\\n\\t\\tif (claimRewards) {\\n\\t\\t\\t_getReward(onBehalfOf, rewardTokens);\\n\\t\\t\\tlastClaimTime[onBehalfOf] = block.timestamp;\\n\\t\\t}\\n\\n\\t\\temit Withdrawn(onBehalfOf, address(rdntToken), amount, penaltyAmount, burnAmount);\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @notice Withdraw all lockings tokens where the unlock time has passed\\n\\t */\\n\\tfunction _cleanWithdrawableLocks(\\n\\t\\taddress user,\\n\\t\\tuint256 totalLock,\\n\\t\\tuint256 totalLockWithMultiplier,\\n\\t\\tuint256 limit\\n\\t) internal returns (uint256 lockAmount, uint256 lockAmountWithMultiplier) {\\n\\t\\tLockedBalance[] storage locks = userLocks[user];\\n\\n\\t\\tif (locks.length != 0) {\\n\\t\\t\\tuint256 length = locks.length <= limit ? locks.length : limit;\\n\\t\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\t\\tif (locks[i].unlockTime <= block.timestamp) {\\n\\t\\t\\t\\t\\tlockAmount = lockAmount.add(locks[i].amount);\\n\\t\\t\\t\\t\\tlockAmountWithMultiplier = lockAmountWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\\n\\t\\t\\t\\t\\tlocks[i] = locks[locks.length - 1];\\n\\t\\t\\t\\t\\tlocks.pop();\\n\\t\\t\\t\\t\\tlength = length.sub(1);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ti = i + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (locks.length == 0) {\\n\\t\\t\\t\\tlockAmount = totalLock;\\n\\t\\t\\t\\tlockAmountWithMultiplier = totalLockWithMultiplier;\\n\\t\\t\\t\\tdelete userLocks[user];\\n\\n\\t\\t\\t\\tuserlist.removeFromList(user);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t * @param _address of the user.\\n\\t */\\n\\tfunction _withdrawExpiredLocksFor(\\n\\t\\taddress _address,\\n\\t\\tbool isRelockAction,\\n\\t\\tbool doTransfer,\\n\\t\\tuint256 limit\\n\\t) internal returns (uint256 amount) {\\n\\t\\tincentivesController.beforeLockUpdate(_address);\\n\\t\\t_updateReward(_address);\\n\\n\\t\\tuint256 amountWithMultiplier;\\n\\t\\tBalances storage bal = balances[_address];\\n\\t\\t(amount, amountWithMultiplier) = _cleanWithdrawableLocks(_address, bal.locked, bal.lockedWithMultiplier, limit);\\n\\t\\tbal.locked = bal.locked.sub(amount);\\n\\t\\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.sub(amountWithMultiplier);\\n\\t\\tbal.total = bal.total.sub(amount);\\n\\t\\tlockedSupply = lockedSupply.sub(amount);\\n\\t\\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.sub(amountWithMultiplier);\\n\\t\\tincentivesController.afterLockUpdate(_address);\\n\\n\\t\\tif (!isRelockAction && !autoRelockDisabled[_address]) {\\n\\t\\t\\t_stake(amount, _address, defaultLockIndex[_address], true);\\n\\t\\t} else {\\n\\t\\t\\tif (doTransfer) {\\n\\t\\t\\t\\tIERC20(stakingToken).safeTransfer(_address, amount);\\n\\t\\t\\t\\temit Withdrawn(_address, stakingToken, amount, 0, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\\n\\t */\\n\\tfunction withdrawExpiredLocksFor(address _address) external override returns (uint256) {\\n\\t\\treturn _withdrawExpiredLocksFor(_address, false, true, userLocks[_address].length);\\n\\t}\\n\\n\\tfunction withdrawExpiredLocksForWithOptions(\\n\\t\\taddress _address,\\n\\t\\tuint256 _limit,\\n\\t\\tbool _ignoreRelock\\n\\t) external returns (uint256) {\\n\\t\\tif (_limit == 0) _limit = userLocks[_address].length;\\n\\n\\t\\treturn _withdrawExpiredLocksFor(_address, _ignoreRelock, true, _limit);\\n\\t}\\n\\n\\tfunction zapVestingToLp(address _user) external override returns (uint256 zapped) {\\n\\t\\trequire(msg.sender == lockZap);\\n\\n\\t\\tLockedBalance[] storage earnings = userEarnings[_user];\\n\\t\\tuint256 length = earnings.length;\\n\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\t// only vesting, so only look at currently locked items\\n\\t\\t\\tif (earnings[i].unlockTime > block.timestamp) {\\n\\t\\t\\t\\tzapped = zapped.add(earnings[i].amount);\\n\\t\\t\\t\\t// remove + shift array size\\n\\t\\t\\t\\tearnings[i] = earnings[earnings.length - 1];\\n\\t\\t\\t\\tearnings.pop();\\n\\t\\t\\t\\tlength = length.sub(1);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ti = i.add(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trdntToken.safeTransfer(lockZap, zapped);\\n\\n\\t\\tBalances storage bal = balances[_user];\\n\\t\\tbal.earned = bal.earned.sub(zapped);\\n\\t\\tbal.total = bal.total.sub(zapped);\\n\\n\\t\\treturn zapped;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe92a386773be68a8fdb8d48716b29bdb67a845163b144802c4947896869d99b3\",\"license\":\"MIT\"},\"contracts/uniswap/periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    \\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb79fed28729146c62c113b9c975cdf0079df43df2926b477ecfbf11a76844de4\",\"license\":\"agpl-3.0\"},\"contracts/uniswap/periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    \\n}\\n\",\"keccak256\":\"0x4291c8345e5f0eea0223c0cc87d52bd82b73a5cca3d0d9d4a6984d5598ffe14f\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fd080620000216000396000f3fe608060405234801561001057600080fd5b506004361061039b5760003560e01c806302b62938146103a05780630483a7f6146103cb57806307faed78146103ef57806309eba3431461040f5780630c63469e146104175780630e9279a01461042a5780630f63107f1461043f5780631285deee1461045457806317053a7e1461045c57806321cc01c91461046f5780632843b019146104775780632e1a7d4d1461048a5780632e88caa11461049f5780633239d438146104b257806332c991b5146104ba578063363bf964146104c25780633b26664f146104d557806345b35f56146104e857806346e73271146104f057806348e5d9f8146105035780634c6f71311461052757806354758bad1461052f578063547d009614610537578063556a795a1461054a57806356423a071461055d5780635a7ae47214610565578063638634ee1461057857806369f5f0fd1461058b5780636a678a9c146105a05780636bd3b87c146105b35780636e6941c5146105d35780636e9c931c146105db5780636eacd398146105ee5780636fa75e6d146106015780637035ab9814610614578063715018a61461062757806372f702f31461062f578063757c4d221461063757806376520c6d1461063f57806378e5cdc71461064757806379022a9f1461064f5780637ab8955d146106575780637bb7bed1146106785780637c95294b1461068b5780637fd7d06214610693578063808d7627146106a657806385029409146106ae578063891c4e19146106ce5780638da5cb5b146106e15780638f40aab1146106e95780638f432074146106fc5780638fd9f2ca1461070f578063914f6e6d1461071757806398387a8d1461072a5780639bd4ef501461073d5780639c9b2e2114610745578063a0029ccf14610758578063a0e47bf61461076b578063ada71bc214610773578063af1df25514610786578063b36b9ffd1461078e578063b76f659d14610796578063b77cf9c61461079e578063bcd11014146107b1578063c0a2526c146107c4578063c53b573d146107cc578063c55dae63146107d4578063ca5c7b91146107dc578063d1a1beb4146107e4578063dc01f60d146107f7578063df3798761461080a578063e6c91a151461082c578063e70b9e271461083f578063e8999f4314610852578063ee3ca99c1461085a578063f122977714610862578063f1aade3d14610875578063f2fde38b1461087d578063f454249414610890578063f46eccc414610898578063f7ad3601146108ab575b600080fd5b6103b36103ae36600461543c565b6108be565b6040516103c293929190615cc0565b60405180910390f35b6103de6103d936600461543c565b610a30565b6040516103c2959493929190615d4c565b6104026103fd36600461543c565b610c25565b6040516103c29190615c52565b610402610c44565b61040261042536600461543c565b610c4b565b610432610c74565b6040516103c29190615b14565b610447610c83565b6040516103c29190615bdd565b610402610cdb565b61040261046a36600461543c565b610ce0565b610432610cf2565b61040261048536600461543c565b610d01565b61049d6104983660046159b7565b610eb4565b005b6104026104ad36600461543c565b611239565b61040261124b565b610402611251565b61049d6104d036600461596d565b611257565b61049d6104e33660046158ca565b6112f8565b61049d6113fa565b61049d6104fe3660046154ac565b61145f565b61051661051136600461543c565b6115ca565b6040516103c2959493929190615d82565b6104326115f9565b610402611608565b61049d610545366004615653565b61160e565b61049d61055836600461592a565b6116e9565b610402611709565b61049d61057336600461543c565b61170f565b61040261058636600461543c565b6117ab565b6105936117da565b6040516103c29190615c21565b61049d6105ae36600461543c565b6117ea565b6105c66105c136600461543c565b611884565b6040516103c29190615b81565b610402611921565b61049d6105e93660046159e7565b611927565b6104026105fc36600461543c565b611992565b61049d61060f3660046159b7565b6119ec565b610402610622366004615474565b611a0c565b61049d611a29565b610432611a95565b610432611aa4565b610447611ab8565b610432611b0e565b610432611b1d565b61066a6106653660046155e2565b611b2c565b6040516103c2929190615c74565b6104326106863660046159b7565b611cc5565b610402611cef565b61049d6106a1366004615653565b611cf5565b610402611d1d565b6106c16106bc36600461543c565b611d9f565b6040516103c29190615b94565b6104026106dc3660046159b7565b611ee6565b610432611f3a565b6104026106f7366004615616565b611f49565b61040261070a3660046155e2565b611f79565b6105936120ba565b61049d610725366004615944565b6120c3565b61059361073836600461543c565b612287565b61040261229c565b61049d61075336600461543c565b6122a2565b61049d610766366004615548565b612336565b61043261242d565b61059361078136600461543c565b61243c565b610432612451565b610432612460565b61059361246f565b6104026107ac36600461543c565b61247f565b6104026107bf36600461543c565b612491565b6104026124c7565b61049d6124cd565b610432612559565b610402612568565b61049d6107f2366004615616565b61256e565b6106c161080536600461543c565b6126e3565b61081d61081836600461543c565b612837565b6040516103c293929190615ce4565b61049d61083a36600461592a565b612a08565b61040261084d366004615474565b612a98565b610402612ab5565b610402612abb565b61040261087036600461543c565b612ac1565b610432612b4d565b61049d61088b36600461543c565b612b5c565b610402612c0f565b6105936108a636600461543c565b612c15565b61049d6108b936600461592a565b612c2a565b6001600160a01b038116600090815260a260205260408120600401548190819080156109f4576001600160a01b038516600090815260a46020526040812054905b818110156109f1576001600160a01b038716600090815260a46020526040812080548390811061092b57fe5b9060005260206000209060040201600001549050806000141561094e57506109e9565b6001600160a01b038816600090815260a460205260408120805482916109be918690811061097857fe5b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050612cd7565b9350935050506109d78289612d6690919063ffffffff16565b97506109e38782612d66565b96505050505b6001016108ff565b50505b6001600160a01b038516600090815260a26020526040902060010154610a26908490610a209084612d66565b90612dbe565b9350509193909250565b6001600160a01b038116600090815260a36020526040812081908190819060609082805b8254811015610bfb5742838281548110610a6a57fe5b9060005260206000209060040201600101541115610bc95781610adf5782548190036001600160401b0381118015610aa157600080fd5b50604051908082528060200260200182016040528015610adb57816020015b610ac86152df565b815260200190600190039081610ac05790505b5093505b828181548110610aeb57fe5b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050848381518110610b3857fe5b60200260200101819052508180600101925050610b72838281548110610b5a57fe5b60009182526020909120600490910201548790612d66565b9550610bc2610bbb848381548110610b8657fe5b906000526020600020906004020160020154858481548110610ba457fe5b600091825260209091206004909102015490612e00565b8690612d66565b9450610bf3565b610bf0838281548110610bd857fe5b60009182526020909120600490910201548890612d66565b96505b600101610a54565b5050506001600160a01b038616600090815260a26020526040902060020154945091939590929450565b6000610c3c82610c34846126e3565b600080612e59565b90505b919050565b620186a081565b6001600160a01b038116600090815260a36020526040812054610c3c90839083906001906134a5565b60b4546001600160a01b031681565b606060a8805480602002602001604051908101604052809291908181526020018280548015610cd157602002820191906000526020600020905b815481526020019060010190808311610cbd575b5050505050905090565b600181565b60b66020526000908152604090205481565b609d546001600160a01b031681565b60a1546000906001600160a01b03163314610d1b57600080fd5b6001600160a01b038216600090815260a460205260408120805490915b81811015610e555742838281548110610d4d57fe5b9060005260206000209060040201600101541115610e4257610d8c838281548110610d7457fe5b60009182526020909120600490910201548590612d66565b835490945083906000198101908110610da157fe5b9060005260206000209060040201838281548110610dbb57fe5b90600052602060002090600402016000820154816000015560018201548160010155600282015481600201556003820154816003015590505082805480610dfe57fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155610e3b908390612dbe565b9150610e50565b610e4d816001612d66565b90505b610d38565b5060a154609f54610e73916001600160a01b039182169116856136ba565b6001600160a01b038416600090815260a2602052604090206004810154610e9a9085612dbe565b60048201558054610eab9085612dbe565b90555050919050565b3381610ebf57600080fd5b6001600160a01b038116600090815260a26020526040812060018101548291908511610efe576001810154610ef49086612dbe565b6001820155611210565b6000610f17826001015487612dbe90919063ffffffff16565b90508082600401541015610f2a57600080fd5b6000600183018190556004830154905b6001600160a01b038716600090815260a460205260408120805483908110610f5e57fe5b90600052602060002090600402016000015490508060001415610f8157506110d0565b6001600160a01b038816600090815260a4602052604081208054610faa91908590811061097857fe5b50509150506000610fdd610fca83620186a0612dbe90919063ffffffff16565b610fd788620186a0612e00565b9061370c565b905082811061102057508161100d611006620186a0610fd7610fff8287612dbe565b8790612e00565b8790612dbe565b95508561101b576001909301925b611064565b61102a8382612dbe565b6001600160a01b038b16600090815260a46020526040902080548690811061104e57fe5b6000918252602082206004909102019190915595505b61106e8582612dbe565b945061108b611084620186a0610fd78486612e00565b8a90612d66565b98506110b36110ac620186a0610fd76098548d612e0090919063ffffffff16565b8990612d66565b9750856110c2575050506110d8565b846110cc57600080fd5b5050505b600101610f3a565b801561120857805b6001600160a01b038816600090815260a460205260409020548110156111a1576001600160a01b038816600090815260a46020526040902080548290811061112457fe5b906000526020600020906004020160a460008a6001600160a01b03166001600160a01b031681526020019081526020016000208383038154811061116457fe5b60009182526020909120825460049092020190815560018083015481830155600280840154908301556003928301549290910191909155016110e0565b5060005b81811015611206576001600160a01b038816600090815260a4602052604090208054806111ce57fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155016111a5565b505b506004830155505b8054611222908490610a209088612dbe565b815561123284868585600061374b565b5050505050565b60b16020526000908152604090205481565b60b75481565b61fde881565b61125f61389f565b6001600160a01b0316611270611f3a565b6001600160a01b0316146112b9576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b609e80546001600160a01b039485166001600160a01b031991821617909155609d80549385169382169390931790925560ae8054919093169116179055565b61130061389f565b6001600160a01b0316611311611f3a565b6001600160a01b03161461135a576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b805182511461136857600080fd5b61137460a76000615307565b61138060a86000615307565b60005b82518110156113f55760a783828151811061139a57fe5b60209081029190910181015182546001810184556000938452919092200155815160a8908390839081106113ca57fe5b6020908102919091018101518254600181810185556000948552929093209092019190915501611383565b505050565b61145d60a980548060200260200160405190810160405280929190818152602001828054801561145357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611435575b5050505050611cf5565b565b600054610100900460ff168061147857506114786138a3565b80611486575060005460ff16155b6114c15760405162461bcd60e51b815260040180806020018281038252602e815260200180615ea2602e913960400191505060405180910390fd5b600054610100900460ff161580156114ec576000805460ff1961ff0019909116610100171660011790555b6114f46138a9565b609f80546001600160a01b03808e166001600160a01b0319928316811790935560a180548e831690841617905560ad80548d8316908416179055609780548b831690841617905560b28054918c1661010002610100600160a81b031990921691909117905560a9805460018101909155600080516020615e4183398151915201805490911682179055600090815260aa60205260409020426002909101556099869055609a859055609b8490556098839055609c82905580156115bd576000805461ff00191690555b5050505050505050505050565b60aa60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b609f546001600160a01b031681565b609a5481565b61161661389f565b6001600160a01b0316611627611f3a565b6001600160a01b031614611670576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60b25460ff161561168057600080fd5b60005b81518110156116d857600160af600084848151811061169e57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611683565b505060b2805460ff19166001179055565b33600090815260b560205260409020805460ff1916911515919091179055565b60b85481565b61171761389f565b6001600160a01b0316611728611f3a565b6001600160a01b031614611771576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60b480546001600160a01b039092166001600160a01b031990921682179055600090815260af60205260409020805460ff19166001179055565b6001600160a01b038116600090815260aa60205260408120544281116117d157806117d3565b425b9392505050565b60b454600160a81b900460ff1681565b6117f261389f565b6001600160a01b0316611803611f3a565b6001600160a01b03161461184c576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60a0546001600160a01b03161561186257600080fd5b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260a360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156119165783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815260200190600101906118bc565b505050509050919050565b609c5481565b6001600160a01b038216600090815260b1602052604090205415801561196357506001600160a01b038216600090815260a36020526040902054155b15611985576001600160a01b038216600090815260b160205260409020600190555b6113f583838360006138f7565b609f5460a0546000916001600160a01b03918216911614156119cd57506001600160a01b038116600090815260a26020526040902054610c3f565b506001600160a01b0316600090815260a2602052604090206002015490565b60a75481106119fa57600080fd5b33600090815260b16020526040902055565b60ab60209081526000928352604080842090915290825290205481565b611a3161389f565b6001600160a01b0316611a42611f3a565b6001600160a01b031614611a8b576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b61145d6000613f5d565b60a0546001600160a01b031681565b60b25461010090046001600160a01b031681565b606060a7805480602002602001604051908101604052809291908181526020018280548015610cd15760200282019190600052602060002090815481526020019060010190808311610cbd575050505050905090565b60ae546001600160a01b031681565b60ad546001600160a01b031681565b60b4546000908190600160a01b900460ff16611b4757600080fd5b60ba546001600160a01b03163314611b5e57600080fd5b8215611b6d57611b6d84613faf565b6000611b7885610a30565b5050509150508060001415611b94576000809250925050611cbe565b6001600160a01b038516600090815260b0602052604090205460ff16611bb957600191505b83611c07576001600160a01b038516600090815260b0602052604090205460ff1615611c0157611bfe611bf786611bef88611d9f565b876001612e59565b600061409f565b92505b50611cbe565b6001600160a01b038516600090815260b0602052604090205460ff1615611c3457611c3185614322565b92505b6001600160a01b038516600090815260a36020526040812054611c5b9187916001906134a5565b50846001600160a01b03167fd78a704ae176672746f3b4ce4b50e57ba63395b8473863d0f761b13d28971ecd8285604051611c97929190615cd6565b60405180910390a260ba54609f54611cbc916001600160a01b0391821691168561452f565b505b9250929050565b60a98181548110611cd557600080fd5b6000918252602090912001546001600160a01b0316905081565b60b95481565b611cfe33613faf565b611d083382614642565b5033600090815260b360205260409020429055565b60bc546040805163808d762760e01b815290516000926001600160a01b03169163808d7627916004808301926020929190829003018186803b158015611d6257600080fd5b505afa158015611d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9a91906159cf565b905090565b60606000611dac836126e3565b6001600160a01b038416600090815260a36020908152604080832080548251818502810185019093528083529495509293909291849084015b82821015611e3f578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611de5565b505060bc546001600160a01b03888116600090815260b36020526040908190205490516368082a4760e11b815295965091169363d010548e9350611e8a925086918691600401615ba7565b60006040518083038186803b158015611ea257600080fd5b505afa158015611eb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ede9190810190615777565b949350505050565b600081611ef257600080fd5b611efd336001611f79565b90506000611f25611f1e6064610fd760b95487612e0090919063ffffffff16565b8490612dbe565b905080821015611f3457600080fd5b50919050565b6065546001600160a01b031690565b600082611f6c576001600160a01b038416600090815260a3602052604090205492505b611ede84836001866134a5565b60006001600160a01b03831633148015908190611faf57506001600160a01b038416600090815260b5602052604090205460ff16155b15611fc9578215611fbf57600080fd5b60009150506120b4565b8215611fd857611fd884613faf565b6000611ff3611bf786611fea886126e3565b60006001612e59565b9050818015612033575060b75481108061203357506001600160a01b038516600090815260b660205260409020546201518090612031904290612dbe565b105b15612043576000925050506120b4565b6000806120518785886147be565b9150915083156120ab57612065818761409f565b945085156120a65760ba54609f5461208a916001600160a01b0391821691168761452f565b6001600160a01b038716600090815260b6602052604090204290555b6120af565b8194505b505050505b92915050565b60b25460ff1681565b334282116120d057600080fd5b6000806000806120e08587614910565b6001600160a01b038916600090815260a46020526040902054939750919550935091508110612113575050505050612283565b600181015b6001600160a01b038616600090815260a460205260409020548110156121da576001600160a01b038616600090815260a46020526040902080548290811061215c57fe5b906000526020600020906004020160a46000886001600160a01b03166001600160a01b03168152602001908152602001600020600183038154811061219d57fe5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830154929091019190915501612118565b506001600160a01b038516600090815260a4602052604090208054806121fc57fe5b600082815260208082206004600019909401938402018281556001810183905560028101839055600301829055919092556001600160a01b038716825260a29052604090208054612253908590610a209088612dbe565b8155600481015461226a908590610a209088612dbe565b600482015561227c868686868c61374b565b5050505050505b5050565b60b06020526000908152604090205460ff1681565b6161a881565b33600090815260af602052604090205460ff166122be57600080fd5b6001600160a01b038116600090815260aa6020526040902060020154156122e457600080fd5b60a9805460018101909155600080516020615e418339815191520180546001600160a01b039092166001600160a01b031990921682179055600090815260aa6020526040902042600282018190559055565b61233e61389f565b6001600160a01b031661234f611f3a565b6001600160a01b031614612398576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60bd80546001600160a01b03998a166001600160a01b03199182161790915560bb80549a8a169a82169a909a1790995560ba8054978916978a169790971790965560bc805495909716949097169390931790945560b79190915560b89390935560b95560b48054911515600160a81b0260ff60a81b19931515600160a01b0260ff60a01b199093169290921792909216179055565b60bd546001600160a01b031681565b60b56020526000908152604090205460ff1681565b609e546001600160a01b031681565b60ba546001600160a01b031681565b60b454600160a01b900460ff1681565b60b36020526000908152604090205481565b6099546001600160a01b038216600090815260aa60205260408120600101549091610c3c9164e8d4a5100091610fd79190612e00565b60985481565b33600081815260a3602052604081205490916124ed9160019081906134a5565b33600081815260b1602052604081205492935061250c928492916138f7565b33600081815260b16020526040908190205490517f4c46641520b3fedde433247f82a421df0d7a83ce24df3f229e9df96f386c8b0c9161254e91859190615cd6565b60405180910390a250565b60bb546001600160a01b031681565b60a55481565b33600090815260af602052604090205460ff1661258a57600080fd5b81612594576113f5565b61259d83613faf565b6001600160a01b0383163014156125c957609f546125c4906001600160a01b0316836149c6565b6113f5565b6001600160a01b038316600090815260a26020526040902080546125ed9084612d66565b815581156126965760048101546126049084612d66565b60048201556001600160a01b038416600090815260a460205260408120609c54909190612632904290612d66565b6040805160808101825287815260208082019384526001928201838152609c546060840190815287548086018955600098895292909720925160049092029092019081559251918301919091555160028201559151600390920191909155506126ab565b60018101546126a59084612d66565b60018201555b836001600160a01b0316600080516020615ef08339815191528460006040516126d5929190615c74565b60405180910390a250505050565b60a9546060906001600160401b03811180156126fe57600080fd5b5060405190808252806020026020018201604052801561273857816020015b612725615325565b81526020019060019003908161271d5790505b50905060005b8151811015611f345760a9818154811061275457fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061277e57fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061281564e8d4a51000610fd7858585815181106127bb57fe5b60200260200101516000015160a26000896001600160a01b03166001600160a01b03168152602001908152602001600020600301546128108888815181106127ff57fe5b602002602001015160000151612ac1565b614a8e565b82828151811061282157fe5b602090810291909101810151015260010161273e565b6001600160a01b038116600090815260a2602090815260408083206001015460a4909252822060609083805b82548110156129fe574283828154811061287957fe5b90600052602060002090600402016001015411156129cc57816128ee5782548190036001600160401b03811180156128b057600080fd5b506040519080825280602002602001820160405280156128ea57816020015b6128d761533c565b8152602001906001900390816128cf5790505b5093505b60006129178885848154811061290057fe5b906000526020600020906004020160010154614910565b505091505083828154811061292857fe5b90600052602060002090600402016000015485848151811061294657fe5b6020026020010151600001818152505083828154811061296257fe5b90600052602060002090600402016001015485848151811061298057fe5b602002602001015160200181815250508085848151811061299d57fe5b6020026020010151604001818152505082806001019350506129c4848381548110610bd857fe5b9650506129f6565b6129f38382815481106129db57fe5b60009182526020909120600490910201548690612d66565b94505b600101612863565b5050509193909250565b3360008080612a16846108be565b6001600160a01b038716600090815260a4602052604081209396509194509250612a40919061535d565b6001600160a01b038416600090815260a260205260409020600481015460018201548254612a739291610a209190612dbe565b81556000600182018190556004820155612a90858585858a61374b565b505050505050565b60ac60209081526000928352604080842090915290825290205481565b60a65481565b609b5481565b6001600160a01b038116600090815260aa602052604090206003015460a65415610c3f576001600160a01b038216600090815260aa602052604081206001810154600290910154612b209190612b1a90610a20876117ab565b90612e00565b90506117d3612b4660a654610fd7670de0b6b3a764000085612e0090919063ffffffff16565b8390612d66565b60bc546001600160a01b031681565b612b6461389f565b6001600160a01b0316612b75611f3a565b6001600160a01b031614612bbe576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b6001600160a01b038116612c035760405162461bcd60e51b8152600401808060200182810382526026815260200180615dfb6026913960400191505060405180910390fd5b612c0c81613f5d565b50565b60995481565b60af6020526000908152604090205460ff1681565b60b4546001600160a01b031615612cb85760b45433600081815260b0602052604090819020549051637a7acb8960e01b81526001600160a01b0390931692637a7acb8992612c8592909160ff90911615908690600401615b28565b600060405180830381600087803b158015612c9f57600080fd5b505af1158015612cb3573d6000803e3d6000fd5b505050505b33600090815260b060205260409020805460ff19169115919091179055565b6000806000804285602001511115612d1b57612d186161a8612d12609c54610fd761fde8612b1a428c60200151612dbe90919063ffffffff16565b90612d66565b92505b8451612d3090620186a090610fd79086612e00565b9150612d4e620186a0610fd760985485612e0090919063ffffffff16565b8551909150612d5d9083612dbe565b93509193509193565b6000828201838110156117d3576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b60006117d383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614afe565b600082612e0f575060006120b4565b82820282848281612e1c57fe5b04146117d35760405162461bcd60e51b8152600401808060200182810382526021815260200180615e616021913960400191505060405180910390fd5b6000805b845181101561349c576000858281518110612e7457fe5b60200260200101516000015190506000868381518110612e9057fe5b60200260200101516020015190508060001480612f2657506040516370a0823160e01b81526001600160a01b038316906370a0823190612ed4903090600401615b14565b60206040518083038186803b158015612eec57600080fd5b505afa158015612f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2491906159cf565b155b15612f32575050613494565b60bc54604051634e89a71160e01b81526000916001600160a01b031690634e89a71190612f63908690600401615b14565b60206040518083038186803b158015612f7b57600080fd5b505afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190615458565b905086156131e4576001600160a01b03808a16600090815260ac60209081526040808320938716835292905290812054612ff29064e8d4a5100061370c565b9050861561306c578281101561300757600080fd5b6130456130198464e8d4a51000612e00565b6001600160a01b03808d16600090815260ac60209081526040808320938a168352929052205490612dbe565b6001600160a01b03808c16600090815260ac60209081526040808320938916835292905220555b6001600160a01b038416600090815260aa60205260409020600401546130929084612dbe565b6001600160a01b03808616600081815260aa602052604090819020600401939093559151908c1690600080516020615e21833981519152906130d5908790615c52565b60405180910390a360bc5460408051630261bf8b60e01b815290516000926001600160a01b031691630261bf8b916004808301926020929190829003018186803b15801561312257600080fd5b505afa158015613136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315a9190615458565b604051631a4ca37b60e21b81529091506001600160a01b038216906369328dec9061318d90869088903090600401615b4b565b602060405180830381600087803b1580156131a757600080fd5b505af11580156131bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131df91906159cf565b935050505b60bb546001600160a01b038281169116141561320b576132048583612d66565b9450613490565b86156133705760bd5461322b906001600160a01b0383811691168461452f565b60bd5460bc5460405163162d4f6b60e21b81526000926001600160a01b03908116926338ed1739928792869216906358b53dac9061326d908990600401615b14565b60006040518083038186803b15801561328557600080fd5b505afa158015613299573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132c191908101906156eb565b3042600a016040518663ffffffff1660e01b81526004016132e6959493929190615c84565b600060405180830381600087803b15801561330057600080fd5b505af1158015613314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261333c9190810190615847565b90506133688160018351038151811061335157fe5b602002602001015187612d6690919063ffffffff16565b955050613490565b60bd5460bc5460405163162d4f6b60e21b81526000926001600160a01b039081169263d06ca61f928792909116906358b53dac906133b2908890600401615b14565b60006040518083038186803b1580156133ca57600080fd5b505afa1580156133de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261340691908101906156eb565b6040518363ffffffff1660e01b8152600401613423929190615c5b565b60006040518083038186803b15801561343b57600080fd5b505afa15801561344f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134779190810190615847565b905061348c8160018351038151811061335157fe5b9550505b5050505b600101612e5d565b50949350505050565b609e54604051630cccd82b60e41b81526000916001600160a01b03169063cccd82b0906134d6908890600401615b14565b600060405180830381600087803b1580156134f057600080fd5b505af1158015613504573d6000803e3d6000fd5b5050505061351185613faf565b6001600160a01b038516600090815260a2602052604081206002810154600382015461353f91899187614b95565b600283015491945092506135539084612dbe565b600282015560038101546135679083612dbe565b600382015580546135789084612dbe565b815560a5546135879084612dbe565b60a55560a6546135979083612dbe565b60a655609e5460405163075b9bf960e31b81526001600160a01b0390911690633adcdfc8906135ca908a90600401615b14565b600060405180830381600087803b1580156135e457600080fd5b505af11580156135f8573d6000803e3d6000fd5b505050508515801561362357506001600160a01b038716600090815260b0602052604090205460ff16155b15613655576001600160a01b038716600090815260b16020526040902054613650908490899060016138f7565b6136b0565b84156136b05760a054613672906001600160a01b031688856136ba565b60a0546040516001600160a01b0391821691891690600080516020615ed0833981519152906136a79087906000908190615cc0565b60405180910390a35b5050949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526113f5908490614d87565b60006117d383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614f3e565b6001600160a01b038516331461376057600080fd5b61376985613faf565b609f54613780906001600160a01b031686866136ba565b82156137d65781156137a95760ae54609f546137a9916001600160a01b039182169116846136ba565b60ad546137d6906001600160a01b03166137c38585612dbe565b609f546001600160a01b031691906136ba565b801561385c576138408560a980548060200260200160405190810160405280929190818152602001828054801561383657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613818575b5050505050614642565b6001600160a01b038516600090815260b3602052604090204290555b609f546040516001600160a01b0391821691871690600080516020615ed08339815191529061389090889088908890615cc0565b60405180910390a35050505050565b3390565b303b1590565b600054610100900460ff166138ef5760405162461bcd60e51b815260040180806020018281038252602b815260200180615f10602b913960400191505060405180910390fd5b61145d614fa3565b8361390157613f57565b60b4546001600160a01b0316156139a45760b460009054906101000a90046001600160a01b03166001600160a01b031663d9cdd5136040518163ffffffff1660e01b815260040160206040518083038186803b15801561396057600080fd5b505afa158015613974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399891906159cf565b8410156139a457600080fd5b60a75482106139b257600080fd5b609e54604051630cccd82b60e41b81526001600160a01b039091169063cccd82b0906139e2908690600401615b14565b600060405180830381600087803b1580156139fc57600080fd5b505af1158015613a10573d6000803e3d6000fd5b50505050613a1d83613faf565b836001600160a01b038416331480613a3f575060a1546001600160a01b031633145b15613acc576001600160a01b038416600090815260b0602052604081205460ff16613a9f576001600160a01b038516600090815260a36020526040812054613a8c918791600191906134a5565b9050613a988682612d66565b9550613aca565b6001600160a01b038516600090815260a36020526040902054613ac890869060019081906134a5565b505b505b6001600160a01b038416600090815260a2602052604090208054613af09087612d66565b81556002810154613b019087612d66565b600282015560a554613b139087612d66565b60a581905550613b51613b4660a88681548110613b2c57fe5b906000526020600020015488612e0090919063ffffffff16565b600383015490612d66565b8160030181905550613b75613b6c60a88681548110613b2c57fe5b60a65490612d66565b60a681905550613bfc856040518060800160405280898152602001613bba60a78981548110613ba057fe5b906000526020600020015442612d6690919063ffffffff16565b815260200160a88881548110613bcc57fe5b9060005260206000200154815260200160a78881548110613be957fe5b9060005260206000200154815250614ff9565b60b254604051632f5965e160e21b81526101009091046001600160a01b03169063bd65978490613c30908890600401615b14565b600060405180830381600087803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b5050505082613c7f5760a054613c7f906001600160a01b0316333085615149565b609e5460405163075b9bf960e31b81526001600160a01b0390911690633adcdfc890613caf908890600401615b14565b600060405180830381600087803b158015613cc957600080fd5b505af1158015613cdd573d6000803e3d6000fd5b5050609f5460a054600093506001600160a01b03908116911614159050613d8b57609760009054906101000a90046001600160a01b03166001600160a01b0316636d2ed1846040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4c57600080fd5b505afa158015613d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d8491906159cf565b9050613e14565b609760009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b815260040160206040518083038186803b158015613dd957600080fd5b505afa158015613ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1191906159cf565b90505b60a0546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015613e5957600080fd5b505afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e919190615a1e565b90506000613ec68260ff16600a0a610fd76305f5e100610fd7670de0b6b3a7640000612b1a8f8a612e0090919063ffffffff16565b9050876001600160a01b0316600080516020615ef08339815191528a6001604051613ef2929190615c74565b60405180910390a2609f5460a0546040516001600160a01b03808c16937f7d4e11fccd951846faadec9c326a0bbe77573db0a5a27c0580d02311d2b24fc593613f4993879391821692909116919091141590615c74565b60405180910390a250505050505b50505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116600090815260a2602052604081206003015460a95490915b81811015613f5757600060a98281548110613fe857fe5b60009182526020822001546001600160a01b0316915061400782612ac1565b6001600160a01b038316600090815260aa6020526040902060038101829055909150614032836117ab565b60028201556001600160a01b03871630146140945761405387848885614a8e565b6001600160a01b03808916600081815260ac602090815260408083209489168084529482528083209590955591815260ab8252838120928152919052208290555b505050600101613fd1565b600082156120b45781156141fc5760bd5460bb546140ca916001600160a01b0391821691168561452f565b60bd5460bc546040805163c1c3eae160e01b815290516000936001600160a01b03908116936338ed173993899387939092169163c1c3eae1916004808201928692909190829003018186803b15801561412257600080fd5b505afa158015614136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261415e91908101906156eb565b3042610258016040518663ffffffff1660e01b8152600401614184959493929190615c84565b600060405180830381600087803b15801561419e57600080fd5b505af11580156141b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141da9190810190615847565b9050806001825103815181106141ec57fe5b60200260200101519150506120b4565b60bd5460bc546040805163c1c3eae160e01b815290516000936001600160a01b039081169363d06ca61f938993919092169163c1c3eae19160048083019289929190829003018186803b15801561425257600080fd5b505afa158015614266573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261428e91908101906156eb565b6040518363ffffffff1660e01b81526004016142ab929190615c5b565b60006040518083038186803b1580156142c357600080fd5b505afa1580156142d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142ff9190810190615847565b90508060018251038151811061431157fe5b602002602001015191505092915050565b60b454600090600160a01b900460ff1661433b57600080fd5b600061434683611d9f565b9050600081516001600160401b038111801561436157600080fd5b5060405190808252806020026020018201604052801561439b57816020015b614388615325565b8152602001906001900390816143805790505b50905060005b82518110156145165760008382815181106143b857fe5b602002602001015160000151905060008483815181106143d457fe5b6020908102919091018101518101516001600160a01b03808a16600090815260ac8452604080822092871682529190935282205490925061441a9064e8d4a5100061370c565b9050818111156144355761442e8183612dbe565b905061443a565b905060005b6144498164e8d4a51000612e00565b6001600160a01b03808a16600090815260ac60209081526040808320938816835292905220558451839086908690811061447f57fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818585815181106144b057fe5b60200260200101516020018181525050826001600160a01b0316886001600160a01b03167fda6ad822e2440e8a479e05d09e669a879d9bb871c42a1c89753817858dd1c816846040516145039190615c52565b60405180910390a35050506001016143a1565b50611ede614528858360016000612e59565b600161409f565b8015806145b5575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561458757600080fd5b505afa15801561459b573d6000803e3d6000fd5b505050506040513d60208110156145b157600080fd5b5051155b6145f05760405162461bcd60e51b8152600401808060200182810382526036815260200180615f656036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526113f5908490614d87565b609d546040516308c51c6560e01b81526001600160a01b03909116906308c51c6590614672908490600401615b6e565b600060405180830381600087803b15801561468c57600080fd5b505af11580156146a0573d6000803e3d6000fd5b505082519150600090505b81811015613f575760008382815181106146c157fe5b602002602001015190506146d4816151a3565b6001600160a01b03808616600090815260ac6020908152604080832093851683529290529081205461470b9064e8d4a5100061370c565b905080156147b4576001600160a01b03808716600090815260ac60209081526040808320938616835292815282822082905560aa905220600401546147509082612dbe565b6001600160a01b038316600081815260aa602052604090206004019190915561477a9087836136ba565b816001600160a01b0316866001600160a01b0316600080516020615e21833981519152836040516147ab9190615c52565b60405180910390a35b50506001016146ab565b6000806147d6856147ce876126e3565b856001612e59565b91508315614807576147f86064610fd760b85485612e0090919063ffffffff16565b90506148048282612dbe565b91505b82156149085760a15460bb5461482a916001600160a01b0391821691168461452f565b60a15460405163d478088560e01b81526001600160a01b039091169063d47808859061486190600090869082908b90600401615c2c565b602060405180830381600087803b15801561487b57600080fd5b505af115801561488f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148b391906159cf565b506001600160a01b038516600081815260b3602052604090819020429055517fc16de066392da7e40ceccb739c331fc48a2e76bf147449613c48023d960eec32906148ff908590615c52565b60405180910390a25b935093915050565b60008060008060005b6001600160a01b038716600090815260a460205260409020548110156149bc576001600160a01b038716600090815260a46020526040902080548791908390811061496057fe5b90600052602060002090600402016001015414156149b4576001600160a01b038716600090815260a46020526040902080546149a191908390811061097857fe5b92975095509093509091508190506149bc565b600101614919565b5092959194509250565b6001600160a01b038216600090815260aa6020526040902080544210614a06576099546149fc90610fd78464e8d4a51000612e00565b6001820155614a5e565b8054600090614a159042612dbe565b90506000614a3964e8d4a51000610fd7856001015485612e0090919063ffffffff16565b609954909150614a5690610fd764e8d4a51000612b1a8886612d66565b600184015550505b4260028201819055609954614a739190612d66565b81556004810154614a849083612d66565b6004909101555050565b6001600160a01b03808516600081815260ac602090815260408083209488168084529482528083205493835260ab825280832094835293905291822054909190614ad9908490612dbe565b9050614af4612b46670de0b6b3a7640000610fd78785612e00565b9695505050505050565b60008184841115614b8d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b52578181015183820152602001614b3a565b50505050905090810190601f168015614b7f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038416600090815260a360205260408120805482919015614d7d578054600090851015614bc95784614bcc565b81545b905060005b81811015614ce65742838281548110614be657fe5b90600052602060002090600402016001015411614cdd57614c0c8382815481106129db57fe5b9450614c27614c20848381548110610b8657fe5b8590612d66565b835490945083906000198101908110614c3c57fe5b9060005260206000209060040201838281548110614c5657fe5b90600052602060002090600402016000820154816000015560018201548160010155600282015481600201556003820154816003015590505082805480614c9957fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155614cd6908390612dbe565b9150614ce1565b6001015b614bd1565b508154614d7b576001600160a01b038816600090815260a360205260408120889550879450614d149161535d565b60b25460405163257f9abf60e01b81526101009091046001600160a01b03169063257f9abf90614d48908b90600401615b14565b600060405180830381600087803b158015614d6257600080fd5b505af1158015614d76573d6000803e3d6000fd5b505050505b505b5094509492505050565b614d99826001600160a01b03166152a6565b614dea576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310614e275780518252601f199092019160209182019101614e08565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614e89576040519150601f19603f3d011682016040523d82523d6000602084013e614e8e565b606091505b509150915081614ee5576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115613f5757808060200190516020811015614f0157600080fd5b5051613f575760405162461bcd60e51b815260040180806020018281038252602a815260200180615f3b602a913960400191505060405180910390fd5b60008183614f8d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614b52578181015183820152602001614b3a565b506000838581614f9957fe5b0495945050505050565b600054610100900460ff16614fe95760405162461bcd60e51b815260040180806020018281038252602b815260200180615f10602b913960400191505060405180910390fd5b61145d614ff461389f565b613f5d565b6001600160a01b038216600090815260a360205260408120805490915b81811080156150455750836020015183828154811061503157fe5b906000526020600020906004020160010154105b1561505257600101615016565b8254600181810185556000858152602090819020875160049094020192835586015190820155604085015160028201556060850151600390910155815b818111156150fb578360018203815481106150a657fe5b90600052602060002090600402018482815481106150c057fe5b60009182526020909120825460049092020190815560018083015490820155600280830154908201556003918201549101556000190161508f565b508383828154811061510957fe5b9060005260206000209060040201600082015181600001556020820151816001015560408201518160020155606082015181600301559050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613f57908590614d87565b6001600160a01b0381166151b657600080fd5b609f546001600160a01b03828116911614156151d157612c0c565b6001600160a01b038116600090815260aa602052604090208054806151f557600080fd5b609a5460995461520791429103612d66565b8110156113f55760006152948360040154856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016152449190615b14565b60206040518083038186803b15801561525c57600080fd5b505afa158015615270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906159cf565b90508015613f5757613f5784826149c6565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611ede575050151592915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190612c0c919061537e565b604080518082019091526000808252602082015290565b60405180606001604052806000815260200160008152602001600081525090565b5080546000825560040290600052602060002090810190612c0c9190615397565b5b80821115615393576000815560010161537f565b5090565b5b8082111561539357600080825560018201819055600282018190556003820155600401615398565b600082601f8301126153d0578081fd5b813560206153e56153e083615dc8565b615da5565b8281528181019085830183850287018401881015615401578586fd5b855b8581101561541f57813584529284019290840190600101615403565b5090979650505050505050565b80358015158114610c3f57600080fd5b60006020828403121561544d578081fd5b81356117d381615de5565b600060208284031215615469578081fd5b81516117d381615de5565b60008060408385031215615486578081fd5b823561549181615de5565b915060208301356154a181615de5565b809150509250929050565b6000806000806000806000806000806101408b8d0312156154cb578586fd5b8a356154d681615de5565b995060208b01356154e681615de5565b985060408b01356154f681615de5565b975060608b013561550681615de5565b965060808b013561551681615de5565b999c989b50969995989760a0870135975060c08701359660e08101359650610100810135955061012001359350915050565b60008060008060008060008060006101208a8c031215615566578283fd5b893561557181615de5565b985060208a013561558181615de5565b975060408a013561559181615de5565b965060608a01356155a181615de5565b95506155af60808b0161542c565b94506155bd60a08b0161542c565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b600080604083850312156155f4578182fd5b82356155ff81615de5565b915061560d6020840161542c565b90509250929050565b60008060006060848603121561562a578081fd5b833561563581615de5565b92506020840135915061564a6040850161542c565b90509250925092565b60006020808385031215615665578182fd5b82356001600160401b0381111561567a578283fd5b8301601f8101851361568a578283fd5b80356156986153e082615dc8565b81815283810190838501858402850186018910156156b4578687fd5b8694505b838510156156df5780356156cb81615de5565b8352600194909401939185019185016156b8565b50979650505050505050565b600060208083850312156156fd578182fd5b82516001600160401b03811115615712578283fd5b8301601f81018513615722578283fd5b80516157306153e082615dc8565b818152838101908385018584028501860189101561574c578687fd5b8694505b838510156156df57805161576381615de5565b835260019490940193918501918501615750565b60006020808385031215615789578182fd5b82516001600160401b038082111561579f578384fd5b818501915085601f8301126157b2578384fd5b81516157c06153e082615dc8565b818152848101908486016040808502870188018b10156157de578889fd5b8896505b848710156158385780828c0312156157f8578889fd5b8051818101818110888211171561580b57fe5b8252825161581881615de5565b8152828901518982015284526001969096019592870192908101906157e2565b50909998505050505050505050565b60006020808385031215615859578182fd5b82516001600160401b0381111561586e578283fd5b8301601f8101851361587e578283fd5b805161588c6153e082615dc8565b81815283810190838501858402850186018910156158a8578687fd5b8694505b838510156156df5780518352600194909401939185019185016158ac565b600080604083850312156158dc578182fd5b82356001600160401b03808211156158f2578384fd5b6158fe868387016153c0565b93506020850135915080821115615913578283fd5b50615920858286016153c0565b9150509250929050565b60006020828403121561593b578081fd5b6117d38261542c565b60008060408385031215615956578182fd5b61595f8361542c565b946020939093013593505050565b600080600060608486031215615981578081fd5b833561598c81615de5565b9250602084013561599c81615de5565b915060408401356159ac81615de5565b809150509250925092565b6000602082840312156159c8578081fd5b5035919050565b6000602082840312156159e0578081fd5b5051919050565b6000806000606084860312156159fb578081fd5b833592506020840135615a0d81615de5565b929592945050506040919091013590565b600060208284031215615a2f578081fd5b815160ff811681146117d3578182fd5b6000815180845260208085019450808401835b83811015615a775781516001600160a01b031687529582019590820190600101615a52565b509495945050505050565b6000815180845260208085019450808401835b83811015615a77578151805188528381015184890152604080820151908901526060908101519088015260809096019590820190600101615a95565b6000815180845260208085019450808401835b83811015615a7757815180516001600160a01b031688528301518388015260409096019590820190600101615ae4565b6001600160a01b0391909116815260200190565b6001600160a01b0393909316835290151560208301521515604082015260600190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6000602082526117d36020830184615a3f565b6000602082526117d36020830184615a82565b6000602082526117d36020830184615ad1565b600060608252615bba6060830186615ad1565b8281036020840152615bcc8186615a82565b915050826040830152949350505050565b6020808252825182820181905260009190848201906040850190845b81811015615c1557835183529284019291840191600101615bf9565b50909695505050505050565b901515815260200190565b9315158452602084019290925260408301526001600160a01b0316606082015260800190565b90815260200190565b600083825260406020830152611ede6040830184615a3f565b9182521515602082015260400190565b600086825285602083015260a06040830152615ca360a0830186615a3f565b6001600160a01b0394909416606083015250608001529392505050565b9283526020830191909152604082015260600190565b918252602082015260400190565b6000606080830186845260208681860152604083818701528287518085526080880191508389019450865b81811015615d3c578551805184528581015186850152840151848401529484019491860191600101615d0f565b50909a9950505050505050505050565b600086825285602083015284604083015283606083015260a06080830152615d7760a0830184615a82565b979650505050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b6040518181016001600160401b0381118282101715615dc057fe5b604052919050565b60006001600160401b03821115615ddb57fe5b5060209081020190565b6001600160a01b0381168114612c0c57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792edc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e0536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65643cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc37d4053e34fde482e96f6bcd424dfa31342cbd5fe184d497fb3c8bb4b4b97580496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d680669a11a1074dd1e3e2fad2345e357bd975d9eb6d1fbea9a928bc270956c164736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061039b5760003560e01c806302b62938146103a05780630483a7f6146103cb57806307faed78146103ef57806309eba3431461040f5780630c63469e146104175780630e9279a01461042a5780630f63107f1461043f5780631285deee1461045457806317053a7e1461045c57806321cc01c91461046f5780632843b019146104775780632e1a7d4d1461048a5780632e88caa11461049f5780633239d438146104b257806332c991b5146104ba578063363bf964146104c25780633b26664f146104d557806345b35f56146104e857806346e73271146104f057806348e5d9f8146105035780634c6f71311461052757806354758bad1461052f578063547d009614610537578063556a795a1461054a57806356423a071461055d5780635a7ae47214610565578063638634ee1461057857806369f5f0fd1461058b5780636a678a9c146105a05780636bd3b87c146105b35780636e6941c5146105d35780636e9c931c146105db5780636eacd398146105ee5780636fa75e6d146106015780637035ab9814610614578063715018a61461062757806372f702f31461062f578063757c4d221461063757806376520c6d1461063f57806378e5cdc71461064757806379022a9f1461064f5780637ab8955d146106575780637bb7bed1146106785780637c95294b1461068b5780637fd7d06214610693578063808d7627146106a657806385029409146106ae578063891c4e19146106ce5780638da5cb5b146106e15780638f40aab1146106e95780638f432074146106fc5780638fd9f2ca1461070f578063914f6e6d1461071757806398387a8d1461072a5780639bd4ef501461073d5780639c9b2e2114610745578063a0029ccf14610758578063a0e47bf61461076b578063ada71bc214610773578063af1df25514610786578063b36b9ffd1461078e578063b76f659d14610796578063b77cf9c61461079e578063bcd11014146107b1578063c0a2526c146107c4578063c53b573d146107cc578063c55dae63146107d4578063ca5c7b91146107dc578063d1a1beb4146107e4578063dc01f60d146107f7578063df3798761461080a578063e6c91a151461082c578063e70b9e271461083f578063e8999f4314610852578063ee3ca99c1461085a578063f122977714610862578063f1aade3d14610875578063f2fde38b1461087d578063f454249414610890578063f46eccc414610898578063f7ad3601146108ab575b600080fd5b6103b36103ae36600461543c565b6108be565b6040516103c293929190615cc0565b60405180910390f35b6103de6103d936600461543c565b610a30565b6040516103c2959493929190615d4c565b6104026103fd36600461543c565b610c25565b6040516103c29190615c52565b610402610c44565b61040261042536600461543c565b610c4b565b610432610c74565b6040516103c29190615b14565b610447610c83565b6040516103c29190615bdd565b610402610cdb565b61040261046a36600461543c565b610ce0565b610432610cf2565b61040261048536600461543c565b610d01565b61049d6104983660046159b7565b610eb4565b005b6104026104ad36600461543c565b611239565b61040261124b565b610402611251565b61049d6104d036600461596d565b611257565b61049d6104e33660046158ca565b6112f8565b61049d6113fa565b61049d6104fe3660046154ac565b61145f565b61051661051136600461543c565b6115ca565b6040516103c2959493929190615d82565b6104326115f9565b610402611608565b61049d610545366004615653565b61160e565b61049d61055836600461592a565b6116e9565b610402611709565b61049d61057336600461543c565b61170f565b61040261058636600461543c565b6117ab565b6105936117da565b6040516103c29190615c21565b61049d6105ae36600461543c565b6117ea565b6105c66105c136600461543c565b611884565b6040516103c29190615b81565b610402611921565b61049d6105e93660046159e7565b611927565b6104026105fc36600461543c565b611992565b61049d61060f3660046159b7565b6119ec565b610402610622366004615474565b611a0c565b61049d611a29565b610432611a95565b610432611aa4565b610447611ab8565b610432611b0e565b610432611b1d565b61066a6106653660046155e2565b611b2c565b6040516103c2929190615c74565b6104326106863660046159b7565b611cc5565b610402611cef565b61049d6106a1366004615653565b611cf5565b610402611d1d565b6106c16106bc36600461543c565b611d9f565b6040516103c29190615b94565b6104026106dc3660046159b7565b611ee6565b610432611f3a565b6104026106f7366004615616565b611f49565b61040261070a3660046155e2565b611f79565b6105936120ba565b61049d610725366004615944565b6120c3565b61059361073836600461543c565b612287565b61040261229c565b61049d61075336600461543c565b6122a2565b61049d610766366004615548565b612336565b61043261242d565b61059361078136600461543c565b61243c565b610432612451565b610432612460565b61059361246f565b6104026107ac36600461543c565b61247f565b6104026107bf36600461543c565b612491565b6104026124c7565b61049d6124cd565b610432612559565b610402612568565b61049d6107f2366004615616565b61256e565b6106c161080536600461543c565b6126e3565b61081d61081836600461543c565b612837565b6040516103c293929190615ce4565b61049d61083a36600461592a565b612a08565b61040261084d366004615474565b612a98565b610402612ab5565b610402612abb565b61040261087036600461543c565b612ac1565b610432612b4d565b61049d61088b36600461543c565b612b5c565b610402612c0f565b6105936108a636600461543c565b612c15565b61049d6108b936600461592a565b612c2a565b6001600160a01b038116600090815260a260205260408120600401548190819080156109f4576001600160a01b038516600090815260a46020526040812054905b818110156109f1576001600160a01b038716600090815260a46020526040812080548390811061092b57fe5b9060005260206000209060040201600001549050806000141561094e57506109e9565b6001600160a01b038816600090815260a460205260408120805482916109be918690811061097857fe5b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050612cd7565b9350935050506109d78289612d6690919063ffffffff16565b97506109e38782612d66565b96505050505b6001016108ff565b50505b6001600160a01b038516600090815260a26020526040902060010154610a26908490610a209084612d66565b90612dbe565b9350509193909250565b6001600160a01b038116600090815260a36020526040812081908190819060609082805b8254811015610bfb5742838281548110610a6a57fe5b9060005260206000209060040201600101541115610bc95781610adf5782548190036001600160401b0381118015610aa157600080fd5b50604051908082528060200260200182016040528015610adb57816020015b610ac86152df565b815260200190600190039081610ac05790505b5093505b828181548110610aeb57fe5b9060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050848381518110610b3857fe5b60200260200101819052508180600101925050610b72838281548110610b5a57fe5b60009182526020909120600490910201548790612d66565b9550610bc2610bbb848381548110610b8657fe5b906000526020600020906004020160020154858481548110610ba457fe5b600091825260209091206004909102015490612e00565b8690612d66565b9450610bf3565b610bf0838281548110610bd857fe5b60009182526020909120600490910201548890612d66565b96505b600101610a54565b5050506001600160a01b038616600090815260a26020526040902060020154945091939590929450565b6000610c3c82610c34846126e3565b600080612e59565b90505b919050565b620186a081565b6001600160a01b038116600090815260a36020526040812054610c3c90839083906001906134a5565b60b4546001600160a01b031681565b606060a8805480602002602001604051908101604052809291908181526020018280548015610cd157602002820191906000526020600020905b815481526020019060010190808311610cbd575b5050505050905090565b600181565b60b66020526000908152604090205481565b609d546001600160a01b031681565b60a1546000906001600160a01b03163314610d1b57600080fd5b6001600160a01b038216600090815260a460205260408120805490915b81811015610e555742838281548110610d4d57fe5b9060005260206000209060040201600101541115610e4257610d8c838281548110610d7457fe5b60009182526020909120600490910201548590612d66565b835490945083906000198101908110610da157fe5b9060005260206000209060040201838281548110610dbb57fe5b90600052602060002090600402016000820154816000015560018201548160010155600282015481600201556003820154816003015590505082805480610dfe57fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155610e3b908390612dbe565b9150610e50565b610e4d816001612d66565b90505b610d38565b5060a154609f54610e73916001600160a01b039182169116856136ba565b6001600160a01b038416600090815260a2602052604090206004810154610e9a9085612dbe565b60048201558054610eab9085612dbe565b90555050919050565b3381610ebf57600080fd5b6001600160a01b038116600090815260a26020526040812060018101548291908511610efe576001810154610ef49086612dbe565b6001820155611210565b6000610f17826001015487612dbe90919063ffffffff16565b90508082600401541015610f2a57600080fd5b6000600183018190556004830154905b6001600160a01b038716600090815260a460205260408120805483908110610f5e57fe5b90600052602060002090600402016000015490508060001415610f8157506110d0565b6001600160a01b038816600090815260a4602052604081208054610faa91908590811061097857fe5b50509150506000610fdd610fca83620186a0612dbe90919063ffffffff16565b610fd788620186a0612e00565b9061370c565b905082811061102057508161100d611006620186a0610fd7610fff8287612dbe565b8790612e00565b8790612dbe565b95508561101b576001909301925b611064565b61102a8382612dbe565b6001600160a01b038b16600090815260a46020526040902080548690811061104e57fe5b6000918252602082206004909102019190915595505b61106e8582612dbe565b945061108b611084620186a0610fd78486612e00565b8a90612d66565b98506110b36110ac620186a0610fd76098548d612e0090919063ffffffff16565b8990612d66565b9750856110c2575050506110d8565b846110cc57600080fd5b5050505b600101610f3a565b801561120857805b6001600160a01b038816600090815260a460205260409020548110156111a1576001600160a01b038816600090815260a46020526040902080548290811061112457fe5b906000526020600020906004020160a460008a6001600160a01b03166001600160a01b031681526020019081526020016000208383038154811061116457fe5b60009182526020909120825460049092020190815560018083015481830155600280840154908301556003928301549290910191909155016110e0565b5060005b81811015611206576001600160a01b038816600090815260a4602052604090208054806111ce57fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155016111a5565b505b506004830155505b8054611222908490610a209088612dbe565b815561123284868585600061374b565b5050505050565b60b16020526000908152604090205481565b60b75481565b61fde881565b61125f61389f565b6001600160a01b0316611270611f3a565b6001600160a01b0316146112b9576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b609e80546001600160a01b039485166001600160a01b031991821617909155609d80549385169382169390931790925560ae8054919093169116179055565b61130061389f565b6001600160a01b0316611311611f3a565b6001600160a01b03161461135a576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b805182511461136857600080fd5b61137460a76000615307565b61138060a86000615307565b60005b82518110156113f55760a783828151811061139a57fe5b60209081029190910181015182546001810184556000938452919092200155815160a8908390839081106113ca57fe5b6020908102919091018101518254600181810185556000948552929093209092019190915501611383565b505050565b61145d60a980548060200260200160405190810160405280929190818152602001828054801561145357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611435575b5050505050611cf5565b565b600054610100900460ff168061147857506114786138a3565b80611486575060005460ff16155b6114c15760405162461bcd60e51b815260040180806020018281038252602e815260200180615ea2602e913960400191505060405180910390fd5b600054610100900460ff161580156114ec576000805460ff1961ff0019909116610100171660011790555b6114f46138a9565b609f80546001600160a01b03808e166001600160a01b0319928316811790935560a180548e831690841617905560ad80548d8316908416179055609780548b831690841617905560b28054918c1661010002610100600160a81b031990921691909117905560a9805460018101909155600080516020615e4183398151915201805490911682179055600090815260aa60205260409020426002909101556099869055609a859055609b8490556098839055609c82905580156115bd576000805461ff00191690555b5050505050505050505050565b60aa60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b609f546001600160a01b031681565b609a5481565b61161661389f565b6001600160a01b0316611627611f3a565b6001600160a01b031614611670576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60b25460ff161561168057600080fd5b60005b81518110156116d857600160af600084848151811061169e57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611683565b505060b2805460ff19166001179055565b33600090815260b560205260409020805460ff1916911515919091179055565b60b85481565b61171761389f565b6001600160a01b0316611728611f3a565b6001600160a01b031614611771576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60b480546001600160a01b039092166001600160a01b031990921682179055600090815260af60205260409020805460ff19166001179055565b6001600160a01b038116600090815260aa60205260408120544281116117d157806117d3565b425b9392505050565b60b454600160a81b900460ff1681565b6117f261389f565b6001600160a01b0316611803611f3a565b6001600160a01b03161461184c576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60a0546001600160a01b03161561186257600080fd5b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260a360209081526040808320805482518185028101850190935280835260609492939192909184015b828210156119165783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815260200190600101906118bc565b505050509050919050565b609c5481565b6001600160a01b038216600090815260b1602052604090205415801561196357506001600160a01b038216600090815260a36020526040902054155b15611985576001600160a01b038216600090815260b160205260409020600190555b6113f583838360006138f7565b609f5460a0546000916001600160a01b03918216911614156119cd57506001600160a01b038116600090815260a26020526040902054610c3f565b506001600160a01b0316600090815260a2602052604090206002015490565b60a75481106119fa57600080fd5b33600090815260b16020526040902055565b60ab60209081526000928352604080842090915290825290205481565b611a3161389f565b6001600160a01b0316611a42611f3a565b6001600160a01b031614611a8b576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b61145d6000613f5d565b60a0546001600160a01b031681565b60b25461010090046001600160a01b031681565b606060a7805480602002602001604051908101604052809291908181526020018280548015610cd15760200282019190600052602060002090815481526020019060010190808311610cbd575050505050905090565b60ae546001600160a01b031681565b60ad546001600160a01b031681565b60b4546000908190600160a01b900460ff16611b4757600080fd5b60ba546001600160a01b03163314611b5e57600080fd5b8215611b6d57611b6d84613faf565b6000611b7885610a30565b5050509150508060001415611b94576000809250925050611cbe565b6001600160a01b038516600090815260b0602052604090205460ff16611bb957600191505b83611c07576001600160a01b038516600090815260b0602052604090205460ff1615611c0157611bfe611bf786611bef88611d9f565b876001612e59565b600061409f565b92505b50611cbe565b6001600160a01b038516600090815260b0602052604090205460ff1615611c3457611c3185614322565b92505b6001600160a01b038516600090815260a36020526040812054611c5b9187916001906134a5565b50846001600160a01b03167fd78a704ae176672746f3b4ce4b50e57ba63395b8473863d0f761b13d28971ecd8285604051611c97929190615cd6565b60405180910390a260ba54609f54611cbc916001600160a01b0391821691168561452f565b505b9250929050565b60a98181548110611cd557600080fd5b6000918252602090912001546001600160a01b0316905081565b60b95481565b611cfe33613faf565b611d083382614642565b5033600090815260b360205260409020429055565b60bc546040805163808d762760e01b815290516000926001600160a01b03169163808d7627916004808301926020929190829003018186803b158015611d6257600080fd5b505afa158015611d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9a91906159cf565b905090565b60606000611dac836126e3565b6001600160a01b038416600090815260a36020908152604080832080548251818502810185019093528083529495509293909291849084015b82821015611e3f578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190611de5565b505060bc546001600160a01b03888116600090815260b36020526040908190205490516368082a4760e11b815295965091169363d010548e9350611e8a925086918691600401615ba7565b60006040518083038186803b158015611ea257600080fd5b505afa158015611eb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ede9190810190615777565b949350505050565b600081611ef257600080fd5b611efd336001611f79565b90506000611f25611f1e6064610fd760b95487612e0090919063ffffffff16565b8490612dbe565b905080821015611f3457600080fd5b50919050565b6065546001600160a01b031690565b600082611f6c576001600160a01b038416600090815260a3602052604090205492505b611ede84836001866134a5565b60006001600160a01b03831633148015908190611faf57506001600160a01b038416600090815260b5602052604090205460ff16155b15611fc9578215611fbf57600080fd5b60009150506120b4565b8215611fd857611fd884613faf565b6000611ff3611bf786611fea886126e3565b60006001612e59565b9050818015612033575060b75481108061203357506001600160a01b038516600090815260b660205260409020546201518090612031904290612dbe565b105b15612043576000925050506120b4565b6000806120518785886147be565b9150915083156120ab57612065818761409f565b945085156120a65760ba54609f5461208a916001600160a01b0391821691168761452f565b6001600160a01b038716600090815260b6602052604090204290555b6120af565b8194505b505050505b92915050565b60b25460ff1681565b334282116120d057600080fd5b6000806000806120e08587614910565b6001600160a01b038916600090815260a46020526040902054939750919550935091508110612113575050505050612283565b600181015b6001600160a01b038616600090815260a460205260409020548110156121da576001600160a01b038616600090815260a46020526040902080548290811061215c57fe5b906000526020600020906004020160a46000886001600160a01b03166001600160a01b03168152602001908152602001600020600183038154811061219d57fe5b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830154929091019190915501612118565b506001600160a01b038516600090815260a4602052604090208054806121fc57fe5b600082815260208082206004600019909401938402018281556001810183905560028101839055600301829055919092556001600160a01b038716825260a29052604090208054612253908590610a209088612dbe565b8155600481015461226a908590610a209088612dbe565b600482015561227c868686868c61374b565b5050505050505b5050565b60b06020526000908152604090205460ff1681565b6161a881565b33600090815260af602052604090205460ff166122be57600080fd5b6001600160a01b038116600090815260aa6020526040902060020154156122e457600080fd5b60a9805460018101909155600080516020615e418339815191520180546001600160a01b039092166001600160a01b031990921682179055600090815260aa6020526040902042600282018190559055565b61233e61389f565b6001600160a01b031661234f611f3a565b6001600160a01b031614612398576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b60bd80546001600160a01b03998a166001600160a01b03199182161790915560bb80549a8a169a82169a909a1790995560ba8054978916978a169790971790965560bc805495909716949097169390931790945560b79190915560b89390935560b95560b48054911515600160a81b0260ff60a81b19931515600160a01b0260ff60a01b199093169290921792909216179055565b60bd546001600160a01b031681565b60b56020526000908152604090205460ff1681565b609e546001600160a01b031681565b60ba546001600160a01b031681565b60b454600160a01b900460ff1681565b60b36020526000908152604090205481565b6099546001600160a01b038216600090815260aa60205260408120600101549091610c3c9164e8d4a5100091610fd79190612e00565b60985481565b33600081815260a3602052604081205490916124ed9160019081906134a5565b33600081815260b1602052604081205492935061250c928492916138f7565b33600081815260b16020526040908190205490517f4c46641520b3fedde433247f82a421df0d7a83ce24df3f229e9df96f386c8b0c9161254e91859190615cd6565b60405180910390a250565b60bb546001600160a01b031681565b60a55481565b33600090815260af602052604090205460ff1661258a57600080fd5b81612594576113f5565b61259d83613faf565b6001600160a01b0383163014156125c957609f546125c4906001600160a01b0316836149c6565b6113f5565b6001600160a01b038316600090815260a26020526040902080546125ed9084612d66565b815581156126965760048101546126049084612d66565b60048201556001600160a01b038416600090815260a460205260408120609c54909190612632904290612d66565b6040805160808101825287815260208082019384526001928201838152609c546060840190815287548086018955600098895292909720925160049092029092019081559251918301919091555160028201559151600390920191909155506126ab565b60018101546126a59084612d66565b60018201555b836001600160a01b0316600080516020615ef08339815191528460006040516126d5929190615c74565b60405180910390a250505050565b60a9546060906001600160401b03811180156126fe57600080fd5b5060405190808252806020026020018201604052801561273857816020015b612725615325565b81526020019060019003908161271d5790505b50905060005b8151811015611f345760a9818154811061275457fe5b9060005260206000200160009054906101000a90046001600160a01b031682828151811061277e57fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061281564e8d4a51000610fd7858585815181106127bb57fe5b60200260200101516000015160a26000896001600160a01b03166001600160a01b03168152602001908152602001600020600301546128108888815181106127ff57fe5b602002602001015160000151612ac1565b614a8e565b82828151811061282157fe5b602090810291909101810151015260010161273e565b6001600160a01b038116600090815260a2602090815260408083206001015460a4909252822060609083805b82548110156129fe574283828154811061287957fe5b90600052602060002090600402016001015411156129cc57816128ee5782548190036001600160401b03811180156128b057600080fd5b506040519080825280602002602001820160405280156128ea57816020015b6128d761533c565b8152602001906001900390816128cf5790505b5093505b60006129178885848154811061290057fe5b906000526020600020906004020160010154614910565b505091505083828154811061292857fe5b90600052602060002090600402016000015485848151811061294657fe5b6020026020010151600001818152505083828154811061296257fe5b90600052602060002090600402016001015485848151811061298057fe5b602002602001015160200181815250508085848151811061299d57fe5b6020026020010151604001818152505082806001019350506129c4848381548110610bd857fe5b9650506129f6565b6129f38382815481106129db57fe5b60009182526020909120600490910201548690612d66565b94505b600101612863565b5050509193909250565b3360008080612a16846108be565b6001600160a01b038716600090815260a4602052604081209396509194509250612a40919061535d565b6001600160a01b038416600090815260a260205260409020600481015460018201548254612a739291610a209190612dbe565b81556000600182018190556004820155612a90858585858a61374b565b505050505050565b60ac60209081526000928352604080842090915290825290205481565b60a65481565b609b5481565b6001600160a01b038116600090815260aa602052604090206003015460a65415610c3f576001600160a01b038216600090815260aa602052604081206001810154600290910154612b209190612b1a90610a20876117ab565b90612e00565b90506117d3612b4660a654610fd7670de0b6b3a764000085612e0090919063ffffffff16565b8390612d66565b60bc546001600160a01b031681565b612b6461389f565b6001600160a01b0316612b75611f3a565b6001600160a01b031614612bbe576040805162461bcd60e51b81526020600482018190526024820152600080516020615e82833981519152604482015290519081900360640190fd5b6001600160a01b038116612c035760405162461bcd60e51b8152600401808060200182810382526026815260200180615dfb6026913960400191505060405180910390fd5b612c0c81613f5d565b50565b60995481565b60af6020526000908152604090205460ff1681565b60b4546001600160a01b031615612cb85760b45433600081815260b0602052604090819020549051637a7acb8960e01b81526001600160a01b0390931692637a7acb8992612c8592909160ff90911615908690600401615b28565b600060405180830381600087803b158015612c9f57600080fd5b505af1158015612cb3573d6000803e3d6000fd5b505050505b33600090815260b060205260409020805460ff19169115919091179055565b6000806000804285602001511115612d1b57612d186161a8612d12609c54610fd761fde8612b1a428c60200151612dbe90919063ffffffff16565b90612d66565b92505b8451612d3090620186a090610fd79086612e00565b9150612d4e620186a0610fd760985485612e0090919063ffffffff16565b8551909150612d5d9083612dbe565b93509193509193565b6000828201838110156117d3576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b60006117d383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614afe565b600082612e0f575060006120b4565b82820282848281612e1c57fe5b04146117d35760405162461bcd60e51b8152600401808060200182810382526021815260200180615e616021913960400191505060405180910390fd5b6000805b845181101561349c576000858281518110612e7457fe5b60200260200101516000015190506000868381518110612e9057fe5b60200260200101516020015190508060001480612f2657506040516370a0823160e01b81526001600160a01b038316906370a0823190612ed4903090600401615b14565b60206040518083038186803b158015612eec57600080fd5b505afa158015612f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2491906159cf565b155b15612f32575050613494565b60bc54604051634e89a71160e01b81526000916001600160a01b031690634e89a71190612f63908690600401615b14565b60206040518083038186803b158015612f7b57600080fd5b505afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190615458565b905086156131e4576001600160a01b03808a16600090815260ac60209081526040808320938716835292905290812054612ff29064e8d4a5100061370c565b9050861561306c578281101561300757600080fd5b6130456130198464e8d4a51000612e00565b6001600160a01b03808d16600090815260ac60209081526040808320938a168352929052205490612dbe565b6001600160a01b03808c16600090815260ac60209081526040808320938916835292905220555b6001600160a01b038416600090815260aa60205260409020600401546130929084612dbe565b6001600160a01b03808616600081815260aa602052604090819020600401939093559151908c1690600080516020615e21833981519152906130d5908790615c52565b60405180910390a360bc5460408051630261bf8b60e01b815290516000926001600160a01b031691630261bf8b916004808301926020929190829003018186803b15801561312257600080fd5b505afa158015613136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315a9190615458565b604051631a4ca37b60e21b81529091506001600160a01b038216906369328dec9061318d90869088903090600401615b4b565b602060405180830381600087803b1580156131a757600080fd5b505af11580156131bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131df91906159cf565b935050505b60bb546001600160a01b038281169116141561320b576132048583612d66565b9450613490565b86156133705760bd5461322b906001600160a01b0383811691168461452f565b60bd5460bc5460405163162d4f6b60e21b81526000926001600160a01b03908116926338ed1739928792869216906358b53dac9061326d908990600401615b14565b60006040518083038186803b15801561328557600080fd5b505afa158015613299573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132c191908101906156eb565b3042600a016040518663ffffffff1660e01b81526004016132e6959493929190615c84565b600060405180830381600087803b15801561330057600080fd5b505af1158015613314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261333c9190810190615847565b90506133688160018351038151811061335157fe5b602002602001015187612d6690919063ffffffff16565b955050613490565b60bd5460bc5460405163162d4f6b60e21b81526000926001600160a01b039081169263d06ca61f928792909116906358b53dac906133b2908890600401615b14565b60006040518083038186803b1580156133ca57600080fd5b505afa1580156133de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261340691908101906156eb565b6040518363ffffffff1660e01b8152600401613423929190615c5b565b60006040518083038186803b15801561343b57600080fd5b505afa15801561344f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134779190810190615847565b905061348c8160018351038151811061335157fe5b9550505b5050505b600101612e5d565b50949350505050565b609e54604051630cccd82b60e41b81526000916001600160a01b03169063cccd82b0906134d6908890600401615b14565b600060405180830381600087803b1580156134f057600080fd5b505af1158015613504573d6000803e3d6000fd5b5050505061351185613faf565b6001600160a01b038516600090815260a2602052604081206002810154600382015461353f91899187614b95565b600283015491945092506135539084612dbe565b600282015560038101546135679083612dbe565b600382015580546135789084612dbe565b815560a5546135879084612dbe565b60a55560a6546135979083612dbe565b60a655609e5460405163075b9bf960e31b81526001600160a01b0390911690633adcdfc8906135ca908a90600401615b14565b600060405180830381600087803b1580156135e457600080fd5b505af11580156135f8573d6000803e3d6000fd5b505050508515801561362357506001600160a01b038716600090815260b0602052604090205460ff16155b15613655576001600160a01b038716600090815260b16020526040902054613650908490899060016138f7565b6136b0565b84156136b05760a054613672906001600160a01b031688856136ba565b60a0546040516001600160a01b0391821691891690600080516020615ed0833981519152906136a79087906000908190615cc0565b60405180910390a35b5050949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526113f5908490614d87565b60006117d383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614f3e565b6001600160a01b038516331461376057600080fd5b61376985613faf565b609f54613780906001600160a01b031686866136ba565b82156137d65781156137a95760ae54609f546137a9916001600160a01b039182169116846136ba565b60ad546137d6906001600160a01b03166137c38585612dbe565b609f546001600160a01b031691906136ba565b801561385c576138408560a980548060200260200160405190810160405280929190818152602001828054801561383657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613818575b5050505050614642565b6001600160a01b038516600090815260b3602052604090204290555b609f546040516001600160a01b0391821691871690600080516020615ed08339815191529061389090889088908890615cc0565b60405180910390a35050505050565b3390565b303b1590565b600054610100900460ff166138ef5760405162461bcd60e51b815260040180806020018281038252602b815260200180615f10602b913960400191505060405180910390fd5b61145d614fa3565b8361390157613f57565b60b4546001600160a01b0316156139a45760b460009054906101000a90046001600160a01b03166001600160a01b031663d9cdd5136040518163ffffffff1660e01b815260040160206040518083038186803b15801561396057600080fd5b505afa158015613974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399891906159cf565b8410156139a457600080fd5b60a75482106139b257600080fd5b609e54604051630cccd82b60e41b81526001600160a01b039091169063cccd82b0906139e2908690600401615b14565b600060405180830381600087803b1580156139fc57600080fd5b505af1158015613a10573d6000803e3d6000fd5b50505050613a1d83613faf565b836001600160a01b038416331480613a3f575060a1546001600160a01b031633145b15613acc576001600160a01b038416600090815260b0602052604081205460ff16613a9f576001600160a01b038516600090815260a36020526040812054613a8c918791600191906134a5565b9050613a988682612d66565b9550613aca565b6001600160a01b038516600090815260a36020526040902054613ac890869060019081906134a5565b505b505b6001600160a01b038416600090815260a2602052604090208054613af09087612d66565b81556002810154613b019087612d66565b600282015560a554613b139087612d66565b60a581905550613b51613b4660a88681548110613b2c57fe5b906000526020600020015488612e0090919063ffffffff16565b600383015490612d66565b8160030181905550613b75613b6c60a88681548110613b2c57fe5b60a65490612d66565b60a681905550613bfc856040518060800160405280898152602001613bba60a78981548110613ba057fe5b906000526020600020015442612d6690919063ffffffff16565b815260200160a88881548110613bcc57fe5b9060005260206000200154815260200160a78881548110613be957fe5b9060005260206000200154815250614ff9565b60b254604051632f5965e160e21b81526101009091046001600160a01b03169063bd65978490613c30908890600401615b14565b600060405180830381600087803b158015613c4a57600080fd5b505af1158015613c5e573d6000803e3d6000fd5b5050505082613c7f5760a054613c7f906001600160a01b0316333085615149565b609e5460405163075b9bf960e31b81526001600160a01b0390911690633adcdfc890613caf908890600401615b14565b600060405180830381600087803b158015613cc957600080fd5b505af1158015613cdd573d6000803e3d6000fd5b5050609f5460a054600093506001600160a01b03908116911614159050613d8b57609760009054906101000a90046001600160a01b03166001600160a01b0316636d2ed1846040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4c57600080fd5b505afa158015613d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d8491906159cf565b9050613e14565b609760009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b815260040160206040518083038186803b158015613dd957600080fd5b505afa158015613ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1191906159cf565b90505b60a0546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015613e5957600080fd5b505afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e919190615a1e565b90506000613ec68260ff16600a0a610fd76305f5e100610fd7670de0b6b3a7640000612b1a8f8a612e0090919063ffffffff16565b9050876001600160a01b0316600080516020615ef08339815191528a6001604051613ef2929190615c74565b60405180910390a2609f5460a0546040516001600160a01b03808c16937f7d4e11fccd951846faadec9c326a0bbe77573db0a5a27c0580d02311d2b24fc593613f4993879391821692909116919091141590615c74565b60405180910390a250505050505b50505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116600090815260a2602052604081206003015460a95490915b81811015613f5757600060a98281548110613fe857fe5b60009182526020822001546001600160a01b0316915061400782612ac1565b6001600160a01b038316600090815260aa6020526040902060038101829055909150614032836117ab565b60028201556001600160a01b03871630146140945761405387848885614a8e565b6001600160a01b03808916600081815260ac602090815260408083209489168084529482528083209590955591815260ab8252838120928152919052208290555b505050600101613fd1565b600082156120b45781156141fc5760bd5460bb546140ca916001600160a01b0391821691168561452f565b60bd5460bc546040805163c1c3eae160e01b815290516000936001600160a01b03908116936338ed173993899387939092169163c1c3eae1916004808201928692909190829003018186803b15801561412257600080fd5b505afa158015614136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261415e91908101906156eb565b3042610258016040518663ffffffff1660e01b8152600401614184959493929190615c84565b600060405180830381600087803b15801561419e57600080fd5b505af11580156141b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141da9190810190615847565b9050806001825103815181106141ec57fe5b60200260200101519150506120b4565b60bd5460bc546040805163c1c3eae160e01b815290516000936001600160a01b039081169363d06ca61f938993919092169163c1c3eae19160048083019289929190829003018186803b15801561425257600080fd5b505afa158015614266573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261428e91908101906156eb565b6040518363ffffffff1660e01b81526004016142ab929190615c5b565b60006040518083038186803b1580156142c357600080fd5b505afa1580156142d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142ff9190810190615847565b90508060018251038151811061431157fe5b602002602001015191505092915050565b60b454600090600160a01b900460ff1661433b57600080fd5b600061434683611d9f565b9050600081516001600160401b038111801561436157600080fd5b5060405190808252806020026020018201604052801561439b57816020015b614388615325565b8152602001906001900390816143805790505b50905060005b82518110156145165760008382815181106143b857fe5b602002602001015160000151905060008483815181106143d457fe5b6020908102919091018101518101516001600160a01b03808a16600090815260ac8452604080822092871682529190935282205490925061441a9064e8d4a5100061370c565b9050818111156144355761442e8183612dbe565b905061443a565b905060005b6144498164e8d4a51000612e00565b6001600160a01b03808a16600090815260ac60209081526040808320938816835292905220558451839086908690811061447f57fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818585815181106144b057fe5b60200260200101516020018181525050826001600160a01b0316886001600160a01b03167fda6ad822e2440e8a479e05d09e669a879d9bb871c42a1c89753817858dd1c816846040516145039190615c52565b60405180910390a35050506001016143a1565b50611ede614528858360016000612e59565b600161409f565b8015806145b5575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561458757600080fd5b505afa15801561459b573d6000803e3d6000fd5b505050506040513d60208110156145b157600080fd5b5051155b6145f05760405162461bcd60e51b8152600401808060200182810382526036815260200180615f656036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526113f5908490614d87565b609d546040516308c51c6560e01b81526001600160a01b03909116906308c51c6590614672908490600401615b6e565b600060405180830381600087803b15801561468c57600080fd5b505af11580156146a0573d6000803e3d6000fd5b505082519150600090505b81811015613f575760008382815181106146c157fe5b602002602001015190506146d4816151a3565b6001600160a01b03808616600090815260ac6020908152604080832093851683529290529081205461470b9064e8d4a5100061370c565b905080156147b4576001600160a01b03808716600090815260ac60209081526040808320938616835292815282822082905560aa905220600401546147509082612dbe565b6001600160a01b038316600081815260aa602052604090206004019190915561477a9087836136ba565b816001600160a01b0316866001600160a01b0316600080516020615e21833981519152836040516147ab9190615c52565b60405180910390a35b50506001016146ab565b6000806147d6856147ce876126e3565b856001612e59565b91508315614807576147f86064610fd760b85485612e0090919063ffffffff16565b90506148048282612dbe565b91505b82156149085760a15460bb5461482a916001600160a01b0391821691168461452f565b60a15460405163d478088560e01b81526001600160a01b039091169063d47808859061486190600090869082908b90600401615c2c565b602060405180830381600087803b15801561487b57600080fd5b505af115801561488f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148b391906159cf565b506001600160a01b038516600081815260b3602052604090819020429055517fc16de066392da7e40ceccb739c331fc48a2e76bf147449613c48023d960eec32906148ff908590615c52565b60405180910390a25b935093915050565b60008060008060005b6001600160a01b038716600090815260a460205260409020548110156149bc576001600160a01b038716600090815260a46020526040902080548791908390811061496057fe5b90600052602060002090600402016001015414156149b4576001600160a01b038716600090815260a46020526040902080546149a191908390811061097857fe5b92975095509093509091508190506149bc565b600101614919565b5092959194509250565b6001600160a01b038216600090815260aa6020526040902080544210614a06576099546149fc90610fd78464e8d4a51000612e00565b6001820155614a5e565b8054600090614a159042612dbe565b90506000614a3964e8d4a51000610fd7856001015485612e0090919063ffffffff16565b609954909150614a5690610fd764e8d4a51000612b1a8886612d66565b600184015550505b4260028201819055609954614a739190612d66565b81556004810154614a849083612d66565b6004909101555050565b6001600160a01b03808516600081815260ac602090815260408083209488168084529482528083205493835260ab825280832094835293905291822054909190614ad9908490612dbe565b9050614af4612b46670de0b6b3a7640000610fd78785612e00565b9695505050505050565b60008184841115614b8d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b52578181015183820152602001614b3a565b50505050905090810190601f168015614b7f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038416600090815260a360205260408120805482919015614d7d578054600090851015614bc95784614bcc565b81545b905060005b81811015614ce65742838281548110614be657fe5b90600052602060002090600402016001015411614cdd57614c0c8382815481106129db57fe5b9450614c27614c20848381548110610b8657fe5b8590612d66565b835490945083906000198101908110614c3c57fe5b9060005260206000209060040201838281548110614c5657fe5b90600052602060002090600402016000820154816000015560018201548160010155600282015481600201556003820154816003015590505082805480614c9957fe5b6000828152602081206004600019909301928302018181556001818101839055600282018390556003909101919091559155614cd6908390612dbe565b9150614ce1565b6001015b614bd1565b508154614d7b576001600160a01b038816600090815260a360205260408120889550879450614d149161535d565b60b25460405163257f9abf60e01b81526101009091046001600160a01b03169063257f9abf90614d48908b90600401615b14565b600060405180830381600087803b158015614d6257600080fd5b505af1158015614d76573d6000803e3d6000fd5b505050505b505b5094509492505050565b614d99826001600160a01b03166152a6565b614dea576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b600080836001600160a01b0316836040518082805190602001908083835b60208310614e275780518252601f199092019160209182019101614e08565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614e89576040519150601f19603f3d011682016040523d82523d6000602084013e614e8e565b606091505b509150915081614ee5576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115613f5757808060200190516020811015614f0157600080fd5b5051613f575760405162461bcd60e51b815260040180806020018281038252602a815260200180615f3b602a913960400191505060405180910390fd5b60008183614f8d5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614b52578181015183820152602001614b3a565b506000838581614f9957fe5b0495945050505050565b600054610100900460ff16614fe95760405162461bcd60e51b815260040180806020018281038252602b815260200180615f10602b913960400191505060405180910390fd5b61145d614ff461389f565b613f5d565b6001600160a01b038216600090815260a360205260408120805490915b81811080156150455750836020015183828154811061503157fe5b906000526020600020906004020160010154105b1561505257600101615016565b8254600181810185556000858152602090819020875160049094020192835586015190820155604085015160028201556060850151600390910155815b818111156150fb578360018203815481106150a657fe5b90600052602060002090600402018482815481106150c057fe5b60009182526020909120825460049092020190815560018083015490820155600280830154908201556003918201549101556000190161508f565b508383828154811061510957fe5b9060005260206000209060040201600082015181600001556020820151816001015560408201518160020155606082015181600301559050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052613f57908590614d87565b6001600160a01b0381166151b657600080fd5b609f546001600160a01b03828116911614156151d157612c0c565b6001600160a01b038116600090815260aa602052604090208054806151f557600080fd5b609a5460995461520791429103612d66565b8110156113f55760006152948360040154856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016152449190615b14565b60206040518083038186803b15801561525c57600080fd5b505afa158015615270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906159cf565b90508015613f5757613f5784826149c6565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611ede575050151592915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5080546000825590600052602060002090810190612c0c919061537e565b604080518082019091526000808252602082015290565b60405180606001604052806000815260200160008152602001600081525090565b5080546000825560040290600052602060002090810190612c0c9190615397565b5b80821115615393576000815560010161537f565b5090565b5b8082111561539357600080825560018201819055600282018190556003820155600401615398565b600082601f8301126153d0578081fd5b813560206153e56153e083615dc8565b615da5565b8281528181019085830183850287018401881015615401578586fd5b855b8581101561541f57813584529284019290840190600101615403565b5090979650505050505050565b80358015158114610c3f57600080fd5b60006020828403121561544d578081fd5b81356117d381615de5565b600060208284031215615469578081fd5b81516117d381615de5565b60008060408385031215615486578081fd5b823561549181615de5565b915060208301356154a181615de5565b809150509250929050565b6000806000806000806000806000806101408b8d0312156154cb578586fd5b8a356154d681615de5565b995060208b01356154e681615de5565b985060408b01356154f681615de5565b975060608b013561550681615de5565b965060808b013561551681615de5565b999c989b50969995989760a0870135975060c08701359660e08101359650610100810135955061012001359350915050565b60008060008060008060008060006101208a8c031215615566578283fd5b893561557181615de5565b985060208a013561558181615de5565b975060408a013561559181615de5565b965060608a01356155a181615de5565b95506155af60808b0161542c565b94506155bd60a08b0161542c565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b600080604083850312156155f4578182fd5b82356155ff81615de5565b915061560d6020840161542c565b90509250929050565b60008060006060848603121561562a578081fd5b833561563581615de5565b92506020840135915061564a6040850161542c565b90509250925092565b60006020808385031215615665578182fd5b82356001600160401b0381111561567a578283fd5b8301601f8101851361568a578283fd5b80356156986153e082615dc8565b81815283810190838501858402850186018910156156b4578687fd5b8694505b838510156156df5780356156cb81615de5565b8352600194909401939185019185016156b8565b50979650505050505050565b600060208083850312156156fd578182fd5b82516001600160401b03811115615712578283fd5b8301601f81018513615722578283fd5b80516157306153e082615dc8565b818152838101908385018584028501860189101561574c578687fd5b8694505b838510156156df57805161576381615de5565b835260019490940193918501918501615750565b60006020808385031215615789578182fd5b82516001600160401b038082111561579f578384fd5b818501915085601f8301126157b2578384fd5b81516157c06153e082615dc8565b818152848101908486016040808502870188018b10156157de578889fd5b8896505b848710156158385780828c0312156157f8578889fd5b8051818101818110888211171561580b57fe5b8252825161581881615de5565b8152828901518982015284526001969096019592870192908101906157e2565b50909998505050505050505050565b60006020808385031215615859578182fd5b82516001600160401b0381111561586e578283fd5b8301601f8101851361587e578283fd5b805161588c6153e082615dc8565b81815283810190838501858402850186018910156158a8578687fd5b8694505b838510156156df5780518352600194909401939185019185016158ac565b600080604083850312156158dc578182fd5b82356001600160401b03808211156158f2578384fd5b6158fe868387016153c0565b93506020850135915080821115615913578283fd5b50615920858286016153c0565b9150509250929050565b60006020828403121561593b578081fd5b6117d38261542c565b60008060408385031215615956578182fd5b61595f8361542c565b946020939093013593505050565b600080600060608486031215615981578081fd5b833561598c81615de5565b9250602084013561599c81615de5565b915060408401356159ac81615de5565b809150509250925092565b6000602082840312156159c8578081fd5b5035919050565b6000602082840312156159e0578081fd5b5051919050565b6000806000606084860312156159fb578081fd5b833592506020840135615a0d81615de5565b929592945050506040919091013590565b600060208284031215615a2f578081fd5b815160ff811681146117d3578182fd5b6000815180845260208085019450808401835b83811015615a775781516001600160a01b031687529582019590820190600101615a52565b509495945050505050565b6000815180845260208085019450808401835b83811015615a77578151805188528381015184890152604080820151908901526060908101519088015260809096019590820190600101615a95565b6000815180845260208085019450808401835b83811015615a7757815180516001600160a01b031688528301518388015260409096019590820190600101615ae4565b6001600160a01b0391909116815260200190565b6001600160a01b0393909316835290151560208301521515604082015260600190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6000602082526117d36020830184615a3f565b6000602082526117d36020830184615a82565b6000602082526117d36020830184615ad1565b600060608252615bba6060830186615ad1565b8281036020840152615bcc8186615a82565b915050826040830152949350505050565b6020808252825182820181905260009190848201906040850190845b81811015615c1557835183529284019291840191600101615bf9565b50909695505050505050565b901515815260200190565b9315158452602084019290925260408301526001600160a01b0316606082015260800190565b90815260200190565b600083825260406020830152611ede6040830184615a3f565b9182521515602082015260400190565b600086825285602083015260a06040830152615ca360a0830186615a3f565b6001600160a01b0394909416606083015250608001529392505050565b9283526020830191909152604082015260600190565b918252602082015260400190565b6000606080830186845260208681860152604083818701528287518085526080880191508389019450865b81811015615d3c578551805184528581015186850152840151848401529484019491860191600101615d0f565b50909a9950505050505050505050565b600086825285602083015284604083015283606083015260a06080830152615d7760a0830184615a82565b979650505050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b6040518181016001600160401b0381118282101715615dc057fe5b604052919050565b60006001600160401b03821115615ddb57fe5b5060209081020190565b6001600160a01b0381168114612c0c57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792edc471888e6136f84c49e531e9c9240dc4e3fba66da9d3a49e2af6202133683e0536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65643cae9923fd3c2f468aa25a8ef687923e37f957459557c0380fd06526c0b8cdbc37d4053e34fde482e96f6bcd424dfa31342cbd5fe184d497fb3c8bb4b4b97580496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e675361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d680669a11a1074dd1e3e2fad2345e357bd975d9eb6d1fbea9a928bc270956c164736f6c63430007060033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "bountyForUser(address)": {
        "details": "Reward is in rTokens"
      },
      "claimBounty(address,bool)": {
        "details": "Remove expired locks",
        "params": {
          "_execute": "flag for actual claim.",
          "_user": "address."
        }
      },
      "claimCompound(address,bool)": {
        "details": "Can be auto compound or manual compound",
        "params": {
          "_execute": "whether to execute txn, or just quote (expected amount out for bounty executor and slippage)",
          "_user": "user address"
        }
      },
      "claimableRewards(address)": {
        "params": {
          "account": "for rewards"
        }
      },
      "convertPendingRewardsToWeth(address)": {
        "params": {
          "_user": "address"
        }
      },
      "earnedBalances(address)": {
        "details": "Earned balances may be withdrawn immediately for a 50% penalty.",
        "returns": {
          "earningsData": "which is an array of all infos",
          "total": "earnings",
          "unlocked": "earnings"
        }
      },
      "getRewardForDuration(address)": {
        "params": {
          "_rewardToken": "for the reward"
        }
      },
      "initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Constructor  First reward MUST be the RDNT token or things will break  related to the 50% penalty and distribution to locked balances.",
        "params": {
          "_lockDuration": "lock duration",
          "_rdntToken": "RDNT token address.",
          "_rewardsDuration": "set reward stream time.",
          "_rewardsLookback": "reward lookback"
        }
      },
      "lockedBalances(address)": {
        "returns": {
          "lockData": "which is an array of locks",
          "locked": "balance",
          "lockedWithMultiplier": "lockedWithMultiplier",
          "total": "balance of locks",
          "unlockable": "balance"
        }
      },
      "mint(address,uint256,bool)": {
        "details": "Minted tokens receive rewards normally but incur a 50% penalty when  withdrawn before VEST_DURATION has passed."
      },
      "quoteSelfCompound()": {
        "details": "has own funcs because claimBounty above doesnt handle slippage"
      },
      "rewardPerToken(address)": {
        "details": "Reward is distributed only for locks.",
        "params": {
          "_rewardToken": "for reward"
        }
      },
      "selfCompound(uint256)": {
        "details": "has own funcs because claimBounty above doesnt handle slippage",
        "params": {
          "_quote": "expected amount WETH out, quoted before this txn"
        }
      },
      "setAutocompound(bool)": {
        "params": {
          "_status": "AC on?"
        }
      },
      "setMinters(address[])": {
        "details": "Can be called only once"
      },
      "stake(uint256,address,uint256)": {
        "details": "Locked tokens cannot be withdrawn for DEFAULT_LOCK_DURATION and are eligible to receive rewards."
      },
      "withdraw(uint256)": {
        "details": "First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens  incurs a 50% penalty which is distributed based on locked balances."
      },
      "withdrawableBalance(address)": {
        "details": "This is earnings, not locks."
      }
    },
    "title": "MFD Plus Bounty and Compund",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BURN()": {
        "notice": "Proportion of burn amount"
      },
      "DEFAULT_LOCK_DURATION()": {
        "notice": "Duration of lock/earned penalty period, used for earnings"
      },
      "DEFAULT_LOCK_INDEX()": {
        "notice": "Default lock index"
      },
      "REWARDS_DURATION()": {
        "notice": "Duration that rewards are streamed over"
      },
      "REWARDS_LOOKBACK()": {
        "notice": "Duration that rewards loop back"
      },
      "STARFLEET_TREASURY()": {
        "notice": "treasury wallet"
      },
      "VEST_DURATION()": {
        "notice": "Duration of vesting RDNT"
      },
      "addReward(address)": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "bountyForUser(address)": {
        "notice": "Bounty amount of user per each reward token"
      },
      "claimBounty(address,bool)": {
        "notice": "Claims bounty."
      },
      "claimCompound(address,bool)": {
        "notice": "Compound user's rewards"
      },
      "claimableRewards(address)": {
        "notice": "Address and claimable amount of all reward tokens for the given account."
      },
      "convertPendingRewardsToWeth(address)": {
        "notice": "shortcut for above, using users claimable rewards"
      },
      "daoTreasury()": {
        "notice": "DAO wallet"
      },
      "earnedBalances(address)": {
        "notice": "Earnings which is locked yet"
      },
      "exit(bool)": {
        "notice": "Withdraw full unlocked balance and earnings, optionally claim pending rewards."
      },
      "getAllRewards()": {
        "notice": "Claim all pending staking rewards."
      },
      "getReward(address[])": {
        "notice": "Claim all pending staking rewards."
      },
      "getRewardForDuration(address)": {
        "notice": "Reward amount of the duration."
      },
      "incentivesController()": {
        "notice": "Address of CIC contract"
      },
      "individualEarlyExit(bool,uint256)": {
        "notice": "Withdraw individual unlocked balance and earnings, optionally claim pending rewards."
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns reward applicable timestamp."
      },
      "lockInfo(address)": {
        "notice": "Returns all locks of a user."
      },
      "lockedBalances(address)": {
        "notice": "Information on a user's lockings"
      },
      "lockedSupply()": {
        "notice": "Total locked value"
      },
      "lockedSupplyWithMultiplier()": {
        "notice": "Total locked value in multipliers"
      },
      "middleFeeDistribution()": {
        "notice": "Address of Middle Fee Distribution Contract"
      },
      "mint(address,uint256,bool)": {
        "notice": "Add to earnings"
      },
      "minters(address)": {
        "notice": "Addresses approved to call mint"
      },
      "mintersAreSet()": {
        "notice": "Flag to prevent more minter addings"
      },
      "quoteSelfCompound()": {
        "notice": "Return expected amout our for a user to compound themself"
      },
      "rdntToken()": {
        "notice": "Address of RDNT"
      },
      "relock()": {
        "notice": "Withdraw and restake assets."
      },
      "rewardData(address)": {
        "notice": "Reward data per token"
      },
      "rewardPerToken(address)": {
        "notice": "Reward amount per token"
      },
      "rewardTokens(uint256)": {
        "notice": "Reward tokens being distributed"
      },
      "rewards(address,address)": {
        "notice": "user -> reward token -> amount; used to store reward amount"
      },
      "selfCompound(uint256)": {
        "notice": "Compound msg.sender"
      },
      "setAddresses(address,address,address)": {
        "notice": "Set CIC, MFD and Treasury."
      },
      "setAutocompound(bool)": {
        "notice": "set autocompound status for msg.sender"
      },
      "setDefaultRelockTypeIndex(uint256)": {
        "notice": "Set default lock type index for user relock."
      },
      "setLPToken(address)": {
        "notice": "Set LP token."
      },
      "setLockTypeInfo(uint256[],uint256[])": {
        "notice": "Add a new reward token to be distributed to stakers."
      },
      "setMinters(address[])": {
        "notice": "Set minters"
      },
      "setRelock(bool)": {
        "notice": "Set relock status"
      },
      "stake(uint256,address,uint256)": {
        "notice": "Stake tokens to receive rewards."
      },
      "stakingToken()": {
        "notice": "Address of LP token"
      },
      "totalBalance(address)": {
        "notice": "Total balance of an account, including unlocked, locked and earned tokens."
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "user -> reward token -> rpt; RPT for paid amount"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw tokens from earnings and unlocked."
      },
      "withdrawExpiredLocksFor(address)": {
        "notice": "Withdraw all currently locked tokens where the unlock time has passed."
      },
      "withdrawableBalance(address)": {
        "notice": "Final balance received and penalty balance paid by user upon calling exit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6361,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6364,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6431,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6354,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6576,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 6681,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 43417,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "_priceProvider",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 43429,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "BURN",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 43432,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "REWARDS_DURATION",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 43435,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "REWARDS_LOOKBACK",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 43442,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "DEFAULT_LOCK_DURATION",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 43445,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "VEST_DURATION",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 43448,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "middleFeeDistribution",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IMiddleFeeDistribution)12596"
      },
      {
        "astId": 43451,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "incentivesController",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IChefIncentivesController)11062"
      },
      {
        "astId": 43454,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "rdntToken",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IMintableToken)12625"
      },
      {
        "astId": 43458,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "stakingToken",
        "offset": 0,
        "slot": "160",
        "type": "t_address"
      },
      {
        "astId": 43460,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lockZap",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 43464,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "balances",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_struct(Balances)43415_storage)"
      },
      {
        "astId": 43469,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "userLocks",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)13343_storage)dyn_storage)"
      },
      {
        "astId": 43474,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "userEarnings",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)13343_storage)dyn_storage)"
      },
      {
        "astId": 43477,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lockedSupply",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 43480,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lockedSupplyWithMultiplier",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 43483,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "167",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 43486,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "rewardMultipliers",
        "offset": 0,
        "slot": "168",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 43490,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 43495,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "rewardData",
        "offset": 0,
        "slot": "170",
        "type": "t_mapping(t_address,t_struct(Reward)43404_storage)"
      },
      {
        "astId": 43502,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 43509,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "rewards",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 43513,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "daoTreasury",
        "offset": 0,
        "slot": "173",
        "type": "t_address"
      },
      {
        "astId": 43516,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "STARFLEET_TREASURY",
        "offset": 0,
        "slot": "174",
        "type": "t_address"
      },
      {
        "astId": 43521,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "minters",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43526,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "autoRelockDisabled",
        "offset": 0,
        "slot": "176",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43531,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "defaultLockIndex",
        "offset": 0,
        "slot": "177",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43534,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "mintersAreSet",
        "offset": 0,
        "slot": "178",
        "type": "t_bool"
      },
      {
        "astId": 43536,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "userlist",
        "offset": 1,
        "slot": "178",
        "type": "t_contract(ILockerList)12463"
      },
      {
        "astId": 43540,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43542,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "BountyManager",
        "offset": 0,
        "slot": "180",
        "type": "t_address"
      },
      {
        "astId": 40740,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "BOUNTY_ENABLED",
        "offset": 20,
        "slot": "180",
        "type": "t_bool"
      },
      {
        "astId": 40742,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "AC_ENABLED",
        "offset": 21,
        "slot": "180",
        "type": "t_bool"
      },
      {
        "astId": 40746,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "autocompoundEnabled",
        "offset": 0,
        "slot": "181",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 40750,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "lastAutocompound",
        "offset": 0,
        "slot": "182",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40752,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "autocompoundThreshold",
        "offset": 0,
        "slot": "183",
        "type": "t_uint256"
      },
      {
        "astId": 40754,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "autocompoundFee",
        "offset": 0,
        "slot": "184",
        "type": "t_uint256"
      },
      {
        "astId": 40756,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "compoundAcceptableSlippage",
        "offset": 0,
        "slot": "185",
        "type": "t_uint256"
      },
      {
        "astId": 40758,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "bountyManager",
        "offset": 0,
        "slot": "186",
        "type": "t_address"
      },
      {
        "astId": 40760,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "baseToken",
        "offset": 0,
        "slot": "187",
        "type": "t_address"
      },
      {
        "astId": 40762,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "mfdHelper",
        "offset": 0,
        "slot": "188",
        "type": "t_contract(IMFDHelper)12513"
      },
      {
        "astId": 40764,
        "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
        "label": "uniRouter",
        "offset": 0,
        "slot": "189",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockedBalance)13343_storage)dyn_storage": {
        "base": "t_struct(LockedBalance)13343_storage",
        "encoding": "dynamic_array",
        "label": "struct LockedBalance[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChefIncentivesController)11062": {
        "encoding": "inplace",
        "label": "contract IChefIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(ILockerList)12463": {
        "encoding": "inplace",
        "label": "contract ILockerList",
        "numberOfBytes": "20"
      },
      "t_contract(IMFDHelper)12513": {
        "encoding": "inplace",
        "label": "contract IMFDHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)12596": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)12625": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedBalance)13343_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LockedBalance[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedBalance)13343_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)43415_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiFeeDistribution.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)43415_storage"
      },
      "t_mapping(t_address,t_struct(Reward)43404_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiFeeDistribution.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)43404_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Balances)43415_storage": {
        "encoding": "inplace",
        "label": "struct MultiFeeDistribution.Balances",
        "members": [
          {
            "astId": 43406,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 43408,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 43410,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "locked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 43412,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "lockedWithMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 43414,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "earned",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockedBalance)13343_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 13336,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13338,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13340,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "multiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13342,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Reward)43404_storage": {
        "encoding": "inplace",
        "label": "struct MultiFeeDistribution.Reward",
        "members": [
          {
            "astId": 43395,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "periodFinish",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 43397,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 43399,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 43401,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 43403,
            "contract": "contracts/staking/MFDPlus.sol:MFDPlus",
            "label": "balance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}