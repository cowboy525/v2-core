{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n//solhint-disable-next-line compiler-version\npragma solidity >=0.5.0;\n\n//solhint-disable func-name-mixedcase\ninterface IUniswapV2ERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n//solhint-disable-next-line compiler-version\npragma solidity >=0.5.0;\n\n//solhint-disable func-name-mixedcase\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(\n        address to\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.12;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "@uniswap/lib/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.12;\n\n//solhint-disable func-name-mixedcase\n\ninterface IUniswapV2Router01 {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n"
    },
    "@uniswap/lib/contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.12;\n\n//solhint-disable reason-string\n\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\nlibrary UniswapV2Library {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xff),\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"443533a897cfad2762695078bf6ee9b78b4edcda64ec31e1c83066cee4c90a7e\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 997;\n        amountIn = numerator / denominator + 1;\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1]\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i]\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/dependencies/math/BConst.sol": {
      "content": "// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.12;\n\ncontract BConst {\n\tuint public constant BONE = 10 ** 18;\n\n\tuint public constant MIN_BOUND_TOKENS = 2;\n\tuint public constant MAX_BOUND_TOKENS = 8;\n\n\tuint public constant MIN_FEE = BONE / 10 ** 6;\n\tuint public constant MAX_FEE = BONE / 10;\n\tuint public constant EXIT_FEE = 0;\n\n\tuint public constant MIN_WEIGHT = BONE;\n\tuint public constant MAX_WEIGHT = BONE * 50;\n\tuint public constant MAX_TOTAL_WEIGHT = BONE * 50;\n\tuint public constant MIN_BALANCE = BONE / 10 ** 12;\n\n\tuint public constant INIT_POOL_SUPPLY = BONE * 100;\n\n\tuint public constant MIN_BPOW_BASE = 1 wei;\n\tuint public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\n\tuint public constant BPOW_PRECISION = BONE / 10 ** 10;\n\n\tuint public constant MAX_IN_RATIO = BONE / 2;\n\tuint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n}\n"
    },
    "contracts/dependencies/math/BNum.sol": {
      "content": "// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.12;\n\nimport \"./BConst.sol\";\n\ncontract BNum is BConst {\n\tfunction btoi(uint a) internal pure returns (uint) {\n\t\treturn a / BONE;\n\t}\n\n\tfunction bfloor(uint a) internal pure returns (uint) {\n\t\treturn btoi(a) * BONE;\n\t}\n\n\tfunction badd(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a + b;\n\t\trequire(c >= a, \"ERR_ADD_OVERFLOW\");\n\t\treturn c;\n\t}\n\n\tfunction bsub(uint a, uint b) internal pure returns (uint) {\n\t\t(uint c, bool flag) = bsubSign(a, b);\n\t\trequire(!flag, \"ERR_SUB_UNDERFLOW\");\n\t\treturn c;\n\t}\n\n\tfunction bsubSign(uint a, uint b) internal pure returns (uint, bool) {\n\t\tif (a >= b) {\n\t\t\treturn (a - b, false);\n\t\t} else {\n\t\t\treturn (b - a, true);\n\t\t}\n\t}\n\n\tfunction bmul(uint a, uint b) internal pure returns (uint) {\n\t\tuint c0 = a * b;\n\t\trequire(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n\t\tuint c1 = c0 + (BONE / 2);\n\t\trequire(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n\t\tuint c2 = c1 / BONE;\n\t\treturn c2;\n\t}\n\n\tfunction bdiv(uint a, uint b) internal pure returns (uint) {\n\t\trequire(b != 0, \"ERR_DIV_ZERO\");\n\t\tuint c0 = a * BONE;\n\t\trequire(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n\t\tuint c1 = c0 + (b / 2);\n\t\trequire(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n\t\tuint c2 = c1 / b;\n\t\treturn c2;\n\t}\n\n\t// DSMath.wpow\n\tfunction bpowi(uint a, uint n) internal pure returns (uint) {\n\t\tuint z = n % 2 != 0 ? a : BONE;\n\n\t\tfor (n /= 2; n != 0; n /= 2) {\n\t\t\ta = bmul(a, a);\n\n\t\t\tif (n % 2 != 0) {\n\t\t\t\tz = bmul(z, a);\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n\n\t// Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n\t// Use `bpowi` for `b^e` and `bpowK` for k iterations\n\t// of approximation of b^0.w\n\tfunction bpow(uint base, uint exp) internal pure returns (uint) {\n\t\trequire(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n\t\trequire(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n\t\tuint whole = bfloor(exp);\n\t\tuint remain = bsub(exp, whole);\n\n\t\tuint wholePow = bpowi(base, btoi(whole));\n\n\t\tif (remain == 0) {\n\t\t\treturn wholePow;\n\t\t}\n\n\t\tuint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n\t\treturn bmul(wholePow, partialResult);\n\t}\n\n\tfunction bpowApprox(uint base, uint exp, uint precision) internal pure returns (uint) {\n\t\t// term 0:\n\t\tuint a = exp;\n\t\t(uint x, bool xneg) = bsubSign(base, BONE);\n\t\tuint term = BONE;\n\t\tuint sum = term;\n\t\tbool negative = false;\n\n\t\t// term(k) = numer / denom\n\t\t//         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n\t\t// each iteration, multiply previous term by (a-(k-1)) * x / k\n\t\t// continue until term is less than precision\n\t\tfor (uint i = 1; term >= precision; i++) {\n\t\t\tuint bigK = i * BONE;\n\t\t\t(uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n\t\t\tterm = bmul(term, bmul(c, x));\n\t\t\tterm = bdiv(term, bigK);\n\t\t\tif (term == 0) break;\n\n\t\t\tif (xneg) negative = !negative;\n\t\t\tif (cneg) negative = !negative;\n\t\t\tif (negative) {\n\t\t\t\tsum = bsub(sum, term);\n\t\t\t} else {\n\t\t\t\tsum = badd(sum, term);\n\t\t\t}\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n"
    },
    "contracts/dependencies/math/HomoraMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary HomoraMath {\n\tusing SafeMath for uint;\n\n\tfunction divCeil(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.add(rhs).sub(1) / rhs;\n\t}\n\n\tfunction fmul(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.mul(rhs) / (2 ** 112);\n\t}\n\n\tfunction fdiv(uint lhs, uint rhs) internal pure returns (uint) {\n\t\treturn lhs.mul(2 ** 112) / rhs;\n\t}\n\n\t// implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n\t// original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n\tfunction sqrt(uint x) internal pure returns (uint) {\n\t\tif (x == 0) return 0;\n\t\tuint xx = x;\n\t\tuint r = 1;\n\n\t\tif (xx >= 0x100000000000000000000000000000000) {\n\t\t\txx >>= 128;\n\t\t\tr <<= 64;\n\t\t}\n\n\t\tif (xx >= 0x10000000000000000) {\n\t\t\txx >>= 64;\n\t\t\tr <<= 32;\n\t\t}\n\t\tif (xx >= 0x100000000) {\n\t\t\txx >>= 32;\n\t\t\tr <<= 16;\n\t\t}\n\t\tif (xx >= 0x10000) {\n\t\t\txx >>= 16;\n\t\t\tr <<= 8;\n\t\t}\n\t\tif (xx >= 0x100) {\n\t\t\txx >>= 8;\n\t\t\tr <<= 4;\n\t\t}\n\t\tif (xx >= 0x10) {\n\t\t\txx >>= 4;\n\t\t\tr <<= 2;\n\t\t}\n\t\tif (xx >= 0x8) {\n\t\t\tr <<= 1;\n\t\t}\n\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1;\n\t\tr = (r + x / r) >> 1; // Seven iterations should be enough\n\t\tuint r1 = x / r;\n\t\treturn (r < r1 ? r : r1);\n\t}\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address payable) {\n\t\treturn payable(msg.sender);\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes memory) {\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\t\treturn msg.data;\n\t}\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title BaseUpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract BaseUpgradeabilityProxy is Proxy {\n\t/**\n\t * @dev Emitted when the implementation is upgraded.\n\t * @param implementation Address of the new implementation.\n\t */\n\tevent Upgraded(address indexed implementation);\n\n\t/**\n\t * @dev Storage slot with the address of the current implementation.\n\t * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n\t * validated in the constructor.\n\t */\n\tbytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n\t/**\n\t * @dev Returns the current implementation.\n\t * @return impl Address of the current implementation\n\t */\n\tfunction _implementation() internal view override returns (address impl) {\n\t\tbytes32 slot = IMPLEMENTATION_SLOT;\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\timpl := sload(slot)\n\t\t}\n\t}\n\n\t/**\n\t * @dev Upgrades the proxy to a new implementation.\n\t * @param newImplementation Address of the new implementation.\n\t */\n\tfunction _upgradeTo(address newImplementation) internal {\n\t\t_setImplementation(newImplementation);\n\t\temit Upgraded(newImplementation);\n\t}\n\n\t/**\n\t * @dev Sets the implementation address of the proxy.\n\t * @param newImplementation Address of the new implementation.\n\t */\n\tfunction _setImplementation(address newImplementation) internal {\n\t\trequire(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\t\tbytes32 slot = IMPLEMENTATION_SLOT;\n\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\tsstore(slot, newImplementation)\n\t\t}\n\t}\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\n\ncontract ContextUpgradeable is Initializable {\n\tfunction __Context_init() internal onlyInitializing {}\n\n\tfunction __Context_init_unchained() internal onlyInitializing {}\n\n\tfunction _msgSender() internal view virtual returns (address payable) {\n\t\treturn payable(msg.sender);\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes memory) {\n\t\tthis;\n\t\treturn msg.data;\n\t}\n\n\tuint256[50] private __gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/Initializable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\t/**\n\t * @dev Indicates that the contract has been initialized.\n\t */\n\tbool private initialized;\n\n\t/**\n\t * @dev Indicates that the contract is in the process of being initialized.\n\t */\n\tbool private initializing;\n\n\t/**\n\t * @dev Modifier to use in the initializer function of a contract.\n\t */\n\tmodifier initializer() {\n\t\trequire(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n\t\tbool isTopLevelCall = !initializing;\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = true;\n\t\t\tinitialized = true;\n\t\t}\n\n\t\t_;\n\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = false;\n\t\t}\n\t}\n\n\t/// @dev Returns true if and only if the function is running in the constructor\n\tfunction isConstructor() private view returns (bool) {\n\t\t// extcodesize checks the size of the code stored in an address, and\n\t\t// address returns the current address. Since the code is still not\n\t\t// deployed when running a constructor, any checks on its code size will\n\t\t// yield zero, making it an effective way to detect if a contract is\n\t\t// under construction or not.\n\t\tuint256 cs;\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\tcs := extcodesize(address())\n\t\t}\n\t\treturn cs == 0;\n\t}\n\n\tmodifier onlyInitializing() {\n\t\trequire(initializing, \"Initializable: contract is not initializing\");\n\t\t_;\n\t}\n\n\t// Reserved storage space to allow for layout changes in the future.\n\tuint256[50] private ______gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./BaseUpgradeabilityProxy.sol\";\n\n/**\n * @title InitializableUpgradeabilityProxy\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n * implementation and init data.\n */\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n\t/**\n\t * @dev Contract initializer.\n\t * @param _logic Address of the initial implementation.\n\t * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n\t * It should include the signature and the parameters of the function to be called, as described in\n\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n\t * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n\t */\n\tfunction initialize(address _logic, bytes memory _data) public payable {\n\t\trequire(_implementation() == address(0));\n\t\tassert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n\t\t_setImplementation(_logic);\n\t\tif (_data.length > 0) {\n\t\t\t(bool success, ) = _logic.delegatecall(_data);\n\t\t\trequire(success);\n\t\t}\n\t}\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tfunction __Ownable_init() internal onlyInitializing {\n\t\t__Ownable_init_unchained();\n\t}\n\n\tfunction __Ownable_init_unchained() internal onlyInitializing {\n\t\t_transferOwnership(_msgSender());\n\t}\n\n\tfunction owner() public view virtual returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\t_transferOwnership(address(0));\n\t}\n\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\t_transferOwnership(newOwner);\n\t}\n\n\tfunction _transferOwnership(address newOwner) internal virtual {\n\t\taddress oldOwner = _owner;\n\t\t_owner = newOwner;\n\t\temit OwnershipTransferred(oldOwner, newOwner);\n\t}\n\n\tuint256[49] private __gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./Initializable.sol\";\nimport \"./ContextUpgradeable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n\t/**\n\t * @dev Emitted when the pause is triggered by `account`.\n\t */\n\tevent Paused(address account);\n\n\t/**\n\t * @dev Emitted when the pause is lifted by `account`.\n\t */\n\tevent Unpaused(address account);\n\n\tbool private _paused;\n\n\t/**\n\t * @dev Initializes the contract in unpaused state.\n\t */\n\tfunction __Pausable_init() internal onlyInitializing {\n\t\t__Pausable_init_unchained();\n\t}\n\n\tfunction __Pausable_init_unchained() internal onlyInitializing {\n\t\t_paused = false;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must not be paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\t_requireNotPaused();\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must be paused.\n\t */\n\tmodifier whenPaused() {\n\t\t_requirePaused();\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Returns true if the contract is paused, and false otherwise.\n\t */\n\tfunction paused() public view virtual returns (bool) {\n\t\treturn _paused;\n\t}\n\n\t/**\n\t * @dev Throws if the contract is paused.\n\t */\n\tfunction _requireNotPaused() internal view virtual {\n\t\trequire(!paused(), \"Pausable: paused\");\n\t}\n\n\t/**\n\t * @dev Throws if the contract is not paused.\n\t */\n\tfunction _requirePaused() internal view virtual {\n\t\trequire(paused(), \"Pausable: not paused\");\n\t}\n\n\t/**\n\t * @dev Triggers stopped state.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must not be paused.\n\t */\n\tfunction _pause() internal virtual whenNotPaused {\n\t\t_paused = true;\n\t\temit Paused(_msgSender());\n\t}\n\n\t/**\n\t * @dev Returns to normal state.\n\t *\n\t * Requirements:\n\t *\n\t * - The contract must be paused.\n\t */\n\tfunction _unpause() internal virtual whenPaused {\n\t\t_paused = false;\n\t\temit Unpaused(_msgSender());\n\t}\n\n\t/**\n\t * @dev This empty reserved space is put in place to allow future versions to add new\n\t * variables without shifting down storage in the inheritance chain.\n\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n\t */\n\tuint256[49] private __gap;\n}\n"
    },
    "contracts/dependencies/openzeppelin/upgradeability/Proxy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\nabstract contract Proxy {\n\t/**\n\t * @dev Fallback function.\n\t * Implemented entirely in `_fallback`.\n\t */\n\tfallback() external payable {\n\t\t_fallback();\n\t}\n\n\t/**\n\t * @return The Address of the implementation.\n\t */\n\tfunction _implementation() internal view virtual returns (address);\n\n\t/**\n\t * @dev Delegates execution to an implementation contract.\n\t * This is a low level function that doesn't return to its internal call site.\n\t * It will return to the external caller whatever the implementation returns.\n\t * @param implementation Address to delegate.\n\t */\n\tfunction _delegate(address implementation) internal {\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\t// Copy msg.data. We take full control of memory in this inline assembly\n\t\t\t// block because it will not return to Solidity code. We overwrite the\n\t\t\t// Solidity scratch pad at memory position 0.\n\t\t\tcalldatacopy(0, 0, calldatasize())\n\n\t\t\t// Call the implementation.\n\t\t\t// out and outsize are 0 because we don't know the size yet.\n\t\t\tlet result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\t\t\t// Copy the returned data.\n\t\t\treturndatacopy(0, 0, returndatasize())\n\n\t\t\tswitch result\n\t\t\t// delegatecall returns 0 on error.\n\t\t\tcase 0 {\n\t\t\t\trevert(0, returndatasize())\n\t\t\t}\n\t\t\tdefault {\n\t\t\t\treturn(0, returndatasize())\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Function that is run as the first thing in the fallback function.\n\t * Can be redefined in derived contracts to add functionality.\n\t * Redefinitions must call super._willFallback().\n\t */\n\tfunction _willFallback() internal virtual {}\n\n\t/**\n\t * @dev fallback implementation.\n\t * Extracted to enable manual triggering.\n\t */\n\tfunction _fallback() internal {\n\t\t_willFallback();\n\t\t_delegate(_implementation());\n\t}\n}\n"
    },
    "contracts/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface AggregatorInterface {\n\tfunction latestAnswer() external view returns (int256);\n\n\tfunction latestTimestamp() external view returns (uint256);\n\n\tfunction latestRound() external view returns (uint256);\n\n\tfunction getAnswer(uint256 roundId) external view returns (int256);\n\n\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\n\n\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "contracts/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface AggregatorV3Interface {\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\t// getRoundData and latestRoundData should both raise \"No data present\"\n\t// if they do not have data to report, instead of returning unset values\n\t// which could be misinterpreted as actual reported values.\n\tfunction getRoundData(\n\t\tuint80 _roundId\n\t)\n\t\texternal\n\t\tview\n\t\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n\tfunction latestRoundData()\n\t\texternal\n\t\tview\n\t\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/interfaces/balancer/IWeightedPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma abicoder v2;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBasePool is IERC20 {\n\tfunction getSwapFeePercentage() external view returns (uint256);\n\n\tfunction setSwapFeePercentage(uint256 swapFeePercentage) external;\n\n\tfunction setAssetManagerPoolConfig(IERC20 token, IAssetManager.PoolConfig memory poolConfig) external;\n\n\tfunction setPaused(bool paused) external;\n\n\tfunction getVault() external view returns (IVault);\n\n\tfunction getPoolId() external view returns (bytes32);\n\n\tfunction getOwner() external view returns (address);\n}\n\ninterface IWeightedPoolFactory {\n\tfunction create(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tIERC20[] memory tokens,\n\t\tuint256[] memory weights,\n\t\taddress[] memory rateProviders,\n\t\tuint256 swapFeePercentage,\n\t\taddress owner\n\t) external returns (address);\n}\n\ninterface IWeightedPool is IBasePool {\n\tfunction getSwapEnabled() external view returns (bool);\n\n\tfunction getNormalizedWeights() external view returns (uint256[] memory);\n\n\tfunction getGradualWeightUpdateParams()\n\t\texternal\n\t\tview\n\t\treturns (uint256 startTime, uint256 endTime, uint256[] memory endWeights);\n\n\tfunction setSwapEnabled(bool swapEnabled) external;\n\n\tfunction updateWeightsGradually(uint256 startTime, uint256 endTime, uint256[] memory endWeights) external;\n\n\tfunction withdrawCollectedManagementFees(address recipient) external;\n\n\tenum JoinKind {\n\t\tINIT,\n\t\tEXACT_TOKENS_IN_FOR_BPT_OUT,\n\t\tTOKEN_IN_FOR_EXACT_BPT_OUT\n\t}\n\tenum ExitKind {\n\t\tEXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n\t\tEXACT_BPT_IN_FOR_TOKENS_OUT,\n\t\tBPT_IN_FOR_EXACT_TOKENS_OUT\n\t}\n}\n\ninterface IAssetManager {\n\tstruct PoolConfig {\n\t\tuint64 targetPercentage;\n\t\tuint64 criticalPercentage;\n\t\tuint64 feePercentage;\n\t}\n\n\tfunction setPoolConfig(bytes32 poolId, PoolConfig calldata config) external;\n}\n\ninterface IAsset {}\n\ninterface IVault {\n\tfunction hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n\tfunction setRelayerApproval(address sender, address relayer, bool approved) external;\n\n\tevent RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n\tfunction getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n\tfunction manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n\tstruct UserBalanceOp {\n\t\tUserBalanceOpKind kind;\n\t\tIAsset asset;\n\t\tuint256 amount;\n\t\taddress sender;\n\t\taddress payable recipient;\n\t}\n\n\tenum UserBalanceOpKind {\n\t\tDEPOSIT_INTERNAL,\n\t\tWITHDRAW_INTERNAL,\n\t\tTRANSFER_INTERNAL,\n\t\tTRANSFER_EXTERNAL\n\t}\n\tevent InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\tevent ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n\tenum PoolSpecialization {\n\t\tGENERAL,\n\t\tMINIMAL_SWAP_INFO,\n\t\tTWO_TOKEN\n\t}\n\n\tfunction registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n\tevent PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n\tfunction getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n\tfunction registerTokens(bytes32 poolId, IERC20[] memory tokens, address[] memory assetManagers) external;\n\n\tevent TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n\tfunction deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n\tevent TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n\tfunction getPoolTokenInfo(\n\t\tbytes32 poolId,\n\t\tIERC20 token\n\t) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\n\n\tfunction getPoolTokens(\n\t\tbytes32 poolId\n\t) external view returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\n\n\tfunction joinPool(\n\t\tbytes32 poolId,\n\t\taddress sender,\n\t\taddress recipient,\n\t\tJoinPoolRequest memory request\n\t) external payable;\n\n\tstruct JoinPoolRequest {\n\t\tIAsset[] assets;\n\t\tuint256[] maxAmountsIn;\n\t\tbytes userData;\n\t\tbool fromInternalBalance;\n\t}\n\n\tfunction exitPool(\n\t\tbytes32 poolId,\n\t\taddress sender,\n\t\taddress payable recipient,\n\t\tExitPoolRequest memory request\n\t) external;\n\n\tstruct ExitPoolRequest {\n\t\tIAsset[] assets;\n\t\tuint256[] minAmountsOut;\n\t\tbytes userData;\n\t\tbool toInternalBalance;\n\t}\n\n\tevent PoolBalanceChanged(\n\t\tbytes32 indexed poolId,\n\t\taddress indexed liquidityProvider,\n\t\tIERC20[] tokens,\n\t\tint256[] deltas,\n\t\tuint256[] protocolFeeAmounts\n\t);\n\n\tenum PoolBalanceChangeKind {\n\t\tJOIN,\n\t\tEXIT\n\t}\n\n\tenum SwapKind {\n\t\tGIVEN_IN,\n\t\tGIVEN_OUT\n\t}\n\n\tfunction swap(\n\t\tSingleSwap memory singleSwap,\n\t\tFundManagement memory funds,\n\t\tuint256 limit,\n\t\tuint256 deadline\n\t) external payable returns (uint256);\n\n\tstruct SingleSwap {\n\t\tbytes32 poolId;\n\t\tSwapKind kind;\n\t\tIAsset assetIn;\n\t\tIAsset assetOut;\n\t\tuint256 amount;\n\t\tbytes userData;\n\t}\n\n\tfunction batchSwap(\n\t\tSwapKind kind,\n\t\tBatchSwapStep[] memory swaps,\n\t\tIAsset[] memory assets,\n\t\tFundManagement memory funds,\n\t\tint256[] memory limits,\n\t\tuint256 deadline\n\t) external payable returns (int256[] memory);\n\n\tstruct BatchSwapStep {\n\t\tbytes32 poolId;\n\t\tuint256 assetInIndex;\n\t\tuint256 assetOutIndex;\n\t\tuint256 amount;\n\t\tbytes userData;\n\t}\n\n\tevent Swap(\n\t\tbytes32 indexed poolId,\n\t\tIERC20 indexed tokenIn,\n\t\tIERC20 indexed tokenOut,\n\t\tuint256 amountIn,\n\t\tuint256 amountOut\n\t);\n\tstruct FundManagement {\n\t\taddress sender;\n\t\tbool fromInternalBalance;\n\t\taddress payable recipient;\n\t\tbool toInternalBalance;\n\t}\n\n\tfunction queryBatchSwap(\n\t\tSwapKind kind,\n\t\tBatchSwapStep[] memory swaps,\n\t\tIAsset[] memory assets,\n\t\tFundManagement memory funds\n\t) external returns (int256[] memory assetDeltas);\n\n\tfunction managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n\tstruct PoolBalanceOp {\n\t\tPoolBalanceOpKind kind;\n\t\tbytes32 poolId;\n\t\tIERC20 token;\n\t\tuint256 amount;\n\t}\n\n\tenum PoolBalanceOpKind {\n\t\tWITHDRAW,\n\t\tDEPOSIT,\n\t\tUPDATE\n\t}\n\tevent PoolBalanceManaged(\n\t\tbytes32 indexed poolId,\n\t\taddress indexed assetManager,\n\t\tIERC20 indexed token,\n\t\tint256 cashDelta,\n\t\tint256 managedDelta\n\t);\n\n\tfunction setPaused(bool paused) external;\n}\n"
    },
    "contracts/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IAaveIncentivesController {\n\tevent RewardsAccrued(address indexed user, uint256 amount);\n\n\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\n\n\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\n\n\tevent ClaimerSet(address indexed user, address indexed claimer);\n\n\t/*\n\t * @dev Returns the configuration of the distribution for a certain asset\n\t * @param asset The address of the reference asset of the distribution\n\t * @return The asset index, the emission per second and the last updated timestamp\n\t **/\n\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\n\n\t/**\n\t * @dev Whitelists an address to claim the rewards on behalf of another address\n\t * @param user The address of the user\n\t * @param claimer The address of the claimer\n\t */\n\tfunction setClaimer(address user, address claimer) external;\n\n\t/**\n\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n\t * @param user The address of the user\n\t * @return The claimer address\n\t */\n\tfunction getClaimer(address user) external view returns (address);\n\n\t/**\n\t * @dev Configure assets for a certain rewards emission\n\t * @param assets The assets to incentivize\n\t * @param emissionsPerSecond The emission for each asset\n\t */\n\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t **/\n\tfunction handleActionBefore(address user) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t * @param userBalance The balance of the user of the asset in the lending pool\n\t * @param totalSupply The total supply of the asset in the lending pool\n\t **/\n\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\n\n\t/**\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n\t * @param user The address of the user\n\t * @return The rewards\n\t **/\n\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n\t/**\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n\t * @param amount Amount of rewards to claim\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\n\n\t/**\n\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n\t * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n\t * @param amount Amount of rewards to claim\n\t * @param user Address to check and claim rewards\n\t * @param to Address that will be receiving the rewards\n\t * @return Rewards claimed\n\t **/\n\tfunction claimRewardsOnBehalf(\n\t\taddress[] calldata assets,\n\t\tuint256 amount,\n\t\taddress user,\n\t\taddress to\n\t) external returns (uint256);\n\n\t/**\n\t * @dev returns the unclaimed rewards of the user\n\t * @param user the address of the user\n\t * @return the unclaimed user rewards\n\t */\n\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\n\n\t/**\n\t * @dev returns the unclaimed rewards of the user\n\t * @param user the address of the user\n\t * @param asset The asset to incentivize\n\t * @return the user index for the asset\n\t */\n\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\n\n\t/**\n\t * @dev for backward compatibility with previous implementation of the Incentives controller\n\t */\n\tfunction REWARD_TOKEN() external view returns (address);\n\n\t/**\n\t * @dev for backward compatibility with previous implementation of the Incentives controller\n\t */\n\tfunction PRECISION() external view returns (uint8);\n\n\t/**\n\t * @dev Gets the distribution end timestamp of the emissions\n\t */\n\tfunction DISTRIBUTION_END() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IAaveOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title IAaveOracle interface\n * @notice Interface for the Aave oracle.\n **/\n\ninterface IAaveOracle {\n\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\n\n\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\n\n\t/***********\n    @dev returns the asset price in ETH\n     */\n\tfunction getAssetPrice(address asset) external view returns (uint256);\n\n\tfunction getSourceOfAsset(address asset) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\nimport {IInitializableAToken} from \"./IInitializableAToken.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\n\t/**\n\t * @dev Emitted after the mint action\n\t * @param from The address performing the mint\n\t * @param value The amount being\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent Mint(address indexed from, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Mints `amount` aTokens to `user`\n\t * @param user The address receiving the minted tokens\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t * @return `true` if the the previous balance of the user was 0\n\t */\n\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\n\n\t/**\n\t * @dev Emitted after aTokens are burned\n\t * @param from The owner of the aTokens, getting them burned\n\t * @param target The address that will receive the underlying\n\t * @param value The amount being burned\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Emitted during the transfer action\n\t * @param from The user whose tokens are being transferred\n\t * @param to The recipient\n\t * @param value The amount being transferred\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n\t * @param user The owner of the aTokens, getting them burned\n\t * @param receiverOfUnderlying The address that will receive the underlying\n\t * @param amount The amount being burned\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\n\n\t/**\n\t * @dev Mints aTokens to the reserve treasury\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t */\n\tfunction mintToTreasury(uint256 amount, uint256 index) external;\n\n\t/**\n\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n\t * @param from The address getting liquidated, current owner of the aTokens\n\t * @param to The recipient\n\t * @param value The amount of tokens getting transferred\n\t **/\n\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\n\n\t/**\n\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n\t * assets in borrow(), withdraw() and flashLoan()\n\t * @param user The recipient of the underlying\n\t * @param amount The amount getting transferred\n\t * @return The amount transferred\n\t **/\n\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n\n\t/**\n\t * @dev Invoked to execute actions on the aToken side after a repayment.\n\t * @param user The user executing the repayment\n\t * @param amount The amount getting repaid\n\t **/\n\tfunction handleRepayment(address user, uint256 amount) external;\n\n\t/**\n\t * @dev Returns the address of the incentives controller contract\n\t **/\n\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\n\n\t/**\n\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t **/\n\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IBountyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\ninterface IBountyManager {\n\tfunction quote(address _param) external returns (uint256 bounty);\n\n\tfunction claim(address _param) external returns (uint256 bounty);\n\n\tfunction minDLPBalance() external view returns (uint256 amt);\n}\n"
    },
    "contracts/interfaces/IChainlinkAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\n\npragma solidity 0.8.12;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "contracts/interfaces/IChefIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IChefIncentivesController {\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t **/\n\tfunction handleActionBefore(address user) external;\n\n\t/**\n\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\n\t * @param user The address of the user\n\t * @param userBalance The balance of the user of the asset in the lending pool\n\t * @param totalSupply The total supply of the asset in the lending pool\n\t **/\n\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\n\n\t/**\n\t * @dev Called by the locking contracts after locking or unlocking happens\n\t * @param user The address of the user\n\t **/\n\tfunction beforeLockUpdate(address user) external;\n\n\t/**\n\t * @notice Hook for lock update.\n\t * @dev Called by the locking contracts after locking or unlocking happens\n\t */\n\tfunction afterLockUpdate(address _user) external;\n\n\tfunction addPool(address _token, uint256 _allocPoint) external;\n\n\tfunction claim(address _user, address[] calldata _tokens) external;\n\n\tfunction setClaimReceiver(address _user, address _receiver) external;\n\n\tfunction getRegisteredTokens() external view returns (address[] memory);\n\n\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\n\n\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\n\n\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\n\n\tfunction claimAll(address _user) external;\n\n\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\n}\n"
    },
    "contracts/interfaces/ICompounder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface ICompounder {\n\tfunction claimCompound(address _user, bool _execute) external returns (uint256 tokensOut);\n\n\tfunction viewPendingRewards(address user) external view returns (address[] memory tokens, uint256[] memory amts);\n\n\tfunction estimateReturns(address _in, address _out, uint256 amtIn) external view returns (uint256 amtOut);\n}\n"
    },
    "contracts/interfaces/IEligibilityDataProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface IEligibilityDataProvider {\n\tfunction refresh(address user) external;\n\n\tfunction updatePrice() external;\n\n\tfunction requiredEthValue(address user) external view returns (uint256 required);\n\n\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\n\n\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\n\n\tfunction lockedUsdValue(address user) external view returns (uint256);\n\n\tfunction requiredUsdValue(address user) external view returns (uint256 required);\n\n\tfunction lastEligibleStatus(address user) external view returns (bool);\n\n\tfunction isMarketDisqualified(address user) external view returns (bool);\n\n\tfunction rewardEligibleAmount(address token) external view returns (uint256);\n\n\tfunction setDqTime(address _user, uint256 _time) external;\n\n\tfunction getDqTime(address _user) external view returns (uint256);\n\n\tfunction autoprune() external returns (uint256 processed);\n\n\tfunction requiredDepositRatio() external view returns (uint256);\n\n\tfunction RATIO_DIVISOR() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC20DetailedBytes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20DetailedBytes is IERC20 {\n\tfunction name() external view returns (bytes32);\n\n\tfunction symbol() external view returns (bytes32);\n\n\tfunction decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./LockedBalance.sol\";\n\ninterface IFeeDistribution {\n\tstruct RewardData {\n\t\taddress token;\n\t\tuint256 amount;\n\t}\n\n\tfunction addReward(address rewardsToken) external;\n\n\tfunction lockedBalances(\n\t\taddress user\n\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\n}\n"
    },
    "contracts/interfaces/IInitializableAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {ILendingPool} from \"./ILendingPool.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\n/**\n * @title IInitializableAToken\n * @notice Interface for the initialize function on AToken\n * @author Aave\n **/\ninterface IInitializableAToken {\n\t/**\n\t * @dev Emitted when an aToken is initialized\n\t * @param underlyingAsset The address of the underlying asset\n\t * @param pool The address of the associated lending pool\n\t * @param treasury The address of the treasury\n\t * @param incentivesController The address of the incentives controller for this aToken\n\t * @param aTokenDecimals the decimals of the underlying\n\t * @param aTokenName the name of the aToken\n\t * @param aTokenSymbol the symbol of the aToken\n\t * @param params A set of encoded parameters for additional initialization\n\t **/\n\tevent Initialized(\n\t\taddress indexed underlyingAsset,\n\t\taddress indexed pool,\n\t\taddress treasury,\n\t\taddress incentivesController,\n\t\tuint8 aTokenDecimals,\n\t\tstring aTokenName,\n\t\tstring aTokenSymbol,\n\t\tbytes params\n\t);\n\n\t/**\n\t * @dev Initializes the aToken\n\t * @param pool The address of the lending pool where this aToken will be used\n\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t * @param incentivesController The smart contract managing potential incentives distribution\n\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n\t * @param aTokenName The name of the aToken\n\t * @param aTokenSymbol The symbol of the aToken\n\t */\n\tfunction initialize(\n\t\tILendingPool pool,\n\t\taddress treasury,\n\t\taddress underlyingAsset,\n\t\tIAaveIncentivesController incentivesController,\n\t\tuint8 aTokenDecimals,\n\t\tstring calldata aTokenName,\n\t\tstring calldata aTokenSymbol,\n\t\tbytes calldata params\n\t) external;\n}\n"
    },
    "contracts/interfaces/IInitializableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {ILendingPool} from \"./ILendingPool.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\n/**\n * @title IInitializableDebtToken\n * @notice Interface for the initialize function common between debt tokens\n * @author Aave\n **/\ninterface IInitializableDebtToken {\n\t/**\n\t * @dev Emitted when a debt token is initialized\n\t * @param underlyingAsset The address of the underlying asset\n\t * @param pool The address of the associated lending pool\n\t * @param incentivesController The address of the incentives controller for this aToken\n\t * @param debtTokenDecimals the decimals of the debt token\n\t * @param debtTokenName the name of the debt token\n\t * @param debtTokenSymbol the symbol of the debt token\n\t * @param params A set of encoded parameters for additional initialization\n\t **/\n\tevent Initialized(\n\t\taddress indexed underlyingAsset,\n\t\taddress indexed pool,\n\t\taddress incentivesController,\n\t\tuint8 debtTokenDecimals,\n\t\tstring debtTokenName,\n\t\tstring debtTokenSymbol,\n\t\tbytes params\n\t);\n\n\t/**\n\t * @dev Initializes the debt token.\n\t * @param pool The address of the lending pool where this aToken will be used\n\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t * @param incentivesController The smart contract managing potential incentives distribution\n\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\n\t * @param debtTokenName The name of the token\n\t * @param debtTokenSymbol The symbol of the token\n\t */\n\tfunction initialize(\n\t\tILendingPool pool,\n\t\taddress underlyingAsset,\n\t\tIAaveIncentivesController incentivesController,\n\t\tuint8 debtTokenDecimals,\n\t\tstring memory debtTokenName,\n\t\tstring memory debtTokenSymbol,\n\t\tbytes calldata params\n\t) external;\n}\n"
    },
    "contracts/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../lending/libraries/types/DataTypes.sol\";\n\ninterface ILendingPool {\n\t/**\n\t * @dev Emitted on deposit()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address initiating the deposit\n\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n\t * @param amount The amount deposited\n\t * @param referral The referral code used\n\t **/\n\tevent Deposit(\n\t\taddress indexed reserve,\n\t\taddress user,\n\t\taddress indexed onBehalfOf,\n\t\tuint256 amount,\n\t\tuint16 indexed referral\n\t);\n\n\t/**\n\t * @dev Emitted on withdraw()\n\t * @param reserve The address of the underlyng asset being withdrawn\n\t * @param user The address initiating the withdrawal, owner of aTokens\n\t * @param to Address that will receive the underlying\n\t * @param amount The amount to be withdrawn\n\t **/\n\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n\t/**\n\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n\t * @param reserve The address of the underlying asset being borrowed\n\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n\t * initiator of the transaction on flashLoan()\n\t * @param onBehalfOf The address that will be getting the debt\n\t * @param amount The amount borrowed out\n\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n\t * @param borrowRate The numeric rate at which the user has borrowed\n\t * @param referral The referral code used\n\t **/\n\tevent Borrow(\n\t\taddress indexed reserve,\n\t\taddress user,\n\t\taddress indexed onBehalfOf,\n\t\tuint256 amount,\n\t\tuint256 borrowRateMode,\n\t\tuint256 borrowRate,\n\t\tuint16 indexed referral\n\t);\n\n\t/**\n\t * @dev Emitted on repay()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The beneficiary of the repayment, getting his debt reduced\n\t * @param repayer The address of the user initiating the repay(), providing the funds\n\t * @param amount The amount repaid\n\t **/\n\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n\t/**\n\t * @dev Emitted on swapBorrowRateMode()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user swapping his rate mode\n\t * @param rateMode The rate mode that the user wants to swap to\n\t **/\n\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n\t/**\n\t * @dev Emitted on setUserUseReserveAsCollateral()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user enabling the usage as collateral\n\t **/\n\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on setUserUseReserveAsCollateral()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user enabling the usage as collateral\n\t **/\n\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on rebalanceStableBorrowRate()\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param user The address of the user for which the rebalance has been executed\n\t **/\n\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n\t/**\n\t * @dev Emitted on flashLoan()\n\t * @param target The address of the flash loan receiver contract\n\t * @param initiator The address initiating the flash loan\n\t * @param asset The address of the asset being flash borrowed\n\t * @param amount The amount flash borrowed\n\t * @param premium The fee flash borrowed\n\t * @param referralCode The referral code used\n\t **/\n\tevent FlashLoan(\n\t\taddress indexed target,\n\t\taddress indexed initiator,\n\t\taddress indexed asset,\n\t\tuint256 amount,\n\t\tuint256 premium,\n\t\tuint16 referralCode\n\t);\n\n\t/**\n\t * @dev Emitted when the pause is triggered.\n\t */\n\tevent Paused();\n\n\t/**\n\t * @dev Emitted when the pause is lifted.\n\t */\n\tevent Unpaused();\n\n\t/**\n\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n\t * LendingPoolCollateral manager using a DELEGATECALL\n\t * This allows to have the events in the generated ABI for LendingPool.\n\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n\t * @param user The address of the borrower getting liquidated\n\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n\t * @param liquidator The address of the liquidator\n\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n\t * to receive the underlying collateral asset directly\n\t **/\n\tevent LiquidationCall(\n\t\taddress indexed collateralAsset,\n\t\taddress indexed debtAsset,\n\t\taddress indexed user,\n\t\tuint256 debtToCover,\n\t\tuint256 liquidatedCollateralAmount,\n\t\taddress liquidator,\n\t\tbool receiveAToken\n\t);\n\n\t/**\n\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n\t * gets added to the LendingPool ABI\n\t * @param reserve The address of the underlying asset of the reserve\n\t * @param liquidityRate The new liquidity rate\n\t * @param stableBorrowRate The new stable borrow rate\n\t * @param variableBorrowRate The new variable borrow rate\n\t * @param liquidityIndex The new liquidity index\n\t * @param variableBorrowIndex The new variable borrow index\n\t **/\n\tevent ReserveDataUpdated(\n\t\taddress indexed reserve,\n\t\tuint256 liquidityRate,\n\t\tuint256 stableBorrowRate,\n\t\tuint256 variableBorrowRate,\n\t\tuint256 liquidityIndex,\n\t\tuint256 variableBorrowIndex\n\t);\n\n\t/**\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n\t * @param asset The address of the underlying asset to deposit\n\t * @param amount The amount to be deposited\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n\t *   is a different wallet\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n\t/**\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n\t * @param asset The address of the underlying asset to withdraw\n\t * @param amount The underlying amount to be withdrawn\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n\t *   different wallet\n\t * @return The final amount withdrawn\n\t **/\n\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n\t/**\n\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n\t * corresponding debt token (StableDebtToken or VariableDebtToken)\n\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n\t * @param asset The address of the underlying asset to borrow\n\t * @param amount The amount to be borrowed\n\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n\t * if he has been given credit delegation allowance\n\t **/\n\tfunction borrow(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 interestRateMode,\n\t\tuint16 referralCode,\n\t\taddress onBehalfOf\n\t) external;\n\n\t/**\n\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n\t * @param asset The address of the borrowed underlying asset previously borrowed\n\t * @param amount The amount to repay\n\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n\t * other borrower whose debt should be removed\n\t * @return The final amount repaid\n\t **/\n\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\n\n\t/**\n\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n\t * @param asset The address of the underlying asset borrowed\n\t * @param rateMode The rate mode that the user wants to swap to\n\t **/\n\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n\t/**\n\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n\t * - Users can be rebalanced if the following conditions are satisfied:\n\t *     1. Usage ratio is above 95%\n\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n\t *        borrowed at a stable rate and depositors are not earning enough\n\t * @param asset The address of the underlying asset borrowed\n\t * @param user The address of the user to be rebalanced\n\t **/\n\tfunction rebalanceStableBorrowRate(address asset, address user) external;\n\n\t/**\n\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n\t * @param asset The address of the underlying asset deposited\n\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n\t **/\n\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n\t/**\n\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n\t * @param user The address of the borrower getting liquidated\n\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n\t * to receive the underlying collateral asset directly\n\t **/\n\tfunction liquidationCall(\n\t\taddress collateralAsset,\n\t\taddress debtAsset,\n\t\taddress user,\n\t\tuint256 debtToCover,\n\t\tbool receiveAToken\n\t) external;\n\n\t/**\n\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n\t * as long as the amount taken plus a fee is returned.\n\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n\t * For further details please visit https://developers.aave.com\n\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n\t * @param assets The addresses of the assets being flash-borrowed\n\t * @param amounts The amounts amounts being flash-borrowed\n\t * @param modes Types of the debt to open if the flash loan is not returned:\n\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n\t * @param params Variadic packed params to pass to the receiver as extra information\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction flashLoan(\n\t\taddress receiverAddress,\n\t\taddress[] calldata assets,\n\t\tuint256[] calldata amounts,\n\t\tuint256[] calldata modes,\n\t\taddress onBehalfOf,\n\t\tbytes calldata params,\n\t\tuint16 referralCode\n\t) external;\n\n\t/**\n\t * @dev Returns the user account data across all the reserves\n\t * @param user The address of the user\n\t * @return totalCollateralETH the total collateral in ETH of the user\n\t * @return totalDebtETH the total debt in ETH of the user\n\t * @return availableBorrowsETH the borrowing power left of the user\n\t * @return currentLiquidationThreshold the liquidation threshold of the user\n\t * @return ltv the loan to value of the user\n\t * @return healthFactor the current health factor of the user\n\t **/\n\tfunction getUserAccountData(\n\t\taddress user\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256 totalCollateralETH,\n\t\t\tuint256 totalDebtETH,\n\t\t\tuint256 availableBorrowsETH,\n\t\t\tuint256 currentLiquidationThreshold,\n\t\t\tuint256 ltv,\n\t\t\tuint256 healthFactor\n\t\t);\n\n\tfunction initReserve(\n\t\taddress reserve,\n\t\taddress aTokenAddress,\n\t\taddress stableDebtAddress,\n\t\taddress variableDebtAddress,\n\t\taddress interestRateStrategyAddress\n\t) external;\n\n\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n\tfunction setConfiguration(address reserve, uint256 configuration) external;\n\n\t/**\n\t * @dev Returns the configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The configuration of the reserve\n\t **/\n\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n\t/**\n\t * @dev Returns the configuration of the user across all the reserves\n\t * @param user The user address\n\t * @return The configuration of the user\n\t **/\n\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n\t/**\n\t * @dev Returns the normalized income normalized income of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve's normalized income\n\t */\n\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the normalized variable debt per unit of asset\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve normalized variable debt\n\t */\n\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the state and configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The state of the reserve\n\t **/\n\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n\tfunction finalizeTransfer(\n\t\taddress asset,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tuint256 balanceFromAfter,\n\t\tuint256 balanceToBefore\n\t) external;\n\n\tfunction getReservesList() external view returns (address[] memory);\n\n\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n\tfunction setPause(bool val) external;\n\n\tfunction paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n\tevent MarketIdSet(string newMarketId);\n\tevent LendingPoolUpdated(address indexed newAddress);\n\tevent ConfigurationAdminUpdated(address indexed newAddress);\n\tevent EmergencyAdminUpdated(address indexed newAddress);\n\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\n\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\n\tevent PriceOracleUpdated(address indexed newAddress);\n\tevent LendingRateOracleUpdated(address indexed newAddress);\n\tevent ProxyCreated(bytes32 id, address indexed newAddress);\n\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n\tfunction getMarketId() external view returns (string memory);\n\n\tfunction setMarketId(string calldata marketId) external;\n\n\tfunction setAddress(bytes32 id, address newAddress) external;\n\n\tfunction setAddressAsProxy(bytes32 id, address impl) external;\n\n\tfunction getAddress(bytes32 id) external view returns (address);\n\n\tfunction getLendingPool() external view returns (address);\n\n\tfunction setLendingPoolImpl(address pool) external;\n\n\tfunction getLendingPoolConfigurator() external view returns (address);\n\n\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\n\n\tfunction getLendingPoolCollateralManager() external view returns (address);\n\n\tfunction setLendingPoolCollateralManager(address manager) external;\n\n\tfunction getPoolAdmin() external view returns (address);\n\n\tfunction setPoolAdmin(address admin) external;\n\n\tfunction getEmergencyAdmin() external view returns (address);\n\n\tfunction setEmergencyAdmin(address admin) external;\n\n\tfunction getPriceOracle() external view returns (address);\n\n\tfunction setPriceOracle(address priceOracle) external;\n\n\tfunction getLendingRateOracle() external view returns (address);\n\n\tfunction setLendingRateOracle(address lendingRateOracle) external;\n\n\tfunction getLiquidationFeeTo() external view returns (address);\n\n\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\n}\n"
    },
    "contracts/interfaces/ILendingPoolConfigurator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface ILendingPoolConfigurator {\n\tstruct InitReserveInput {\n\t\taddress aTokenImpl;\n\t\taddress stableDebtTokenImpl;\n\t\taddress variableDebtTokenImpl;\n\t\tuint8 underlyingAssetDecimals;\n\t\taddress interestRateStrategyAddress;\n\t\taddress underlyingAsset;\n\t\taddress treasury;\n\t\taddress incentivesController;\n\t\tuint256 allocPoint;\n\t\tstring underlyingAssetName;\n\t\tstring aTokenName;\n\t\tstring aTokenSymbol;\n\t\tstring variableDebtTokenName;\n\t\tstring variableDebtTokenSymbol;\n\t\tstring stableDebtTokenName;\n\t\tstring stableDebtTokenSymbol;\n\t\tbytes params;\n\t}\n\n\tstruct UpdateATokenInput {\n\t\taddress asset;\n\t\taddress treasury;\n\t\taddress incentivesController;\n\t\tstring name;\n\t\tstring symbol;\n\t\taddress implementation;\n\t\tbytes params;\n\t}\n\n\tstruct UpdateDebtTokenInput {\n\t\taddress asset;\n\t\taddress incentivesController;\n\t\tstring name;\n\t\tstring symbol;\n\t\taddress implementation;\n\t\tbytes params;\n\t}\n\n\t/**\n\t * @dev Emitted when a reserve is initialized.\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param aToken The address of the associated aToken contract\n\t * @param stableDebtToken The address of the associated stable rate debt token\n\t * @param variableDebtToken The address of the associated variable rate debt token\n\t * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\n\t **/\n\tevent ReserveInitialized(\n\t\taddress indexed asset,\n\t\taddress indexed aToken,\n\t\taddress stableDebtToken,\n\t\taddress variableDebtToken,\n\t\taddress interestRateStrategyAddress\n\t);\n\n\t/**\n\t * @dev Emitted when borrowing is enabled on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\n\t **/\n\tevent BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\n\n\t/**\n\t * @dev Emitted when borrowing is disabled on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent BorrowingDisabledOnReserve(address indexed asset);\n\n\t/**\n\t * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param ltv The loan to value of the asset when used as collateral\n\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\n\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset\n\t **/\n\tevent CollateralConfigurationChanged(\n\t\taddress indexed asset,\n\t\tuint256 ltv,\n\t\tuint256 liquidationThreshold,\n\t\tuint256 liquidationBonus\n\t);\n\n\t/**\n\t * @dev Emitted when stable rate borrowing is enabled on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent StableRateEnabledOnReserve(address indexed asset);\n\n\t/**\n\t * @dev Emitted when stable rate borrowing is disabled on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent StableRateDisabledOnReserve(address indexed asset);\n\n\t/**\n\t * @dev Emitted when a reserve is activated\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent ReserveActivated(address indexed asset);\n\n\t/**\n\t * @dev Emitted when a reserve is deactivated\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent ReserveDeactivated(address indexed asset);\n\n\t/**\n\t * @dev Emitted when a reserve is frozen\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent ReserveFrozen(address indexed asset);\n\n\t/**\n\t * @dev Emitted when a reserve is unfrozen\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tevent ReserveUnfrozen(address indexed asset);\n\n\t/**\n\t * @dev Emitted when a reserve factor is updated\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param factor The new reserve factor\n\t **/\n\tevent ReserveFactorChanged(address indexed asset, uint256 factor);\n\n\t/**\n\t * @dev Emitted when the reserve decimals are updated\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param decimals The new decimals\n\t **/\n\tevent ReserveDecimalsChanged(address indexed asset, uint256 decimals);\n\n\t/**\n\t * @dev Emitted when a reserve interest strategy contract is updated\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param strategy The new address of the interest strategy contract\n\t **/\n\tevent ReserveInterestRateStrategyChanged(address indexed asset, address strategy);\n\n\t/**\n\t * @dev Emitted when an aToken implementation is upgraded\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param proxy The aToken proxy address\n\t * @param implementation The new aToken implementation\n\t **/\n\tevent ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\n\n\t/**\n\t * @dev Emitted when the implementation of a stable debt token is upgraded\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param proxy The stable debt token proxy address\n\t * @param implementation The new aToken implementation\n\t **/\n\tevent StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\n\n\t/**\n\t * @dev Emitted when the implementation of a variable debt token is upgraded\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param proxy The variable debt token proxy address\n\t * @param implementation The new aToken implementation\n\t **/\n\tevent VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\n}\n"
    },
    "contracts/interfaces/ILendingRateOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title ILendingRateOracle interface\n * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\n **/\n\ninterface ILendingRateOracle {\n\t/**\n    @dev returns the market borrow rate in ray\n    **/\n\tfunction getMarketBorrowRate(address asset) external view returns (uint256);\n\n\t/**\n    @dev sets the market borrow rate. Rate value must be in ray\n    **/\n\tfunction setMarketBorrowRate(address asset, uint256 rate) external;\n}\n"
    },
    "contracts/interfaces/ILeverager.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface ILeverager {\n\tfunction wethToZap(address user) external view returns (uint256);\n\n\tfunction zapWETHWithBorrow(uint256 amount, address borrower) external returns (uint256 liquidity);\n\n\tfunction zapWETHWithBorrow(\n\t\tuint256 amount,\n\t\taddress borrower,\n\t\taddress onBehalfOf\n\t) external returns (uint256 liquidity);\n}\n"
    },
    "contracts/interfaces/ILiquidityZap.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface ILiquidityZap {\n\tfunction _WETH() external view returns (address);\n\n\tfunction _token() external view returns (address);\n\n\tfunction _tokenWETHPair() external view returns (address);\n\n\tfunction addLiquidityETHOnly(address to) external returns (uint256 liquidity);\n\n\tfunction addLiquidityTokensOnly(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) external returns (uint256 liquidity);\n\n\tfunction getLPTokenPerEthUnit(uint256 ethAmt) external view returns (uint256 liquidity);\n\n\tfunction initLiquidityZap(\n\t\taddress token,\n\t\taddress WETH,\n\t\taddress tokenWethPair,\n\t\taddress helper\n\t) external;\n\n\tfunction quote(uint256 wethAmount) external view returns (uint256 optimalTokenAmount);\n\n\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\n\n\tfunction removeAllLiquidityETHOnly(address to) external returns (uint256 amount);\n\n\tfunction removeAllLiquidityTokenOnly(address to) external returns (uint256 amount);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint256 liquidity,\n\t\taddress to\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETHOnly(address to, uint256 liquidity) external returns (uint256 amountOut);\n\n\tfunction removeLiquidityTokenOnly(address to, uint256 liquidity) external returns (uint256 amount);\n\n\tfunction standardAdd(\n\t\tuint256 tokenAmount,\n\t\tuint256 _wethAmt,\n\t\taddress to\n\t) external payable returns (uint256 liquidity);\n\n\tfunction unzap() external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction unzapToETH() external returns (uint256 amount);\n\n\tfunction unzapToTokens() external returns (uint256 amount);\n\n\tfunction zapETH(address payable _onBehalf) external payable returns (uint256 liquidity);\n\n\tfunction zapTokens(uint256 amount) external returns (uint256 liquidity);\n\n\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) external returns (uint256 liquidity);\n}\n"
    },
    "contracts/interfaces/ILockerList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\ninterface ILockerList {\n\tfunction lockersCount() external view returns (uint256);\n\n\tfunction getUsers(uint256 page, uint256 limit) external view returns (address[] memory);\n\n\tfunction addToList(address user) external;\n\n\tfunction removeFromList(address user) external;\n}\n"
    },
    "contracts/interfaces/ILockZap.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\ninterface ILockZap {\n\tfunction zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\tuint256 _lockTypeIndex\n\t) external returns (uint256 liquidity);\n\n\tfunction zapOnBehalf(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _onBehalf\n\t) external returns (uint256 liquidity);\n}\n"
    },
    "contracts/interfaces/IMiddleFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./LockedBalance.sol\";\nimport {IFeeDistribution} from \"./IMultiFeeDistribution.sol\";\n\ninterface IMiddleFeeDistribution is IFeeDistribution {\n\tfunction forwardReward(address[] memory _rewardTokens) external;\n\n\tfunction getRdntTokenAddress() external view returns (address);\n\n\tfunction getMultiFeeDistributionAddress() external view returns (address);\n\n\tfunction operationExpenseRatio() external view returns (uint256);\n\n\tfunction operationExpenses() external view returns (address);\n\n\tfunction isRewardToken(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IMintableToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableToken is IERC20 {\n\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\n\n\tfunction burn(uint256 _amount) external returns (bool);\n\n\tfunction setMinter(address _minter) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IMultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./LockedBalance.sol\";\nimport \"./IFeeDistribution.sol\";\nimport \"./IMintableToken.sol\";\n\ninterface IMultiFeeDistribution is IFeeDistribution {\n\tfunction exit(bool claimRewards) external;\n\n\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\n\n\tfunction rdntToken() external view returns (IMintableToken);\n\n\tfunction getPriceProvider() external view returns (address);\n\n\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\n\n\tfunction autocompoundEnabled(address user) external view returns (bool);\n\n\tfunction defaultLockIndex(address _user) external view returns (uint256);\n\n\tfunction autoRelockDisabled(address user) external view returns (bool);\n\n\tfunction totalBalance(address user) external view returns (uint256);\n\n\tfunction zapVestingToLp(address _address) external returns (uint256);\n\n\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\n\n\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\n\n\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\n\n\tfunction daoTreasury() external view returns (address);\n\n\tfunction stakingToken() external view returns (address);\n\n\tfunction claimFromConverter(address) external;\n\n\tfunction mint(address user, uint256 amount, bool withPenalty) external;\n}\n\ninterface IMFDPlus is IMultiFeeDistribution {\n\tfunction getLastClaimTime(address _user) external returns (uint256);\n\n\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\n\n\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\n\n\tfunction setAutocompound(bool _newVal) external;\n\n\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IOnwardIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\ninterface IOnwardIncentivesController {\n\tfunction handleAction(address _token, address _user, uint256 _balance, uint256 _totalSupply) external;\n}\n"
    },
    "contracts/interfaces/IPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IPoolHelper {\n\tfunction lpTokenAddr() external view returns (address);\n\n\tfunction zapWETH(uint256 amount) external returns (uint256);\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) external returns (uint256);\n\n\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\n\n\tfunction getLpPrice(uint rdntPriceInEth) external view returns (uint256 priceInEth);\n\n\tfunction getReserves() external view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply);\n\n\tfunction getPrice() external view returns (uint256 priceInEth);\n}\n\ninterface IBalancerPoolHelper is IPoolHelper {\n\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\n}\n\ninterface IUniswapPoolHelper is IPoolHelper {\n\tfunction initializePool() external;\n}\n\ninterface ITestPoolHelper is IPoolHelper {\n\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/************\n@title IPriceOracle interface\n@notice Interface for the Aave price oracle.*/\ninterface IPriceOracle {\n\t/***********\n    @dev returns the asset price in ETH\n     */\n\tfunction getAssetPrice(address asset) external view returns (uint256);\n\n\t/***********\n    @dev sets the asset price, in wei\n     */\n\tfunction setAssetPrice(address asset, uint256 price) external;\n}\n"
    },
    "contracts/interfaces/IPriceOracleGetter.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title IPriceOracleGetter interface\n * @notice Interface for the Aave price oracle.\n **/\n\ninterface IPriceOracleGetter {\n\t/**\n\t * @dev returns the asset price in ETH\n\t * @param asset the address of the asset\n\t * @return the ETH price of the asset\n\t **/\n\tfunction getAssetPrice(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\ninterface IPriceProvider {\n\tfunction getTokenPrice() external view returns (uint256);\n\n\tfunction getTokenPriceUsd() external view returns (uint256);\n\n\tfunction getLpTokenPrice() external view returns (uint256);\n\n\tfunction getLpTokenPriceUsd() external view returns (uint256);\n\n\tfunction decimals() external view returns (uint256);\n\n\tfunction update() external;\n\n\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title IReserveInterestRateStrategyInterface interface\n * @dev Interface for the calculation of the interest rates\n * @author Aave\n */\ninterface IReserveInterestRateStrategy {\n\tfunction baseVariableBorrowRate() external view returns (uint256);\n\n\tfunction getMaxVariableBorrowRate() external view returns (uint256);\n\n\tfunction calculateInterestRates(\n\t\taddress reserve,\n\t\tuint256 availableLiquidity,\n\t\tuint256 totalStableDebt,\n\t\tuint256 totalVariableDebt,\n\t\tuint256 averageStableBorrowRate,\n\t\tuint256 reserveFactor\n\t) external view returns (uint256, uint256, uint256);\n\n\tfunction calculateInterestRates(\n\t\taddress reserve,\n\t\taddress aToken,\n\t\tuint256 liquidityAdded,\n\t\tuint256 liquidityTaken,\n\t\tuint256 totalStableDebt,\n\t\tuint256 totalVariableDebt,\n\t\tuint256 averageStableBorrowRate,\n\t\tuint256 reserveFactor\n\t) external view returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\n}\n"
    },
    "contracts/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IScaledBalanceToken {\n\t/**\n\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\n\t * @param user The user whose balance is calculated\n\t * @return The scaled balance of the user\n\t **/\n\tfunction scaledBalanceOf(address user) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the scaled balance of the user and the scaled total supply.\n\t * @param user The address of the user\n\t * @return The scaled balance of the user\n\t * @return The scaled balance and the scaled total supply\n\t **/\n\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n\t/**\n\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n\t * @return The scaled total supply\n\t **/\n\tfunction scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {IInitializableDebtToken} from \"./IInitializableDebtToken.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\n/**\n * @title IStableDebtToken\n * @notice Defines the interface for the stable debt token\n * @dev It does not inherit from IERC20 to save in code size\n * @author Aave\n **/\n\ninterface IStableDebtToken is IInitializableDebtToken {\n\t/**\n\t * @dev Emitted when new stable debt is minted\n\t * @param user The address of the user who triggered the minting\n\t * @param onBehalfOf The recipient of stable debt tokens\n\t * @param amount The amount minted\n\t * @param currentBalance The current balance of the user\n\t * @param balanceIncrease The increase in balance since the last action of the user\n\t * @param newRate The rate of the debt after the minting\n\t * @param avgStableRate The new average stable rate after the minting\n\t * @param newTotalSupply The new total supply of the stable debt token after the action\n\t **/\n\tevent Mint(\n\t\taddress indexed user,\n\t\taddress indexed onBehalfOf,\n\t\tuint256 amount,\n\t\tuint256 currentBalance,\n\t\tuint256 balanceIncrease,\n\t\tuint256 newRate,\n\t\tuint256 avgStableRate,\n\t\tuint256 newTotalSupply\n\t);\n\n\t/**\n\t * @dev Emitted when new stable debt is burned\n\t * @param user The address of the user\n\t * @param amount The amount being burned\n\t * @param currentBalance The current balance of the user\n\t * @param balanceIncrease The the increase in balance since the last action of the user\n\t * @param avgStableRate The new average stable rate after the burning\n\t * @param newTotalSupply The new total supply of the stable debt token after the action\n\t **/\n\tevent Burn(\n\t\taddress indexed user,\n\t\tuint256 amount,\n\t\tuint256 currentBalance,\n\t\tuint256 balanceIncrease,\n\t\tuint256 avgStableRate,\n\t\tuint256 newTotalSupply\n\t);\n\n\t/**\n\t * @dev Mints debt token to the `onBehalfOf` address.\n\t * - The resulting rate is the weighted average between the rate of the new debt\n\t * and the rate of the previous debt\n\t * @param user The address receiving the borrowed underlying, being the delegatee in case\n\t * of credit delegate, or same as `onBehalfOf` otherwise\n\t * @param onBehalfOf The address receiving the debt tokens\n\t * @param amount The amount of debt tokens to mint\n\t * @param rate The rate of the debt being minted\n\t **/\n\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\n\n\t/**\n\t * @dev Burns debt of `user`\n\t * - The resulting rate is the weighted average between the rate of the new debt\n\t * and the rate of the previous debt\n\t * @param user The address of the user getting his debt burned\n\t * @param amount The amount of debt tokens getting burned\n\t **/\n\tfunction burn(address user, uint256 amount) external;\n\n\t/**\n\t * @dev Returns the average rate of all the stable rate loans.\n\t * @return The average stable rate\n\t **/\n\tfunction getAverageStableRate() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the stable rate of the user debt\n\t * @return The stable rate of the user\n\t **/\n\tfunction getUserStableRate(address user) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the timestamp of the last update of the user\n\t * @return The timestamp\n\t **/\n\tfunction getUserLastUpdated(address user) external view returns (uint40);\n\n\t/**\n\t * @dev Returns the principal, the total supply and the average stable rate\n\t **/\n\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\n\n\t/**\n\t * @dev Returns the timestamp of the last update of the total supply\n\t * @return The timestamp\n\t **/\n\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\n\n\t/**\n\t * @dev Returns the total supply and the average stable rate\n\t **/\n\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\n\n\t/**\n\t * @dev Returns the principal debt balance of the user\n\t * @return The debt balance of the user since the last burn/mint action\n\t **/\n\tfunction principalBalanceOf(address user) external view returns (uint256);\n\n\t/**\n\t * @dev Returns the address of the incentives controller contract\n\t **/\n\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\n}\n"
    },
    "contracts/interfaces/IVariableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\nimport {IInitializableDebtToken} from \"./IInitializableDebtToken.sol\";\nimport {IAaveIncentivesController} from \"./IAaveIncentivesController.sol\";\n\n/**\n * @title IVariableDebtToken\n * @author Aave\n * @notice Defines the basic interface for a variable debt token.\n **/\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\n\t/**\n\t * @dev Emitted after the mint action\n\t * @param from The address performing the mint\n\t * @param onBehalfOf The address of the user on which behalf minting has been performed\n\t * @param value The amount to be minted\n\t * @param index The last index of the reserve\n\t **/\n\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\n\n\t/**\n\t * @dev Mints debt token to the `onBehalfOf` address\n\t * @param user The address receiving the borrowed underlying, being the delegatee in case\n\t * of credit delegate, or same as `onBehalfOf` otherwise\n\t * @param onBehalfOf The address receiving the debt tokens\n\t * @param amount The amount of debt being minted\n\t * @param index The variable debt index of the reserve\n\t * @return `true` if the the previous balance of the user is 0\n\t **/\n\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\n\n\t/**\n\t * @dev Emitted when variable debt is burnt\n\t * @param user The user which debt has been burned\n\t * @param amount The amount of debt being burned\n\t * @param index The index of the user\n\t **/\n\tevent Burn(address indexed user, uint256 amount, uint256 index);\n\n\t/**\n\t * @dev Burns user variable debt\n\t * @param user The user which debt is burnt\n\t * @param index The variable debt index of the reserve\n\t **/\n\tfunction burn(address user, uint256 amount, uint256 index) external;\n\n\t/**\n\t * @dev Returns the address of the incentives controller contract\n\t **/\n\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IWETH {\n\tfunction balanceOf(address) external returns (uint);\n\n\tfunction deposit() external payable;\n\n\tfunction withdraw(uint256) external;\n\n\tfunction approve(address guy, uint256 wad) external returns (bool);\n\n\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\n\n\tfunction transfer(address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/LockedBalance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nstruct LockedBalance {\n\tuint256 amount;\n\tuint256 unlockTime;\n\tuint256 multiplier;\n\tuint256 duration;\n}\n\nstruct EarnedBalance {\n\tuint256 amount;\n\tuint256 unlockTime;\n\tuint256 penalty;\n}\n\nstruct Reward {\n\tuint256 periodFinish;\n\tuint256 rewardPerSecond;\n\tuint256 lastUpdateTime;\n\tuint256 rewardPerTokenStored;\n\t// tracks already-added balances to handle accrued interest in aToken rewards\n\t// for the stakingToken this value is unused and will always be 0\n\tuint256 balance;\n}\n\nstruct Balances {\n\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\n\tuint256 unlocked; // RDNT token\n\tuint256 locked; // LP token or RDNT token\n\tuint256 lockedWithMultiplier; // Multiplied locked amount\n\tuint256 earned; // RDNT token\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IUniswapV2Factory {\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n\tfunction feeTo() external view returns (address);\n\n\tfunction feeToSetter() external view returns (address);\n\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\n\n\tfunction allPairs(uint) external view returns (address pair);\n\n\tfunction allPairsLength() external view returns (uint);\n\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n\n\tfunction setFeeTo(address) external;\n\n\tfunction setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IUniswapV2Pair {\n\tevent Approval(address indexed owner, address indexed spender, uint value);\n\tevent Transfer(address indexed from, address indexed to, uint value);\n\n\tfunction name() external pure returns (string memory);\n\n\tfunction symbol() external pure returns (string memory);\n\n\tfunction decimals() external pure returns (uint8);\n\n\tfunction totalSupply() external view returns (uint);\n\n\tfunction balanceOf(address owner) external view returns (uint);\n\n\tfunction allowance(address owner, address spender) external view returns (uint);\n\n\tfunction approve(address spender, uint value) external returns (bool);\n\n\tfunction transfer(address to, uint value) external returns (bool);\n\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\n\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\n\n\tfunction nonces(address owner) external view returns (uint);\n\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\n\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint amount0In,\n\t\tuint amount1In,\n\t\tuint amount0Out,\n\t\tuint amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\n\n\tfunction factory() external view returns (address);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction getReserves() external view returns (uint256 reserve0, uint256 reserve1, uint256 blockTimestampLast);\n\n\tfunction price0CumulativeLast() external view returns (uint);\n\n\tfunction price1CumulativeLast() external view returns (uint);\n\n\tfunction kLast() external view returns (uint);\n\n\tfunction mint(address to) external returns (uint liquidity);\n\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\n\n\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n\tfunction skim(address to) external;\n\n\tfunction sync() external;\n\n\tfunction initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\ninterface IUniswapV2Router01 {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint amountADesired,\n\t\tuint amountBDesired,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB, uint liquidity);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETH(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapExactETHForTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactETH(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapETHForExactTokens(\n\t\tuint amountOut,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint[] memory amounts);\n\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountETH);\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint amountETH);\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable;\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n}\n"
    },
    "contracts/lending/ATokensAndRatesHelper.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport {LendingPool} from \"./lendingpool/LendingPool.sol\";\nimport {LendingPoolAddressesProvider} from \"./configuration/LendingPoolAddressesProvider.sol\";\nimport {LendingPoolConfigurator} from \"./lendingpool/LendingPoolConfigurator.sol\";\nimport {AToken} from \"./tokenization/AToken.sol\";\nimport {DefaultReserveInterestRateStrategy} from \"./lendingpool/DefaultReserveInterestRateStrategy.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ATokensAndRatesHelper is Ownable {\n\taddress payable private pool;\n\taddress private addressesProvider;\n\taddress private poolConfigurator;\n\tevent deployedContracts(address aToken, address strategy);\n\n\tstruct InitDeploymentInput {\n\t\taddress asset;\n\t\tuint256[6] rates;\n\t}\n\n\tstruct ConfigureReserveInput {\n\t\taddress asset;\n\t\tuint256 baseLTV;\n\t\tuint256 liquidationThreshold;\n\t\tuint256 liquidationBonus;\n\t\tuint256 reserveFactor;\n\t\tbool stableBorrowingEnabled;\n\t\tbool borrowingEnabled;\n\t}\n\n\tconstructor(address payable _pool, address _addressesProvider, address _poolConfigurator) {\n\t\tpool = _pool;\n\t\taddressesProvider = _addressesProvider;\n\t\tpoolConfigurator = _poolConfigurator;\n\t}\n\n\tfunction initDeployment(InitDeploymentInput[] calldata inputParams) external onlyOwner {\n\t\tfor (uint256 i = 0; i < inputParams.length; i++) {\n\t\t\temit deployedContracts(\n\t\t\t\taddress(new AToken()),\n\t\t\t\taddress(\n\t\t\t\t\tnew DefaultReserveInterestRateStrategy(\n\t\t\t\t\t\tLendingPoolAddressesProvider(addressesProvider),\n\t\t\t\t\t\tinputParams[i].rates[0],\n\t\t\t\t\t\tinputParams[i].rates[1],\n\t\t\t\t\t\tinputParams[i].rates[2],\n\t\t\t\t\t\tinputParams[i].rates[3],\n\t\t\t\t\t\tinputParams[i].rates[4],\n\t\t\t\t\t\tinputParams[i].rates[5]\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction configureReserves(ConfigureReserveInput[] calldata inputParams) external onlyOwner {\n\t\tLendingPoolConfigurator configurator = LendingPoolConfigurator(poolConfigurator);\n\t\tfor (uint256 i = 0; i < inputParams.length; i++) {\n\t\t\tconfigurator.configureReserveAsCollateral(\n\t\t\t\tinputParams[i].asset,\n\t\t\t\tinputParams[i].baseLTV,\n\t\t\t\tinputParams[i].liquidationThreshold,\n\t\t\t\tinputParams[i].liquidationBonus\n\t\t\t);\n\n\t\t\tif (inputParams[i].borrowingEnabled) {\n\t\t\t\tconfigurator.enableBorrowingOnReserve(inputParams[i].asset, inputParams[i].stableBorrowingEnabled);\n\t\t\t}\n\t\t\tconfigurator.setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);\n\t\t}\n\t}\n}\n"
    },
    "contracts/lending/configuration/LendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Prettier ignore to prevent buidler flatter bug\n// prettier-ignore\nimport {InitializableImmutableAdminUpgradeabilityProxy} from '../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';\n\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ncontract LendingPoolAddressesProvider is Ownable, ILendingPoolAddressesProvider {\n\tstring private _marketId;\n\tmapping(bytes32 => address) private _addresses;\n\taddress private _liquidationFeeTo;\n\n\tbytes32 private constant LENDING_POOL = \"LENDING_POOL\";\n\tbytes32 private constant LENDING_POOL_CONFIGURATOR = \"LENDING_POOL_CONFIGURATOR\";\n\tbytes32 private constant POOL_ADMIN = \"POOL_ADMIN\";\n\tbytes32 private constant EMERGENCY_ADMIN = \"EMERGENCY_ADMIN\";\n\tbytes32 private constant LENDING_POOL_COLLATERAL_MANAGER = \"COLLATERAL_MANAGER\";\n\tbytes32 private constant PRICE_ORACLE = \"PRICE_ORACLE\";\n\tbytes32 private constant LENDING_RATE_ORACLE = \"LENDING_RATE_ORACLE\";\n\n\tconstructor(string memory marketId) {\n\t\t_setMarketId(marketId);\n\t\t_liquidationFeeTo = 0xF90C69D16599A5C657A05Fe76Cd22fD9Cab44598;\n\t}\n\n\t/**\n\t * @dev Returns the id of the Aave market to which this contracts points to\n\t * @return The market id\n\t **/\n\tfunction getMarketId() external view override returns (string memory) {\n\t\treturn _marketId;\n\t}\n\n\t/**\n\t * @dev Allows to set the market which this LendingPoolAddressesProvider represents\n\t * @param marketId The market id\n\t */\n\tfunction setMarketId(string memory marketId) external override onlyOwner {\n\t\t_setMarketId(marketId);\n\t}\n\n\t/**\n\t * @dev General function to update the implementation of a proxy registered with\n\t * certain `id`. If there is no proxy registered, it will instantiate one and\n\t * set as implementation the `implementationAddress`\n\t * IMPORTANT Use this function carefully, only for ids that don't have an explicit\n\t * setter function, in order to avoid unexpected consequences\n\t * @param id The id\n\t * @param implementationAddress The address of the new implementation\n\t */\n\tfunction setAddressAsProxy(bytes32 id, address implementationAddress) external override onlyOwner {\n\t\t_updateImpl(id, implementationAddress);\n\t\temit AddressSet(id, implementationAddress, true);\n\t}\n\n\t/**\n\t * @dev Sets an address for an id replacing the address saved in the addresses map\n\t * IMPORTANT Use this function carefully, as it will do a hard replacement\n\t * @param id The id\n\t * @param newAddress The address to set\n\t */\n\tfunction setAddress(bytes32 id, address newAddress) external override onlyOwner {\n\t\t_addresses[id] = newAddress;\n\t\temit AddressSet(id, newAddress, false);\n\t}\n\n\t/**\n\t * @dev Returns an address by id\n\t * @return The address\n\t */\n\tfunction getAddress(bytes32 id) public view override returns (address) {\n\t\treturn _addresses[id];\n\t}\n\n\t/**\n\t * @dev Returns the address of the LendingPool proxy\n\t * @return The LendingPool proxy address\n\t **/\n\tfunction getLendingPool() external view override returns (address) {\n\t\treturn getAddress(LENDING_POOL);\n\t}\n\n\t/**\n\t * @dev Updates the implementation of the LendingPool, or creates the proxy\n\t * setting the new `pool` implementation on the first time calling it\n\t * @param pool The new LendingPool implementation\n\t **/\n\tfunction setLendingPoolImpl(address pool) external override onlyOwner {\n\t\t_updateImpl(LENDING_POOL, pool);\n\t\temit LendingPoolUpdated(pool);\n\t}\n\n\t/**\n\t * @dev Returns the address of the LendingPoolConfigurator proxy\n\t * @return The LendingPoolConfigurator proxy address\n\t **/\n\tfunction getLendingPoolConfigurator() external view override returns (address) {\n\t\treturn getAddress(LENDING_POOL_CONFIGURATOR);\n\t}\n\n\t/**\n\t * @dev Updates the implementation of the LendingPoolConfigurator, or creates the proxy\n\t * setting the new `configurator` implementation on the first time calling it\n\t * @param configurator The new LendingPoolConfigurator implementation\n\t **/\n\tfunction setLendingPoolConfiguratorImpl(address configurator) external override onlyOwner {\n\t\t_updateImpl(LENDING_POOL_CONFIGURATOR, configurator);\n\t\temit LendingPoolConfiguratorUpdated(configurator);\n\t}\n\n\t/**\n\t * @dev Returns the address of the LendingPoolCollateralManager. Since the manager is used\n\t * through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence\n\t * the addresses are changed directly\n\t * @return The address of the LendingPoolCollateralManager\n\t **/\n\n\tfunction getLendingPoolCollateralManager() external view override returns (address) {\n\t\treturn getAddress(LENDING_POOL_COLLATERAL_MANAGER);\n\t}\n\n\t/**\n\t * @dev Updates the address of the LendingPoolCollateralManager\n\t * @param manager The new LendingPoolCollateralManager address\n\t **/\n\tfunction setLendingPoolCollateralManager(address manager) external override onlyOwner {\n\t\t_addresses[LENDING_POOL_COLLATERAL_MANAGER] = manager;\n\t\temit LendingPoolCollateralManagerUpdated(manager);\n\t}\n\n\t/**\n\t * @dev The functions below are getters/setters of addresses that are outside the context\n\t * of the protocol hence the upgradable proxy pattern is not used\n\t **/\n\n\tfunction getPoolAdmin() external view override returns (address) {\n\t\treturn getAddress(POOL_ADMIN);\n\t}\n\n\tfunction setPoolAdmin(address admin) external override onlyOwner {\n\t\t_addresses[POOL_ADMIN] = admin;\n\t\temit ConfigurationAdminUpdated(admin);\n\t}\n\n\tfunction getEmergencyAdmin() external view override returns (address) {\n\t\treturn getAddress(EMERGENCY_ADMIN);\n\t}\n\n\tfunction setEmergencyAdmin(address emergencyAdmin) external override onlyOwner {\n\t\t_addresses[EMERGENCY_ADMIN] = emergencyAdmin;\n\t\temit EmergencyAdminUpdated(emergencyAdmin);\n\t}\n\n\tfunction getPriceOracle() external view override returns (address) {\n\t\treturn getAddress(PRICE_ORACLE);\n\t}\n\n\tfunction setPriceOracle(address priceOracle) external override onlyOwner {\n\t\t_addresses[PRICE_ORACLE] = priceOracle;\n\t\temit PriceOracleUpdated(priceOracle);\n\t}\n\n\tfunction getLendingRateOracle() external view override returns (address) {\n\t\treturn getAddress(LENDING_RATE_ORACLE);\n\t}\n\n\tfunction setLendingRateOracle(address lendingRateOracle) external override onlyOwner {\n\t\t_addresses[LENDING_RATE_ORACLE] = lendingRateOracle;\n\t\temit LendingRateOracleUpdated(lendingRateOracle);\n\t}\n\n\tfunction getLiquidationFeeTo() external view override returns (address) {\n\t\treturn _liquidationFeeTo;\n\t}\n\n\tfunction setLiquidationFeeTo(address liquidationFeeTo) external override onlyOwner {\n\t\t_liquidationFeeTo = liquidationFeeTo;\n\t}\n\n\t/**\n\t * @dev Internal function to update the implementation of a specific proxied component of the protocol\n\t * - If there is no proxy registered in the given `id`, it creates the proxy setting `newAdress`\n\t *   as implementation and calls the initialize() function on the proxy\n\t * - If there is already a proxy registered, it just updates the implementation to `newAddress` and\n\t *   calls the initialize() function via upgradeToAndCall() in the proxy\n\t * @param id The id of the proxy to be updated\n\t * @param newAddress The address of the new implementation\n\t **/\n\tfunction _updateImpl(bytes32 id, address newAddress) internal {\n\t\taddress payable proxyAddress = payable(_addresses[id]);\n\n\t\tInitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\n\t\t\tproxyAddress\n\t\t);\n\t\tbytes memory params = abi.encodeWithSignature(\"initialize(address)\", address(this));\n\n\t\tif (proxyAddress == address(0)) {\n\t\t\tproxy = new InitializableImmutableAdminUpgradeabilityProxy(address(this));\n\t\t\tproxy.initialize(newAddress, params);\n\t\t\t_addresses[id] = address(proxy);\n\t\t\temit ProxyCreated(id, address(proxy));\n\t\t} else {\n\t\t\tproxy.upgradeToAndCall(newAddress, params);\n\t\t}\n\t}\n\n\tfunction _setMarketId(string memory marketId) internal {\n\t\t_marketId = marketId;\n\t\temit MarketIdSet(marketId);\n\t}\n}\n"
    },
    "contracts/lending/flashloan/interfaces/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {ILendingPoolAddressesProvider} from \"../../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {ILendingPool} from \"../../../interfaces/ILendingPool.sol\";\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n\tfunction executeOperation(\n\t\taddress[] calldata assets,\n\t\tuint256[] calldata amounts,\n\t\tuint256[] calldata premiums,\n\t\taddress initiator,\n\t\tbytes calldata params\n\t) external returns (bool);\n\n\tfunction ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\n\n\tfunction LENDING_POOL() external view returns (ILendingPool);\n}\n"
    },
    "contracts/lending/lendingpool/DefaultReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IReserveInterestRateStrategy} from \"../../interfaces/IReserveInterestRateStrategy.sol\";\nimport {WadRayMath} from \"../libraries/math/WadRayMath.sol\";\nimport {PercentageMath} from \"../libraries/math/PercentageMath.sol\";\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {ILendingRateOracle} from \"../../interfaces/ILendingRateOracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title DefaultReserveInterestRateStrategy contract\n * @notice Implements the calculation of the interest rates depending on the reserve state\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\n * point of utilization and another from that one to 100%\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\n *   of the LendingPoolAddressesProvider\n * @author Aave\n **/\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\n\tusing WadRayMath for uint256;\n\tusing SafeMath for uint256;\n\tusing PercentageMath for uint256;\n\n\t/**\n\t * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\n\t * Expressed in ray\n\t **/\n\tuint256 public immutable OPTIMAL_UTILIZATION_RATE;\n\n\t/**\n\t * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\n\t * 1-optimal utilization rate. Added as a constant here for gas optimizations.\n\t * Expressed in ray\n\t **/\n\n\tuint256 public immutable EXCESS_UTILIZATION_RATE;\n\n\tILendingPoolAddressesProvider public immutable addressesProvider;\n\n\t// Base variable borrow rate when Utilization rate = 0. Expressed in ray\n\tuint256 internal immutable _baseVariableBorrowRate;\n\n\t// Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\n\tuint256 internal immutable _variableRateSlope1;\n\n\t// Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\n\tuint256 internal immutable _variableRateSlope2;\n\n\t// Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\n\tuint256 internal immutable _stableRateSlope1;\n\n\t// Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\n\tuint256 internal immutable _stableRateSlope2;\n\n\tconstructor(\n\t\tILendingPoolAddressesProvider provider,\n\t\tuint256 optimalUtilizationRate_,\n\t\tuint256 baseVariableBorrowRate_,\n\t\tuint256 variableRateSlope1_,\n\t\tuint256 variableRateSlope2_,\n\t\tuint256 stableRateSlope1_,\n\t\tuint256 stableRateSlope2_\n\t) {\n\t\tOPTIMAL_UTILIZATION_RATE = optimalUtilizationRate_;\n\t\tEXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate_);\n\t\taddressesProvider = provider;\n\t\t_baseVariableBorrowRate = baseVariableBorrowRate_;\n\t\t_variableRateSlope1 = variableRateSlope1_;\n\t\t_variableRateSlope2 = variableRateSlope2_;\n\t\t_stableRateSlope1 = stableRateSlope1_;\n\t\t_stableRateSlope2 = stableRateSlope2_;\n\t}\n\n\tfunction variableRateSlope1() external view returns (uint256) {\n\t\treturn _variableRateSlope1;\n\t}\n\n\tfunction variableRateSlope2() external view returns (uint256) {\n\t\treturn _variableRateSlope2;\n\t}\n\n\tfunction stableRateSlope1() external view returns (uint256) {\n\t\treturn _stableRateSlope1;\n\t}\n\n\tfunction stableRateSlope2() external view returns (uint256) {\n\t\treturn _stableRateSlope2;\n\t}\n\n\tfunction baseVariableBorrowRate() external view override returns (uint256) {\n\t\treturn _baseVariableBorrowRate;\n\t}\n\n\tfunction getMaxVariableBorrowRate() external view override returns (uint256) {\n\t\treturn _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2);\n\t}\n\n\t/**\n\t * @dev Calculates the interest rates depending on the reserve's state and configurations\n\t * @param reserve The address of the reserve\n\t * @param liquidityAdded The liquidity added during the operation\n\t * @param liquidityTaken The liquidity taken during the operation\n\t * @param totalStableDebt The total borrowed from the reserve a stable rate\n\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\n\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\n\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\n\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\n\t **/\n\tfunction calculateInterestRates(\n\t\taddress reserve,\n\t\taddress aToken,\n\t\tuint256 liquidityAdded,\n\t\tuint256 liquidityTaken,\n\t\tuint256 totalStableDebt,\n\t\tuint256 totalVariableDebt,\n\t\tuint256 averageStableBorrowRate,\n\t\tuint256 reserveFactor\n\t) external view override returns (uint256, uint256, uint256) {\n\t\tuint256 availableLiquidity = IERC20(reserve).balanceOf(aToken);\n\t\t//avoid stack too deep\n\t\tavailableLiquidity = availableLiquidity.add(liquidityAdded).sub(liquidityTaken);\n\n\t\treturn\n\t\t\tcalculateInterestRates(\n\t\t\t\treserve,\n\t\t\t\tavailableLiquidity,\n\t\t\t\ttotalStableDebt,\n\t\t\t\ttotalVariableDebt,\n\t\t\t\taverageStableBorrowRate,\n\t\t\t\treserveFactor\n\t\t\t);\n\t}\n\n\tstruct CalcInterestRatesLocalVars {\n\t\tuint256 totalDebt;\n\t\tuint256 currentVariableBorrowRate;\n\t\tuint256 currentStableBorrowRate;\n\t\tuint256 currentLiquidityRate;\n\t\tuint256 utilizationRate;\n\t}\n\n\t/**\n\t * @dev Calculates the interest rates depending on the reserve's state and configurations.\n\t * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\n\t * New protocol implementation uses the new calculateInterestRates() interface\n\t * @param reserve The address of the reserve\n\t * @param availableLiquidity The liquidity available in the corresponding aToken\n\t * @param totalStableDebt The total borrowed from the reserve a stable rate\n\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\n\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\n\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\n\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\n\t **/\n\tfunction calculateInterestRates(\n\t\taddress reserve,\n\t\tuint256 availableLiquidity,\n\t\tuint256 totalStableDebt,\n\t\tuint256 totalVariableDebt,\n\t\tuint256 averageStableBorrowRate,\n\t\tuint256 reserveFactor\n\t) public view override returns (uint256, uint256, uint256) {\n\t\tCalcInterestRatesLocalVars memory vars;\n\n\t\tvars.totalDebt = totalStableDebt.add(totalVariableDebt);\n\t\tvars.currentVariableBorrowRate = 0;\n\t\tvars.currentStableBorrowRate = 0;\n\t\tvars.currentLiquidityRate = 0;\n\n\t\tvars.utilizationRate = vars.totalDebt == 0 ? 0 : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\n\n\t\tvars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle()).getMarketBorrowRate(\n\t\t\treserve\n\t\t);\n\n\t\tif (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\n\t\t\tuint256 excessUtilizationRateRatio = vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(\n\t\t\t\tEXCESS_UTILIZATION_RATE\n\t\t\t);\n\n\t\t\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(_stableRateSlope1).add(\n\t\t\t\t_stableRateSlope2.rayMul(excessUtilizationRateRatio)\n\t\t\t);\n\n\t\t\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add(\n\t\t\t\t_variableRateSlope2.rayMul(excessUtilizationRateRatio)\n\t\t\t);\n\t\t} else {\n\t\t\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\n\t\t\t\t_stableRateSlope1.rayMul(vars.utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE))\n\t\t\t);\n\t\t\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(\n\t\t\t\tvars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE)\n\t\t\t);\n\t\t}\n\n\t\tvars.currentLiquidityRate = _getOverallBorrowRate(\n\t\t\ttotalStableDebt,\n\t\t\ttotalVariableDebt,\n\t\t\tvars.currentVariableBorrowRate,\n\t\t\taverageStableBorrowRate\n\t\t).rayMul(vars.utilizationRate).percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor));\n\n\t\treturn (vars.currentLiquidityRate, vars.currentStableBorrowRate, vars.currentVariableBorrowRate);\n\t}\n\n\t/**\n\t * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable debt\n\t * @param totalStableDebt The total borrowed from the reserve a stable rate\n\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\n\t * @param currentVariableBorrowRate The current variable borrow rate of the reserve\n\t * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\n\t * @return The weighted averaged borrow rate\n\t **/\n\tfunction _getOverallBorrowRate(\n\t\tuint256 totalStableDebt,\n\t\tuint256 totalVariableDebt,\n\t\tuint256 currentVariableBorrowRate,\n\t\tuint256 currentAverageStableBorrowRate\n\t) internal pure returns (uint256) {\n\t\tuint256 totalDebt = totalStableDebt.add(totalVariableDebt);\n\n\t\tif (totalDebt == 0) return 0;\n\n\t\tuint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\n\n\t\tuint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\n\n\t\tuint256 overallBorrowRate = weightedVariableRate.add(weightedStableRate).rayDiv(totalDebt.wadToRay());\n\n\t\treturn overallBorrowRate;\n\t}\n}\n"
    },
    "contracts/lending/lendingpool/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {IAToken} from \"../../interfaces/IAToken.sol\";\nimport {IVariableDebtToken} from \"../../interfaces/IVariableDebtToken.sol\";\nimport {IFlashLoanReceiver} from \"../flashloan/interfaces/IFlashLoanReceiver.sol\";\nimport {IPriceOracleGetter} from \"../../interfaces/IPriceOracleGetter.sol\";\nimport {IStableDebtToken} from \"../../interfaces/IStableDebtToken.sol\";\nimport {ILendingPool} from \"../../interfaces/ILendingPool.sol\";\nimport {ILeverager} from \"../../interfaces/ILeverager.sol\";\nimport {VersionedInitializable} from \"../libraries/aave-upgradeability/VersionedInitializable.sol\";\nimport {Helpers} from \"../libraries/helpers/Helpers.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {WadRayMath} from \"../libraries/math/WadRayMath.sol\";\nimport {PercentageMath} from \"../libraries/math/PercentageMath.sol\";\nimport {ReserveLogic} from \"../libraries/logic/ReserveLogic.sol\";\nimport {GenericLogic} from \"../libraries/logic/GenericLogic.sol\";\nimport {ValidationLogic} from \"../libraries/logic/ValidationLogic.sol\";\nimport {ReserveConfiguration} from \"../libraries/configuration/ReserveConfiguration.sol\";\nimport {UserConfiguration} from \"../libraries/configuration/UserConfiguration.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {LendingPoolStorage} from \"./LendingPoolStorage.sol\";\n\n/**\n * @title LendingPool contract\n * @dev Main point of interaction with an Aave protocol's market\n * - Users can:\n *   # Deposit\n *   # Withdraw\n *   # Borrow\n *   # Repay\n *   # Swap their loans between variable and stable rate\n *   # Enable/disable their deposits as collateral rebalance stable rate borrow positions\n *   # Liquidate positions\n *   # Execute Flash Loans\n * - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market\n * - All admin functions are callable by the LendingPoolConfigurator contract defined also in the\n *   LendingPoolAddressesProvider\n * @author Aave\n **/\ncontract LendingPool is VersionedInitializable, ILendingPool, LendingPoolStorage {\n\tusing SafeMath for uint256;\n\tusing WadRayMath for uint256;\n\tusing PercentageMath for uint256;\n\tusing SafeERC20 for IERC20;\n\tusing ReserveLogic for DataTypes.ReserveData;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\tusing UserConfiguration for DataTypes.UserConfigurationMap;\n\n\tuint256 public constant LENDINGPOOL_REVISION = 0x2;\n\n\tILeverager public leverager;\n\n\taddress public owner;\n\n\tmodifier whenNotPaused() {\n\t\t_whenNotPaused();\n\t\t_;\n\t}\n\n\tmodifier onlyLendingPoolConfigurator() {\n\t\t_onlyLendingPoolConfigurator();\n\t\t_;\n\t}\n\n\tfunction _whenNotPaused() internal view {\n\t\trequire(!_paused, Errors.LP_IS_PAUSED);\n\t}\n\n\tfunction _onlyLendingPoolConfigurator() internal view {\n\t\trequire(\n\t\t\t_addressesProvider.getLendingPoolConfigurator() == msg.sender,\n\t\t\tErrors.LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR\n\t\t);\n\t}\n\n\tfunction getRevision() internal pure override returns (uint256) {\n\t\treturn LENDINGPOOL_REVISION;\n\t}\n\n\t/**\n\t * @dev Function is invoked by the proxy contract when the LendingPool contract is added to the\n\t * LendingPoolAddressesProvider of the market.\n\t * - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption\n\t *   on subsequent operations\n\t * @param provider The address of the LendingPoolAddressesProvider\n\t **/\n\tfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\n\t\t_addressesProvider = provider;\n\t\t_maxStableRateBorrowSizePercent = 2500;\n\t\t_flashLoanPremiumTotal = 9;\n\t\t_maxNumberOfReserves = 128;\n\t\towner = tx.origin;\n\t}\n\n\t/**\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n\t * @param asset The address of the underlying asset to deposit\n\t * @param amount The amount to be deposited\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n\t *   is a different wallet\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction deposit(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress onBehalfOf,\n\t\tuint16 referralCode\n\t) public override whenNotPaused {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\tValidationLogic.validateDeposit(reserve, amount);\n\n\t\taddress aToken = reserve.aTokenAddress;\n\n\t\treserve.updateState();\n\t\treserve.updateInterestRates(asset, aToken, amount, 0);\n\n\t\tIERC20(asset).safeTransferFrom(msg.sender, aToken, amount);\n\n\t\tif (IAToken(aToken).balanceOf(onBehalfOf) == 0) {\n\t\t\t_usersConfig[onBehalfOf].setUsingAsCollateral(reserve.id, true);\n\t\t\temit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\n\t\t}\n\n\t\tIAToken(aToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\n\n\t\temit Deposit(asset, msg.sender, onBehalfOf, amount, referralCode);\n\t}\n\n\tfunction depositWithAutoDLP(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\taddress onBehalfOf,\n\t\tuint16 referralCode\n\t) external override whenNotPaused {\n\t\trequire(tx.origin == onBehalfOf);\n\t\tdeposit(asset, amount, onBehalfOf, referralCode);\n\t\tleverager.zapWETHWithBorrow(leverager.wethToZap(onBehalfOf), onBehalfOf);\n\t}\n\n\t/**\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n\t * @param asset The address of the underlying asset to withdraw\n\t * @param amount The underlying amount to be withdrawn\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n\t *   different wallet\n\t * @return The final amount withdrawn\n\t **/\n\tfunction withdraw(address asset, uint256 amount, address to) external override whenNotPaused returns (uint256) {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\taddress aToken = reserve.aTokenAddress;\n\n\t\tuint256 userBalance = IAToken(aToken).balanceOf(msg.sender);\n\n\t\tuint256 amountToWithdraw = amount;\n\n\t\tif (amount == type(uint256).max) {\n\t\t\tamountToWithdraw = userBalance;\n\t\t}\n\n\t\tValidationLogic.validateWithdraw(\n\t\t\tasset,\n\t\t\tamountToWithdraw,\n\t\t\tuserBalance,\n\t\t\t_reserves,\n\t\t\t_usersConfig[msg.sender],\n\t\t\t_reservesList,\n\t\t\t_reservesCount,\n\t\t\t_addressesProvider.getPriceOracle()\n\t\t);\n\n\t\treserve.updateState();\n\n\t\treserve.updateInterestRates(asset, aToken, 0, amountToWithdraw);\n\n\t\tif (amountToWithdraw == userBalance) {\n\t\t\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, false);\n\t\t\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\n\t\t}\n\n\t\tIAToken(aToken).burn(msg.sender, to, amountToWithdraw, reserve.liquidityIndex);\n\n\t\temit Withdraw(asset, msg.sender, to, amountToWithdraw);\n\n\t\treturn amountToWithdraw;\n\t}\n\n\t/**\n\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n\t * corresponding debt token (StableDebtToken or VariableDebtToken)\n\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n\t * @param asset The address of the underlying asset to borrow\n\t * @param amount The amount to be borrowed\n\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n\t * if he has been given credit delegation allowance\n\t **/\n\tfunction borrow(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 interestRateMode,\n\t\tuint16 referralCode,\n\t\taddress onBehalfOf\n\t) external override whenNotPaused {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\t_executeBorrow(\n\t\t\tExecuteBorrowParams(\n\t\t\t\tasset,\n\t\t\t\tmsg.sender,\n\t\t\t\tonBehalfOf,\n\t\t\t\tamount,\n\t\t\t\tinterestRateMode,\n\t\t\t\treserve.aTokenAddress,\n\t\t\t\treferralCode,\n\t\t\t\ttrue\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n\t * @param asset The address of the borrowed underlying asset previously borrowed\n\t * @param amount The amount to repay\n\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n\t * other borrower whose debt should be removed\n\t * @return The final amount repaid\n\t **/\n\tfunction repay(\n\t\taddress asset,\n\t\tuint256 amount,\n\t\tuint256 rateMode,\n\t\taddress onBehalfOf\n\t) external override whenNotPaused returns (uint256) {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(onBehalfOf, reserve);\n\n\t\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\n\n\t\tValidationLogic.validateRepay(reserve, amount, interestRateMode, onBehalfOf, stableDebt, variableDebt);\n\n\t\tuint256 paybackAmount = interestRateMode == DataTypes.InterestRateMode.STABLE ? stableDebt : variableDebt;\n\n\t\tif (amount < paybackAmount) {\n\t\t\tpaybackAmount = amount;\n\t\t}\n\n\t\treserve.updateState();\n\n\t\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\n\t\t\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(onBehalfOf, paybackAmount);\n\t\t} else {\n\t\t\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\n\t\t\t\tonBehalfOf,\n\t\t\t\tpaybackAmount,\n\t\t\t\treserve.variableBorrowIndex\n\t\t\t);\n\t\t}\n\n\t\taddress aToken = reserve.aTokenAddress;\n\t\treserve.updateInterestRates(asset, aToken, paybackAmount, 0);\n\n\t\tif (stableDebt.add(variableDebt).sub(paybackAmount) == 0) {\n\t\t\t_usersConfig[onBehalfOf].setBorrowing(reserve.id, false);\n\t\t}\n\n\t\tIERC20(asset).safeTransferFrom(msg.sender, aToken, paybackAmount);\n\n\t\tIAToken(aToken).handleRepayment(msg.sender, paybackAmount);\n\n\t\temit Repay(asset, onBehalfOf, msg.sender, paybackAmount);\n\n\t\treturn paybackAmount;\n\t}\n\n\t/**\n\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n\t * @param asset The address of the underlying asset borrowed\n\t * @param rateMode The rate mode that the user wants to swap to\n\t **/\n\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external override whenNotPaused {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(msg.sender, reserve);\n\n\t\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\n\n\t\tValidationLogic.validateSwapRateMode(\n\t\t\treserve,\n\t\t\t_usersConfig[msg.sender],\n\t\t\tstableDebt,\n\t\t\tvariableDebt,\n\t\t\tinterestRateMode\n\t\t);\n\n\t\treserve.updateState();\n\n\t\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\n\t\t\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(msg.sender, stableDebt);\n\t\t\tIVariableDebtToken(reserve.variableDebtTokenAddress).mint(\n\t\t\t\tmsg.sender,\n\t\t\t\tmsg.sender,\n\t\t\t\tstableDebt,\n\t\t\t\treserve.variableBorrowIndex\n\t\t\t);\n\t\t} else {\n\t\t\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\n\t\t\t\tmsg.sender,\n\t\t\t\tvariableDebt,\n\t\t\t\treserve.variableBorrowIndex\n\t\t\t);\n\t\t\tIStableDebtToken(reserve.stableDebtTokenAddress).mint(\n\t\t\t\tmsg.sender,\n\t\t\t\tmsg.sender,\n\t\t\t\tvariableDebt,\n\t\t\t\treserve.currentStableBorrowRate\n\t\t\t);\n\t\t}\n\n\t\treserve.updateInterestRates(asset, reserve.aTokenAddress, 0, 0);\n\n\t\temit Swap(asset, msg.sender, rateMode);\n\t}\n\n\t/**\n\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n\t * - Users can be rebalanced if the following conditions are satisfied:\n\t *     1. Usage ratio is above 95%\n\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n\t *        borrowed at a stable rate and depositors are not earning enough\n\t * @param asset The address of the underlying asset borrowed\n\t * @param user The address of the user to be rebalanced\n\t **/\n\tfunction rebalanceStableBorrowRate(address asset, address user) external override whenNotPaused {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\tIERC20 stableDebtToken = IERC20(reserve.stableDebtTokenAddress);\n\t\tIERC20 variableDebtToken = IERC20(reserve.variableDebtTokenAddress);\n\t\taddress aTokenAddress = reserve.aTokenAddress;\n\n\t\tuint256 stableDebt = IERC20(stableDebtToken).balanceOf(user);\n\n\t\tValidationLogic.validateRebalanceStableBorrowRate(\n\t\t\treserve,\n\t\t\tasset,\n\t\t\tstableDebtToken,\n\t\t\tvariableDebtToken,\n\t\t\taTokenAddress\n\t\t);\n\n\t\treserve.updateState();\n\n\t\tIStableDebtToken(address(stableDebtToken)).burn(user, stableDebt);\n\t\tIStableDebtToken(address(stableDebtToken)).mint(user, user, stableDebt, reserve.currentStableBorrowRate);\n\n\t\treserve.updateInterestRates(asset, aTokenAddress, 0, 0);\n\n\t\temit RebalanceStableBorrowRate(asset, user);\n\t}\n\n\t/**\n\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n\t * @param asset The address of the underlying asset deposited\n\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n\t **/\n\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external override whenNotPaused {\n\t\tDataTypes.ReserveData storage reserve = _reserves[asset];\n\n\t\tValidationLogic.validateSetUseReserveAsCollateral(\n\t\t\treserve,\n\t\t\tasset,\n\t\t\tuseAsCollateral,\n\t\t\t_reserves,\n\t\t\t_usersConfig[msg.sender],\n\t\t\t_reservesList,\n\t\t\t_reservesCount,\n\t\t\t_addressesProvider.getPriceOracle()\n\t\t);\n\n\t\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, useAsCollateral);\n\n\t\tif (useAsCollateral) {\n\t\t\temit ReserveUsedAsCollateralEnabled(asset, msg.sender);\n\t\t} else {\n\t\t\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n\t * @param user The address of the borrower getting liquidated\n\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n\t * to receive the underlying collateral asset directly\n\t **/\n\tfunction liquidationCall(\n\t\taddress collateralAsset,\n\t\taddress debtAsset,\n\t\taddress user,\n\t\tuint256 debtToCover,\n\t\tbool receiveAToken\n\t) external override whenNotPaused {\n\t\taddress collateralManager = _addressesProvider.getLendingPoolCollateralManager();\n\t\taddress liquidationFeeTo = _addressesProvider.getLiquidationFeeTo();\n\t\tif (liquidationFeeTo == address(0)) {\n\t\t\tliquidationFeeTo = msg.sender;\n\t\t}\n\n\t\t//solium-disable-next-line\n\t\t(bool success, bytes memory result) = collateralManager.delegatecall(\n\t\t\tabi.encodeWithSignature(\n\t\t\t\t\"liquidationCall(address,address,address,uint256,bool,address)\",\n\t\t\t\tcollateralAsset,\n\t\t\t\tdebtAsset,\n\t\t\t\tuser,\n\t\t\t\tdebtToCover,\n\t\t\t\treceiveAToken,\n\t\t\t\tliquidationFeeTo\n\t\t\t)\n\t\t);\n\n\t\trequire(success, Errors.LP_LIQUIDATION_CALL_FAILED);\n\n\t\t(uint256 returnCode, string memory returnMessage) = abi.decode(result, (uint256, string));\n\n\t\trequire(returnCode == 0, string(abi.encodePacked(returnMessage)));\n\t}\n\n\tstruct FlashLoanLocalVars {\n\t\tIFlashLoanReceiver receiver;\n\t\taddress oracle;\n\t\tuint256 i;\n\t\taddress currentAsset;\n\t\taddress currentATokenAddress;\n\t\tuint256 currentAmount;\n\t\tuint256 currentPremium;\n\t\tuint256 currentAmountPlusPremium;\n\t\taddress debtToken;\n\t}\n\n\t/**\n\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n\t * as long as the amount taken plus a fee is returned.\n\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n\t * For further details please visit https://developers.aave.com\n\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n\t * @param assets The addresses of the assets being flash-borrowed\n\t * @param amounts The amounts amounts being flash-borrowed\n\t * @param modes Types of the debt to open if the flash loan is not returned:\n\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n\t * @param params Variadic packed params to pass to the receiver as extra information\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n\t *   0 if the action is executed directly by the user, without any middle-man\n\t **/\n\tfunction flashLoan(\n\t\taddress receiverAddress,\n\t\taddress[] calldata assets,\n\t\tuint256[] calldata amounts,\n\t\tuint256[] calldata modes,\n\t\taddress onBehalfOf,\n\t\tbytes calldata params,\n\t\tuint16 referralCode\n\t) external override whenNotPaused {\n\t\tFlashLoanLocalVars memory vars;\n\n\t\tValidationLogic.validateFlashloan(assets, amounts);\n\n\t\taddress[] memory aTokenAddresses = new address[](assets.length);\n\t\tuint256[] memory premiums = new uint256[](assets.length);\n\n\t\tvars.receiver = IFlashLoanReceiver(receiverAddress);\n\n\t\tfor (vars.i = 0; vars.i < assets.length; vars.i++) {\n\t\t\taTokenAddresses[vars.i] = _reserves[assets[vars.i]].aTokenAddress;\n\n\t\t\tpremiums[vars.i] = amounts[vars.i].mul(_flashLoanPremiumTotal).div(10000);\n\n\t\t\tIAToken(aTokenAddresses[vars.i]).transferUnderlyingTo(receiverAddress, amounts[vars.i]);\n\t\t}\n\n\t\trequire(\n\t\t\tvars.receiver.executeOperation(assets, amounts, premiums, msg.sender, params),\n\t\t\tErrors.LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN\n\t\t);\n\n\t\tfor (vars.i = 0; vars.i < assets.length; vars.i++) {\n\t\t\tvars.currentAsset = assets[vars.i];\n\t\t\tvars.currentAmount = amounts[vars.i];\n\t\t\tvars.currentPremium = premiums[vars.i];\n\t\t\tvars.currentATokenAddress = aTokenAddresses[vars.i];\n\t\t\tvars.currentAmountPlusPremium = vars.currentAmount.add(vars.currentPremium);\n\n\t\t\tif (DataTypes.InterestRateMode(modes[vars.i]) == DataTypes.InterestRateMode.NONE) {\n\t\t\t\t_reserves[vars.currentAsset].updateState();\n\t\t\t\t_reserves[vars.currentAsset].cumulateToLiquidityIndex(\n\t\t\t\t\tIERC20(vars.currentATokenAddress).totalSupply(),\n\t\t\t\t\tvars.currentPremium\n\t\t\t\t);\n\t\t\t\t_reserves[vars.currentAsset].updateInterestRates(\n\t\t\t\t\tvars.currentAsset,\n\t\t\t\t\tvars.currentATokenAddress,\n\t\t\t\t\tvars.currentAmountPlusPremium,\n\t\t\t\t\t0\n\t\t\t\t);\n\n\t\t\t\tIERC20(vars.currentAsset).safeTransferFrom(\n\t\t\t\t\treceiverAddress,\n\t\t\t\t\tvars.currentATokenAddress,\n\t\t\t\t\tvars.currentAmountPlusPremium\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// If the user chose to not return the funds, the system checks if there is enough collateral and\n\t\t\t\t// eventually opens a debt position\n\t\t\t\t_executeBorrow(\n\t\t\t\t\tExecuteBorrowParams(\n\t\t\t\t\t\tvars.currentAsset,\n\t\t\t\t\t\tmsg.sender,\n\t\t\t\t\t\tonBehalfOf,\n\t\t\t\t\t\tvars.currentAmount,\n\t\t\t\t\t\tmodes[vars.i],\n\t\t\t\t\t\tvars.currentATokenAddress,\n\t\t\t\t\t\treferralCode,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\temit FlashLoan(\n\t\t\t\treceiverAddress,\n\t\t\t\tmsg.sender,\n\t\t\t\tvars.currentAsset,\n\t\t\t\tvars.currentAmount,\n\t\t\t\tvars.currentPremium,\n\t\t\t\treferralCode\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the state and configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The state of the reserve\n\t **/\n\tfunction getReserveData(address asset) external view override returns (DataTypes.ReserveData memory) {\n\t\treturn _reserves[asset];\n\t}\n\n\t/**\n\t * @dev Returns the user account data across all the reserves\n\t * @param user The address of the user\n\t * @return totalCollateralETH the total collateral in ETH of the user\n\t * @return totalDebtETH the total debt in ETH of the user\n\t * @return availableBorrowsETH the borrowing power left of the user\n\t * @return currentLiquidationThreshold the liquidation threshold of the user\n\t * @return ltv the loan to value of the user\n\t * @return healthFactor the current health factor of the user\n\t **/\n\tfunction getUserAccountData(\n\t\taddress user\n\t)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint256 totalCollateralETH,\n\t\t\tuint256 totalDebtETH,\n\t\t\tuint256 availableBorrowsETH,\n\t\t\tuint256 currentLiquidationThreshold,\n\t\t\tuint256 ltv,\n\t\t\tuint256 healthFactor\n\t\t)\n\t{\n\t\t(totalCollateralETH, totalDebtETH, ltv, currentLiquidationThreshold, healthFactor) = GenericLogic\n\t\t\t.calculateUserAccountData(\n\t\t\t\tuser,\n\t\t\t\t_reserves,\n\t\t\t\t_usersConfig[user],\n\t\t\t\t_reservesList,\n\t\t\t\t_reservesCount,\n\t\t\t\t_addressesProvider.getPriceOracle()\n\t\t\t);\n\n\t\tavailableBorrowsETH = GenericLogic.calculateAvailableBorrowsETH(totalCollateralETH, totalDebtETH, ltv);\n\t}\n\n\t/**\n\t * @dev Returns the configuration of the reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The configuration of the reserve\n\t **/\n\tfunction getConfiguration(address asset) external view override returns (DataTypes.ReserveConfigurationMap memory) {\n\t\treturn _reserves[asset].configuration;\n\t}\n\n\t/**\n\t * @dev Returns the configuration of the user across all the reserves\n\t * @param user The user address\n\t * @return The configuration of the user\n\t **/\n\tfunction getUserConfiguration(address user) external view override returns (DataTypes.UserConfigurationMap memory) {\n\t\treturn _usersConfig[user];\n\t}\n\n\t/**\n\t * @dev Returns the normalized income per unit of asset\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve's normalized income\n\t */\n\tfunction getReserveNormalizedIncome(address asset) external view virtual override returns (uint256) {\n\t\treturn _reserves[asset].getNormalizedIncome();\n\t}\n\n\t/**\n\t * @dev Returns the normalized variable debt per unit of asset\n\t * @param asset The address of the underlying asset of the reserve\n\t * @return The reserve normalized variable debt\n\t */\n\tfunction getReserveNormalizedVariableDebt(address asset) external view override returns (uint256) {\n\t\treturn _reserves[asset].getNormalizedDebt();\n\t}\n\n\t/**\n\t * @dev Returns if the LendingPool is paused\n\t */\n\tfunction paused() external view override returns (bool) {\n\t\treturn _paused;\n\t}\n\n\t/**\n\t * @dev Returns the list of the initialized reserves\n\t **/\n\tfunction getReservesList() external view override returns (address[] memory) {\n\t\taddress[] memory _activeReserves = new address[](_reservesCount);\n\n\t\tfor (uint256 i = 0; i < _reservesCount; i++) {\n\t\t\t_activeReserves[i] = _reservesList[i];\n\t\t}\n\t\treturn _activeReserves;\n\t}\n\n\t/**\n\t * @dev Returns the cached LendingPoolAddressesProvider connected to this contract\n\t **/\n\tfunction getAddressesProvider() external view override returns (ILendingPoolAddressesProvider) {\n\t\treturn _addressesProvider;\n\t}\n\n\t/**\n\t * @dev Returns the percentage of available liquidity that can be borrowed at once at stable rate\n\t */\n\tfunction MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view returns (uint256) {\n\t\treturn _maxStableRateBorrowSizePercent;\n\t}\n\n\t/**\n\t * @dev Returns the fee on flash loans\n\t */\n\tfunction FLASHLOAN_PREMIUM_TOTAL() public view returns (uint256) {\n\t\treturn _flashLoanPremiumTotal;\n\t}\n\n\t/**\n\t * @dev Returns the maximum number of reserves supported to be listed in this LendingPool\n\t */\n\tfunction MAX_NUMBER_RESERVES() public view returns (uint256) {\n\t\treturn _maxNumberOfReserves;\n\t}\n\n\t/**\n\t * @dev Validates and finalizes an aToken transfer\n\t * - Only callable by the overlying aToken of the `asset`\n\t * @param asset The address of the underlying asset of the aToken\n\t * @param from The user from which the aTokens are transferred\n\t * @param to The user receiving the aTokens\n\t * @param amount The amount being transferred/withdrawn\n\t * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n\t * @param balanceToBefore The aToken balance of the `to` user before the transfer\n\t */\n\tfunction finalizeTransfer(\n\t\taddress asset,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tuint256 balanceFromBefore,\n\t\tuint256 balanceToBefore\n\t) external override whenNotPaused {\n\t\trequire(msg.sender == _reserves[asset].aTokenAddress, Errors.LP_CALLER_MUST_BE_AN_ATOKEN);\n\n\t\tValidationLogic.validateTransfer(\n\t\t\tfrom,\n\t\t\t_reserves,\n\t\t\t_usersConfig[from],\n\t\t\t_reservesList,\n\t\t\t_reservesCount,\n\t\t\t_addressesProvider.getPriceOracle()\n\t\t);\n\n\t\tuint256 reserveId = _reserves[asset].id;\n\n\t\tif (from != to) {\n\t\t\tif (balanceFromBefore.sub(amount) == 0) {\n\t\t\t\tDataTypes.UserConfigurationMap storage fromConfig = _usersConfig[from];\n\t\t\t\tfromConfig.setUsingAsCollateral(reserveId, false);\n\t\t\t\temit ReserveUsedAsCollateralDisabled(asset, from);\n\t\t\t}\n\n\t\t\tif (balanceToBefore == 0 && amount != 0) {\n\t\t\t\tDataTypes.UserConfigurationMap storage toConfig = _usersConfig[to];\n\t\t\t\ttoConfig.setUsingAsCollateral(reserveId, true);\n\t\t\t\temit ReserveUsedAsCollateralEnabled(asset, to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n\t * interest rate strategy\n\t * - Only callable by the LendingPoolConfigurator contract\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n\t * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n\t * @param aTokenAddress The address of the VariableDebtToken that will be assigned to the reserve\n\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\n\t **/\n\tfunction initReserve(\n\t\taddress asset,\n\t\taddress aTokenAddress,\n\t\taddress stableDebtAddress,\n\t\taddress variableDebtAddress,\n\t\taddress interestRateStrategyAddress\n\t) external override onlyLendingPoolConfigurator {\n\t\trequire(Address.isContract(asset), Errors.LP_NOT_CONTRACT);\n\t\t_reserves[asset].init(aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress);\n\t\t_addReserveToList(asset);\n\t}\n\n\t/**\n\t * @dev Updates the address of the interest rate strategy contract\n\t * - Only callable by the LendingPoolConfigurator contract\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param rateStrategyAddress The address of the interest rate strategy contract\n\t **/\n\tfunction setReserveInterestRateStrategyAddress(\n\t\taddress asset,\n\t\taddress rateStrategyAddress\n\t) external override onlyLendingPoolConfigurator {\n\t\t_reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\n\t}\n\n\t/**\n\t * @dev Sets the configuration bitmap of the reserve as a whole\n\t * - Only callable by the LendingPoolConfigurator contract\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param configuration The new configuration bitmap\n\t **/\n\tfunction setConfiguration(address asset, uint256 configuration) external override onlyLendingPoolConfigurator {\n\t\t_reserves[asset].configuration.data = configuration;\n\t}\n\n\t/**\n\t * @dev Set the _pause state of a reserve\n\t * - Only callable by the LendingPoolConfigurator contract\n\t * @param val `true` to pause the reserve, `false` to un-pause it\n\t */\n\tfunction setPause(bool val) external override onlyLendingPoolConfigurator {\n\t\t_paused = val;\n\t\tif (_paused) {\n\t\t\temit Paused();\n\t\t} else {\n\t\t\temit Unpaused();\n\t\t}\n\t}\n\n\tstruct ExecuteBorrowParams {\n\t\taddress asset;\n\t\taddress user;\n\t\taddress onBehalfOf;\n\t\tuint256 amount;\n\t\tuint256 interestRateMode;\n\t\taddress aTokenAddress;\n\t\tuint16 referralCode;\n\t\tbool releaseUnderlying;\n\t}\n\n\tfunction _executeBorrow(ExecuteBorrowParams memory vars) internal {\n\t\tDataTypes.ReserveData storage reserve = _reserves[vars.asset];\n\t\tDataTypes.UserConfigurationMap storage userConfig = _usersConfig[vars.onBehalfOf];\n\n\t\taddress oracle = _addressesProvider.getPriceOracle();\n\n\t\tuint256 amountInETH = IPriceOracleGetter(oracle).getAssetPrice(vars.asset).mul(vars.amount).div(\n\t\t\t10 ** reserve.configuration.getDecimals()\n\t\t);\n\n\t\tValidationLogic.validateBorrow(\n\t\t\tvars.asset,\n\t\t\treserve,\n\t\t\tvars.onBehalfOf,\n\t\t\tvars.amount,\n\t\t\tamountInETH,\n\t\t\tvars.interestRateMode,\n\t\t\t_maxStableRateBorrowSizePercent,\n\t\t\t_reserves,\n\t\t\tuserConfig,\n\t\t\t_reservesList,\n\t\t\t_reservesCount,\n\t\t\toracle\n\t\t);\n\n\t\treserve.updateState();\n\n\t\tuint256 currentStableRate = 0;\n\n\t\tbool isFirstBorrowing = false;\n\t\tif (DataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE) {\n\t\t\tcurrentStableRate = reserve.currentStableBorrowRate;\n\n\t\t\tisFirstBorrowing = IStableDebtToken(reserve.stableDebtTokenAddress).mint(\n\t\t\t\tvars.user,\n\t\t\t\tvars.onBehalfOf,\n\t\t\t\tvars.amount,\n\t\t\t\tcurrentStableRate\n\t\t\t);\n\t\t} else {\n\t\t\tisFirstBorrowing = IVariableDebtToken(reserve.variableDebtTokenAddress).mint(\n\t\t\t\tvars.user,\n\t\t\t\tvars.onBehalfOf,\n\t\t\t\tvars.amount,\n\t\t\t\treserve.variableBorrowIndex\n\t\t\t);\n\t\t}\n\n\t\tif (isFirstBorrowing) {\n\t\t\tuserConfig.setBorrowing(reserve.id, true);\n\t\t}\n\n\t\treserve.updateInterestRates(vars.asset, vars.aTokenAddress, 0, vars.releaseUnderlying ? vars.amount : 0);\n\n\t\tif (vars.releaseUnderlying) {\n\t\t\tIAToken(vars.aTokenAddress).transferUnderlyingTo(vars.user, vars.amount);\n\t\t}\n\n\t\temit Borrow(\n\t\t\tvars.asset,\n\t\t\tvars.user,\n\t\t\tvars.onBehalfOf,\n\t\t\tvars.amount,\n\t\t\tvars.interestRateMode,\n\t\t\tDataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE\n\t\t\t\t? currentStableRate\n\t\t\t\t: reserve.currentVariableBorrowRate,\n\t\t\tvars.referralCode\n\t\t);\n\t}\n\n\tfunction _addReserveToList(address asset) internal {\n\t\tuint256 reservesCount = _reservesCount;\n\n\t\trequire(reservesCount < _maxNumberOfReserves, Errors.LP_NO_MORE_RESERVES_ALLOWED);\n\n\t\tbool reserveAlreadyAdded = _reserves[asset].id != 0 || _reservesList[0] == asset;\n\n\t\tif (!reserveAlreadyAdded) {\n\t\t\t_reserves[asset].id = uint8(reservesCount);\n\t\t\t_reservesList[reservesCount] = asset;\n\n\t\t\t_reservesCount = reservesCount + 1;\n\t\t}\n\t}\n\n\tfunction setLeverager(ILeverager _leverager) external {\n\t\trequire(msg.sender == owner, \"!owner\");\n\t\trequire(address(leverager) == address(0), \"Leverager Already Set\");\n\t\tleverager = _leverager;\n\t}\n\n\tfunction setNewOwner(address _newOwner) external {\n\t\trequire(msg.sender == owner, \"!owner\");\n\t\towner = _newOwner;\n\t}\n}\n"
    },
    "contracts/lending/lendingpool/LendingPoolConfigurator.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {VersionedInitializable} from \"../libraries/aave-upgradeability/VersionedInitializable.sol\";\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \"../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\";\nimport {ReserveConfiguration} from \"../libraries/configuration/ReserveConfiguration.sol\";\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {ILendingPool} from \"../../interfaces/ILendingPool.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {PercentageMath} from \"../libraries/math/PercentageMath.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {IInitializableDebtToken} from \"../../interfaces/IInitializableDebtToken.sol\";\nimport {IInitializableAToken} from \"../../interfaces/IInitializableAToken.sol\";\nimport {IChefIncentivesController} from \"../../interfaces/IChefIncentivesController.sol\";\nimport {ILendingPoolConfigurator} from \"../../interfaces/ILendingPoolConfigurator.sol\";\nimport {IMultiFeeDistribution} from \"../../interfaces/IMultiFeeDistribution.sol\";\n\n/**\n * @title LendingPoolConfigurator contract\n * @author Aave\n * @dev Implements the configuration methods for the Aave protocol\n **/\n\ncontract LendingPoolConfigurator is VersionedInitializable, ILendingPoolConfigurator {\n\tusing SafeMath for uint256;\n\tusing PercentageMath for uint256;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n\tILendingPoolAddressesProvider internal addressesProvider;\n\tILendingPool internal pool;\n\n\tmodifier onlyPoolAdmin() {\n\t\trequire(addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\n\t\t_;\n\t}\n\n\tmodifier onlyEmergencyAdmin() {\n\t\trequire(addressesProvider.getEmergencyAdmin() == msg.sender, Errors.LPC_CALLER_NOT_EMERGENCY_ADMIN);\n\t\t_;\n\t}\n\n\tuint256 internal constant CONFIGURATOR_REVISION = 0x1;\n\n\tfunction getRevision() internal pure override returns (uint256) {\n\t\treturn CONFIGURATOR_REVISION;\n\t}\n\n\tfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\n\t\taddressesProvider = provider;\n\t\tpool = ILendingPool(addressesProvider.getLendingPool());\n\t}\n\n\t/**\n\t * @dev Initializes reserves in batch\n\t **/\n\tfunction batchInitReserve(InitReserveInput[] calldata input) external onlyPoolAdmin {\n\t\tILendingPool cachedPool = pool;\n\t\tfor (uint256 i = 0; i < input.length; i++) {\n\t\t\t_initReserve(cachedPool, input[i]);\n\t\t}\n\t}\n\n\tfunction _initReserve(ILendingPool _pool, InitReserveInput calldata input) internal {\n\t\tIChefIncentivesController incentivesController = IChefIncentivesController(input.incentivesController);\n\t\taddress aTokenProxyAddress = _initTokenWithProxy(\n\t\t\tinput.aTokenImpl,\n\t\t\tabi.encodeWithSelector(\n\t\t\t\tIInitializableAToken.initialize.selector,\n\t\t\t\t_pool,\n\t\t\t\tinput.treasury,\n\t\t\t\tinput.underlyingAsset,\n\t\t\t\tincentivesController,\n\t\t\t\tinput.underlyingAssetDecimals,\n\t\t\t\tinput.aTokenName,\n\t\t\t\tinput.aTokenSymbol,\n\t\t\t\tinput.params\n\t\t\t)\n\t\t);\n\t\tincentivesController.addPool(aTokenProxyAddress, input.allocPoint);\n\t\tIMultiFeeDistribution(input.treasury).addReward(aTokenProxyAddress);\n\n\t\taddress stableDebtTokenProxyAddress = _initTokenWithProxy(\n\t\t\tinput.stableDebtTokenImpl,\n\t\t\tabi.encodeWithSelector(\n\t\t\t\tIInitializableDebtToken.initialize.selector,\n\t\t\t\t_pool,\n\t\t\t\tinput.underlyingAsset,\n\t\t\t\tIChefIncentivesController(input.incentivesController),\n\t\t\t\tinput.underlyingAssetDecimals,\n\t\t\t\tinput.stableDebtTokenName,\n\t\t\t\tinput.stableDebtTokenSymbol,\n\t\t\t\tinput.params\n\t\t\t)\n\t\t);\n\t\t// stableDebt is not added to incentives controller\n\t\t// GEIST does not support stable lending\n\n\t\taddress variableDebtTokenProxyAddress = _initTokenWithProxy(\n\t\t\tinput.variableDebtTokenImpl,\n\t\t\tabi.encodeWithSelector(\n\t\t\t\tIInitializableDebtToken.initialize.selector,\n\t\t\t\t_pool,\n\t\t\t\tinput.underlyingAsset,\n\t\t\t\tIChefIncentivesController(input.incentivesController),\n\t\t\t\tinput.underlyingAssetDecimals,\n\t\t\t\tinput.variableDebtTokenName,\n\t\t\t\tinput.variableDebtTokenSymbol,\n\t\t\t\tinput.params\n\t\t\t)\n\t\t);\n\t\tincentivesController.addPool(variableDebtTokenProxyAddress, input.allocPoint);\n\n\t\t_pool.initReserve(\n\t\t\tinput.underlyingAsset,\n\t\t\taTokenProxyAddress,\n\t\t\tstableDebtTokenProxyAddress,\n\t\t\tvariableDebtTokenProxyAddress,\n\t\t\tinput.interestRateStrategyAddress\n\t\t);\n\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(input.underlyingAsset);\n\n\t\tcurrentConfig.setDecimals(input.underlyingAssetDecimals);\n\n\t\tcurrentConfig.setActive(true);\n\t\tcurrentConfig.setFrozen(false);\n\n\t\tpool.setConfiguration(input.underlyingAsset, currentConfig.data);\n\n\t\temit ReserveInitialized(\n\t\t\tinput.underlyingAsset,\n\t\t\taTokenProxyAddress,\n\t\t\tstableDebtTokenProxyAddress,\n\t\t\tvariableDebtTokenProxyAddress,\n\t\t\tinput.interestRateStrategyAddress\n\t\t);\n\t}\n\n\t/**\n\t * @dev Updates the aToken implementation for the reserve\n\t **/\n\tfunction updateAToken(UpdateATokenInput calldata input) external onlyPoolAdmin {\n\t\tILendingPool cachedPool = pool;\n\n\t\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n\t\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\n\n\t\tbytes memory encodedCall = abi.encodeWithSelector(\n\t\t\tIInitializableAToken.initialize.selector,\n\t\t\tcachedPool,\n\t\t\tinput.treasury,\n\t\t\tinput.asset,\n\t\t\tinput.incentivesController,\n\t\t\tdecimals,\n\t\t\tinput.name,\n\t\t\tinput.symbol,\n\t\t\tinput.params\n\t\t);\n\n\t\t_upgradeTokenImplementation(reserveData.aTokenAddress, input.implementation, encodedCall);\n\n\t\temit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);\n\t}\n\n\t/**\n\t * @dev Updates the stable debt token implementation for the reserve\n\t **/\n\tfunction updateStableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\n\t\tILendingPool cachedPool = pool;\n\n\t\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n\t\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\n\n\t\tbytes memory encodedCall = abi.encodeWithSelector(\n\t\t\tIInitializableDebtToken.initialize.selector,\n\t\t\tcachedPool,\n\t\t\tinput.asset,\n\t\t\tinput.incentivesController,\n\t\t\tdecimals,\n\t\t\tinput.name,\n\t\t\tinput.symbol,\n\t\t\tinput.params\n\t\t);\n\n\t\t_upgradeTokenImplementation(reserveData.stableDebtTokenAddress, input.implementation, encodedCall);\n\n\t\temit StableDebtTokenUpgraded(input.asset, reserveData.stableDebtTokenAddress, input.implementation);\n\t}\n\n\t/**\n\t * @dev Updates the variable debt token implementation for the asset\n\t **/\n\tfunction updateVariableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\n\t\tILendingPool cachedPool = pool;\n\n\t\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n\t\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\n\n\t\tbytes memory encodedCall = abi.encodeWithSelector(\n\t\t\tIInitializableDebtToken.initialize.selector,\n\t\t\tcachedPool,\n\t\t\tinput.asset,\n\t\t\tinput.incentivesController,\n\t\t\tdecimals,\n\t\t\tinput.name,\n\t\t\tinput.symbol,\n\t\t\tinput.params\n\t\t);\n\n\t\t_upgradeTokenImplementation(reserveData.variableDebtTokenAddress, input.implementation, encodedCall);\n\n\t\temit VariableDebtTokenUpgraded(input.asset, reserveData.variableDebtTokenAddress, input.implementation);\n\t}\n\n\t/**\n\t * @dev Enables borrowing on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\n\t **/\n\tfunction enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setBorrowingEnabled(true);\n\t\tcurrentConfig.setStableRateBorrowingEnabled(stableBorrowRateEnabled);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit BorrowingEnabledOnReserve(asset, stableBorrowRateEnabled);\n\t}\n\n\t/**\n\t * @dev Disables borrowing on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction disableBorrowingOnReserve(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setBorrowingEnabled(false);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\t\temit BorrowingDisabledOnReserve(asset);\n\t}\n\n\t/**\n\t * @dev Configures the reserve collateralization parameters\n\t * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param ltv The loan to value of the asset when used as collateral\n\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\n\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\n\t * means the liquidator will receive a 5% bonus\n\t **/\n\tfunction configureReserveAsCollateral(\n\t\taddress asset,\n\t\tuint256 ltv,\n\t\tuint256 liquidationThreshold,\n\t\tuint256 liquidationBonus\n\t) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\t//validation of the parameters: the LTV can\n\t\t//only be lower or equal than the liquidation threshold\n\t\t//(otherwise a loan against the asset would cause instantaneous liquidation)\n\t\trequire(ltv <= liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\n\n\t\tif (liquidationThreshold != 0) {\n\t\t\t//liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\n\t\t\t//collateral than needed to cover the debt\n\t\t\trequire(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.LPC_INVALID_CONFIGURATION);\n\n\t\t\t//if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\n\t\t\t//a loan is taken there is enough collateral available to cover the liquidation bonus\n\t\t\trequire(\n\t\t\t\tliquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,\n\t\t\t\tErrors.LPC_INVALID_CONFIGURATION\n\t\t\t);\n\t\t} else {\n\t\t\trequire(liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\n\t\t\t//if the liquidation threshold is being set to 0,\n\t\t\t// the reserve is being disabled as collateral. To do so,\n\t\t\t//we need to ensure no liquidity is deposited\n\t\t\t_checkNoLiquidity(asset);\n\t\t}\n\n\t\tcurrentConfig.setLtv(ltv);\n\t\tcurrentConfig.setLiquidationThreshold(liquidationThreshold);\n\t\tcurrentConfig.setLiquidationBonus(liquidationBonus);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);\n\t}\n\n\t/**\n\t * @dev Enable stable rate borrowing on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction enableReserveStableRate(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setStableRateBorrowingEnabled(true);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit StableRateEnabledOnReserve(asset);\n\t}\n\n\t/**\n\t * @dev Disable stable rate borrowing on a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction disableReserveStableRate(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setStableRateBorrowingEnabled(false);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit StableRateDisabledOnReserve(asset);\n\t}\n\n\t/**\n\t * @dev Activates a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction activateReserve(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setActive(true);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit ReserveActivated(asset);\n\t}\n\n\t/**\n\t * @dev Deactivates a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction deactivateReserve(address asset) external onlyPoolAdmin {\n\t\t_checkNoLiquidity(asset);\n\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setActive(false);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit ReserveDeactivated(asset);\n\t}\n\n\t/**\n\t * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\n\t *  but allows repayments, liquidations, rate rebalances and withdrawals\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction freezeReserve(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setFrozen(true);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit ReserveFrozen(asset);\n\t}\n\n\t/**\n\t * @dev Unfreezes a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t **/\n\tfunction unfreezeReserve(address asset) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setFrozen(false);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit ReserveUnfrozen(asset);\n\t}\n\n\t/**\n\t * @dev Updates the reserve factor of a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param reserveFactor The new reserve factor of the reserve\n\t **/\n\tfunction setReserveFactor(address asset, uint256 reserveFactor) external onlyPoolAdmin {\n\t\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\n\n\t\tcurrentConfig.setReserveFactor(reserveFactor);\n\n\t\tpool.setConfiguration(asset, currentConfig.data);\n\n\t\temit ReserveFactorChanged(asset, reserveFactor);\n\t}\n\n\t/**\n\t * @dev Sets the interest rate strategy of a reserve\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param rateStrategyAddress The new address of the interest strategy contract\n\t **/\n\tfunction setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external onlyPoolAdmin {\n\t\tpool.setReserveInterestRateStrategyAddress(asset, rateStrategyAddress);\n\t\temit ReserveInterestRateStrategyChanged(asset, rateStrategyAddress);\n\t}\n\n\t/**\n\t * @dev pauses or unpauses all the actions of the protocol, including aToken transfers\n\t * @param val true if protocol needs to be paused, false otherwise\n\t **/\n\tfunction setPoolPause(bool val) external onlyEmergencyAdmin {\n\t\tpool.setPause(val);\n\t}\n\n\tfunction _initTokenWithProxy(address implementation, bytes memory initParams) internal returns (address) {\n\t\tInitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(\n\t\t\taddress(this)\n\t\t);\n\n\t\tproxy.initialize(implementation, initParams);\n\n\t\treturn address(proxy);\n\t}\n\n\tfunction _upgradeTokenImplementation(\n\t\taddress proxyAddress,\n\t\taddress implementation,\n\t\tbytes memory initParams\n\t) internal {\n\t\tInitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\n\t\t\tpayable(proxyAddress)\n\t\t);\n\n\t\tproxy.upgradeToAndCall(implementation, initParams);\n\t}\n\n\tfunction _checkNoLiquidity(address asset) internal view {\n\t\tDataTypes.ReserveData memory reserveData = pool.getReserveData(asset);\n\n\t\tuint256 availableLiquidity = IERC20Metadata(asset).balanceOf(reserveData.aTokenAddress);\n\n\t\trequire(availableLiquidity == 0 && reserveData.currentLiquidityRate == 0, Errors.LPC_RESERVE_LIQUIDITY_NOT_0);\n\t}\n}\n"
    },
    "contracts/lending/lendingpool/LendingPoolStorage.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {UserConfiguration} from \"../libraries/configuration/UserConfiguration.sol\";\nimport {ReserveConfiguration} from \"../libraries/configuration/ReserveConfiguration.sol\";\nimport {ReserveLogic} from \"../libraries/logic/ReserveLogic.sol\";\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\n\ncontract LendingPoolStorage {\n\tusing ReserveLogic for DataTypes.ReserveData;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\tusing UserConfiguration for DataTypes.UserConfigurationMap;\n\n\tILendingPoolAddressesProvider internal _addressesProvider;\n\n\tmapping(address => DataTypes.ReserveData) internal _reserves;\n\tmapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\n\n\t// the list of the available reserves, structured as a mapping for gas savings reasons\n\tmapping(uint256 => address) internal _reservesList;\n\n\tuint256 internal _reservesCount;\n\n\tbool internal _paused;\n\n\tuint256 internal _maxStableRateBorrowSizePercent;\n\n\tuint256 internal _flashLoanPremiumTotal;\n\n\tuint256 internal _maxNumberOfReserves;\n}\n"
    },
    "contracts/lending/libraries/aave-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\";\n\n/**\n * @title BaseImmutableAdminUpgradeabilityProxy\n * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks. The admin role is stored in an immutable, which\n * helps saving transactions costs\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n\taddress immutable ADMIN;\n\n\tconstructor(address _admin) {\n\t\tADMIN = _admin;\n\t}\n\n\tmodifier ifAdmin() {\n\t\tif (msg.sender == ADMIN) {\n\t\t\t_;\n\t\t} else {\n\t\t\t_fallback();\n\t\t}\n\t}\n\n\t/**\n\t * @return _address The address of the proxy admin.\n\t */\n\tfunction admin() external ifAdmin returns (address _address) {\n\t\treturn ADMIN;\n\t}\n\n\t/**\n\t * @return _address The address of the implementation.\n\t */\n\tfunction implementation() external ifAdmin returns (address _address) {\n\t\treturn _implementation();\n\t}\n\n\t/**\n\t * @dev Upgrade the backing implementation of the proxy.\n\t * Only the admin can call this function.\n\t * @param newImplementation Address of the new implementation.\n\t */\n\tfunction upgradeTo(address newImplementation) external ifAdmin {\n\t\t_upgradeTo(newImplementation);\n\t}\n\n\t/**\n\t * @dev Upgrade the backing implementation of the proxy and call a function\n\t * on the new implementation.\n\t * This is useful to initialize the proxied contract.\n\t * @param newImplementation Address of the new implementation.\n\t * @param data Data to send as msg.data in the low level call.\n\t * It should include the signature and the parameters of the function to be called, as described in\n\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n\t */\n\tfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n\t\t_upgradeTo(newImplementation);\n\t\t(bool success, ) = newImplementation.delegatecall(data);\n\t\trequire(success);\n\t}\n\n\t/**\n\t * @dev Only fall back when the sender is not the admin.\n\t */\n\tfunction _willFallback() internal virtual override {\n\t\trequire(msg.sender != ADMIN, \"Cannot call fallback function from the proxy admin\");\n\t\tsuper._willFallback();\n\t}\n}\n"
    },
    "contracts/lending/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"./BaseImmutableAdminUpgradeabilityProxy.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\";\n\n/**\n * @title InitializableAdminUpgradeabilityProxy\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\n */\ncontract InitializableImmutableAdminUpgradeabilityProxy is\n\tBaseImmutableAdminUpgradeabilityProxy,\n\tInitializableUpgradeabilityProxy\n{\n\tconstructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {}\n\n\t/**\n\t * @dev Only fall back when the sender is not the admin.\n\t */\n\tfunction _willFallback() internal override(BaseImmutableAdminUpgradeabilityProxy, Proxy) {\n\t\tBaseImmutableAdminUpgradeabilityProxy._willFallback();\n\t}\n}\n"
    },
    "contracts/lending/libraries/aave-upgradeability/VersionedInitializable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title VersionedInitializable\n *\n * @dev Helper contract to implement initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n *\n * @author Aave, inspired by the OpenZeppelin Initializable contract\n */\nabstract contract VersionedInitializable {\n\t/**\n\t * @dev Indicates that the contract has been initialized.\n\t */\n\tuint256 private lastInitializedRevision = 0;\n\n\t/**\n\t * @dev Indicates that the contract is in the process of being initialized.\n\t */\n\tbool private initializing;\n\n\t/**\n\t * @dev Modifier to use in the initializer function of a contract.\n\t */\n\tmodifier initializer() {\n\t\tuint256 revision = getRevision();\n\t\trequire(\n\t\t\tinitializing || isConstructor() || revision > lastInitializedRevision,\n\t\t\t\"Contract instance has already been initialized\"\n\t\t);\n\n\t\tbool isTopLevelCall = !initializing;\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = true;\n\t\t\tlastInitializedRevision = revision;\n\t\t}\n\n\t\t_;\n\n\t\tif (isTopLevelCall) {\n\t\t\tinitializing = false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev returns the revision number of the contract\n\t * Needs to be defined in the inherited class as a constant.\n\t **/\n\tfunction getRevision() internal pure virtual returns (uint256);\n\n\t/**\n\t * @dev Returns true if and only if the function is running in the constructor\n\t **/\n\tfunction isConstructor() private view returns (bool) {\n\t\t// extcodesize checks the size of the code stored in an address, and\n\t\t// address returns the current address. Since the code is still not\n\t\t// deployed when running a constructor, any checks on its code size will\n\t\t// yield zero, making it an effective way to detect if a contract is\n\t\t// under construction or not.\n\t\tuint256 cs;\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\tcs := extcodesize(address())\n\t\t}\n\t\treturn cs == 0;\n\t}\n\n\t// Reserved storage space to allow for layout changes in the future.\n\tuint256[50] private ______gap;\n}\n"
    },
    "contracts/lending/libraries/configuration/ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title ReserveConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the reserve configuration\n */\nlibrary ReserveConfiguration {\n\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n\n\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\n\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\n\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n\n\tuint256 constant MAX_VALID_LTV = 65535;\n\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n\tuint256 constant MAX_VALID_DECIMALS = 255;\n\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\n\n\t/**\n\t * @dev Sets the Loan to Value of the reserve\n\t * @param self The reserve configuration\n\t * @param ltv the new ltv\n\t **/\n\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n\t\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\n\n\t\tself.data = (self.data & LTV_MASK) | ltv;\n\t}\n\n\t/**\n\t * @dev Gets the Loan to Value of the reserve\n\t * @param self The reserve configuration\n\t * @return The loan to value\n\t **/\n\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn self.data & ~LTV_MASK;\n\t}\n\n\t/**\n\t * @dev Sets the liquidation threshold of the reserve\n\t * @param self The reserve configuration\n\t * @param threshold The new liquidation threshold\n\t **/\n\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\n\t\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\n\n\t\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the liquidation threshold of the reserve\n\t * @param self The reserve configuration\n\t * @return The liquidation threshold\n\t **/\n\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the liquidation bonus of the reserve\n\t * @param self The reserve configuration\n\t * @param bonus The new liquidation bonus\n\t **/\n\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\n\t\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\n\n\t\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the liquidation bonus of the reserve\n\t * @param self The reserve configuration\n\t * @return The liquidation bonus\n\t **/\n\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the decimals of the underlying asset of the reserve\n\t * @param self The reserve configuration\n\t * @param decimals The decimals\n\t **/\n\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\n\t\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\n\n\t\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the decimals of the underlying asset of the reserve\n\t * @param self The reserve configuration\n\t * @return The decimals of the asset\n\t **/\n\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Sets the active state of the reserve\n\t * @param self The reserve configuration\n\t * @param active The active state\n\t **/\n\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n\t\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the active state of the reserve\n\t * @param self The reserve configuration\n\t * @return The active state\n\t **/\n\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~ACTIVE_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Sets the frozen state of the reserve\n\t * @param self The reserve configuration\n\t * @param frozen The frozen state\n\t **/\n\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n\t\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the frozen state of the reserve\n\t * @param self The reserve configuration\n\t * @return The frozen state\n\t **/\n\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~FROZEN_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Enables or disables borrowing on the reserve\n\t * @param self The reserve configuration\n\t * @param enabled True if the borrowing needs to be enabled, false otherwise\n\t **/\n\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n\t\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the borrowing state of the reserve\n\t * @param self The reserve configuration\n\t * @return The borrowing state\n\t **/\n\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\n\t\treturn (self.data & ~BORROWING_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Enables or disables stable rate borrowing on the reserve\n\t * @param self The reserve configuration\n\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n\t **/\n\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\n\t\tself.data =\n\t\t\t(self.data & STABLE_BORROWING_MASK) |\n\t\t\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the stable rate borrowing state of the reserve\n\t * @param self The reserve configuration\n\t * @return The stable rate borrowing state\n\t **/\n\tfunction getStableRateBorrowingEnabled(\n\t\tDataTypes.ReserveConfigurationMap storage self\n\t) internal view returns (bool) {\n\t\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\n\t}\n\n\t/**\n\t * @dev Sets the reserve factor of the reserve\n\t * @param self The reserve configuration\n\t * @param reserveFactor The reserve factor\n\t **/\n\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\n\t\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\n\n\t\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n\t}\n\n\t/**\n\t * @dev Gets the reserve factor of the reserve\n\t * @param self The reserve configuration\n\t * @return The reserve factor\n\t **/\n\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\n\t\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n\t}\n\n\t/**\n\t * @dev Gets the configuration flags of the reserve\n\t * @param self The reserve configuration\n\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n\t **/\n\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\n\t\tuint256 dataLocal = self.data;\n\n\t\treturn (\n\t\t\t(dataLocal & ~ACTIVE_MASK) != 0,\n\t\t\t(dataLocal & ~FROZEN_MASK) != 0,\n\t\t\t(dataLocal & ~BORROWING_MASK) != 0,\n\t\t\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration paramters of the reserve\n\t * @param self The reserve configuration\n\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n\t **/\n\tfunction getParams(\n\t\tDataTypes.ReserveConfigurationMap storage self\n\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\n\t\tuint256 dataLocal = self.data;\n\n\t\treturn (\n\t\t\tdataLocal & ~LTV_MASK,\n\t\t\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n\t\t\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n\t\t\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n\t\t\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration paramters of the reserve from a memory object\n\t * @param self The reserve configuration\n\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n\t **/\n\tfunction getParamsMemory(\n\t\tDataTypes.ReserveConfigurationMap memory self\n\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\n\t\treturn (\n\t\t\tself.data & ~LTV_MASK,\n\t\t\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n\t\t\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n\t\t\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n\t\t\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n\t\t);\n\t}\n\n\t/**\n\t * @dev Gets the configuration flags of the reserve from a memory object\n\t * @param self The reserve configuration\n\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n\t **/\n\tfunction getFlagsMemory(\n\t\tDataTypes.ReserveConfigurationMap memory self\n\t) internal pure returns (bool, bool, bool, bool) {\n\t\treturn (\n\t\t\t(self.data & ~ACTIVE_MASK) != 0,\n\t\t\t(self.data & ~FROZEN_MASK) != 0,\n\t\t\t(self.data & ~BORROWING_MASK) != 0,\n\t\t\t(self.data & ~STABLE_BORROWING_MASK) != 0\n\t\t);\n\t}\n}\n"
    },
    "contracts/lending/libraries/configuration/UserConfiguration.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title UserConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the user configuration\n */\nlibrary UserConfiguration {\n\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\n\n\t/**\n\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @param borrowing True if the user is borrowing the reserve, false otherwise\n\t **/\n\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\n\t}\n\n\t/**\n\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\n\t **/\n\tfunction setUsingAsCollateral(\n\t\tDataTypes.UserConfigurationMap storage self,\n\t\tuint256 reserveIndex,\n\t\tbool usingAsCollateral\n\t) internal {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\tself.data =\n\t\t\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\n\t\t\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\n\t **/\n\tfunction isUsingAsCollateralOrBorrowing(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve for borrowing\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve for borrowing, false otherwise\n\t **/\n\tfunction isBorrowing(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been using the reserve as collateral\n\t * @param self The configuration object\n\t * @param reserveIndex The index of the reserve in the bitmap\n\t * @return True if the user has been using a reserve as collateral, false otherwise\n\t **/\n\tfunction isUsingAsCollateral(\n\t\tDataTypes.UserConfigurationMap memory self,\n\t\tuint256 reserveIndex\n\t) internal pure returns (bool) {\n\t\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\n\t\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has been borrowing from any reserve\n\t * @param self The configuration object\n\t * @return True if the user has been borrowing any reserve, false otherwise\n\t **/\n\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\n\t\treturn self.data & BORROWING_MASK != 0;\n\t}\n\n\t/**\n\t * @dev Used to validate if a user has not been using any reserve\n\t * @param self The configuration object\n\t * @return True if the user has been borrowing any reserve, false otherwise\n\t **/\n\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\n\t\treturn self.data == 0;\n\t}\n}\n"
    },
    "contracts/lending/libraries/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n * @dev Error messages prefix glossary:\n *  - VL = ValidationLogic\n *  - MATH = Math libraries\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\n *  - AT = AToken\n *  - SDT = StableDebtToken\n *  - VDT = VariableDebtToken\n *  - LP = LendingPool\n *  - LPAPR = LendingPoolAddressesProviderRegistry\n *  - LPC = LendingPoolConfiguration\n *  - RL = ReserveLogic\n *  - LPCM = LendingPoolCollateralManager\n *  - P = Pausable\n */\nlibrary Errors {\n\t//common errors\n\tstring public constant CALLER_NOT_POOL_ADMIN = \"33\"; // 'The caller must be the pool admin'\n\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \"59\"; // User borrows on behalf, but allowance are too small\n\n\t//contract specific errors\n\tstring public constant VL_INVALID_AMOUNT = \"1\"; // 'Amount must be greater than 0'\n\tstring public constant VL_NO_ACTIVE_RESERVE = \"2\"; // 'Action requires an active reserve'\n\tstring public constant VL_RESERVE_FROZEN = \"3\"; // 'Action cannot be performed because the reserve is frozen'\n\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \"4\"; // 'The current liquidity is not enough'\n\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \"5\"; // 'User cannot withdraw more than the available balance'\n\tstring public constant VL_TRANSFER_NOT_ALLOWED = \"6\"; // 'Transfer cannot be allowed.'\n\tstring public constant VL_BORROWING_NOT_ENABLED = \"7\"; // 'Borrowing is not enabled'\n\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \"8\"; // 'Invalid interest rate mode selected'\n\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \"9\"; // 'The collateral balance is 0'\n\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \"10\"; // 'Health factor is lesser than the liquidation threshold'\n\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \"11\"; // 'There is not enough collateral to cover a new borrow'\n\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \"12\"; // stable borrowing not enabled\n\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \"13\"; // collateral is (mostly) the same currency that is being borrowed\n\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \"14\"; // 'The requested amount is greater than the max loan size in stable rate mode\n\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \"15\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\n\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \"16\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\n\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \"17\"; // 'User does not have a stable rate loan in progress on this reserve'\n\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \"18\"; // 'User does not have a variable rate loan in progress on this reserve'\n\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \"19\"; // 'The underlying balance needs to be greater than 0'\n\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \"20\"; // 'User deposit is already being used as collateral'\n\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \"21\"; // 'User does not have any stable rate loan for this reserve'\n\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \"22\"; // 'Interest rate rebalance conditions were not met'\n\tstring public constant LP_LIQUIDATION_CALL_FAILED = \"23\"; // 'Liquidation call failed'\n\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \"24\"; // 'There is not enough liquidity available to borrow'\n\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \"25\"; // 'The requested amount is too small for a FlashLoan.'\n\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \"26\"; // 'The actual balance of the protocol is inconsistent'\n\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \"27\"; // 'The caller of the function is not the lending pool configurator'\n\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \"28\";\n\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \"29\"; // 'The caller of this function must be a lending pool'\n\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \"30\"; // 'User cannot give allowance to himself'\n\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \"31\"; // 'Transferred amount needs to be greater than zero'\n\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \"32\"; // 'Reserve has already been initialized'\n\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \"34\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \"35\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \"36\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \"37\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \"38\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \"39\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \"40\"; // 'The liquidity of the reserve needs to be 0'\n\tstring public constant LPC_INVALID_CONFIGURATION = \"75\"; // 'Invalid risk parameters for the reserve'\n\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \"76\"; // 'The caller must be the emergency admin'\n\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \"41\"; // 'Provider is not registered'\n\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \"42\"; // 'Health factor is not below the threshold'\n\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \"43\"; // 'The collateral chosen cannot be liquidated'\n\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \"44\"; // 'User did not borrow the specified currency'\n\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \"45\"; // \"There isn't enough liquidity available to liquidate\"\n\tstring public constant LPCM_NO_ERRORS = \"46\"; // 'No errors'\n\tstring public constant LP_INVALID_FLASHLOAN_MODE = \"47\"; //Invalid flashloan mode selected\n\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \"48\";\n\tstring public constant MATH_ADDITION_OVERFLOW = \"49\";\n\tstring public constant MATH_DIVISION_BY_ZERO = \"50\";\n\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \"51\"; //  Liquidity index overflows uint128\n\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \"52\"; //  Variable borrow index overflows uint128\n\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \"53\"; //  Liquidity rate overflows uint128\n\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \"54\"; //  Variable borrow rate overflows uint128\n\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \"55\"; //  Stable borrow rate overflows uint128\n\tstring public constant CT_INVALID_MINT_AMOUNT = \"56\"; //invalid amount to mint\n\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \"57\";\n\tstring public constant CT_INVALID_BURN_AMOUNT = \"58\"; //invalid amount to burn\n\tstring public constant LP_FAILED_COLLATERAL_SWAP = \"60\";\n\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \"61\";\n\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \"62\";\n\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \"63\";\n\tstring public constant LP_IS_PAUSED = \"64\"; // 'Pool is paused'\n\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \"65\";\n\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \"66\";\n\tstring public constant RC_INVALID_LTV = \"67\";\n\tstring public constant RC_INVALID_LIQ_THRESHOLD = \"68\";\n\tstring public constant RC_INVALID_LIQ_BONUS = \"69\";\n\tstring public constant RC_INVALID_DECIMALS = \"70\";\n\tstring public constant RC_INVALID_RESERVE_FACTOR = \"71\";\n\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \"72\";\n\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \"73\";\n\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \"74\";\n\tstring public constant UL_INVALID_INDEX = \"77\";\n\tstring public constant LP_NOT_CONTRACT = \"78\";\n\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \"79\";\n\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \"80\";\n\n\tenum CollateralManagerErrors {\n\t\tNO_ERROR,\n\t\tNO_COLLATERAL_AVAILABLE,\n\t\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\n\t\tCURRRENCY_NOT_BORROWED,\n\t\tHEALTH_FACTOR_ABOVE_THRESHOLD,\n\t\tNOT_ENOUGH_LIQUIDITY,\n\t\tNO_ACTIVE_RESERVE,\n\t\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\n\t\tINVALID_EQUAL_ASSETS_TO_SWAP,\n\t\tFROZEN_RESERVE\n\t}\n}\n"
    },
    "contracts/lending/libraries/helpers/Helpers.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title Helpers library\n * @author Aave\n */\nlibrary Helpers {\n\t/**\n\t * @dev Fetches the user current stable and variable debt balances\n\t * @param user The user address\n\t * @param reserve The reserve data object\n\t * @return The stable and variable debt balance\n\t **/\n\tfunction getUserCurrentDebt(\n\t\taddress user,\n\t\tDataTypes.ReserveData storage reserve\n\t) internal view returns (uint256, uint256) {\n\t\treturn (\n\t\t\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\n\t\t\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\n\t\t);\n\t}\n\n\tfunction getUserCurrentDebtMemory(\n\t\taddress user,\n\t\tDataTypes.ReserveData memory reserve\n\t) internal view returns (uint256, uint256) {\n\t\treturn (\n\t\t\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\n\t\t\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\n\t\t);\n\t}\n}\n"
    },
    "contracts/lending/libraries/logic/GenericLogic.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ReserveLogic} from \"./ReserveLogic.sol\";\nimport {ReserveConfiguration} from \"../configuration/ReserveConfiguration.sol\";\nimport {UserConfiguration} from \"../configuration/UserConfiguration.sol\";\nimport {WadRayMath} from \"../math/WadRayMath.sol\";\nimport {PercentageMath} from \"../math/PercentageMath.sol\";\nimport {IPriceOracleGetter} from \"../../../interfaces/IPriceOracleGetter.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title GenericLogic library\n * @author Aave\n * @title Implements protocol-level logic to calculate and validate the state of a user\n */\nlibrary GenericLogic {\n\tusing ReserveLogic for DataTypes.ReserveData;\n\tusing SafeMath for uint256;\n\tusing WadRayMath for uint256;\n\tusing PercentageMath for uint256;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\tusing UserConfiguration for DataTypes.UserConfigurationMap;\n\n\tuint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\n\n\tstruct balanceDecreaseAllowedLocalVars {\n\t\tuint256 decimals;\n\t\tuint256 liquidationThreshold;\n\t\tuint256 totalCollateralInETH;\n\t\tuint256 totalDebtInETH;\n\t\tuint256 avgLiquidationThreshold;\n\t\tuint256 amountToDecreaseInETH;\n\t\tuint256 collateralBalanceAfterDecrease;\n\t\tuint256 liquidationThresholdAfterDecrease;\n\t\tuint256 healthFactorAfterDecrease;\n\t\tbool reserveUsageAsCollateralEnabled;\n\t}\n\n\t/**\n\t * @dev Checks if a specific balance decrease is allowed\n\t * (i.e. doesn't bring the user borrow position health factor under HEALTH_FACTOR_LIQUIDATION_THRESHOLD)\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param user The address of the user\n\t * @param amount The amount to decrease\n\t * @param reservesData The data of all the reserves\n\t * @param userConfig The user configuration\n\t * @param reserves The list of all the active reserves\n\t * @param oracle The address of the oracle contract\n\t * @return true if the decrease of the balance is allowed\n\t **/\n\tfunction balanceDecreaseAllowed(\n\t\taddress asset,\n\t\taddress user,\n\t\tuint256 amount,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap calldata userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) external view returns (bool) {\n\t\tif (!userConfig.isBorrowingAny() || !userConfig.isUsingAsCollateral(reservesData[asset].id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tbalanceDecreaseAllowedLocalVars memory vars;\n\n\t\t(, vars.liquidationThreshold, , vars.decimals, ) = reservesData[asset].configuration.getParams();\n\n\t\tif (vars.liquidationThreshold == 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\t(vars.totalCollateralInETH, vars.totalDebtInETH, , vars.avgLiquidationThreshold, ) = calculateUserAccountData(\n\t\t\tuser,\n\t\t\treservesData,\n\t\t\tuserConfig,\n\t\t\treserves,\n\t\t\treservesCount,\n\t\t\toracle\n\t\t);\n\n\t\tif (vars.totalDebtInETH == 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvars.amountToDecreaseInETH = IPriceOracleGetter(oracle).getAssetPrice(asset).mul(amount).div(\n\t\t\t10 ** vars.decimals\n\t\t);\n\n\t\tvars.collateralBalanceAfterDecrease = vars.totalCollateralInETH.sub(vars.amountToDecreaseInETH);\n\n\t\t//if there is a borrow, there can't be 0 collateral\n\t\tif (vars.collateralBalanceAfterDecrease == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvars.liquidationThresholdAfterDecrease = vars\n\t\t\t.totalCollateralInETH\n\t\t\t.mul(vars.avgLiquidationThreshold)\n\t\t\t.sub(vars.amountToDecreaseInETH.mul(vars.liquidationThreshold))\n\t\t\t.div(vars.collateralBalanceAfterDecrease);\n\n\t\tuint256 healthFactorAfterDecrease = calculateHealthFactorFromBalances(\n\t\t\tvars.collateralBalanceAfterDecrease,\n\t\t\tvars.totalDebtInETH,\n\t\t\tvars.liquidationThresholdAfterDecrease\n\t\t);\n\n\t\treturn healthFactorAfterDecrease >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\n\t}\n\n\tstruct CalculateUserAccountDataVars {\n\t\tuint256 reserveUnitPrice;\n\t\tuint256 tokenUnit;\n\t\tuint256 compoundedLiquidityBalance;\n\t\tuint256 compoundedBorrowBalance;\n\t\tuint256 decimals;\n\t\tuint256 ltv;\n\t\tuint256 liquidationThreshold;\n\t\tuint256 i;\n\t\tuint256 healthFactor;\n\t\tuint256 totalCollateralInETH;\n\t\tuint256 totalDebtInETH;\n\t\tuint256 avgLtv;\n\t\tuint256 avgLiquidationThreshold;\n\t\tuint256 reservesLength;\n\t\tbool healthFactorBelowThreshold;\n\t\taddress currentReserveAddress;\n\t\tbool usageAsCollateralEnabled;\n\t\tbool userUsesReserveAsCollateral;\n\t}\n\n\t/**\n\t * @dev Calculates the user data across the reserves.\n\t * this includes the total liquidity/collateral/borrow balances in ETH,\n\t * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\n\t * @param user The address of the user\n\t * @param reservesData Data of all the reserves\n\t * @param userConfig The configuration of the user\n\t * @param reserves The list of the available reserves\n\t * @param oracle The price oracle address\n\t * @return The total collateral and total debt of the user in ETH, the avg ltv, liquidation threshold and the HF\n\t **/\n\tfunction calculateUserAccountData(\n\t\taddress user,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap memory userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\n\t\tCalculateUserAccountDataVars memory vars;\n\n\t\tif (userConfig.isEmpty()) {\n\t\t\treturn (0, 0, 0, 0, type(uint256).max);\n\t\t}\n\t\tfor (vars.i = 0; vars.i < reservesCount; vars.i++) {\n\t\t\tif (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvars.currentReserveAddress = reserves[vars.i];\n\t\t\tDataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\n\n\t\t\t(vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve.configuration.getParams();\n\n\t\t\tvars.tokenUnit = 10 ** vars.decimals;\n\t\t\tvars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\n\n\t\t\tif (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\n\t\t\t\tvars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\n\n\t\t\t\tuint256 liquidityBalanceETH = vars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(\n\t\t\t\t\tvars.tokenUnit\n\t\t\t\t);\n\n\t\t\t\tvars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\n\n\t\t\t\tvars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\n\t\t\t\tvars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\n\t\t\t\t\tliquidityBalanceETH.mul(vars.liquidationThreshold)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (userConfig.isBorrowing(vars.i)) {\n\t\t\t\tvars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(user);\n\t\t\t\tvars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\n\t\t\t\t\tIERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\n\t\t\t\t);\n\n\t\t\t\tvars.totalDebtInETH = vars.totalDebtInETH.add(\n\t\t\t\t\tvars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tvars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\n\t\tvars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\n\t\t\t? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\n\t\t\t: 0;\n\n\t\tvars.healthFactor = calculateHealthFactorFromBalances(\n\t\t\tvars.totalCollateralInETH,\n\t\t\tvars.totalDebtInETH,\n\t\t\tvars.avgLiquidationThreshold\n\t\t);\n\t\treturn (\n\t\t\tvars.totalCollateralInETH,\n\t\t\tvars.totalDebtInETH,\n\t\t\tvars.avgLtv,\n\t\t\tvars.avgLiquidationThreshold,\n\t\t\tvars.healthFactor\n\t\t);\n\t}\n\n\t/**\n\t * @dev Calculates the health factor from the corresponding balances\n\t * @param totalCollateralInETH The total collateral in ETH\n\t * @param totalDebtInETH The total debt in ETH\n\t * @param liquidationThreshold The avg liquidation threshold\n\t * @return The health factor calculated from the balances provided\n\t **/\n\tfunction calculateHealthFactorFromBalances(\n\t\tuint256 totalCollateralInETH,\n\t\tuint256 totalDebtInETH,\n\t\tuint256 liquidationThreshold\n\t) internal pure returns (uint256) {\n\t\tif (totalDebtInETH == 0) return type(uint256).max;\n\n\t\treturn (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\n\t}\n\n\t/**\n\t * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\n\t * average Loan To Value\n\t * @param totalCollateralInETH The total collateral in ETH\n\t * @param totalDebtInETH The total borrow balance\n\t * @param ltv The average loan to value\n\t * @return the amount available to borrow in ETH for the user\n\t **/\n\n\tfunction calculateAvailableBorrowsETH(\n\t\tuint256 totalCollateralInETH,\n\t\tuint256 totalDebtInETH,\n\t\tuint256 ltv\n\t) internal pure returns (uint256) {\n\t\tuint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\n\n\t\tif (availableBorrowsETH < totalDebtInETH) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tavailableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\n\t\treturn availableBorrowsETH;\n\t}\n}\n"
    },
    "contracts/lending/libraries/logic/ReserveLogic.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IAToken} from \"../../../interfaces/IAToken.sol\";\nimport {IStableDebtToken} from \"../../../interfaces/IStableDebtToken.sol\";\nimport {IVariableDebtToken} from \"../../../interfaces/IVariableDebtToken.sol\";\nimport {IReserveInterestRateStrategy} from \"../../../interfaces/IReserveInterestRateStrategy.sol\";\nimport {ReserveConfiguration} from \"../configuration/ReserveConfiguration.sol\";\nimport {MathUtils} from \"../math/MathUtils.sol\";\nimport {WadRayMath} from \"../math/WadRayMath.sol\";\nimport {PercentageMath} from \"../math/PercentageMath.sol\";\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title ReserveLogic library\n * @author Aave\n * @notice Implements the logic to update the reserves state\n */\nlibrary ReserveLogic {\n\tusing SafeMath for uint256;\n\tusing WadRayMath for uint256;\n\tusing PercentageMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t/**\n\t * @dev Emitted when the state of a reserve is updated\n\t * @param asset The address of the underlying asset of the reserve\n\t * @param liquidityRate The new liquidity rate\n\t * @param stableBorrowRate The new stable borrow rate\n\t * @param variableBorrowRate The new variable borrow rate\n\t * @param liquidityIndex The new liquidity index\n\t * @param variableBorrowIndex The new variable borrow index\n\t **/\n\tevent ReserveDataUpdated(\n\t\taddress indexed asset,\n\t\tuint256 liquidityRate,\n\t\tuint256 stableBorrowRate,\n\t\tuint256 variableBorrowRate,\n\t\tuint256 liquidityIndex,\n\t\tuint256 variableBorrowIndex\n\t);\n\n\tusing ReserveLogic for DataTypes.ReserveData;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n\t/**\n\t * @dev Returns the ongoing normalized income for the reserve\n\t * A value of 1e27 means there is no income. As time passes, the income is accrued\n\t * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\n\t * @param reserve The reserve object\n\t * @return the normalized income. expressed in ray\n\t **/\n\tfunction getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\n\t\tuint40 timestamp = reserve.lastUpdateTimestamp;\n\n\t\t//solium-disable-next-line\n\t\tif (timestamp == uint40(block.timestamp)) {\n\t\t\t//if the index was updated in the same block, no need to perform any calculation\n\t\t\treturn reserve.liquidityIndex;\n\t\t}\n\n\t\tuint256 cumulated = MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\n\t\t\treserve.liquidityIndex\n\t\t);\n\n\t\treturn cumulated;\n\t}\n\n\t/**\n\t * @dev Returns the ongoing normalized variable debt for the reserve\n\t * A value of 1e27 means there is no debt. As time passes, the income is accrued\n\t * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\n\t * @param reserve The reserve object\n\t * @return The normalized variable debt. expressed in ray\n\t **/\n\tfunction getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\n\t\tuint40 timestamp = reserve.lastUpdateTimestamp;\n\n\t\t//solium-disable-next-line\n\t\tif (timestamp == uint40(block.timestamp)) {\n\t\t\t//if the index was updated in the same block, no need to perform any calculation\n\t\t\treturn reserve.variableBorrowIndex;\n\t\t}\n\n\t\tuint256 cumulated = MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\n\t\t\treserve.variableBorrowIndex\n\t\t);\n\n\t\treturn cumulated;\n\t}\n\n\t/**\n\t * @dev Updates the liquidity cumulative index and the variable borrow index.\n\t * @param reserve the reserve object\n\t **/\n\tfunction updateState(DataTypes.ReserveData storage reserve) internal {\n\t\tuint256 scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\n\t\tuint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\n\t\tuint256 previousLiquidityIndex = reserve.liquidityIndex;\n\t\tuint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\n\n\t\t(uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) = _updateIndexes(\n\t\t\treserve,\n\t\t\tscaledVariableDebt,\n\t\t\tpreviousLiquidityIndex,\n\t\t\tpreviousVariableBorrowIndex,\n\t\t\tlastUpdatedTimestamp\n\t\t);\n\n\t\t_mintToTreasury(\n\t\t\treserve,\n\t\t\tscaledVariableDebt,\n\t\t\tpreviousVariableBorrowIndex,\n\t\t\tnewLiquidityIndex,\n\t\t\tnewVariableBorrowIndex,\n\t\t\tlastUpdatedTimestamp\n\t\t);\n\t}\n\n\t/**\n\t * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example to accumulate\n\t * the flashloan fee to the reserve, and spread it between all the depositors\n\t * @param reserve The reserve object\n\t * @param totalLiquidity The total liquidity available in the reserve\n\t * @param amount The amount to accomulate\n\t **/\n\tfunction cumulateToLiquidityIndex(\n\t\tDataTypes.ReserveData storage reserve,\n\t\tuint256 totalLiquidity,\n\t\tuint256 amount\n\t) internal {\n\t\tuint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\n\n\t\tuint256 result = amountToLiquidityRatio.add(WadRayMath.ray());\n\n\t\tresult = result.rayMul(reserve.liquidityIndex);\n\t\trequire(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\n\n\t\treserve.liquidityIndex = uint128(result);\n\t}\n\n\t/**\n\t * @dev Initializes a reserve\n\t * @param reserve The reserve object\n\t * @param aTokenAddress The address of the overlying atoken contract\n\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\n\t **/\n\tfunction init(\n\t\tDataTypes.ReserveData storage reserve,\n\t\taddress aTokenAddress,\n\t\taddress stableDebtTokenAddress,\n\t\taddress variableDebtTokenAddress,\n\t\taddress interestRateStrategyAddress\n\t) external {\n\t\trequire(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\n\n\t\treserve.liquidityIndex = uint128(WadRayMath.ray());\n\t\treserve.variableBorrowIndex = uint128(WadRayMath.ray());\n\t\treserve.aTokenAddress = aTokenAddress;\n\t\treserve.stableDebtTokenAddress = stableDebtTokenAddress;\n\t\treserve.variableDebtTokenAddress = variableDebtTokenAddress;\n\t\treserve.interestRateStrategyAddress = interestRateStrategyAddress;\n\t}\n\n\tstruct UpdateInterestRatesLocalVars {\n\t\taddress stableDebtTokenAddress;\n\t\tuint256 availableLiquidity;\n\t\tuint256 totalStableDebt;\n\t\tuint256 newLiquidityRate;\n\t\tuint256 newStableRate;\n\t\tuint256 newVariableRate;\n\t\tuint256 avgStableRate;\n\t\tuint256 totalVariableDebt;\n\t}\n\n\t/**\n\t * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\n\t * @param reserve The address of the reserve to be updated\n\t * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\n\t * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\n\t **/\n\tfunction updateInterestRates(\n\t\tDataTypes.ReserveData storage reserve,\n\t\taddress reserveAddress,\n\t\taddress aTokenAddress,\n\t\tuint256 liquidityAdded,\n\t\tuint256 liquidityTaken\n\t) internal {\n\t\tUpdateInterestRatesLocalVars memory vars;\n\n\t\tvars.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\n\n\t\t(vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(vars.stableDebtTokenAddress)\n\t\t\t.getTotalSupplyAndAvgRate();\n\n\t\t//calculates the total variable debt locally using the scaled total supply instead\n\t\t//of totalSupply(), as it's noticeably cheaper. Also, the index has been\n\t\t//updated by the previous updateState() call\n\t\tvars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply().rayMul(\n\t\t\treserve.variableBorrowIndex\n\t\t);\n\n\t\t(vars.newLiquidityRate, vars.newStableRate, vars.newVariableRate) = IReserveInterestRateStrategy(\n\t\t\treserve.interestRateStrategyAddress\n\t\t).calculateInterestRates(\n\t\t\t\treserveAddress,\n\t\t\t\taTokenAddress,\n\t\t\t\tliquidityAdded,\n\t\t\t\tliquidityTaken,\n\t\t\t\tvars.totalStableDebt,\n\t\t\t\tvars.totalVariableDebt,\n\t\t\t\tvars.avgStableRate,\n\t\t\t\treserve.configuration.getReserveFactor()\n\t\t\t);\n\t\trequire(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\n\t\trequire(vars.newStableRate <= type(uint128).max, Errors.RL_STABLE_BORROW_RATE_OVERFLOW);\n\t\trequire(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\n\n\t\treserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\n\t\treserve.currentStableBorrowRate = uint128(vars.newStableRate);\n\t\treserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\n\n\t\temit ReserveDataUpdated(\n\t\t\treserveAddress,\n\t\t\tvars.newLiquidityRate,\n\t\t\tvars.newStableRate,\n\t\t\tvars.newVariableRate,\n\t\t\treserve.liquidityIndex,\n\t\t\treserve.variableBorrowIndex\n\t\t);\n\t}\n\n\tstruct MintToTreasuryLocalVars {\n\t\tuint256 currentStableDebt;\n\t\tuint256 principalStableDebt;\n\t\tuint256 previousStableDebt;\n\t\tuint256 currentVariableDebt;\n\t\tuint256 previousVariableDebt;\n\t\tuint256 avgStableRate;\n\t\tuint256 cumulatedStableInterest;\n\t\tuint256 totalDebtAccrued;\n\t\tuint256 amountToMint;\n\t\tuint256 reserveFactor;\n\t\tuint40 stableSupplyUpdatedTimestamp;\n\t}\n\n\t/**\n\t * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\n\t * specific asset.\n\t * @param reserve The reserve reserve to be updated\n\t * @param scaledVariableDebt The current scaled total variable debt\n\t * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\n\t * @param newLiquidityIndex The new liquidity index\n\t * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\n\t **/\n\tfunction _mintToTreasury(\n\t\tDataTypes.ReserveData storage reserve,\n\t\tuint256 scaledVariableDebt,\n\t\tuint256 previousVariableBorrowIndex,\n\t\tuint256 newLiquidityIndex,\n\t\tuint256 newVariableBorrowIndex,\n\t\tuint40 timestamp\n\t) internal {\n\t\tMintToTreasuryLocalVars memory vars;\n\n\t\tvars.reserveFactor = reserve.configuration.getReserveFactor();\n\n\t\tif (vars.reserveFactor == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//fetching the principal, total stable debt and the avg stable rate\n\t\t(\n\t\t\tvars.principalStableDebt,\n\t\t\tvars.currentStableDebt,\n\t\t\tvars.avgStableRate,\n\t\t\tvars.stableSupplyUpdatedTimestamp\n\t\t) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\n\n\t\t//calculate the last principal variable debt\n\t\tvars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\n\n\t\t//calculate the new total supply after accumulation of the index\n\t\tvars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\n\n\t\t//calculate the stable debt until the last timestamp update\n\t\tvars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\n\t\t\tvars.avgStableRate,\n\t\t\tvars.stableSupplyUpdatedTimestamp,\n\t\t\ttimestamp\n\t\t);\n\n\t\tvars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\n\n\t\t//debt accrued is the sum of the current debt minus the sum of the debt at the last update\n\t\tvars.totalDebtAccrued = vars.currentVariableDebt.add(vars.currentStableDebt).sub(vars.previousVariableDebt).sub(\n\t\t\tvars.previousStableDebt\n\t\t);\n\n\t\tvars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\n\n\t\tif (vars.amountToMint != 0) {\n\t\t\tIAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Updates the reserve indexes and the timestamp of the update\n\t * @param reserve The reserve reserve to be updated\n\t * @param scaledVariableDebt The scaled variable debt\n\t * @param liquidityIndex The last stored liquidity index\n\t * @param variableBorrowIndex The last stored variable borrow index\n\t **/\n\tfunction _updateIndexes(\n\t\tDataTypes.ReserveData storage reserve,\n\t\tuint256 scaledVariableDebt,\n\t\tuint256 liquidityIndex,\n\t\tuint256 variableBorrowIndex,\n\t\tuint40 timestamp\n\t) internal returns (uint256, uint256) {\n\t\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\n\n\t\tuint256 newLiquidityIndex = liquidityIndex;\n\t\tuint256 newVariableBorrowIndex = variableBorrowIndex;\n\n\t\t//only cumulating if there is any income being produced\n\t\tif (currentLiquidityRate > 0) {\n\t\t\tuint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\n\t\t\tnewLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\n\t\t\trequire(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\n\n\t\t\treserve.liquidityIndex = uint128(newLiquidityIndex);\n\n\t\t\t//as the liquidity rate might come only from stable rate loans, we need to ensure\n\t\t\t//that there is actual variable debt before accumulating\n\t\t\tif (scaledVariableDebt != 0) {\n\t\t\t\tuint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\n\t\t\t\t\treserve.currentVariableBorrowRate,\n\t\t\t\t\ttimestamp\n\t\t\t\t);\n\t\t\t\tnewVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\n\t\t\t\trequire(newVariableBorrowIndex <= type(uint128).max, Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW);\n\t\t\t\treserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\n\t\t\t}\n\t\t}\n\n\t\t//solium-disable-next-line\n\t\treserve.lastUpdateTimestamp = uint40(block.timestamp);\n\t\treturn (newLiquidityIndex, newVariableBorrowIndex);\n\t}\n}\n"
    },
    "contracts/lending/libraries/logic/ValidationLogic.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ReserveLogic} from \"./ReserveLogic.sol\";\nimport {GenericLogic} from \"./GenericLogic.sol\";\nimport {WadRayMath} from \"../math/WadRayMath.sol\";\nimport {PercentageMath} from \"../math/PercentageMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReserveConfiguration} from \"../configuration/ReserveConfiguration.sol\";\nimport {UserConfiguration} from \"../configuration/UserConfiguration.sol\";\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {Helpers} from \"../helpers/Helpers.sol\";\nimport {IReserveInterestRateStrategy} from \"../../../interfaces/IReserveInterestRateStrategy.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title ReserveLogic library\n * @author Aave\n * @notice Implements functions to validate the different actions of the protocol\n */\nlibrary ValidationLogic {\n\tusing ReserveLogic for DataTypes.ReserveData;\n\tusing SafeMath for uint256;\n\tusing WadRayMath for uint256;\n\tusing PercentageMath for uint256;\n\tusing SafeERC20 for IERC20;\n\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\tusing UserConfiguration for DataTypes.UserConfigurationMap;\n\n\tuint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\n\tuint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\n\n\t/**\n\t * @dev Validates a deposit action\n\t * @param reserve The reserve object on which the user is depositing\n\t * @param amount The amount to be deposited\n\t */\n\tfunction validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\n\t\t(bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\n\n\t\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\n\t\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\t\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\n\t}\n\n\t/**\n\t * @dev Validates a withdraw action\n\t * @param reserveAddress The address of the reserve\n\t * @param amount The amount to be withdrawn\n\t * @param userBalance The balance of the user\n\t * @param reservesData The reserves state\n\t * @param userConfig The user configuration\n\t * @param reserves The addresses of the reserves\n\t * @param reservesCount The number of reserves\n\t * @param oracle The price oracle\n\t */\n\tfunction validateWithdraw(\n\t\taddress reserveAddress,\n\t\tuint256 amount,\n\t\tuint256 userBalance,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) external view {\n\t\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\n\t\trequire(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\n\n\t\t(bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\n\t\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\n\t\trequire(\n\t\t\tGenericLogic.balanceDecreaseAllowed(\n\t\t\t\treserveAddress,\n\t\t\t\tmsg.sender,\n\t\t\t\tamount,\n\t\t\t\treservesData,\n\t\t\t\tuserConfig,\n\t\t\t\treserves,\n\t\t\t\treservesCount,\n\t\t\t\toracle\n\t\t\t),\n\t\t\tErrors.VL_TRANSFER_NOT_ALLOWED\n\t\t);\n\t}\n\n\tstruct ValidateBorrowLocalVars {\n\t\tuint256 currentLtv;\n\t\tuint256 currentLiquidationThreshold;\n\t\tuint256 amountOfCollateralNeededETH;\n\t\tuint256 userCollateralBalanceETH;\n\t\tuint256 userBorrowBalanceETH;\n\t\tuint256 availableLiquidity;\n\t\tuint256 healthFactor;\n\t\tbool isActive;\n\t\tbool isFrozen;\n\t\tbool borrowingEnabled;\n\t\tbool stableRateBorrowingEnabled;\n\t}\n\n\t/**\n\t * @dev Validates a borrow action\n\t * @param asset The address of the asset to borrow\n\t * @param reserve The reserve state from which the user is borrowing\n\t * @param userAddress The address of the user\n\t * @param amount The amount to be borrowed\n\t * @param amountInETH The amount to be borrowed, in ETH\n\t * @param interestRateMode The interest rate mode at which the user is borrowing\n\t * @param maxStableLoanPercent The max amount of the liquidity that can be borrowed at stable rate, in percentage\n\t * @param reservesData The state of all the reserves\n\t * @param userConfig The state of the user for the specific reserve\n\t * @param reserves The addresses of all the active reserves\n\t * @param oracle The price oracle\n\t */\n\n\tfunction validateBorrow(\n\t\taddress asset,\n\t\tDataTypes.ReserveData storage reserve,\n\t\taddress userAddress,\n\t\tuint256 amount,\n\t\tuint256 amountInETH,\n\t\tuint256 interestRateMode,\n\t\tuint256 maxStableLoanPercent,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) external view {\n\t\tValidateBorrowLocalVars memory vars;\n\n\t\t(vars.isActive, vars.isFrozen, vars.borrowingEnabled, vars.stableRateBorrowingEnabled) = reserve\n\t\t\t.configuration\n\t\t\t.getFlags();\n\n\t\trequire(vars.isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\t\trequire(!vars.isFrozen, Errors.VL_RESERVE_FROZEN);\n\t\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\n\n\t\trequire(vars.borrowingEnabled, Errors.VL_BORROWING_NOT_ENABLED);\n\n\t\t//validate interest rate mode\n\t\trequire(\n\t\t\tuint256(DataTypes.InterestRateMode.VARIABLE) == interestRateMode ||\n\t\t\t\tuint256(DataTypes.InterestRateMode.STABLE) == interestRateMode,\n\t\t\tErrors.VL_INVALID_INTEREST_RATE_MODE_SELECTED\n\t\t);\n\n\t\t(\n\t\t\tvars.userCollateralBalanceETH,\n\t\t\tvars.userBorrowBalanceETH,\n\t\t\tvars.currentLtv,\n\t\t\tvars.currentLiquidationThreshold,\n\t\t\tvars.healthFactor\n\t\t) = GenericLogic.calculateUserAccountData(\n\t\t\tuserAddress,\n\t\t\treservesData,\n\t\t\tuserConfig,\n\t\t\treserves,\n\t\t\treservesCount,\n\t\t\toracle\n\t\t);\n\n\t\trequire(vars.userCollateralBalanceETH > 0, Errors.VL_COLLATERAL_BALANCE_IS_0);\n\n\t\trequire(\n\t\t\tvars.healthFactor > GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\n\t\t\tErrors.VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\n\t\t);\n\n\t\t//add the current already borrowed amount to the amount requested to calculate the total collateral needed.\n\t\tvars.amountOfCollateralNeededETH = vars.userBorrowBalanceETH.add(amountInETH).percentDiv(vars.currentLtv); //LTV is calculated in percentage\n\n\t\trequire(\n\t\t\tvars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\n\t\t\tErrors.VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\n\t\t);\n\n\t\t/**\n\t\t * Following conditions need to be met if the user is borrowing at a stable rate:\n\t\t * 1. Reserve must be enabled for stable rate borrowing\n\t\t * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\n\t\t *    they are borrowing, to prevent abuses.\n\t\t * 3. Users will be able to borrow only a portion of the total available liquidity\n\t\t **/\n\n\t\tif (interestRateMode == uint256(DataTypes.InterestRateMode.STABLE)) {\n\t\t\t//check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\n\n\t\t\trequire(vars.stableRateBorrowingEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\n\n\t\t\trequire(\n\t\t\t\t!userConfig.isUsingAsCollateral(reserve.id) ||\n\t\t\t\t\treserve.configuration.getLtv() == 0 ||\n\t\t\t\t\tamount > IERC20(reserve.aTokenAddress).balanceOf(userAddress),\n\t\t\t\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\n\t\t\t);\n\n\t\t\tvars.availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\n\n\t\t\t//calculate the max available loan size in stable rate mode as a percentage of the\n\t\t\t//available liquidity\n\t\t\tuint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(maxStableLoanPercent);\n\n\t\t\trequire(amount <= maxLoanSizeStable, Errors.VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Validates a repay action\n\t * @param reserve The reserve state from which the user is repaying\n\t * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\n\t * @param onBehalfOf The address of the user msg.sender is repaying for\n\t * @param stableDebt The borrow balance of the user\n\t * @param variableDebt The borrow balance of the user\n\t */\n\tfunction validateRepay(\n\t\tDataTypes.ReserveData storage reserve,\n\t\tuint256 amountSent,\n\t\tDataTypes.InterestRateMode rateMode,\n\t\taddress onBehalfOf,\n\t\tuint256 stableDebt,\n\t\tuint256 variableDebt\n\t) external view {\n\t\tbool isActive = reserve.configuration.getActive();\n\n\t\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\n\t\trequire(amountSent > 0, Errors.VL_INVALID_AMOUNT);\n\n\t\trequire(\n\t\t\t(stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\n\t\t\t\t(variableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\n\t\t\tErrors.VL_NO_DEBT_OF_SELECTED_TYPE\n\t\t);\n\n\t\trequire(\n\t\t\tamountSent != type(uint256).max || msg.sender == onBehalfOf,\n\t\t\tErrors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\n\t\t);\n\t}\n\n\t/**\n\t * @dev Validates a swap of borrow rate mode.\n\t * @param reserve The reserve state on which the user is swapping the rate\n\t * @param userConfig The user reserves configuration\n\t * @param stableDebt The stable debt of the user\n\t * @param variableDebt The variable debt of the user\n\t * @param currentRateMode The rate mode of the borrow\n\t */\n\tfunction validateSwapRateMode(\n\t\tDataTypes.ReserveData storage reserve,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tuint256 stableDebt,\n\t\tuint256 variableDebt,\n\t\tDataTypes.InterestRateMode currentRateMode\n\t) external view {\n\t\t(bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\n\n\t\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\t\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\n\n\t\tif (currentRateMode == DataTypes.InterestRateMode.STABLE) {\n\t\t\trequire(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\n\t\t} else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\n\t\t\trequire(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\n\t\t\t/**\n\t\t\t * user wants to swap to stable, before swapping we need to ensure that\n\t\t\t * 1. stable borrow rate is enabled on the reserve\n\t\t\t * 2. user is not trying to abuse the reserve by depositing\n\t\t\t * more collateral than he is borrowing, artificially lowering\n\t\t\t * the interest rate, borrowing at variable, and switching to stable\n\t\t\t **/\n\t\t\trequire(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\n\n\t\t\trequire(\n\t\t\t\t!userConfig.isUsingAsCollateral(reserve.id) ||\n\t\t\t\t\treserve.configuration.getLtv() == 0 ||\n\t\t\t\t\tstableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\n\t\t\t\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\n\t\t\t);\n\t\t} else {\n\t\t\trevert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Validates a stable borrow rate rebalance action\n\t * @param reserve The reserve state on which the user is getting rebalanced\n\t * @param reserveAddress The address of the reserve\n\t * @param stableDebtToken The stable debt token instance\n\t * @param variableDebtToken The variable debt token instance\n\t * @param aTokenAddress The address of the aToken contract\n\t */\n\tfunction validateRebalanceStableBorrowRate(\n\t\tDataTypes.ReserveData storage reserve,\n\t\taddress reserveAddress,\n\t\tIERC20 stableDebtToken,\n\t\tIERC20 variableDebtToken,\n\t\taddress aTokenAddress\n\t) external view {\n\t\t(bool isActive, , , ) = reserve.configuration.getFlags();\n\n\t\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\n\n\t\t//if the usage ratio is below 95%, no rebalances are needed\n\t\tuint256 totalDebt = stableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\n\t\tuint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\n\t\tuint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\n\n\t\t//if the liquidity rate is below REBALANCE_UP_THRESHOLD of the max variable APR at 95% usage,\n\t\t//then we allow rebalancing of the stable rate positions.\n\n\t\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\n\t\tuint256 maxVariableBorrowRate = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\n\t\t\t.getMaxVariableBorrowRate();\n\n\t\trequire(\n\t\t\tusageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\n\t\t\t\tcurrentLiquidityRate <= maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\n\t\t\tErrors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\n\t\t);\n\t}\n\n\t/**\n\t * @dev Validates the action of setting an asset as collateral\n\t * @param reserve The state of the reserve that the user is enabling or disabling as collateral\n\t * @param reserveAddress The address of the reserve\n\t * @param reservesData The data of all the reserves\n\t * @param userConfig The state of the user for the specific reserve\n\t * @param reserves The addresses of all the active reserves\n\t * @param oracle The price oracle\n\t */\n\tfunction validateSetUseReserveAsCollateral(\n\t\tDataTypes.ReserveData storage reserve,\n\t\taddress reserveAddress,\n\t\tbool useAsCollateral,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) external view {\n\t\tuint256 underlyingBalance = IERC20(reserve.aTokenAddress).balanceOf(msg.sender);\n\n\t\trequire(underlyingBalance > 0, Errors.VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0);\n\n\t\trequire(\n\t\t\tuseAsCollateral ||\n\t\t\t\tGenericLogic.balanceDecreaseAllowed(\n\t\t\t\t\treserveAddress,\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\tunderlyingBalance,\n\t\t\t\t\treservesData,\n\t\t\t\t\tuserConfig,\n\t\t\t\t\treserves,\n\t\t\t\t\treservesCount,\n\t\t\t\t\toracle\n\t\t\t\t),\n\t\t\tErrors.VL_DEPOSIT_ALREADY_IN_USE\n\t\t);\n\t}\n\n\t/**\n\t * @dev Validates a flashloan action\n\t * @param assets The assets being flashborrowed\n\t * @param amounts The amounts for each asset being borrowed\n\t **/\n\tfunction validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\n\t\trequire(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\n\t}\n\n\t/**\n\t * @dev Validates the liquidation action\n\t * @param collateralReserve The reserve data of the collateral\n\t * @param principalReserve The reserve data of the principal\n\t * @param userConfig The user configuration\n\t * @param userHealthFactor The user's health factor\n\t * @param userStableDebt Total stable debt balance of the user\n\t * @param userVariableDebt Total variable debt balance of the user\n\t **/\n\tfunction validateLiquidationCall(\n\t\tDataTypes.ReserveData storage collateralReserve,\n\t\tDataTypes.ReserveData storage principalReserve,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tuint256 userHealthFactor,\n\t\tuint256 userStableDebt,\n\t\tuint256 userVariableDebt\n\t) internal view returns (uint256, string memory) {\n\t\tif (!collateralReserve.configuration.getActive() || !principalReserve.configuration.getActive()) {\n\t\t\treturn (uint256(Errors.CollateralManagerErrors.NO_ACTIVE_RESERVE), Errors.VL_NO_ACTIVE_RESERVE);\n\t\t}\n\n\t\tif (userHealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD) {\n\t\t\treturn (\n\t\t\t\tuint256(Errors.CollateralManagerErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\n\t\t\t\tErrors.LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\n\t\t\t);\n\t\t}\n\n\t\tbool isCollateralEnabled = collateralReserve.configuration.getLiquidationThreshold() > 0 &&\n\t\t\tuserConfig.isUsingAsCollateral(collateralReserve.id);\n\n\t\t//if collateral isn't enabled as collateral by user, it cannot be liquidated\n\t\tif (!isCollateralEnabled) {\n\t\t\treturn (\n\t\t\t\tuint256(Errors.CollateralManagerErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\n\t\t\t\tErrors.LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\n\t\t\t);\n\t\t}\n\n\t\tif (userStableDebt == 0 && userVariableDebt == 0) {\n\t\t\treturn (\n\t\t\t\tuint256(Errors.CollateralManagerErrors.CURRRENCY_NOT_BORROWED),\n\t\t\t\tErrors.LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\n\t\t\t);\n\t\t}\n\n\t\treturn (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\n\t}\n\n\t/**\n\t * @dev Validates an aToken transfer\n\t * @param from The user from which the aTokens are being transferred\n\t * @param reservesData The state of all the reserves\n\t * @param userConfig The state of the user for the specific reserve\n\t * @param reserves The addresses of all the active reserves\n\t * @param oracle The price oracle\n\t */\n\tfunction validateTransfer(\n\t\taddress from,\n\t\tmapping(address => DataTypes.ReserveData) storage reservesData,\n\t\tDataTypes.UserConfigurationMap storage userConfig,\n\t\tmapping(uint256 => address) storage reserves,\n\t\tuint256 reservesCount,\n\t\taddress oracle\n\t) internal view {\n\t\t(, , , , uint256 healthFactor) = GenericLogic.calculateUserAccountData(\n\t\t\tfrom,\n\t\t\treservesData,\n\t\t\tuserConfig,\n\t\t\treserves,\n\t\t\treservesCount,\n\t\t\toracle\n\t\t);\n\n\t\trequire(healthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD, Errors.VL_TRANSFER_NOT_ALLOWED);\n\t}\n}\n"
    },
    "contracts/lending/libraries/math/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {WadRayMath} from \"./WadRayMath.sol\";\n\nlibrary MathUtils {\n\tusing SafeMath for uint256;\n\tusing WadRayMath for uint256;\n\n\t/// @dev Ignoring leap years\n\tuint256 internal constant SECONDS_PER_YEAR = 365 days;\n\n\t/**\n\t * @dev Function to calculate the interest accumulated using a linear interest rate formula\n\t * @param rate The interest rate, in ray\n\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\n\t * @return The interest rate linearly accumulated during the timeDelta, in ray\n\t **/\n\n\tfunction calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\n\t\t//solium-disable-next-line\n\t\tuint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\n\n\t\treturn (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\n\t}\n\n\t/**\n\t * @dev Function to calculate the interest using a compounded interest rate formula\n\t * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\n\t *\n\t *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\n\t *\n\t * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\n\t * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\n\t *\n\t * @param rate The interest rate, in ray\n\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\n\t * @return The interest rate compounded during the timeDelta, in ray\n\t **/\n\tfunction calculateCompoundedInterest(\n\t\tuint256 rate,\n\t\tuint40 lastUpdateTimestamp,\n\t\tuint256 currentTimestamp\n\t) internal pure returns (uint256) {\n\t\t//solium-disable-next-line\n\t\tuint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\n\n\t\tif (exp == 0) {\n\t\t\treturn WadRayMath.ray();\n\t\t}\n\n\t\tuint256 expMinusOne = exp - 1;\n\n\t\tuint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\n\n\t\tuint256 ratePerSecond = rate / SECONDS_PER_YEAR;\n\n\t\tuint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\n\t\tuint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\n\n\t\tuint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\n\t\tuint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\n\n\t\treturn WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\n\t}\n\n\t/**\n\t * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\n\t * @param rate The interest rate (in ray)\n\t * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\n\t **/\n\tfunction calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\n\t\treturn calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\n\t}\n}\n"
    },
    "contracts/lending/libraries/math/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\n\n/**\n * @title PercentageMath library\n * @author Aave\n * @notice Provides functions to perform percentage calculations\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\n * @dev Operations are rounded half up\n **/\n\nlibrary PercentageMath {\n\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\n\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\n\n\t/**\n\t * @dev Executes a percentage multiplication\n\t * @param value The value of which the percentage needs to be calculated\n\t * @param percentage The percentage of the value to be calculated\n\t * @return The percentage of value\n\t **/\n\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\n\t\tif (value == 0 || percentage == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\n\t}\n\n\t/**\n\t * @dev Executes a percentage division\n\t * @param value The value of which the percentage needs to be calculated\n\t * @param percentage The percentage of the value to be calculated\n\t * @return The value divided the percentage\n\t **/\n\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\n\t\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\n\t\tuint256 halfPercentage = percentage / 2;\n\n\t\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\n\t}\n}\n"
    },
    "contracts/lending/libraries/math/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Errors} from \"../helpers/Errors.sol\";\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n **/\n\nlibrary WadRayMath {\n\tuint256 internal constant WAD = 1e18;\n\tuint256 internal constant halfWAD = WAD / 2;\n\n\tuint256 internal constant RAY = 1e27;\n\tuint256 internal constant halfRAY = RAY / 2;\n\n\tuint256 internal constant WAD_RAY_RATIO = 1e9;\n\n\t/**\n\t * @return One ray, 1e27\n\t **/\n\tfunction ray() internal pure returns (uint256) {\n\t\treturn RAY;\n\t}\n\n\t/**\n\t * @return One wad, 1e18\n\t **/\n\n\tfunction wad() internal pure returns (uint256) {\n\t\treturn WAD;\n\t}\n\n\t/**\n\t * @return Half ray, 1e27/2\n\t **/\n\tfunction halfRay() internal pure returns (uint256) {\n\t\treturn halfRAY;\n\t}\n\n\t/**\n\t * @return Half ray, 1e18/2\n\t **/\n\tfunction halfWad() internal pure returns (uint256) {\n\t\treturn halfWAD;\n\t}\n\n\t/**\n\t * @dev Multiplies two wad, rounding half up to the nearest wad\n\t * @param a Wad\n\t * @param b Wad\n\t * @return The result of a*b, in wad\n\t **/\n\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0 || b == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (a * b + halfWAD) / WAD;\n\t}\n\n\t/**\n\t * @dev Divides two wad, rounding half up to the nearest wad\n\t * @param a Wad\n\t * @param b Wad\n\t * @return The result of a/b, in wad\n\t **/\n\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\n\t\tuint256 halfB = b / 2;\n\n\t\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (a * WAD + halfB) / b;\n\t}\n\n\t/**\n\t * @dev Multiplies two ray, rounding half up to the nearest ray\n\t * @param a Ray\n\t * @param b Ray\n\t * @return The result of a*b, in ray\n\t **/\n\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0 || b == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (a * b + halfRAY) / RAY;\n\t}\n\n\t/**\n\t * @dev Divides two ray, rounding half up to the nearest ray\n\t * @param a Ray\n\t * @param b Ray\n\t * @return The result of a/b, in ray\n\t **/\n\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\n\t\tuint256 halfB = b / 2;\n\n\t\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n\t\treturn (a * RAY + halfB) / b;\n\t}\n\n\t/**\n\t * @dev Casts ray down to wad\n\t * @param a Ray\n\t * @return a casted to wad, rounded half up to the nearest wad\n\t **/\n\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\n\t\tuint256 halfRatio = WAD_RAY_RATIO / 2;\n\t\tuint256 result = halfRatio + a;\n\t\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\n\n\t\treturn result / WAD_RAY_RATIO;\n\t}\n\n\t/**\n\t * @dev Converts wad up to ray\n\t * @param a Wad\n\t * @return a converted in ray\n\t **/\n\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\n\t\tuint256 result = a * WAD_RAY_RATIO;\n\t\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\t\treturn result;\n\t}\n}\n"
    },
    "contracts/lending/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nlibrary DataTypes {\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n\tstruct ReserveData {\n\t\t//stores the reserve configuration\n\t\tReserveConfigurationMap configuration;\n\t\t//the liquidity index. Expressed in ray\n\t\tuint128 liquidityIndex;\n\t\t//variable borrow index. Expressed in ray\n\t\tuint128 variableBorrowIndex;\n\t\t//the current supply rate. Expressed in ray\n\t\tuint128 currentLiquidityRate;\n\t\t//the current variable borrow rate. Expressed in ray\n\t\tuint128 currentVariableBorrowRate;\n\t\t//the current stable borrow rate. Expressed in ray\n\t\tuint128 currentStableBorrowRate;\n\t\tuint40 lastUpdateTimestamp;\n\t\t//tokens addresses\n\t\taddress aTokenAddress;\n\t\taddress stableDebtTokenAddress;\n\t\taddress variableDebtTokenAddress;\n\t\t//address of the interest rate strategy\n\t\taddress interestRateStrategyAddress;\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\n\t\tuint8 id;\n\t}\n\n\tstruct ReserveConfigurationMap {\n\t\t//bit 0-15: LTV\n\t\t//bit 16-31: Liq. threshold\n\t\t//bit 32-47: Liq. bonus\n\t\t//bit 48-55: Decimals\n\t\t//bit 56: Reserve is active\n\t\t//bit 57: reserve is frozen\n\t\t//bit 58: borrowing is enabled\n\t\t//bit 59: stable rate borrowing enabled\n\t\t//bit 60-63: reserved\n\t\t//bit 64-79: reserve factor\n\t\tuint256 data;\n\t}\n\n\tstruct UserConfigurationMap {\n\t\tuint256 data;\n\t}\n\n\tenum InterestRateMode {\n\t\tNONE,\n\t\tSTABLE,\n\t\tVARIABLE\n\t}\n}\n"
    },
    "contracts/lending/tokenization/AToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ILendingPool} from \"../../interfaces/ILendingPool.sol\";\nimport {IAToken} from \"../../interfaces/IAToken.sol\";\nimport {WadRayMath} from \"../libraries/math/WadRayMath.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {VersionedInitializable} from \"../libraries/aave-upgradeability/VersionedInitializable.sol\";\nimport {IncentivizedERC20} from \"./IncentivizedERC20.sol\";\nimport {IAaveIncentivesController} from \"../../interfaces/IAaveIncentivesController.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IMiddleFeeDistribution} from \"../../interfaces/IMiddleFeeDistribution.sol\";\n\n/**\n * @title Aave ERC20 AToken\n * @dev Implementation of the interest bearing token for the Aave protocol\n * @author Aave\n */\ncontract AToken is VersionedInitializable, IncentivizedERC20(\"ATOKEN_IMPL\", \"ATOKEN_IMPL\", 0), IAToken {\n\tusing WadRayMath for uint256;\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\tbytes public constant EIP712_REVISION = bytes(\"1\");\n\tbytes32 internal constant EIP712_DOMAIN =\n\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\tbytes32 public constant PERMIT_TYPEHASH =\n\t\tkeccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n\tuint256 public constant ATOKEN_REVISION = 0x1;\n\n\t/// @dev owner => next valid nonce to submit with permit()\n\tmapping(address => uint256) public _nonces;\n\n\tbytes32 public DOMAIN_SEPARATOR;\n\n\taddress internal _treasury;\n\tIAaveIncentivesController internal _incentivesController;\n\n\tmodifier onlyLendingPool() {\n\t\trequire(_msgSender() == address(_pool), Errors.CT_CALLER_MUST_BE_LENDING_POOL);\n\t\t_;\n\t}\n\n\tfunction getRevision() internal pure virtual override returns (uint256) {\n\t\treturn ATOKEN_REVISION;\n\t}\n\n\t/**\n\t * @dev Initializes the aToken\n\t * @param pool The address of the lending pool where this aToken will be used\n\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t * @param incentivesController The smart contract managing potential incentives distribution\n\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n\t * @param aTokenName The name of the aToken\n\t * @param aTokenSymbol The symbol of the aToken\n\t */\n\tfunction initialize(\n\t\tILendingPool pool,\n\t\taddress treasury,\n\t\taddress underlyingAsset,\n\t\tIAaveIncentivesController incentivesController,\n\t\tuint8 aTokenDecimals,\n\t\tstring calldata aTokenName,\n\t\tstring calldata aTokenSymbol,\n\t\tbytes calldata params\n\t) external override initializer {\n\t\tuint256 chainId;\n\n\t\t//solium-disable-next-line\n\t\tassembly {\n\t\t\tchainId := chainid()\n\t\t}\n\n\t\tDOMAIN_SEPARATOR = keccak256(\n\t\t\tabi.encode(EIP712_DOMAIN, keccak256(bytes(aTokenName)), keccak256(EIP712_REVISION), chainId, address(this))\n\t\t);\n\n\t\t_setName(aTokenName);\n\t\t_setSymbol(aTokenSymbol);\n\t\t_setDecimals(aTokenDecimals);\n\n\t\t_pool = pool;\n\t\t_treasury = treasury;\n\t\t_underlyingAsset = underlyingAsset;\n\t\t_incentivesController = incentivesController;\n\n\t\temit Initialized(\n\t\t\tunderlyingAsset,\n\t\t\taddress(pool),\n\t\t\ttreasury,\n\t\t\taddress(incentivesController),\n\t\t\taTokenDecimals,\n\t\t\taTokenName,\n\t\t\taTokenSymbol,\n\t\t\tparams\n\t\t);\n\t}\n\n\t/**\n\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n\t * - Only callable by the LendingPool, as extra state updates there need to be managed\n\t * @param user The owner of the aTokens, getting them burned\n\t * @param receiverOfUnderlying The address that will receive the underlying\n\t * @param amount The amount being burned\n\t * @param index The new liquidity index of the reserve\n\t **/\n\tfunction burn(\n\t\taddress user,\n\t\taddress receiverOfUnderlying,\n\t\tuint256 amount,\n\t\tuint256 index\n\t) external override onlyLendingPool {\n\t\tuint256 amountScaled = amount.rayDiv(index);\n\t\trequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\n\t\t_burn(user, amountScaled);\n\n\t\tIERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\n\n\t\temit Transfer(user, address(0), amount);\n\t\temit Burn(user, receiverOfUnderlying, amount, index);\n\t}\n\n\t/**\n\t * @dev Mints `amount` aTokens to `user`\n\t * - Only callable by the LendingPool, as extra state updates there need to be managed\n\t * @param user The address receiving the minted tokens\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t * @return `true` if the the previous balance of the user was 0\n\t */\n\tfunction mint(address user, uint256 amount, uint256 index) external override onlyLendingPool returns (bool) {\n\t\tuint256 previousBalance = super.balanceOf(user);\n\n\t\tuint256 amountScaled = amount.rayDiv(index);\n\t\trequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\n\t\t_mint(user, amountScaled);\n\n\t\temit Transfer(address(0), user, amount);\n\t\temit Mint(user, amount, index);\n\n\t\treturn previousBalance == 0;\n\t}\n\n\t/**\n\t * @dev Mints aTokens to the reserve treasury\n\t * - Only callable by the LendingPool\n\t * @param amount The amount of tokens getting minted\n\t * @param index The new liquidity index of the reserve\n\t */\n\tfunction mintToTreasury(uint256 amount, uint256 index) external override onlyLendingPool {\n\t\tif (amount == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\taddress treasury = _treasury;\n\n\t\t// Compared to the normal mint, we don't check for rounding errors.\n\t\t// The amount to mint can easily be very small since it is a fraction of the interest ccrued.\n\t\t// In that case, the treasury will experience a (very small) loss, but it\n\t\t// wont cause potentially valid transactions to fail.\n\t\t_mint(treasury, amount.rayDiv(index));\n\n\t\temit Transfer(address(0), treasury, amount);\n\t\temit Mint(treasury, amount, index);\n\t}\n\n\t/**\n\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n\t * - Only callable by the LendingPool\n\t * @param from The address getting liquidated, current owner of the aTokens\n\t * @param to The recipient\n\t * @param value The amount of tokens getting transferred\n\t **/\n\tfunction transferOnLiquidation(address from, address to, uint256 value) external override onlyLendingPool {\n\t\t// Being a normal transfer, the Transfer() and BalanceTransfer() are emitted\n\t\t// so no need to emit a specific event here\n\t\t_transfer(from, to, value, false);\n\n\t\temit Transfer(from, to, value);\n\t}\n\n\t/**\n\t * @dev Calculates the balance of the user: principal balance + interest generated by the principal\n\t * @param user The user whose balance is calculated\n\t * @return The balance of the user\n\t **/\n\tfunction balanceOf(address user) public view override(IncentivizedERC20, IERC20) returns (uint256) {\n\t\treturn super.balanceOf(user).rayMul(_pool.getReserveNormalizedIncome(_underlyingAsset));\n\t}\n\n\t/**\n\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\n\t * @param user The user whose balance is calculated\n\t * @return The scaled balance of the user\n\t **/\n\tfunction scaledBalanceOf(address user) external view override returns (uint256) {\n\t\treturn super.balanceOf(user);\n\t}\n\n\t/**\n\t * @dev Returns the scaled balance of the user and the scaled total supply.\n\t * @param user The address of the user\n\t * @return The scaled balance of the user\n\t * @return The scaled balance and the scaled total supply\n\t **/\n\tfunction getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\n\t\treturn (super.balanceOf(user), super.totalSupply());\n\t}\n\n\t/**\n\t * @dev calculates the total supply of the specific aToken\n\t * since the balance of every single user increases over time, the total supply\n\t * does that too.\n\t * @return the current total supply\n\t **/\n\tfunction totalSupply() public view override(IncentivizedERC20, IERC20) returns (uint256) {\n\t\tuint256 currentSupplyScaled = super.totalSupply();\n\n\t\tif (currentSupplyScaled == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn currentSupplyScaled.rayMul(_pool.getReserveNormalizedIncome(_underlyingAsset));\n\t}\n\n\t/**\n\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n\t * @return the scaled total supply\n\t **/\n\tfunction scaledTotalSupply() public view virtual override returns (uint256) {\n\t\treturn super.totalSupply();\n\t}\n\n\t/**\n\t * @dev Returns the address of the Aave treasury, receiving the fees on this aToken\n\t **/\n\tfunction RESERVE_TREASURY_ADDRESS() public view returns (address) {\n\t\treturn _treasury;\n\t}\n\n\t/**\n\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n\t **/\n\tfunction UNDERLYING_ASSET_ADDRESS() public view override returns (address) {\n\t\treturn _underlyingAsset;\n\t}\n\n\t/**\n\t * @dev Returns the address of the lending pool where this aToken is used\n\t **/\n\tfunction POOL() public view returns (ILendingPool) {\n\t\treturn _pool;\n\t}\n\n\t/**\n\t * @dev For internal usage in the logic of the parent contract IncentivizedERC20\n\t **/\n\tfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) {\n\t\treturn _incentivesController;\n\t}\n\n\t/**\n\t * @dev Returns the address of the incentives controller contract\n\t **/\n\tfunction getIncentivesController() external view override returns (IAaveIncentivesController) {\n\t\treturn _getIncentivesController();\n\t}\n\n\t/**\n\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n\t * assets in borrow(), withdraw() and flashLoan()\n\t * @param target The recipient of the aTokens\n\t * @param amount The amount getting transferred\n\t * @return The amount transferred\n\t **/\n\tfunction transferUnderlyingTo(address target, uint256 amount) external override onlyLendingPool returns (uint256) {\n\t\tIERC20(_underlyingAsset).safeTransfer(target, amount);\n\t\treturn amount;\n\t}\n\n\t/**\n\t * @dev Invoked to execute actions on the aToken side after a repayment.\n\t * @param user The user executing the repayment\n\t * @param amount The amount getting repaid\n\t **/\n\tfunction handleRepayment(address user, uint256 amount) external override onlyLendingPool {}\n\n\t/**\n\t * @dev implements the permit function as for\n\t * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n\t * @param owner The owner of the funds\n\t * @param spender The spender\n\t * @param value The amount\n\t * @param deadline The deadline timestamp, type(uint256).max for max deadline\n\t * @param v Signature param\n\t * @param s Signature param\n\t * @param r Signature param\n\t */\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\trequire(owner != address(0), \"INVALID_OWNER\");\n\t\t//solium-disable-next-line\n\t\trequire(block.timestamp <= deadline, \"INVALID_EXPIRATION\");\n\t\tuint256 currentValidNonce = _nonces[owner];\n\t\tbytes32 digest = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19\\x01\",\n\t\t\t\tDOMAIN_SEPARATOR,\n\t\t\t\tkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n\t\t\t)\n\t\t);\n\t\trequire(owner == ecrecover(digest, v, r, s), \"INVALID_SIGNATURE\");\n\t\t_nonces[owner] = currentValidNonce.add(1);\n\t\t_approve(owner, spender, value);\n\t}\n\n\t/**\n\t * @dev Transfers the aTokens between two users. Validates the transfer\n\t * (ie checks for valid HF after the transfer) if required\n\t * @param from The source address\n\t * @param to The destination address\n\t * @param amount The amount getting transferred\n\t * @param validate `true` if the transfer needs to be validated\n\t **/\n\tfunction _transfer(address from, address to, uint256 amount, bool validate) internal {\n\t\taddress underlyingAsset = _underlyingAsset;\n\t\tILendingPool pool = _pool;\n\n\t\tuint256 index = pool.getReserveNormalizedIncome(underlyingAsset);\n\n\t\tuint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);\n\t\tuint256 toBalanceBefore = super.balanceOf(to).rayMul(index);\n\n\t\tsuper._transfer(from, to, amount.rayDiv(index));\n\n\t\tif (validate) {\n\t\t\tpool.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);\n\t\t}\n\n\t\temit BalanceTransfer(from, to, amount, index);\n\t}\n\n\t/**\n\t * @dev Overrides the parent _transfer to force validated transfer() and transferFrom()\n\t * @param from The source address\n\t * @param to The destination address\n\t * @param amount The amount getting transferred\n\t **/\n\tfunction _transfer(address from, address to, uint256 amount) internal override {\n\t\t_transfer(from, to, amount, true);\n\t}\n}\n"
    },
    "contracts/lending/tokenization/IncentivizedERC20.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.12;\n\nimport {Context} from \"../../dependencies/openzeppelin/contracts/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IAaveIncentivesController} from \"../../interfaces/IAaveIncentivesController.sol\";\nimport {ILendingPoolAddressesProvider} from \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport {IPriceOracle} from \"../../interfaces/IPriceOracle.sol\";\nimport {ILendingPool} from \"../../interfaces/ILendingPool.sol\";\n\n/**\n * @title ERC20\n * @notice Basic ERC20 implementation\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\n **/\nabstract contract IncentivizedERC20 is Context, IERC20, IERC20Metadata {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) internal _balances;\n\n\tmapping(address => mapping(address => uint256)) private _allowances;\n\tuint256 internal _totalSupply;\n\tstring private _name;\n\tstring private _symbol;\n\tuint8 private _decimals;\n\n\tILendingPool internal _pool;\n\taddress internal _underlyingAsset;\n\n\tconstructor(string memory name_, string memory symbol_, uint8 decimals_) {\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\t_decimals = decimals_;\n\t}\n\n\t/**\n\t * @return The name of the token\n\t **/\n\tfunction name() public view override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @return The symbol of the token\n\t **/\n\tfunction symbol() public view override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @return The decimals of the token\n\t **/\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\t/**\n\t * @return The total supply of the token\n\t **/\n\tfunction totalSupply() public view virtual override returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t * @return The balance of the token\n\t **/\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\n\t\treturn _balances[account];\n\t}\n\n\t/**\n\t * @return Abstract function implemented by the child aToken/debtToken.\n\t * Done this way in order to not break compatibility with previous versions of aTokens/debtTokens\n\t **/\n\tfunction _getIncentivesController() internal view virtual returns (IAaveIncentivesController);\n\n\t/**\n\t * @dev Executes a transfer of tokens from _msgSender() to recipient\n\t * @param recipient The recipient of the tokens\n\t * @param amount The amount of tokens being transferred\n\t * @return `true` if the transfer succeeds, `false` otherwise\n\t **/\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\temit Transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Returns the allowance of spender on the tokens owned by owner\n\t * @param owner The owner of the tokens\n\t * @param spender The user allowed to spend the owner's tokens\n\t * @return The amount of owner's tokens spender is allowed to spend\n\t **/\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/**\n\t * @dev Allows `spender` to spend the tokens owned by _msgSender()\n\t * @param spender The user allowed to spend _msgSender() tokens\n\t * @return `true`\n\t **/\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\n\t * @param sender The owner of the tokens\n\t * @param recipient The recipient of the tokens\n\t * @param amount The amount of tokens being transferred\n\t * @return `true` if the transfer succeeds, `false` otherwise\n\t **/\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(\n\t\t\tsender,\n\t\t\t_msgSender(),\n\t\t\t_allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n\t\t);\n\t\temit Transfer(sender, recipient, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Increases the allowance of spender to spend _msgSender() tokens\n\t * @param spender The user allowed to spend on behalf of _msgSender()\n\t * @param addedValue The amount being added to the allowance\n\t * @return `true`\n\t **/\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Decreases the allowance of spender to spend _msgSender() tokens\n\t * @param spender The user allowed to spend on behalf of _msgSender()\n\t * @param subtractedValue The amount being subtracted to the allowance\n\t * @return `true`\n\t **/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n\t\t_approve(\n\t\t\t_msgSender(),\n\t\t\tspender,\n\t\t\t_allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n\t\t);\n\t\treturn true;\n\t}\n\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\t\t_beforeTokenTransfer(sender, recipient, amount);\n\n\t\tuint256 senderBalance = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\t// uint256 currentTotalSupply = _totalSupply;\n\t\t\t_getIncentivesController().handleActionBefore(sender);\n\t\t\tif (sender != recipient) {\n\t\t\t\t_getIncentivesController().handleActionBefore(recipient);\n\t\t\t}\n\t\t}\n\n\t\t_balances[sender] = senderBalance;\n\t\tuint256 recipientBalance = _balances[recipient].add(amount);\n\t\t_balances[recipient] = recipientBalance;\n\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\tuint256 currentTotalSupply = _totalSupply;\n\t\t\t_getIncentivesController().handleActionAfter(sender, _balances[sender], currentTotalSupply);\n\t\t\tif (sender != recipient) {\n\t\t\t\t_getIncentivesController().handleActionAfter(recipient, _balances[recipient], currentTotalSupply);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _mint(address account, uint256 amount) internal virtual {\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\n\n\t\t_beforeTokenTransfer(address(0), account, amount);\n\n\t\tuint256 currentTotalSupply = _totalSupply.add(amount);\n\t\tuint256 accountBalance = _balances[account].add(amount);\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\t_getIncentivesController().handleActionBefore(account);\n\t\t}\n\t\t_totalSupply = currentTotalSupply;\n\t\t_balances[account] = accountBalance;\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\n\t\t}\n\t}\n\n\tfunction _burn(address account, uint256 amount) internal virtual {\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\n\n\t\t_beforeTokenTransfer(account, address(0), amount);\n\n\t\tuint256 currentTotalSupply = _totalSupply.sub(amount);\n\t\tuint256 accountBalance = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\t_getIncentivesController().handleActionBefore(account);\n\t\t}\n\n\t\t_totalSupply = currentTotalSupply;\n\t\t_balances[account] = accountBalance;\n\n\t\tif (address(_getIncentivesController()) != address(0)) {\n\t\t\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\n\t\t}\n\t}\n\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\tfunction _setName(string memory newName) internal {\n\t\t_name = newName;\n\t}\n\n\tfunction _setSymbol(string memory newSymbol) internal {\n\t\t_symbol = newSymbol;\n\t}\n\n\tfunction _setDecimals(uint8 newDecimals) internal {\n\t\t_decimals = newDecimals;\n\t}\n\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n\tfunction getAssetPrice() external view returns (uint256) {\n\t\tILendingPoolAddressesProvider provider = _pool.getAddressesProvider();\n\t\taddress oracle = provider.getPriceOracle();\n\t\treturn IPriceOracle(oracle).getAssetPrice(_underlyingAsset);\n\t}\n}\n"
    },
    "contracts/radiant/accessories/Compounder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@uniswap/lib/contracts/interfaces/IUniswapV2Router.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"../../interfaces/IAToken.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"../../interfaces/IAaveOracle.sol\";\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/ILockZap.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\nimport \"../../interfaces/IFeeDistribution.sol\";\nimport \"../../interfaces/IERC20DetailedBytes.sol\";\nimport \"../../interfaces/IMintableToken.sol\";\nimport \"../../interfaces/IBountyManager.sol\";\n\ncontract Compounder is OwnableUpgradeable, PausableUpgradeable {\n\tusing SafeERC20 for IERC20;\n\n\tstruct RewardData {\n\t\taddress token;\n\t\tuint256 amount;\n\t}\n\n\tevent RewardBaseTokensUpdated(address[] _tokens);\n\n\tevent RoutesUpdated(address _token, address[] _routes);\n\n\tuint256 public constant PERCENT_DIVISOR = 10000;\n\tuint256 public compoundFee;\n\tuint256 public slippageLimit;\n\n\tIMintableToken public rdntToken;\n\taddress public baseToken; //token that rdnt is paired with in LP\n\taddress public addressProvider;\n\taddress public priceProvider;\n\taddress[] public rewardBaseTokens;\n\taddress[] public wethToRadiant;\n\taddress public uniRouter;\n\taddress public multiFeeDistribution;\n\taddress public lockZap;\n\taddress public bountyManager;\n\tmapping(address => uint256) public lastAutocompound;\n\tmapping(address => address[]) public rewardToBaseRoute;\n\n\tfunction initialize(\n\t\taddress _uniRouter,\n\t\taddress _mfd,\n\t\taddress _baseToken,\n\t\taddress _addressProvider,\n\t\taddress _lockZap,\n\t\tuint256 _compoundFee,\n\t\tuint256 _slippageLimit\n\t) public initializer {\n\t\trequire(_uniRouter != address(0), \"0x0 address\");\n\t\trequire(_mfd != address(0), \"0x0 address\");\n\t\trequire(_baseToken != address(0), \"0x0 address\");\n\t\trequire(_addressProvider != address(0), \"0x0 address\");\n\t\trequire(_lockZap != address(0), \"0x0 address\");\n\t\trequire(_compoundFee > 0 && _compoundFee <= 2000, \"Invalid compound fee\");\n\t\trequire(_slippageLimit >= 8000 && _slippageLimit < PERCENT_DIVISOR, \"Invalid slippage limit\");\n\n\t\tuniRouter = _uniRouter;\n\t\tmultiFeeDistribution = _mfd;\n\t\tbaseToken = _baseToken;\n\t\taddressProvider = _addressProvider;\n\t\tlockZap = _lockZap;\n\t\trdntToken = IMultiFeeDistribution(multiFeeDistribution).rdntToken();\n\t\tpriceProvider = IMultiFeeDistribution(multiFeeDistribution).getPriceProvider();\n\t\twethToRadiant = [baseToken, address(rdntToken)];\n\t\tcompoundFee = _compoundFee;\n\t\tslippageLimit = _slippageLimit;\n\t\t__Ownable_init();\n\t\t__Pausable_init();\n\t}\n\n\tfunction pause() public onlyOwner {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyOwner {\n\t\t_unpause();\n\t}\n\n\tfunction addRewardBaseTokens(address[] memory _tokens) external onlyOwner {\n\t\trewardBaseTokens = _tokens;\n\t\temit RewardBaseTokensUpdated(_tokens);\n\t}\n\n\tfunction setRoutes(address _token, address[] memory _routes) external onlyOwner {\n\t\trewardToBaseRoute[_token] = _routes;\n\t\temit RoutesUpdated(_token, _routes);\n\t}\n\n\tfunction setBountyManager(address _manager) external onlyOwner {\n\t\tbountyManager = _manager;\n\t}\n\n\tfunction setCompoundFee(uint256 _compoundFee) external onlyOwner {\n\t\trequire(_compoundFee > 0 && _compoundFee <= 2000, \"Invalid compound fee\");\n\t\tcompoundFee = _compoundFee;\n\t}\n\n\tfunction setSlippageLimit(uint256 _slippageLimit) external onlyOwner {\n\t\trequire(_slippageLimit >= 8000 && _slippageLimit < PERCENT_DIVISOR, \"Invalid slippage limit\");\n\t\tslippageLimit = _slippageLimit;\n\t}\n\n\tfunction _claimAndSwapToBase(address _user) internal returns (uint256) {\n\t\tIMultiFeeDistribution mfd = IMultiFeeDistribution(multiFeeDistribution);\n\t\tmfd.claimFromConverter(_user);\n\t\tILendingPool lendingPool = ILendingPool(ILendingPoolAddressesProvider(addressProvider).getLendingPool());\n\n\t\tfor (uint256 i = 0; i < rewardBaseTokens.length; i++) {\n\t\t\tuint256 balance = IERC20(rewardBaseTokens[i]).balanceOf(address(this));\n\t\t\tif (balance == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taddress underlying = IAToken(rewardBaseTokens[i]).UNDERLYING_ASSET_ADDRESS();\n\t\t\tuint256 amount = lendingPool.withdraw(underlying, type(uint256).max, address(this));\n\n\t\t\tif (underlying != baseToken) {\n\t\t\t\tIERC20(underlying).safeApprove(uniRouter, amount);\n\t\t\t\ttry\n\t\t\t\t\tIUniswapV2Router(uniRouter).swapExactTokensForTokens(\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\trewardToBaseRoute[underlying],\n\t\t\t\t\t\taddress(this),\n\t\t\t\t\t\tblock.timestamp + 600\n\t\t\t\t\t)\n\t\t\t\t{} catch {}\n\t\t\t}\n\t\t}\n\t\treturn IERC20(baseToken).balanceOf(address(this));\n\t}\n\n\tfunction _convertBaseToLPandStake(address _user) internal returns (uint256 liquidity) {\n\t\tuint256 baseBal = IERC20(baseToken).balanceOf(address(this));\n\t\tif (baseBal != 0) {\n\t\t\tIERC20(baseToken).safeApprove(lockZap, baseBal);\n\t\t\tliquidity = ILockZap(lockZap).zapOnBehalf(false, baseBal, 0, _user);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Compound user's rewards\n\t * @dev Can be auto compound or manual compound\n\t * @param _user user address\n\t * @param _execute whether to execute txn, or just quote (expected amount out for bounty executor)\n\t */\n\tfunction claimCompound(address _user, bool _execute) public returns (uint256 fee) {\n\t\tif (paused()) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tbool isAutoCompound = _user != msg.sender;\n\n\t\t(address[] memory tokens, uint256[] memory amts) = viewPendingRewards(_user);\n\t\tuint256 noSlippagePendingEth = _quoteSwapWithOracles(tokens, amts, baseToken);\n\n\t\tif (isAutoCompound) {\n\t\t\trequire(msg.sender == bountyManager, \"!bountymanager\");\n\t\t\tbool eligible = isEligibleForAutoCompound(_user, noSlippagePendingEth);\n\t\t\tif (!eligible) {\n\t\t\t\tif (_execute) {\n\t\t\t\t\trevert(\"not eligible for autocompound\");\n\t\t\t\t} else {\n\t\t\t\t\treturn (0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\trequire(isEligibleForCompound(noSlippagePendingEth), \"min stake amt not met\");\n\t\t}\n\n\t\tif (!_execute) {\n\t\t\tuint256 pendingInRdnt = _wethToRdnt(noSlippagePendingEth, _execute);\n\t\t\tfee = (pendingInRdnt * compoundFee) / PERCENT_DIVISOR;\n\t\t\treturn fee;\n\t\t}\n\n\t\tuint256 actualWethAfterSwap = _claimAndSwapToBase(_user);\n\t\trequire((PERCENT_DIVISOR * actualWethAfterSwap) / noSlippagePendingEth >= slippageLimit, \"too much slippage\");\n\n\t\tif (isAutoCompound) {\n\t\t\tfee = _wethToRdnt(((actualWethAfterSwap * compoundFee) / PERCENT_DIVISOR), _execute);\n\t\t}\n\n\t\t_convertBaseToLPandStake(_user);\n\n\t\tif (isAutoCompound) {\n\t\t\trdntToken.approve(bountyManager, fee);\n\t\t\tlastAutocompound[_user] = block.timestamp;\n\t\t}\n\t}\n\n\tfunction selfCompound() external returns (uint256 fee) {\n\t\tfee = claimCompound(msg.sender, true);\n\t}\n\n\tfunction viewPendingRewards(address _user) public view returns (address[] memory tokens, uint256[] memory amts) {\n\t\tIFeeDistribution.RewardData[] memory pending = IMultiFeeDistribution(multiFeeDistribution).claimableRewards(\n\t\t\t_user\n\t\t);\n\t\ttokens = new address[](pending.length - 1);\n\t\tamts = new uint256[](pending.length - 1);\n\t\tuint256 index;\n\t\tfor (uint256 i = 0; i < pending.length; i++) {\n\t\t\tif (pending[i].token != address(rdntToken)) {\n\t\t\t\ttokens[index] = IAToken(pending[i].token).UNDERLYING_ASSET_ADDRESS();\n\t\t\t\tamts[index] = pending[i].amount;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _estimateTokensOut(address _in, address _out, uint256 _amtIn) internal view returns (uint256 tokensOut) {\n\t\tIAaveOracle oracle = IAaveOracle(ILendingPoolAddressesProvider(addressProvider).getPriceOracle());\n\t\tuint256 priceInAsset = oracle.getAssetPrice(_in); //USDC: 100000000\n\t\tuint256 priceOutAsset = oracle.getAssetPrice(_out); //WETH: 153359950000\n\t\tuint256 decimalsIn = IERC20DetailedBytes(_in).decimals();\n\t\tuint256 decimalsOut = IERC20DetailedBytes(_out).decimals();\n\t\ttokensOut = (_amtIn * priceInAsset * (10 ** decimalsOut)) / (priceOutAsset * (10 ** decimalsIn));\n\t}\n\n\tfunction _quoteSwapWithOracles(\n\t\taddress[] memory _in,\n\t\tuint256[] memory _amtsIn,\n\t\taddress _out\n\t) internal view returns (uint256 amtOut) {\n\t\trequire(_in.length == _amtsIn.length, \"length mismatch\");\n\t\tuint256 length = _in.length;\n\t\tfor (uint i = 0; i < length; i++) {\n\t\t\tamtOut += _estimateTokensOut(_in[i], _out, _amtsIn[i]);\n\t\t}\n\t}\n\n\tfunction _wethToRdnt(uint256 _wethIn, bool _execute) internal returns (uint256 rdntOut) {\n\t\tuint256 rdntPrice = IPriceProvider(priceProvider).getTokenPrice();\n\t\tif (_wethIn != 0) {\n\t\t\tif (_execute) {\n\t\t\t\tIERC20(baseToken).safeApprove(uniRouter, _wethIn);\n\t\t\t\tuint256[] memory amounts = IUniswapV2Router01(uniRouter).swapExactTokensForTokens(\n\t\t\t\t\t_wethIn,\n\t\t\t\t\t0,\n\t\t\t\t\twethToRadiant,\n\t\t\t\t\taddress(this),\n\t\t\t\t\tblock.timestamp + 600\n\t\t\t\t);\n\t\t\t\trdntOut = amounts[amounts.length - 1];\n\t\t\t} else {\n\t\t\t\tuint256[] memory amounts = IUniswapV2Router01(uniRouter).getAmountsOut(\n\t\t\t\t\t_wethIn, //amt in\n\t\t\t\t\twethToRadiant\n\t\t\t\t);\n\t\t\t\trdntOut = amounts[amounts.length - 1];\n\t\t\t}\n\t\t}\n\t\tuint256 ethValueOfRDNT = rdntPrice * rdntOut;\n\t\trequire(ethValueOfRDNT / 10 ** 8 >= (_wethIn * slippageLimit) / 10000, \"too much slippage\");\n\t}\n\n\tfunction autocompoundThreshold() public view returns (uint256 minStakeAmtEth) {\n\t\tIPriceProvider priceProv = IPriceProvider(priceProvider);\n\n\t\tuint256 minStakeLpAmt = IBountyManager(bountyManager).minDLPBalance();\n\t\tuint256 lpPriceEth = priceProv.getLpTokenPrice();\n\n\t\tminStakeAmtEth = (minStakeLpAmt * lpPriceEth) / (10 ** priceProv.decimals());\n\t}\n\n\tfunction isEligibleForAutoCompound(address _user, uint256 _pending) public view returns (bool) {\n\t\tbool delayComplete = true;\n\t\tif (lastAutocompound[_user] != 0) {\n\t\t\tdelayComplete = (block.timestamp - lastAutocompound[_user]) >= 1 days;\n\t\t}\n\t\treturn\n\t\t\tIMultiFeeDistribution(multiFeeDistribution).autocompoundEnabled(_user) &&\n\t\t\tisEligibleForCompound(_pending) &&\n\t\t\tdelayComplete;\n\t}\n\n\tfunction isEligibleForCompound(uint256 _pending) public view returns (bool eligible) {\n\t\teligible = _pending >= autocompoundThreshold();\n\t}\n\n\tfunction userEligibleForCompound(address _user) public view returns (bool eligible) {\n\t\t(address[] memory tokens, uint256[] memory amts) = viewPendingRewards(_user);\n\t\tuint256 pendingEth = _quoteSwapWithOracles(tokens, amts, baseToken);\n\t\teligible = pendingEth >= autocompoundThreshold();\n\t}\n\n\tfunction selfEligibleCompound() public view returns (bool eligible) {\n\t\t(address[] memory tokens, uint256[] memory amts) = viewPendingRewards(msg.sender);\n\t\tuint256 pendingEth = _quoteSwapWithOracles(tokens, amts, baseToken);\n\t\teligible = pendingEth >= autocompoundThreshold();\n\t}\n}\n"
    },
    "contracts/radiant/eligibility/BountyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@uniswap/lib/contracts/interfaces/IUniswapV2Router.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\";\nimport \"../../interfaces/IAToken.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/ILockZap.sol\";\nimport \"../../interfaces/IChefIncentivesController.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\nimport \"../../interfaces/IEligibilityDataProvider.sol\";\nimport \"../../interfaces/ICompounder.sol\";\n\ncontract BountyManager is Initializable, OwnableUpgradeable, PausableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\taddress public rdnt;\n\taddress public weth;\n\taddress public mfd;\n\taddress public chef;\n\taddress public priceProvider;\n\taddress public eligibilityDataProvider;\n\taddress public compounder;\n\tuint256 public hunterShare;\n\tuint256 public baseBountyUsdTarget; // decimals 18\n\tuint256 public maxBaseBounty;\n\tuint256 public bountyBooster;\n\tuint256 public bountyCount;\n\tuint256 public minStakeAmount;\n\tuint256 public slippageLimit;\n\n\t// Array of available Bounty functions to run. See getMfdBounty, getChefBounty, etc.\n\tmapping(uint256 => function(address, bool) returns (address, uint256, bool)) private bounties;\n\n\tmapping(address => bool) public whitelist;\n\tbool public whitelistActive;\n\n\tmodifier isWhitelisted() {\n\t\tif (whitelistActive) {\n\t\t\trequire(whitelist[msg.sender] || msg.sender == address(this), \"!whiteliested\");\n\t\t}\n\t\t_;\n\t}\n\n\tevent Disqualified(address user);\n\tevent ChefIncentivesControllerUpdated(IChefIncentivesController _chef);\n\tevent BaseBountyUsdTargetUpdated(uint256 _newVal);\n\tevent HunterShareUpdated(uint256 _newVal);\n\tevent MaxBaseBountyUpdated(uint256 _newVal);\n\tevent BountyBoosterUpdated(uint256 _newVal);\n\tevent SlippageLimitUpdated(uint256 _newVal);\n\tevent BountyReserveEmpty(uint256 _bal);\n\n\t/**\n\t * @notice Initialize\n\t * @param _rdnt RDNT address\n\t * @param _weth WETH address\n\t * @param _mfd MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)\n\t * @param _chef CIC, to query bounties for ineligible emissions\n\t * @param _priceProvider PriceProvider service, to get RDNT price for bounty quotes\n\t * @param _hunterShare % of reclaimed rewards to send to Hunter\n\t * @param _baseBountyUsdTarget Base Bounty is paid in RDNT, will scale to match this USD target value\n\t * @param _maxBaseBounty cap the scaling above\n\t * @param _bountyBooster when bounties need boosting to clear queue, add this amount (in RDNT)\n\t */\n\tfunction initialize(\n\t\taddress _rdnt,\n\t\taddress _weth,\n\t\taddress _mfd,\n\t\taddress _chef,\n\t\taddress _priceProvider,\n\t\taddress _eligibilityDataProvider,\n\t\taddress _compounder,\n\t\tuint256 _hunterShare,\n\t\tuint256 _baseBountyUsdTarget,\n\t\tuint256 _maxBaseBounty,\n\t\tuint256 _bountyBooster\n\t) external initializer {\n\t\trequire(_rdnt != address(0), \"Not a valid address\");\n\t\trequire(_weth != address(0), \"Not a valid address\");\n\t\trequire(_mfd != address(0), \"Not a valid address\");\n\t\trequire(_chef != address(0), \"Not a valid address\");\n\t\trequire(_priceProvider != address(0), \"Not a valid address\");\n\t\trequire(_eligibilityDataProvider != address(0), \"Not a valid address\");\n\t\trequire(_compounder != address(0), \"Not a valid address\");\n\t\trequire(_hunterShare <= 10000, \"Not a valid number\");\n\t\trequire(_baseBountyUsdTarget != 0, \"Not a valid number\");\n\t\trequire(_maxBaseBounty != 0, \"Not a valid number\");\n\n\t\trdnt = _rdnt;\n\t\tweth = _weth;\n\t\tmfd = _mfd;\n\t\tchef = _chef;\n\t\tpriceProvider = _priceProvider;\n\t\teligibilityDataProvider = _eligibilityDataProvider;\n\t\tcompounder = _compounder;\n\n\t\thunterShare = _hunterShare;\n\t\tbaseBountyUsdTarget = _baseBountyUsdTarget;\n\t\tbountyBooster = _bountyBooster;\n\t\tmaxBaseBounty = _maxBaseBounty;\n\n\t\tbounties[1] = getMfdBounty;\n\t\tbounties[2] = getChefBounty;\n\t\tbounties[3] = getAutoCompoundBounty;\n\t\tbountyCount = 3;\n\n\t\t__Ownable_init();\n\t\t__Pausable_init();\n\t}\n\n\t/**\n\t * @notice Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\n\t * @param _user address\n\t * @return bounty amount of RDNT Hunter will recieve.\n\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\n\t * @return actionType which of the 3 bounty types (above) to run.\n\t * getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\n\t */\n\tfunction quote(address _user) public view whenNotPaused returns (uint256 bounty, uint256 actionType) {\n\t\t(bool success, bytes memory data) = address(this).staticcall(\n\t\t\tabi.encodeWithSignature(\"executeBounty(address,bool,uint256)\", _user, false, 0)\n\t\t);\n\t\trequire(success, \"quote fail\");\n\n\t\t(bounty, actionType) = abi.decode(data, (uint256, uint256));\n\t}\n\n\t/**\n\t * @notice Execute a bounty.\n\t * @param _user address\n\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\n\t * @param _actionType which of the 3 bounty types (above) to run.\n\t * @return bounty in RDNT to be paid to Hunter (via vesting)\n\t * @return actionType which bounty ran\n\t */\n\tfunction claim(\n\t\taddress _user,\n\t\tuint256 _actionType\n\t) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\n\t\treturn executeBounty(_user, true, _actionType);\n\t}\n\n\t/**\n\t * @notice Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\n\t * @param _user address\n\t * @param _execute whether to execute this txn, or just quote what its execution would return\n\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\n\t * @param _actionType which of the 3 bounty types (above) to run.\n\t * @return bounty in RDNT to be paid to Hunter (via vesting)\n\t * @return actionType which bounty ran\n\t */\n\tfunction executeBounty(\n\t\taddress _user,\n\t\tbool _execute,\n\t\tuint256 _actionType\n\t) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\n\t\tif (_execute && msg.sender != address(this)) {\n\t\t\trequire(_canBountyHunt(msg.sender), \"inelig for bounties\");\n\t\t}\n\n\t\tuint256 totalBounty;\n\t\tbool issueBaseBounty;\n\t\taddress incentivizer;\n\t\tuint256 bb = getBaseBounty();\n\n\t\t(incentivizer, totalBounty, issueBaseBounty, actionType) = getBestBounty(_user, _execute, _actionType);\n\n\t\tif (issueBaseBounty) {\n\t\t\tbounty = bb;\n\t\t} else {\n\t\t\tif (totalBounty != 0) {\n\t\t\t\tbounty = totalBounty.mul(hunterShare).div(10000);\n\t\t\t}\n\t\t}\n\n\t\tif (_execute && bounty != 0) {\n\t\t\tif (!issueBaseBounty) {\n\t\t\t\tIERC20(rdnt).safeTransferFrom(incentivizer, address(this), totalBounty);\n\t\t\t}\n\t\t\t_sendBounty(msg.sender, bounty);\n\t\t}\n\t}\n\n\tfunction _canBountyHunt(address _user) internal view returns (bool) {\n\t\t(, , uint256 lockedLP, , ) = IMFDPlus(mfd).lockedBalances(_user);\n\t\tbool isEmissionsEligible = IEligibilityDataProvider(eligibilityDataProvider).isEligibleForRewards(_user);\n\t\treturn lockedLP >= minDLPBalance() && isEmissionsEligible;\n\t}\n\n\t/**\n\t * @notice Given a user and actionType, execute that bounty on either CIC or MFD.\n\t * @param _user address\n\t * @param _execute whether to execute this txn, or just quote what its execution would return\n\t * @param _actionTypeIndex, which of the 3 bounty types (above) to run.\n\t * @return incentivizer the contract that had a bounty operation performed for it.\n\t * Either CIC (to remove ineligible user from emission pool, or MFD to remove expired locks)\n\t * @return totalBounty raw amount of RDNT returned from Incentivizer. Hunter % will be deducted from this.\n\t * @return issueBaseBounty whether Incentivizer will pay bounty from its own RDNT reserve, or from this contracts RDNT reserve\n\t * @return actionType the action type index executed\n\t */\n\tfunction getBestBounty(\n\t\taddress _user,\n\t\tbool _execute,\n\t\tuint256 _actionTypeIndex\n\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty, uint256 actionType) {\n\t\tif (_actionTypeIndex != 0) {\n\t\t\t// execute bounty w/ given params\n\t\t\t(incentivizer, totalBounty, issueBaseBounty) = bounties[_actionTypeIndex](_user, _execute);\n\t\t\tactionType = _actionTypeIndex;\n\t\t} else {\n\t\t\tfor (uint256 i = 1; i <= bountyCount; i++) {\n\t\t\t\t(incentivizer, totalBounty, issueBaseBounty) = bounties[i](_user, _execute);\n\t\t\t\tif (totalBounty != 0 || issueBaseBounty) {\n\t\t\t\t\tactionType = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice call MFDPlus.claimBounty()\n\t * @param _user address\n\t * @param _execute whether to execute this txn, or just quote what its execution would return\n\t * @return incentivizer in this case MFD\n\t * @return totalBounty RDNT to pay for this _user's bounty execution\n\t * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\n\t */\n\tfunction getMfdBounty(\n\t\taddress _user,\n\t\tbool _execute\n\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\n\t\tissueBaseBounty = IMFDPlus(mfd).claimBounty(_user, _execute);\n\t\tincentivizer = mfd;\n\t}\n\n\t/**\n\t * @notice call CIC.claimBounty()\n\t * @param _user address\n\t * @param _execute whether to execute this txn, or just quote what its execution would return\n\t * @return incentivizer in this case CIC\n\t * @return totalBounty RDNT to pay for this _user's bounty execution\n\t * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\n\t */\n\tfunction getChefBounty(\n\t\taddress _user,\n\t\tbool _execute\n\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\n\t\tissueBaseBounty = IChefIncentivesController(chef).claimBounty(_user, _execute);\n\t\tincentivizer = chef;\n\t}\n\n\t/**\n\t * @notice call MFDPlus.claimCompound(). compound pending rewards for _user into locked LP\n\t * @param _user address\n\t * @param _execute whether to execute this txn, or just quote what its execution would return\n\t * @return incentivizer in this case MFDPlus\n\t * @return totalBounty RDNT to pay for this _user's bounty execution. paid from Autocompound fee\n\t */\n\tfunction getAutoCompoundBounty(\n\t\taddress _user,\n\t\tbool _execute\n\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\n\t\t(totalBounty) = ICompounder(compounder).claimCompound(_user, _execute);\n\t\tissueBaseBounty = false;\n\t\tincentivizer = compounder;\n\t}\n\n\t/**\n\t * @notice Vest a bounty in MFD for successful bounty by Hunter\n\t * @param _to Hunter address\n\t * @param _amount of RDNT\n\t * @return amt added to vesting\n\t */\n\tfunction _sendBounty(address _to, uint256 _amount) internal returns (uint256) {\n\t\tif (_amount == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 bountyReserve = IERC20(rdnt).balanceOf(address(this));\n\t\tif (_amount > bountyReserve) {\n\t\t\tIERC20(rdnt).safeTransfer(address(mfd), bountyReserve);\n\t\t\tIMFDPlus(mfd).mint(_to, bountyReserve, true);\n\t\t\temit BountyReserveEmpty(bountyReserve);\n\t\t\t_pause();\n\t\t\treturn bountyReserve;\n\t\t} else {\n\t\t\tIERC20(rdnt).safeTransfer(address(mfd), _amount);\n\t\t\tIMFDPlus(mfd).mint(_to, _amount, true);\n\t\t\treturn _amount;\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return RDNT amount for Base Bounty.\n\t * Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter.\n\t * @return bounty in RDNT\n\t */\n\tfunction getBaseBounty() public view whenNotPaused returns (uint256 bounty) {\n\t\tuint256 rdntPrice = IPriceProvider(priceProvider).getTokenPriceUsd();\n\t\tbounty = baseBountyUsdTarget.mul(1e8).div(rdntPrice);\n\t\tif (bounty > maxBaseBounty) {\n\t\t\tbounty = maxBaseBounty;\n\t\t}\n\t}\n\n\tfunction minDLPBalance() public view returns (uint256 minDLPBalance) {\n\t\tuint256 lpTokenPrice = IPriceProvider(priceProvider).getLpTokenPriceUsd();\n\t\tminDLPBalance = minStakeAmount.mul(1e8).div(lpTokenPrice);\n\t}\n\n\tfunction setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\n\t\tminStakeAmount = _minStakeAmount;\n\t}\n\n\tfunction setBaseBountyUsdTarget(uint256 _newVal) external onlyOwner {\n\t\tbaseBountyUsdTarget = _newVal;\n\t\temit BaseBountyUsdTargetUpdated(_newVal);\n\t}\n\n\tfunction setHunterShare(uint256 _newVal) external onlyOwner {\n\t\trequire(_newVal <= 10000, \"override\");\n\t\thunterShare = _newVal;\n\t\temit HunterShareUpdated(_newVal);\n\t}\n\n\tfunction setMaxBaseBounty(uint256 _newVal) external onlyOwner {\n\t\tmaxBaseBounty = _newVal;\n\t\temit MaxBaseBountyUpdated(_newVal);\n\t}\n\n\tfunction setBountyBooster(uint256 _newVal) external onlyOwner {\n\t\tbountyBooster = _newVal;\n\t\temit BountyBoosterUpdated(_newVal);\n\t}\n\n\tfunction setSlippageLimit(uint256 _newVal) external onlyOwner {\n\t\tslippageLimit = _newVal;\n\t\temit SlippageLimitUpdated(_newVal);\n\t}\n\n\tfunction setBounties() external onlyOwner {\n\t\tbounties[1] = getMfdBounty;\n\t\tbounties[2] = getChefBounty;\n\t\tbounties[3] = getAutoCompoundBounty;\n\t}\n\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n\t\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n\t}\n\n\tfunction addAddressToWL(address user, bool status) external onlyOwner {\n\t\twhitelist[user] = status;\n\t}\n\n\tfunction changeWL(bool status) external onlyOwner {\n\t\twhitelistActive = status;\n\t}\n\n\tfunction pause() public onlyOwner {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyOwner {\n\t\t_unpause();\n\t}\n}\n"
    },
    "contracts/radiant/eligibility/EligibilityDataProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/IChefIncentivesController.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\nimport \"../../interfaces/IMiddleFeeDistribution.sol\";\nimport \"../../interfaces/LockedBalance.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\n\n/// @title Eligible Deposit Provider\n/// @author Radiant Labs\n/// @dev All function calls are currently implemented without side effects\ncontract EligibilityDataProvider is Ownable {\n\tusing SafeMath for uint256;\n\n\t/********************** Common Info ***********************/\n\n\t/// @notice RATIO BASE equal to 100%\n\tuint256 public constant RATIO_DIVISOR = 10000;\n\n\t/// @notice Address of Lending Pool\n\tILendingPool public lendingPool;\n\n\t/// @notice Address of CIC\n\tIChefIncentivesController public chef;\n\n\t/// @notice Address of Middle fee distribution\n\tIMiddleFeeDistribution public middleFeeDistribution;\n\n\t/// @notice RDNT + LP price provider\n\tIPriceProvider public priceProvider;\n\n\t/// @notice Required ratio of TVL to get reward; in bips\n\tuint256 public requiredDepositRatio;\n\n\t/// @notice Ratio of the required price to still allow without disqualification; in bips\n\tuint256 public priceToleranceRatio;\n\n\t/// @notice RDNT-ETH LP token\n\taddress public lpToken;\n\n\t/********************** Eligible info ***********************/\n\n\t/// @notice Last eligible status of the user\n\tmapping(address => bool) public lastEligibleStatus;\n\n\t/// @notice Disqualified time of the user\n\tmapping(address => uint256) public disqualifiedTime;\n\n\t// Elgible deposits per rToken\n\tmapping(address => uint256) private eligibleDeposits;\n\n\t/// @notice User's deposits per rToken; rToken => user => amount\n\tmapping(address => mapping(address => uint256)) public userDeposits;\n\n\t/********************** Events ***********************/\n\n\t/// @notice Emitted when CIC is set\n\tevent ChefIncentivesControllerUpdated(IChefIncentivesController _chef);\n\n\t/// @notice Emitted when LP token is set\n\tevent LPTokenUpdated(address _lpToken);\n\n\t/// @notice Emitted when required TVL ratio is updated\n\tevent RequiredDepositRatioUpdated(uint256 requiredDepositRatio);\n\n\t/// @notice Emitted when price tolerance ratio is updated\n\tevent PriceToleranceRatioUpdated(uint256 priceToleranceRatio);\n\n\t/// @notice Emitted when DQ time is set\n\tevent DqTimeUpdated(address _user, uint256 _time);\n\n\t/// @notice Emitted when a new token is added\n\tevent AddToken(address indexed token);\n\n\t/**\n\t * @notice Constructor\n\t * @param _lendingPool Address of lending pool.\n\t * @param _middleFeeDistribution MiddleFeeDistribution address.\n\t * @param _priceProvider PriceProvider address.\n\t */\n\tconstructor(\n\t\tILendingPool _lendingPool,\n\t\tIMiddleFeeDistribution _middleFeeDistribution,\n\t\tIPriceProvider _priceProvider\n\t) Ownable() {\n\t\trequire(address(_lendingPool) != address(0), \"Not a valid address\");\n\t\trequire(address(_middleFeeDistribution) != (address(0)), \"Not a valid address\");\n\t\trequire(address(_priceProvider) != (address(0)), \"Not a valid address\");\n\n\t\tlendingPool = _lendingPool;\n\t\tmiddleFeeDistribution = _middleFeeDistribution;\n\t\tpriceProvider = _priceProvider;\n\t\trequiredDepositRatio = 500;\n\t\tpriceToleranceRatio = 9000;\n\t}\n\n\t/********************** Setters ***********************/\n\n\t/**\n\t * @notice Set CIC\n\t * @param _chef address.\n\t */\n\tfunction setChefIncentivesController(IChefIncentivesController _chef) external onlyOwner {\n\t\tchef = _chef;\n\t\temit ChefIncentivesControllerUpdated(_chef);\n\t}\n\n\t/**\n\t * @notice Set LP token\n\t */\n\tfunction setLPToken(address _lpToken) external onlyOwner {\n\t\trequire(lpToken == address(0), \"LP token already set\");\n\t\tlpToken = _lpToken;\n\n\t\temit LPTokenUpdated(_lpToken);\n\t}\n\n\t/**\n\t * @notice Sets required tvl ratio. Can only be called by the owner.\n\t * @param _requiredDepositRatio Ratio in bips.\n\t */\n\tfunction setRequiredDepositRatio(uint256 _requiredDepositRatio) external onlyOwner {\n\t\trequire(_requiredDepositRatio <= RATIO_DIVISOR, \"Invalid ratio\");\n\t\trequiredDepositRatio = _requiredDepositRatio;\n\n\t\temit RequiredDepositRatioUpdated(_requiredDepositRatio);\n\t}\n\n\t/**\n\t * @notice Sets price tolerance ratio. Can only be called by the owner.\n\t * @param _priceToleranceRatio Ratio in bips.\n\t */\n\tfunction setPriceToleranceRatio(uint256 _priceToleranceRatio) external onlyOwner {\n\t\trequire(_priceToleranceRatio >= 8000 && _priceToleranceRatio <= RATIO_DIVISOR, \"Invalid ratio\");\n\t\tpriceToleranceRatio = _priceToleranceRatio;\n\n\t\temit PriceToleranceRatioUpdated(_priceToleranceRatio);\n\t}\n\n\t/**\n\t * @notice Sets DQ time of the user\n\t * @dev Only callable by CIC\n\t * @param _user's address\n\t * @param _time for DQ\n\t */\n\tfunction setDqTime(address _user, uint256 _time) external {\n\t\trequire(msg.sender == address(chef), \"Only CIC\");\n\t\tdisqualifiedTime[_user] = _time;\n\n\t\temit DqTimeUpdated(_user, _time);\n\t}\n\n\t/********************** View functions ***********************/\n\n\t/**\n\t * @notice Returns locked RDNT and LP token value in eth\n\t * @param user's address\n\t */\n\tfunction lockedUsdValue(address user) public view returns (uint256) {\n\t\tIMultiFeeDistribution multiFeeDistribution = IMultiFeeDistribution(\n\t\t\tmiddleFeeDistribution.getMultiFeeDistributionAddress()\n\t\t);\n\t\t(, , uint256 lockedLP, , ) = multiFeeDistribution.lockedBalances(user);\n\t\treturn _lockedUsdValue(lockedLP, 0);\n\t}\n\n\t/**\n\t * @notice Returns USD value required to be locked\n\t * @param user's address\n\t * @return required USD value.\n\t */\n\tfunction requiredUsdValue(address user) public view returns (uint256 required) {\n\t\t(uint256 totalCollateralUSD, , , , , ) = lendingPool.getUserAccountData(user);\n\t\trequired = totalCollateralUSD.mul(requiredDepositRatio).div(RATIO_DIVISOR);\n\t}\n\n\t/**\n\t * @notice Is user DQed due to lock expire or price update\n\t * @param _user's address\n\t */\n\tfunction isMarketDisqualified(address _user) public view returns (bool) {\n\t\treturn requiredUsdValue(_user) > 0 && !isEligibleForRewards(_user) && lastEligibleTime(_user) > block.timestamp;\n\t}\n\n\t/**\n\t * @notice Returns if the user is eligible to receive rewards\n\t * @param _user's address\n\t */\n\tfunction isEligibleForRewards(address _user) public view returns (bool isEligible) {\n\t\tuint256 lockedValue = lockedUsdValue(_user);\n\t\tuint256 requiredValue = requiredUsdValue(_user).mul(priceToleranceRatio).div(RATIO_DIVISOR);\n\t\treturn requiredValue != 0 && lockedValue >= requiredValue;\n\t}\n\n\t/**\n\t * @notice Returns DQ time of the user\n\t * @param _user's address\n\t */\n\tfunction getDqTime(address _user) public view returns (uint256) {\n\t\treturn disqualifiedTime[_user];\n\t}\n\n\t/**\n\t * @notice Returns last eligible time of the user\n\t * @dev If user is still eligible, it will return future time\n\t *  CAUTION: this function only works perfect when the array\n\t *  is ordered by lock time. This is assured when _stake happens.\n\t * @param user's address\n\t */\n\tfunction lastEligibleTime(address user) public view returns (uint256 lastEligibleTimestamp) {\n\t\tuint256 requiredValue = requiredUsdValue(user);\n\n\t\tIMultiFeeDistribution multiFeeDistribution = IMultiFeeDistribution(\n\t\t\tmiddleFeeDistribution.getMultiFeeDistributionAddress()\n\t\t);\n\t\tLockedBalance[] memory lpLockData = multiFeeDistribution.lockInfo(user);\n\n\t\tuint256 lockedLP;\n\t\tuint256 i = lpLockData.length;\n\t\twhile (i > 0) {\n\t\t\ti = i - 1;\n\t\t\tlastEligibleTimestamp = lpLockData[i].unlockTime;\n\t\t\tlockedLP = lockedLP + lpLockData[i].amount;\n\n\t\t\tif (_lockedUsdValue(lockedLP, 0) >= requiredValue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/********************** Operate functions ***********************/\n\n\t/**\n\t * @notice Update token price\n\t */\n\tfunction updatePrice() public {\n\t\tpriceProvider.update();\n\t}\n\n\t/**\n\t * @notice Refresh token amount for eligibility\n\t * @param user's address\n\t */\n\tfunction refresh(address user) external {\n\t\trequire(msg.sender == address(chef), \"Can only be called by CIC\");\n\t\tassert(user != address(0));\n\n\t\tupdatePrice();\n\n\t\tbool currentEligble = isEligibleForRewards(user);\n\t\tif (currentEligble && disqualifiedTime[user] != 0) {\n\t\t\tdisqualifiedTime[user] = 0;\n\t\t}\n\t\tlastEligibleStatus[user] = currentEligble;\n\t}\n\n\t/********************** Internal functions ***********************/\n\n\t/**\n\t * @notice Returns locked RDNT and LP token value in eth\n\t * @param lockedLP is locked lp amount\n\t * @param lockedRdnt is locked RDNT amount\n\t */\n\tfunction _lockedUsdValue(uint256 lockedLP, uint256 lockedRdnt) internal view returns (uint256) {\n\t\tuint256 rdntPrice = priceProvider.getTokenPriceUsd();\n\t\tuint256 lpPrice = priceProvider.getLpTokenPriceUsd();\n\n\t\tuint256 userRdntValueUsd = lockedRdnt.mul(rdntPrice).div(10 ** 18);\n\t\tuint256 userLpValueUsd = lockedLP.mul(lpPrice).div(10 ** 18);\n\n\t\tuint256 usdLockedVal = userRdntValueUsd.add(userLpValueUsd);\n\t\treturn usdLockedVal;\n\t}\n}\n"
    },
    "contracts/radiant/staking/ChefIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/IEligibilityDataProvider.sol\";\nimport \"../../interfaces/IOnwardIncentivesController.sol\";\nimport \"../../interfaces/IAToken.sol\";\nimport \"../../interfaces/IMiddleFeeDistribution.sol\";\n\n// based on the Sushi MasterChef\n// https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\ncontract ChefIncentivesController is Initializable, PausableUpgradeable, OwnableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t// Info of each user.\n\t// reward = user.`amount` * pool.`accRewardPerShare` - `rewardDebt`\n\tstruct UserInfo {\n\t\tuint256 amount;\n\t\tuint256 rewardDebt;\n\t\tuint256 enterTime;\n\t\tuint256 lastClaimTime;\n\t}\n\n\t// Info of each pool.\n\tstruct PoolInfo {\n\t\tuint256 totalSupply;\n\t\tuint256 allocPoint; // How many allocation points assigned to this pool.\n\t\tuint256 lastRewardTime; // Last second that reward distribution occurs.\n\t\tuint256 accRewardPerShare; // Accumulated rewards per share, times ACC_REWARD_PRECISION. See below.\n\t\tIOnwardIncentivesController onwardIncentives;\n\t}\n\n\t// Info about token emissions for a given time period.\n\tstruct EmissionPoint {\n\t\tuint128 startTimeOffset;\n\t\tuint128 rewardsPerSecond;\n\t}\n\n\t// Emitted when rewardPerSecond is updated\n\tevent RewardsPerSecondUpdated(uint256 indexed rewardsPerSecond, bool persist);\n\n\tevent BalanceUpdated(address indexed token, address indexed user, uint256 balance, uint256 totalSupply);\n\n\tevent EmissionScheduleAppended(uint256[] startTimeOffsets, uint256[] rewardsPerSeconds);\n\n\tevent ChefReserveLow(uint256 _balance);\n\n\tevent ChefReserveEmpty(uint256 _balance);\n\n\tevent Disqualified(address indexed user);\n\n\t// multiplier for reward calc\n\tuint256 private constant ACC_REWARD_PRECISION = 1e12;\n\n\t// Data about the future reward rates. emissionSchedule stored in chronological order,\n\t// whenever the number of blocks since the start block exceeds the next block offset a new\n\t// reward rate is applied.\n\tEmissionPoint[] public emissionSchedule;\n\n\t// If true, keep this new reward rate indefinitely\n\t// If false, keep this reward rate until the next scheduled block offset, then return to the schedule.\n\tbool public persistRewardsPerSecond;\n\n\t/********************** Emission Info ***********************/\n\n\t// Array of tokens for reward\n\taddress[] public registeredTokens;\n\n\t// Current reward per second\n\tuint256 public rewardsPerSecond;\n\n\t// last RPS, used during refill after reserve empty\n\tuint256 public lastRPS;\n\n\t// Index in emission schedule which the last rewardsPerSeconds was used\n\t// only used for scheduled rewards\n\tuint256 public emissionScheduleIndex;\n\n\t// Info of each pool.\n\tmapping(address => PoolInfo) public poolInfo;\n\tmapping(address => bool) private validRTokens;\n\n\t// Total allocation poitns. Must be the sum of all allocation points in all pools.\n\tuint256 public totalAllocPoint;\n\n\t// token => user => Info of each user that stakes LP tokens.\n\tmapping(address => mapping(address => UserInfo)) public userInfo;\n\n\t// user => base claimable balance\n\tmapping(address => uint256) public userBaseClaimable;\n\n\t// MFD, bounties, AC, middlefee\n\tmapping(address => bool) public eligibilityExempt;\n\n\t// The block number when reward mining starts.\n\tuint256 public startTime;\n\n\tbool public eligibilityEnabled;\n\n\taddress public poolConfigurator;\n\tuint256 public depositedRewards;\n\tuint256 public accountedRewards;\n\tuint256 public lastAllPoolUpdate;\n\n\tIMiddleFeeDistribution public rewardMinter;\n\tIEligibilityDataProvider public eligibleDataProvider;\n\taddress public bountyManager;\n\n\tfunction initialize(\n\t\taddress _poolConfigurator,\n\t\tIEligibilityDataProvider _eligibleDataProvider,\n\t\tIMiddleFeeDistribution _rewardMinter,\n\t\tuint256 _rewardsPerSecond\n\t) public initializer {\n\t\trequire(address(_poolConfigurator) != address(0), \"!invalid address\");\n\t\trequire(address(_eligibleDataProvider) != address(0), \"!invalid address\");\n\t\trequire(address(_rewardMinter) != address(0), \"!invalid address\");\n\n\t\t__Ownable_init();\n\t\t__Pausable_init();\n\n\t\tpoolConfigurator = _poolConfigurator;\n\t\teligibleDataProvider = _eligibleDataProvider;\n\t\trewardMinter = _rewardMinter;\n\t\trewardsPerSecond = _rewardsPerSecond;\n\t\tpersistRewardsPerSecond = true;\n\n\t\teligibilityEnabled = true;\n\t}\n\n\tfunction poolLength() external view returns (uint256) {\n\t\treturn registeredTokens.length;\n\t}\n\n\tfunction _getMfd() internal view returns (IMultiFeeDistribution mfd) {\n\t\taddress multiFeeDistribution = rewardMinter.getMultiFeeDistributionAddress();\n\t\tmfd = IMultiFeeDistribution(multiFeeDistribution);\n\t}\n\n\tfunction setOnwardIncentives(address _token, IOnwardIncentivesController _incentives) external onlyOwner {\n\t\trequire(poolInfo[_token].lastRewardTime != 0, \"pool doesn't exist\");\n\t\tpoolInfo[_token].onwardIncentives = _incentives;\n\t}\n\n\tfunction setBountyManager(address _bountyManager) external onlyOwner {\n\t\tbountyManager = _bountyManager;\n\t}\n\n\tfunction setEligibilityEnabled(bool _newVal) external onlyOwner {\n\t\teligibilityEnabled = _newVal;\n\t}\n\n\t/********************** Pool Setup + Admin ***********************/\n\n\tfunction start() public onlyOwner {\n\t\trequire(startTime == 0, \"already started\");\n\t\tstartTime = block.timestamp;\n\t}\n\n\t// Add a new lp to the pool. Can only be called by the poolConfigurator.\n\tfunction addPool(address _token, uint256 _allocPoint) external {\n\t\trequire(msg.sender == poolConfigurator, \"not allowed\");\n\t\trequire(poolInfo[_token].lastRewardTime == 0, \"pool already exists\");\n\t\t_updateEmissions();\n\t\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\n\t\tregisteredTokens.push(_token);\n\t\tpoolInfo[_token] = PoolInfo({\n\t\t\ttotalSupply: 0,\n\t\t\tallocPoint: _allocPoint,\n\t\t\tlastRewardTime: block.timestamp,\n\t\t\taccRewardPerShare: 0,\n\t\t\tonwardIncentives: IOnwardIncentivesController(address(0))\n\t\t});\n\t\tvalidRTokens[_token] = true;\n\t}\n\n\t// Update the given pool's allocation point. Can only be called by the owner.\n\tfunction batchUpdateAllocPoint(address[] calldata _tokens, uint256[] calldata _allocPoints) public onlyOwner {\n\t\trequire(_tokens.length == _allocPoints.length, \"params length mismatch\");\n\t\t_massUpdatePools();\n\t\tuint256 _totalAllocPoint = totalAllocPoint;\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\tPoolInfo storage pool = poolInfo[_tokens[i]];\n\t\t\trequire(pool.lastRewardTime > 0, \"pool doesn't exist\");\n\t\t\t_totalAllocPoint = _totalAllocPoint.sub(pool.allocPoint).add(_allocPoints[i]);\n\t\t\tpool.allocPoint = _allocPoints[i];\n\t\t}\n\t\ttotalAllocPoint = _totalAllocPoint;\n\t}\n\n\t/**\n\t * @notice Sets the reward per second to be distributed. Can only be called by the owner.\n\t * @dev Its decimals count is ACC_REWARD_PRECISION\n\t * @param _rewardsPerSecond The amount of reward to be distributed per second.\n\t */\n\tfunction setRewardsPerSecond(uint256 _rewardsPerSecond, bool _persist) external onlyOwner {\n\t\t_massUpdatePools();\n\t\trewardsPerSecond = _rewardsPerSecond;\n\t\tpersistRewardsPerSecond = _persist;\n\t\temit RewardsPerSecondUpdated(_rewardsPerSecond, _persist);\n\t}\n\n\tfunction setScheduledRewardsPerSecond() internal {\n\t\tif (!persistRewardsPerSecond) {\n\t\t\tuint256 length = emissionSchedule.length;\n\t\t\tuint256 i = emissionScheduleIndex;\n\t\t\tuint128 offset = uint128(block.timestamp.sub(startTime));\n\t\t\tfor (; i < length && offset >= emissionSchedule[i].startTimeOffset; i++) {}\n\t\t\tif (i > emissionScheduleIndex) {\n\t\t\t\temissionScheduleIndex = i;\n\t\t\t\t_massUpdatePools();\n\t\t\t\trewardsPerSecond = uint256(emissionSchedule[i - 1].rewardsPerSecond);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setEmissionSchedule(\n\t\tuint256[] calldata _startTimeOffsets,\n\t\tuint256[] calldata _rewardsPerSecond\n\t) external onlyOwner {\n\t\tuint256 length = _startTimeOffsets.length;\n\t\trequire(length > 0 && length == _rewardsPerSecond.length, \"empty or mismatch params\");\n\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\trequire(_startTimeOffsets[i - 1] < _startTimeOffsets[i], \"should be ascending\");\n\t\t\t}\n\t\t\trequire(_startTimeOffsets[i] <= type(uint128).max, \"startTimeOffsets > max uint128\");\n\t\t\trequire(_rewardsPerSecond[i] <= type(uint128).max, \"rewardsPerSecond > max uint128\");\n\n\t\t\tif (startTime > 0) {\n\t\t\t\trequire(_startTimeOffsets[i] > block.timestamp.sub(startTime), \"invalid start time\");\n\t\t\t}\n\t\t\temissionSchedule.push(\n\t\t\t\tEmissionPoint({\n\t\t\t\t\tstartTimeOffset: uint128(_startTimeOffsets[i]),\n\t\t\t\t\trewardsPerSecond: uint128(_rewardsPerSecond[i])\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\temit EmissionScheduleAppended(_startTimeOffsets, _rewardsPerSecond);\n\t}\n\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n\t\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n\t}\n\n\t/********************** Pool State Changers ***********************/\n\n\tfunction _updateEmissions() internal {\n\t\tif (block.timestamp > endRewardTime()) {\n\t\t\t_massUpdatePools();\n\t\t\tlastRPS = rewardsPerSecond;\n\t\t\trewardsPerSecond = 0;\n\t\t\treturn;\n\t\t}\n\t\tsetScheduledRewardsPerSecond();\n\t}\n\n\t// Update reward variables for all pools\n\tfunction _massUpdatePools() internal {\n\t\tuint256 totalAP = totalAllocPoint;\n\t\tuint256 length = registeredTokens.length;\n\t\tfor (uint256 i = 0; i < length; ++i) {\n\t\t\t_updatePool(poolInfo[registeredTokens[i]], totalAP);\n\t\t}\n\t\tlastAllPoolUpdate = block.timestamp;\n\t}\n\n\t// Update reward variables of the given pool to be up-to-date.\n\tfunction _updatePool(PoolInfo storage pool, uint256 _totalAllocPoint) internal {\n\t\tuint256 timestamp = block.timestamp;\n\t\tif (endRewardTime() <= block.timestamp) {\n\t\t\ttimestamp = endRewardTime();\n\t\t}\n\t\tif (timestamp <= pool.lastRewardTime) {\n\t\t\treturn;\n\t\t}\n\n\t\tuint256 lpSupply = pool.totalSupply;\n\t\tif (lpSupply == 0) {\n\t\t\tpool.lastRewardTime = timestamp;\n\t\t\treturn;\n\t\t}\n\n\t\tuint256 duration = timestamp.sub(pool.lastRewardTime);\n\t\tuint256 rawReward = duration.mul(rewardsPerSecond);\n\t\tif (availableRewards() < rawReward) {\n\t\t\trawReward = availableRewards();\n\t\t}\n\t\tuint256 reward = rawReward.mul(pool.allocPoint).div(_totalAllocPoint);\n\t\taccountedRewards = accountedRewards.add(reward);\n\t\tpool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(ACC_REWARD_PRECISION).div(lpSupply));\n\t\tpool.lastRewardTime = timestamp;\n\t}\n\n\t/********************** Emission Calc + Transfer ***********************/\n\n\tfunction pendingRewards(address _user, address[] memory _tokens) public view returns (uint256[] memory) {\n\t\tuint256[] memory claimable = new uint256[](_tokens.length);\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\taddress token = _tokens[i];\n\t\t\tPoolInfo storage pool = poolInfo[token];\n\t\t\tUserInfo storage user = userInfo[token][_user];\n\t\t\tuint256 accRewardPerShare = pool.accRewardPerShare;\n\t\t\tuint256 lpSupply = pool.totalSupply;\n\t\t\tif (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n\t\t\t\tuint256 duration = block.timestamp.sub(pool.lastRewardTime);\n\t\t\t\tuint256 reward = duration.mul(rewardsPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n\t\t\t\taccRewardPerShare = accRewardPerShare.add(reward.mul(ACC_REWARD_PRECISION).div(lpSupply));\n\t\t\t}\n\t\t\tclaimable[i] = user.amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION).sub(user.rewardDebt);\n\t\t}\n\t\treturn claimable;\n\t}\n\n\t// Claim pending rewards for one or more pools.\n\t// Rewards are not received directly, they are minted by the rewardMinter.\n\tfunction claim(address _user, address[] memory _tokens) public whenNotPaused {\n\t\tif (eligibilityEnabled) {\n\t\t\tcheckAndProcessEligibility(_user);\n\t\t}\n\n\t\t_updateEmissions();\n\n\t\tuint256 pending = userBaseClaimable[_user];\n\t\tuserBaseClaimable[_user] = 0;\n\t\tuint256 _totalAllocPoint = totalAllocPoint;\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\trequire(validRTokens[_tokens[i]], \"invalid rtoken\");\n\t\t\tPoolInfo storage pool = poolInfo[_tokens[i]];\n\t\t\trequire(pool.lastRewardTime > 0, \"pool doesn't exist\");\n\t\t\t_updatePool(pool, _totalAllocPoint);\n\t\t\tUserInfo storage user = userInfo[_tokens[i]][_user];\n\t\t\tuint256 rewardDebt = user.amount.mul(pool.accRewardPerShare).div(ACC_REWARD_PRECISION);\n\t\t\tpending = pending.add(rewardDebt.sub(user.rewardDebt));\n\t\t\tuser.rewardDebt = rewardDebt;\n\t\t\tuser.lastClaimTime = block.timestamp;\n\t\t}\n\n\t\t_mint(_user, pending);\n\n\t\tif (endRewardTime() < block.timestamp + 5 days) {\n\t\t\t_emitReserveLow();\n\t\t}\n\t}\n\n\tfunction _emitReserveLow() internal {\n\t\taddress rdntToken = rewardMinter.getRdntTokenAddress();\n\t\temit ChefReserveLow(IERC20(rdntToken).balanceOf(address(this)));\n\t}\n\n\tfunction _mint(address _user, uint256 _amount) internal {\n\t\t_amount = _sendRadiant(address(_getMfd()), _amount);\n\t\t_getMfd().mint(_user, _amount, true);\n\t}\n\n\tfunction setEligibilityExempt(address _contract) public onlyOwner {\n\t\teligibilityExempt[_contract] = true;\n\t}\n\n\t/********************** Eligibility + Disqualification ***********************/\n\n\t/**\n\t * @notice `after` Hook for deposit and borrow update.\n\t * @dev important! eligible status can be updated here\n\t */\n\tfunction handleActionAfter(address _user, uint256 _balance, uint256 _totalSupply) external {\n\t\trequire(validRTokens[msg.sender] || msg.sender == address(_getMfd()), \"!rToken || mfd\");\n\n\t\tif (_user == address(rewardMinter) || _user == address(_getMfd()) || eligibilityExempt[_user]) {\n\t\t\treturn;\n\t\t}\n\t\tif (eligibilityEnabled) {\n\t\t\teligibleDataProvider.refresh(_user);\n\t\t\tif (eligibleDataProvider.isEligibleForRewards(_user)) {\n\t\t\t\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\n\t\t\t} else {\n\t\t\t\tcheckAndProcessEligibility(_user);\n\t\t\t}\n\t\t} else {\n\t\t\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\n\t\t}\n\t}\n\n\tfunction _handleActionAfterForToken(\n\t\taddress _token,\n\t\taddress _user,\n\t\tuint256 _balance,\n\t\tuint256 _totalSupply\n\t) internal {\n\t\tPoolInfo storage pool = poolInfo[_token];\n\t\trequire(pool.lastRewardTime > 0, \"pool doesn't exist\");\n\t\t_updateEmissions();\n\t\t_updatePool(pool, totalAllocPoint);\n\t\tUserInfo storage user = userInfo[_token][_user];\n\t\tuint256 amount = user.amount;\n\t\tuint256 accRewardPerShare = pool.accRewardPerShare;\n\t\tif (amount != 0) {\n\t\t\tuint256 pending = amount.mul(accRewardPerShare).div(ACC_REWARD_PRECISION).sub(user.rewardDebt);\n\t\t\tif (pending != 0) {\n\t\t\t\tuserBaseClaimable[_user] = userBaseClaimable[_user].add(pending);\n\t\t\t}\n\t\t}\n\t\tpool.totalSupply = pool.totalSupply.sub(user.amount);\n\t\tuser.amount = _balance;\n\t\tuser.rewardDebt = _balance.mul(accRewardPerShare).div(ACC_REWARD_PRECISION);\n\t\tif (user.amount > 0) {\n\t\t\tuser.enterTime = block.timestamp;\n\t\t}\n\t\tpool.totalSupply = pool.totalSupply.add(_balance);\n\t\tif (pool.onwardIncentives != IOnwardIncentivesController(address(0))) {\n\t\t\tpool.onwardIncentives.handleAction(_token, _user, _balance, _totalSupply);\n\t\t}\n\n\t\temit BalanceUpdated(_token, _user, _balance, _totalSupply);\n\t}\n\n\t/**\n\t * @notice `before` Hook for deposit and borrow update.\n\t */\n\tfunction handleActionBefore(address _user) external {}\n\n\t/**\n\t * @notice Hook for lock update.\n\t * @dev Called by the locking contracts before locking or unlocking happens\n\t */\n\tfunction beforeLockUpdate(address _user) external {\n\t\trequire(msg.sender == address(_getMfd()), \"!mfd\");\n\t\tif (eligibilityEnabled) {\n\t\t\tcheckAndProcessEligibility(_user);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Hook for lock update.\n\t * @dev Called by the locking contracts after locking or unlocking happens\n\t */\n\tfunction afterLockUpdate(address _user) external {\n\t\trequire(msg.sender == address(_getMfd()), \"!MFD\");\n\t\tif (eligibilityEnabled) {\n\t\t\teligibleDataProvider.updatePrice();\n\t\t\tif (eligibleDataProvider.isEligibleForRewards(_user)) {\n\t\t\t\tfor (uint256 i = 0; i < registeredTokens.length; i++) {\n\t\t\t\t\tuint256 newBal = IERC20(registeredTokens[i]).balanceOf(_user);\n\t\t\t\t\tuint256 registeredBal = userInfo[registeredTokens[i]][_user].amount;\n\t\t\t\t\tif (newBal != 0 && newBal != registeredBal) {\n\t\t\t\t\t\t_handleActionAfterForToken(\n\t\t\t\t\t\t\tregisteredTokens[i],\n\t\t\t\t\t\t\t_user,\n\t\t\t\t\t\t\tnewBal,\n\t\t\t\t\t\t\tpoolInfo[registeredTokens[i]].totalSupply.add(newBal).sub(registeredBal)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teligibleDataProvider.refresh(_user);\n\t\t}\n\t}\n\n\t/********************** Eligibility + Disqualification ***********************/\n\n\tfunction hasEligibleDeposits(address _user) internal view returns (bool hasDeposits) {\n\t\tfor (uint256 i = 0; i < registeredTokens.length; i++) {\n\t\t\tUserInfo storage user = userInfo[registeredTokens[i]][_user];\n\t\t\tif (user.amount != 0) {\n\t\t\t\thasDeposits = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction checkAndProcessEligibility(address _user, bool _execute) internal returns (bool issueBaseBounty) {\n\t\tbool isEligible = eligibleDataProvider.isEligibleForRewards(_user);\n\t\tbool hasEligDeposits = hasEligibleDeposits(_user);\n\t\tuint256 lastDqTime = eligibleDataProvider.getDqTime(_user);\n\t\tbool alreadyDqd = lastDqTime != 0;\n\n\t\tif (!isEligible && hasEligDeposits && !alreadyDqd) {\n\t\t\tissueBaseBounty = true;\n\t\t}\n\t\tif (_execute && issueBaseBounty) {\n\t\t\tstopEmissionsFor(_user);\n\t\t\temit Disqualified(_user);\n\t\t\teligibleDataProvider.refresh(_user);\n\t\t}\n\t}\n\n\tfunction checkAndProcessEligibility(address _user) internal {\n\t\tcheckAndProcessEligibility(_user, true);\n\t}\n\n\tfunction claimBounty(address _user, bool _execute) public returns (bool issueBaseBounty) {\n\t\trequire(msg.sender == address(bountyManager), \"bounty only\");\n\t\tissueBaseBounty = checkAndProcessEligibility(_user, _execute);\n\t}\n\n\tfunction stopEmissionsFor(address _user) internal {\n\t\trequire(eligibilityEnabled, \"!EE\");\n\t\trequire(!eligibleDataProvider.isEligibleForRewards(_user), \"user is still eligible\");\n\t\tuint256 length = registeredTokens.length;\n\t\tfor (uint256 i = 0; i < length; ++i) {\n\t\t\taddress token = registeredTokens[i];\n\t\t\tPoolInfo storage pool = poolInfo[token];\n\t\t\tUserInfo storage user = userInfo[token][_user];\n\n\t\t\t_handleActionAfterForToken(token, _user, 0, pool.totalSupply.sub(user.amount));\n\t\t}\n\t\teligibleDataProvider.setDqTime(_user, block.timestamp);\n\t}\n\n\tfunction _sendRadiant(address _user, uint256 _amount) internal returns (uint256) {\n\t\tif (_amount == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\taddress rdntToken = rewardMinter.getRdntTokenAddress();\n\t\tuint256 chefReserve = IERC20(rdntToken).balanceOf(address(this));\n\t\tif (_amount > chefReserve) {\n\t\t\temit ChefReserveEmpty(chefReserve);\n\t\t\t_pause();\n\t\t} else {\n\t\t\tIERC20(rdntToken).safeTransfer(_user, _amount);\n\t\t}\n\t\treturn _amount;\n\t}\n\n\t/********************** RDNT Reserve Management ***********************/\n\n\tfunction endRewardTime() public view returns (uint256 timestamp) {\n\t\tuint256 unclaimedRewards = depositedRewards.sub(accountedRewards);\n\t\tuint256 extra = 0;\n\t\tfor (uint256 i; i < registeredTokens.length; i++) {\n\t\t\tif (poolInfo[registeredTokens[i]].lastRewardTime <= lastAllPoolUpdate) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\textra = extra.add(\n\t\t\t\t\tpoolInfo[registeredTokens[i]]\n\t\t\t\t\t\t.lastRewardTime\n\t\t\t\t\t\t.sub(lastAllPoolUpdate)\n\t\t\t\t\t\t.mul(poolInfo[registeredTokens[i]].allocPoint)\n\t\t\t\t\t\t.mul(rewardsPerSecond)\n\t\t\t\t\t\t.div(totalAllocPoint)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (rewardsPerSecond == 0) {\n\t\t\ttimestamp = type(uint256).max;\n\t\t} else {\n\t\t\ttimestamp = (unclaimedRewards + extra).div(rewardsPerSecond) + (lastAllPoolUpdate);\n\t\t}\n\t}\n\n\tfunction registerRewardDeposit(uint256 _amount) external onlyOwner {\n\t\tdepositedRewards = depositedRewards.add(_amount);\n\t\t_massUpdatePools();\n\t\tif (rewardsPerSecond == 0 && lastRPS > 0) {\n\t\t\trewardsPerSecond = lastRPS;\n\t\t}\n\t}\n\n\tfunction availableRewards() internal view returns (uint256 amount) {\n\t\treturn depositedRewards.sub(accountedRewards);\n\t}\n\n\t/********************** Helper/Convenience Methods ***********************/\n\n\t/**\n\t * @notice Claim pending rewards for one or more pools into base claimable.\n\t * @dev Rewards are not transferred, just converted into base claimable.\n\t */\n\tfunction claimToBase(address _user, address[] memory _tokens) public {\n\t\tuint256 _userBaseClaimable = userBaseClaimable[_user];\n\n\t\t// updatePool must be called after calculation of pending rewards\n\t\t// this is because of reward calculation based on eligibility\n\t\tuint256[] memory pending = pendingRewards(_user, _tokens);\n\t\t_updateEmissions();\n\t\tuint256 _totalAllocPoint = totalAllocPoint;\n\t\tfor (uint256 i = 0; i < _tokens.length; i++) {\n\t\t\trequire(validRTokens[_tokens[i]], \"invalid rtoken\");\n\t\t\tUserInfo storage user = userInfo[_tokens[i]][_user];\n\t\t\t_userBaseClaimable = _userBaseClaimable.add(pending[i]);\n\n\t\t\t// Set pending reward to zero\n\t\t\tPoolInfo storage pool = poolInfo[_tokens[i]];\n\t\t\t_updatePool(pool, _totalAllocPoint);\n\t\t\tuint256 newDebt = user.amount.mul(pool.accRewardPerShare).div(ACC_REWARD_PRECISION);\n\t\t\tuser.rewardDebt = newDebt;\n\t\t\tuser.lastClaimTime = block.timestamp;\n\t\t}\n\t\tuserBaseClaimable[_user] = _userBaseClaimable;\n\t}\n\n\tfunction saveUserRewards(address[] memory _users) public {\n\t\taddress[] memory _tokens = registeredTokens;\n\t\tfor (uint256 i = 0; i < _users.length; i++) {\n\t\t\tif (_users[i] != address(0)) {\n\t\t\t\tclaimToBase(_users[i], _tokens);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction claimAll(address _user) external {\n\t\tclaim(_user, registeredTokens);\n\t}\n\n\tfunction allPendingRewards(address _user) public view returns (uint256 pending) {\n\t\tpending = userBaseClaimable[_user];\n\t\tuint256[] memory claimable = pendingRewards(_user, registeredTokens);\n\t\tfor (uint256 i = 0; i < claimable.length; i++) {\n\t\t\tpending += claimable[i];\n\t\t}\n\t}\n\n\tfunction pause() external onlyOwner {\n\t\t_pause();\n\t}\n\n\tfunction unpause() external onlyOwner {\n\t\t_unpause();\n\t}\n}\n"
    },
    "contracts/radiant/staking/MiddleFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\n\nimport \"../../interfaces/IMiddleFeeDistribution.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/IMintableToken.sol\";\nimport \"../../interfaces/IAaveOracle.sol\";\nimport \"../../interfaces/IAToken.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\n\n/// @title Fee distributor inside\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract MiddleFeeDistribution is IMiddleFeeDistribution, Initializable, OwnableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t/// @notice RDNT token\n\tIMintableToken public rdntToken;\n\n\t/// @notice Fee distributor contract for earnings and RDNT lockings\n\tIMultiFeeDistribution public multiFeeDistribution;\n\n\t/// @notice Reward ratio for operation expenses\n\tuint256 public override operationExpenseRatio;\n\n\tuint256 public constant RATIO_DIVISOR = 10000;\n\n\tuint8 public constant DECIMALS = 18;\n\n\tmapping(address => bool) public override isRewardToken;\n\n\t/// @notice Operation Expense account\n\taddress public override operationExpenses;\n\n\t/// @notice Admin address\n\taddress public admin;\n\n\t// AAVE Oracle address\n\taddress internal _aaveOracle;\n\n\t/********************** Events ***********************/\n\n\t/// @notice Emitted when ERC20 token is recovered\n\tevent Recovered(address token, uint256 amount);\n\n\t/// @notice Emitted when reward token is forwarded\n\tevent ForwardReward(address token, uint256 amount);\n\n\t/// @notice Emitted when OpEx info is updated\n\tevent SetOperationExpenses(address opEx, uint256 ratio);\n\n\t/// @notice Emitted when operation expenses is set\n\tevent OperationExpensesUpdated(address _operationExpenses, uint256 _operationExpenseRatio);\n\n\tevent NewTransferAdded(address indexed asset, uint256 lpUsdValue);\n\n\t/**\n\t * @dev Throws if called by any account other than the admin or owner.\n\t */\n\tmodifier onlyAdminOrOwner() {\n\t\trequire(admin == _msgSender() || owner() == _msgSender(), \"caller is not the admin or owner\");\n\t\t_;\n\t}\n\n\tfunction initialize(\n\t\taddress _rdntToken,\n\t\taddress aaveOracle,\n\t\tIMultiFeeDistribution _multiFeeDistribution\n\t) public initializer {\n\t\t__Ownable_init();\n\n\t\trdntToken = IMintableToken(_rdntToken);\n\t\t_aaveOracle = aaveOracle;\n\t\tmultiFeeDistribution = _multiFeeDistribution;\n\n\t\tadmin = msg.sender;\n\t}\n\n\t/**\n\t * @notice Set operation expenses account\n\t */\n\tfunction setOperationExpenses(address _operationExpenses, uint256 _operationExpenseRatio) external onlyOwner {\n\t\trequire(_operationExpenseRatio <= RATIO_DIVISOR, \"Invalid ratio\");\n\t\toperationExpenses = _operationExpenses;\n\t\toperationExpenseRatio = _operationExpenseRatio;\n\t\temit OperationExpensesUpdated(_operationExpenses, _operationExpenseRatio);\n\t}\n\n\tfunction setAdmin(address _configurator) external onlyOwner {\n\t\tadmin = _configurator;\n\t}\n\n\t/**\n\t * @notice Add a new reward token to be distributed to stakers\n\t */\n\tfunction addReward(address _rewardsToken) external override onlyAdminOrOwner {\n\t\tmultiFeeDistribution.addReward(_rewardsToken);\n\t\tisRewardToken[_rewardsToken] = true;\n\t}\n\n\t/**\n\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n\t */\n\tfunction forwardReward(address[] memory _rewardTokens) external override {\n\t\trequire(msg.sender == address(multiFeeDistribution),\"!mfd\");\n\n\t\tfor (uint256 i = 0; i < _rewardTokens.length; i += 1) {\n\t\t\tuint256 total = IERC20(_rewardTokens[i]).balanceOf(address(this));\n\n\t\t\tif (operationExpenses != address(0) && operationExpenseRatio != 0) {\n\t\t\t\tuint256 opExAmount = total.mul(operationExpenseRatio).div(RATIO_DIVISOR);\n\t\t\t\tif (opExAmount != 0) {\n\t\t\t\t\tIERC20(_rewardTokens[i]).safeTransfer(operationExpenses, opExAmount);\n\t\t\t\t}\n\t\t\t\ttotal = total.sub(opExAmount);\n\t\t\t}\n\t\t\ttotal = IERC20(_rewardTokens[i]).balanceOf(address(this));\n\t\t\tIERC20(_rewardTokens[i]).safeTransfer(address(multiFeeDistribution), total);\n\n\t\t\temitNewTransferAdded(_rewardTokens[i], total);\n\t\t}\n\t}\n\n\tfunction getRdntTokenAddress() external view override returns (address) {\n\t\treturn address(rdntToken);\n\t}\n\n\tfunction getMultiFeeDistributionAddress() external view override returns (address) {\n\t\treturn address(multiFeeDistribution);\n\t}\n\n\t/**\n\t * @notice Returns lock information of a user.\n\t * @dev It currently returns just MFD infos.\n\t */\n\tfunction lockedBalances(\n\t\taddress user\n\t)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint256 total,\n\t\t\tuint256 unlockable,\n\t\t\tuint256 locked,\n\t\t\tuint256 lockedWithMultiplier,\n\t\t\tLockedBalance[] memory lockData\n\t\t)\n\t{\n\t\treturn multiFeeDistribution.lockedBalances(user);\n\t}\n\n\tfunction emitNewTransferAdded(address asset, uint256 lpReward) internal {\n\t\tif (asset != address(rdntToken)) {\n\t\t\taddress underlying = IAToken(asset).UNDERLYING_ASSET_ADDRESS();\n\t\t\tuint256 assetPrice = IAaveOracle(_aaveOracle).getAssetPrice(underlying);\n\t\t\taddress sourceOfAsset = IAaveOracle(_aaveOracle).getSourceOfAsset(underlying);\n\t\t\tuint8 priceDecimal = IChainlinkAggregator(sourceOfAsset).decimals();\n\t\t\tuint8 assetDecimals = IERC20Metadata(asset).decimals();\n\t\t\tuint256 lpUsdValue = assetPrice.mul(lpReward).mul(10 ** DECIMALS).div(10 ** priceDecimal).div(\n\t\t\t\t10 ** assetDecimals\n\t\t\t);\n\t\t\temit NewTransferAdded(asset, lpUsdValue);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n\t */\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n\t\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n\t\temit Recovered(tokenAddress, tokenAmount);\n\t}\n}\n"
    },
    "contracts/radiant/staking/MultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"../../interfaces/IChefIncentivesController.sol\";\nimport \"../../interfaces/IMiddleFeeDistribution.sol\";\nimport \"../../interfaces/IBountyManager.sol\";\nimport {IMultiFeeDistribution} from \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/IMintableToken.sol\";\nimport \"../../interfaces/ILockerList.sol\";\nimport \"../../interfaces/LockedBalance.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\n\n/// @title Multi Fee Distribution Contract\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract MultiFeeDistribution is IMultiFeeDistribution, Initializable, PausableUpgradeable, OwnableUpgradeable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\tusing SafeERC20 for IMintableToken;\n\n\taddress private _priceProvider;\n\n\t/********************** Constants ***********************/\n\n\tuint256 public constant QUART = 25000; //  25%\n\tuint256 public constant HALF = 65000; //  65%\n\tuint256 public constant WHOLE = 100000; // 100%\n\n\t/// @notice Proportion of burn amount\n\tuint256 public burn;\n\n\t/// @notice Duration that rewards are streamed over\n\tuint256 public rewardsDuration;\n\n\t/// @notice Duration that rewards loop back\n\tuint256 public rewardsLookback;\n\n\t/// @notice Multiplier for earnings, fixed to 1\n\t// uint256 public constant DEFAULT_MUTLIPLIER = 1;\n\n\t/// @notice Default lock index\n\tuint256 public constant DEFAULT_LOCK_INDEX = 1;\n\n\t/// @notice Duration of lock/earned penalty period, used for earnings\n\tuint256 public defaultLockDuration;\n\n\t/// @notice Duration of vesting RDNT\n\tuint256 public vestDuration;\n\n\taddress public rewardConverter;\n\n\t/********************** Contract Addresses ***********************/\n\n\t/// @notice Address of Middle Fee Distribution Contract\n\tIMiddleFeeDistribution public middleFeeDistribution;\n\n\t/// @notice Address of CIC contract\n\tIChefIncentivesController public incentivesController;\n\n\t/// @notice Address of RDNT\n\tIMintableToken public override rdntToken;\n\n\t/// @notice Address of LP token\n\taddress public override stakingToken;\n\n\t// Address of Lock Zapper\n\taddress internal lockZap;\n\n\t/********************** Lock & Earn Info ***********************/\n\n\t// Private mappings for balance data\n\tmapping(address => Balances) private balances;\n\tmapping(address => LockedBalance[]) internal userLocks;\n\tmapping(address => LockedBalance[]) private userEarnings;\n\tmapping(address => bool) public override autocompoundEnabled;\n\tmapping(address => uint256) public lastAutocompound;\n\n\t/// @notice Total locked value\n\tuint256 public lockedSupply;\n\n\t/// @notice Total locked value in multipliers\n\tuint256 public lockedSupplyWithMultiplier;\n\n\t// Time lengths\n\tuint256[] internal lockPeriod;\n\n\t// Multipliers\n\tuint256[] internal rewardMultipliers;\n\n\t/********************** Reward Info ***********************/\n\n\t/// @notice Reward tokens being distributed\n\taddress[] public rewardTokens;\n\n\t/// @notice Reward data per token\n\tmapping(address => Reward) public rewardData;\n\n\t/// @notice user -> reward token -> rpt; RPT for paid amount\n\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n\n\t/// @notice user -> reward token -> amount; used to store reward amount\n\tmapping(address => mapping(address => uint256)) public rewards;\n\n\t/********************** Other Info ***********************/\n\n\t/// @notice DAO wallet\n\taddress public override daoTreasury;\n\n\t/// @notice treasury wallet\n\taddress public startfleetTreasury;\n\n\t/// @notice Addresses approved to call mint\n\tmapping(address => bool) public minters;\n\n\t// Addresses to relock\n\tmapping(address => bool) public override autoRelockDisabled;\n\n\t// Default lock index for relock\n\tmapping(address => uint256) public override defaultLockIndex;\n\n\t/// @notice Flag to prevent more minter addings\n\tbool public mintersAreSet;\n\n\t// Users list\n\tILockerList public userlist;\n\n\tmapping(address => uint256) public lastClaimTime;\n\n\taddress public bountyManager;\n\n\t// to prevent unbounded lock length iteration during withdraw/clean\n\n\t/********************** Events ***********************/\n\n\t//event RewardAdded(uint256 reward);\n\t// event Staked(address indexed user, uint256 amount, bool locked);\n\tevent Locked(address indexed user, uint256 amount, uint256 lockedBalance, bool isLP);\n\tevent Withdrawn(\n\t\taddress indexed user,\n\t\tuint256 receivedAmount,\n\t\tuint256 lockedBalance,\n\t\tuint256 penalty,\n\t\tuint256 burn,\n\t\tbool isLP\n\t);\n\tevent RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n\tevent IneligibleRewardRemoved(address indexed user, address indexed rewardToken, uint256 reward);\n\tevent RewardsDurationUpdated(address token, uint256 newDuration);\n\tevent Recovered(address token, uint256 amount);\n\tevent Relocked(address indexed user, uint256 amount, uint256 lockIndex);\n\n\t/**\n\t * @dev Constructor\n\t *  First reward MUST be the RDNT token or things will break\n\t *  related to the 50% penalty and distribution to locked balances.\n\t * @param _rdntToken RDNT token address.\n\t * @param _rewardsDuration set reward stream time.\n\t * @param _rewardsLookback reward lookback\n\t * @param _lockDuration lock duration\n\t */\n\tfunction initialize(\n\t\taddress _rdntToken,\n\t\taddress _lockZap,\n\t\taddress _dao,\n\t\taddress _userlist,\n\t\taddress priceProvider,\n\t\tuint256 _rewardsDuration,\n\t\tuint256 _rewardsLookback,\n\t\tuint256 _lockDuration,\n\t\tuint256 _burnRatio,\n\t\tuint256 _vestDuration\n\t) public initializer {\n\t\trequire(_rdntToken != address(0), \"0x0\");\n\t\trequire(_lockZap != address(0), \"0x0\");\n\t\trequire(_dao != address(0), \"0x0\");\n\t\trequire(_userlist != address(0), \"0x0\");\n\t\trequire(priceProvider != address(0), \"0x0\");\n\t\trequire(_rewardsDuration != uint256(0), \"0x0\");\n\t\trequire(_rewardsLookback != uint256(0), \"0x0\");\n\t\trequire(_lockDuration != uint256(0), \"0x0\");\n\t\trequire(_vestDuration != uint256(0), \"0x0\");\n\t\trequire(_burnRatio <= WHOLE, \"invalid burn\");\n\t\trequire(_rewardsLookback <= _rewardsDuration, \"invalid lookback\");\n\n\t\t__Ownable_init();\n\n\t\trdntToken = IMintableToken(_rdntToken);\n\t\tlockZap = _lockZap;\n\t\tdaoTreasury = _dao;\n\t\t_priceProvider = priceProvider;\n\t\tuserlist = ILockerList(_userlist);\n\t\trewardTokens.push(_rdntToken);\n\t\trewardData[_rdntToken].lastUpdateTime = block.timestamp;\n\n\t\trewardsDuration = _rewardsDuration;\n\t\trewardsLookback = _rewardsLookback;\n\t\tdefaultLockDuration = _lockDuration;\n\t\tburn = _burnRatio;\n\t\tvestDuration = _vestDuration;\n\t}\n\n\t/********************** Setters ***********************/\n\n\t/**\n\t * @notice Set minters\n\t * @dev Can be called only once\n\t */\n\tfunction setMinters(address[] memory _minters) external onlyOwner {\n\t\trequire(!mintersAreSet, \"minters set\");\n\t\tfor (uint256 i; i < _minters.length; i++) {\n\t\t\tminters[_minters[i]] = true;\n\t\t}\n\t\tmintersAreSet = true;\n\t}\n\n\tfunction setBountyManager(address _bounty) external onlyOwner {\n\t\tbountyManager = _bounty;\n\t\tminters[_bounty] = true;\n\t}\n\n\tfunction addRewardConverter(address _rewardConverter) external onlyOwner {\n\t\trewardConverter = _rewardConverter;\n\t}\n\n\t/**\n\t * @notice Add a new reward token to be distributed to stakers.\n\t */\n\tfunction setLockTypeInfo(uint256[] memory _lockPeriod, uint256[] memory _rewardMultipliers) external onlyOwner {\n\t\trequire(_lockPeriod.length == _rewardMultipliers.length, \"invalid lock period\");\n\t\tdelete lockPeriod;\n\t\tdelete rewardMultipliers;\n\t\tfor (uint256 i = 0; i < _lockPeriod.length; i += 1) {\n\t\t\tlockPeriod.push(_lockPeriod[i]);\n\t\t\trewardMultipliers.push(_rewardMultipliers[i]);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Set CIC, MFD and Treasury.\n\t */\n\tfunction setAddresses(\n\t\tIChefIncentivesController _controller,\n\t\tIMiddleFeeDistribution _middleFeeDistribution,\n\t\taddress _treasury\n\t) external onlyOwner {\n\t\tincentivesController = _controller;\n\t\tmiddleFeeDistribution = _middleFeeDistribution;\n\t\tstartfleetTreasury = _treasury;\n\t}\n\n\t/**\n\t * @notice Set LP token.\n\t */\n\tfunction setLPToken(address _stakingToken) external onlyOwner {\n\t\trequire(stakingToken == address(0), \"already set\");\n\t\tstakingToken = _stakingToken;\n\t}\n\n\t/**\n\t * @notice Add a new reward token to be distributed to stakers.\n\t */\n\tfunction addReward(address _rewardToken) external override {\n\t\trequire(minters[msg.sender], \"!minter\");\n\t\trequire(rewardData[_rewardToken].lastUpdateTime == 0, \"already added\");\n\t\trewardTokens.push(_rewardToken);\n\t\trewardData[_rewardToken].lastUpdateTime = block.timestamp;\n\t\trewardData[_rewardToken].periodFinish = block.timestamp;\n\t}\n\n\t/********************** View functions ***********************/\n\n\t/**\n\t * @notice Set default lock type index for user relock.\n\t */\n\tfunction setDefaultRelockTypeIndex(uint256 _index) external override {\n\t\trequire(_index < lockPeriod.length, \"invalid type\");\n\t\tdefaultLockIndex[msg.sender] = _index;\n\t}\n\n\tfunction setAutocompound(bool _status) external {\n\t\tautocompoundEnabled[msg.sender] = _status;\n\t}\n\n\tfunction getLockDurations() external view returns (uint256[] memory) {\n\t\treturn lockPeriod;\n\t}\n\n\tfunction getLockMultipliers() external view returns (uint256[] memory) {\n\t\treturn rewardMultipliers;\n\t}\n\n\t/**\n\t * @notice Set relock status\n\t */\n\tfunction setRelock(bool _status) external virtual {\n\t\tautoRelockDisabled[msg.sender] = !_status;\n\t}\n\n\t/**\n\t * @notice Returns all locks of a user.\n\t */\n\tfunction lockInfo(address user) external view override returns (LockedBalance[] memory) {\n\t\treturn userLocks[user];\n\t}\n\n\t/**\n\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders.\n\t */\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n\t\trequire(rewardData[tokenAddress].lastUpdateTime == 0, \"active reward\");\n\t\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n\t\temit Recovered(tokenAddress, tokenAmount);\n\t}\n\n\t/**\n\t * @notice Withdraw and restake assets.\n\t */\n\tfunction relock() external virtual {\n\t\tuint256 amount = _withdrawExpiredLocksFor(msg.sender, true, true, userLocks[msg.sender].length);\n\t\t_stake(amount, msg.sender, defaultLockIndex[msg.sender], false);\n\t\temit Relocked(msg.sender, amount, defaultLockIndex[msg.sender]);\n\t}\n\n\t/**\n\t * @notice Total balance of an account, including unlocked, locked and earned tokens.\n\t */\n\tfunction totalBalance(address user) external view override returns (uint256 amount) {\n\t\tif (stakingToken == address(rdntToken)) {\n\t\t\treturn balances[user].total;\n\t\t}\n\t\treturn balances[user].locked;\n\t}\n\n\t/**\n\t * @notice Information on a user's lockings\n\t * @return total balance of locks\n\t * @return unlockable balance\n\t * @return locked balance\n\t * @return lockedWithMultiplier\n\t * @return lockData which is an array of locks\n\t */\n\tfunction lockedBalances(\n\t\taddress user\n\t)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint256 total,\n\t\t\tuint256 unlockable,\n\t\t\tuint256 locked,\n\t\t\tuint256 lockedWithMultiplier,\n\t\t\tLockedBalance[] memory lockData\n\t\t)\n\t{\n\t\tLockedBalance[] storage locks = userLocks[user];\n\t\tuint256 idx;\n\t\tfor (uint256 i = 0; i < locks.length; i++) {\n\t\t\tif (locks[i].unlockTime > block.timestamp) {\n\t\t\t\tif (idx == 0) {\n\t\t\t\t\tlockData = new LockedBalance[](locks.length - i);\n\t\t\t\t}\n\t\t\t\tlockData[idx] = locks[i];\n\t\t\t\tidx++;\n\t\t\t\tlocked = locked.add(locks[i].amount);\n\t\t\t\tlockedWithMultiplier = lockedWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\n\t\t\t} else {\n\t\t\t\tunlockable = unlockable.add(locks[i].amount);\n\t\t\t}\n\t\t}\n\t\treturn (balances[user].locked, unlockable, locked, lockedWithMultiplier, lockData);\n\t}\n\n\t/**\n\t * @notice Earnings which is locked yet\n\t * @dev Earned balances may be withdrawn immediately for a 50% penalty.\n\t * @return total earnings\n\t * @return unlocked earnings\n\t * @return earningsData which is an array of all infos\n\t */\n\tfunction earnedBalances(\n\t\taddress user\n\t) public view returns (uint256 total, uint256 unlocked, EarnedBalance[] memory earningsData) {\n\t\tunlocked = balances[user].unlocked;\n\t\tLockedBalance[] storage earnings = userEarnings[user];\n\t\tuint256 idx;\n\t\tfor (uint256 i = 0; i < earnings.length; i++) {\n\t\t\tif (earnings[i].unlockTime > block.timestamp) {\n\t\t\t\tif (idx == 0) {\n\t\t\t\t\tearningsData = new EarnedBalance[](earnings.length - i);\n\t\t\t\t}\n\t\t\t\t(, uint256 penaltyAmount, , ) = ieeWithdrawableBalances(user, earnings[i].unlockTime);\n\t\t\t\tearningsData[idx].amount = earnings[i].amount;\n\t\t\t\tearningsData[idx].unlockTime = earnings[i].unlockTime;\n\t\t\t\tearningsData[idx].penalty = penaltyAmount;\n\t\t\t\tidx++;\n\t\t\t\ttotal = total.add(earnings[i].amount);\n\t\t\t} else {\n\t\t\t\tunlocked = unlocked.add(earnings[i].amount);\n\t\t\t}\n\t\t}\n\t\treturn (total, unlocked, earningsData);\n\t}\n\n\t/**\n\t * @notice Final balance received and penalty balance paid by user upon calling exit.\n\t * @dev This is earnings, not locks.\n\t */\n\tfunction withdrawableBalance(\n\t\taddress user\n\t) public view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount) {\n\t\tuint256 earned = balances[user].earned;\n\t\tif (earned > 0) {\n\t\t\tuint256 length = userEarnings[user].length;\n\t\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\t\tuint256 earnedAmount = userEarnings[user][i].amount;\n\t\t\t\tif (earnedAmount == 0) continue;\n\t\t\t\t(, , uint256 newPenaltyAmount, uint256 newBurnAmount) = _penaltyInfo(userEarnings[user][i]);\n\t\t\t\tpenaltyAmount = penaltyAmount.add(newPenaltyAmount);\n\t\t\t\tburnAmount = burnAmount.add(newBurnAmount);\n\t\t\t}\n\t\t}\n\t\tamount = balances[user].unlocked.add(earned).sub(penaltyAmount);\n\t\treturn (amount, penaltyAmount, burnAmount);\n\t}\n\n\tfunction _penaltyInfo(\n\t\tLockedBalance memory earning\n\t) internal view returns (uint256 amount, uint256 penaltyFactor, uint256 penaltyAmount, uint256 burnAmount) {\n\t\tif (earning.unlockTime > block.timestamp) {\n\t\t\t// 90% on day 1, decays to 25% on day 90\n\t\t\tpenaltyFactor = earning.unlockTime.sub(block.timestamp).mul(HALF).div(vestDuration).add(QUART); // 25% + timeLeft/vestDuration * 65%\n\t\t}\n\t\tpenaltyAmount = earning.amount.mul(penaltyFactor).div(WHOLE);\n\t\tburnAmount = penaltyAmount.mul(burn).div(WHOLE);\n\t\tamount = earning.amount.sub(penaltyAmount);\n\t}\n\n\t/********************** Reward functions ***********************/\n\n\t/**\n\t * @notice Reward amount of the duration.\n\t * @param _rewardToken for the reward\n\t */\n\tfunction getRewardForDuration(address _rewardToken) external view returns (uint256) {\n\t\treturn rewardData[_rewardToken].rewardPerSecond.mul(rewardsDuration).div(1e12);\n\t}\n\n\t/**\n\t * @notice Returns reward applicable timestamp.\n\t */\n\tfunction lastTimeRewardApplicable(address _rewardToken) public view returns (uint256) {\n\t\tuint256 periodFinish = rewardData[_rewardToken].periodFinish;\n\t\treturn block.timestamp < periodFinish ? block.timestamp : periodFinish;\n\t}\n\n\t/**\n\t * @notice Reward amount per token\n\t * @dev Reward is distributed only for locks.\n\t * @param _rewardToken for reward\n\t */\n\tfunction rewardPerToken(address _rewardToken) public view returns (uint256 rptStored) {\n\t\trptStored = rewardData[_rewardToken].rewardPerTokenStored;\n\t\tif (lockedSupplyWithMultiplier > 0) {\n\t\t\tuint256 newReward = lastTimeRewardApplicable(_rewardToken).sub(rewardData[_rewardToken].lastUpdateTime).mul(\n\t\t\t\trewardData[_rewardToken].rewardPerSecond\n\t\t\t);\n\t\t\trptStored = rptStored.add(newReward.mul(1e18).div(lockedSupplyWithMultiplier));\n\t\t}\n\t}\n\n\t/**\n\t * @notice Address and claimable amount of all reward tokens for the given account.\n\t * @param account for rewards\n\t */\n\tfunction claimableRewards(\n\t\taddress account\n\t) public view override returns (IFeeDistribution.RewardData[] memory rewardsData) {\n\t\trewardsData = new IFeeDistribution.RewardData[](rewardTokens.length);\n\t\tfor (uint256 i = 0; i < rewardsData.length; i++) {\n\t\t\trewardsData[i].token = rewardTokens[i];\n\t\t\trewardsData[i].amount = _earned(\n\t\t\t\taccount,\n\t\t\t\trewardsData[i].token,\n\t\t\t\tbalances[account].lockedWithMultiplier,\n\t\t\t\trewardPerToken(rewardsData[i].token)\n\t\t\t).div(1e12);\n\t\t}\n\t\treturn rewardsData;\n\t}\n\n\tfunction claimFromConverter(address onBehalf) external override whenNotPaused {\n\t\trequire(msg.sender == rewardConverter, \"!converter\");\n\t\t_updateReward(onBehalf);\n\t\tmiddleFeeDistribution.forwardReward(rewardTokens);\n\t\tuint256 length = rewardTokens.length;\n\t\tfor (uint256 i; i < length; i++) {\n\t\t\taddress token = rewardTokens[i];\n\t\t\t_notifyUnseenReward(token);\n\t\t\tuint256 reward = rewards[onBehalf][token].div(1e12);\n\t\t\tif (reward > 0) {\n\t\t\t\trewards[onBehalf][token] = 0;\n\t\t\t\trewardData[token].balance = rewardData[token].balance.sub(reward);\n\n\t\t\t\tIERC20(token).safeTransfer(rewardConverter, reward);\n\t\t\t\temit RewardPaid(onBehalf, token, reward);\n\t\t\t}\n\t\t}\n\t\tIPriceProvider(_priceProvider).update();\n\t\tlastClaimTime[onBehalf] = block.timestamp;\n\t}\n\n\t/********************** Operate functions ***********************/\n\n\t/**\n\t * @notice Stake tokens to receive rewards.\n\t * @dev Locked tokens cannot be withdrawn for defaultLockDuration and are eligible to receive rewards.\n\t */\n\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external override {\n\t\t// Exceptional case is\n\t\t// - User locked, default index is 1\n\t\t// - User set default index as 0\n\t\t// - User unlocked all\n\t\t// - User locks again, default index is reset to 1\n\t\tif (defaultLockIndex[onBehalfOf] == 0 && userLocks[onBehalfOf].length == 0) {\n\t\t\tdefaultLockIndex[onBehalfOf] = DEFAULT_LOCK_INDEX;\n\t\t}\n\t\t_stake(amount, onBehalfOf, typeIndex, false);\n\t}\n\n\tfunction _stake(uint256 amount, address onBehalfOf, uint256 typeIndex, bool isRelock) internal whenNotPaused {\n\t\tif (amount == 0) return;\n\t\tif (bountyManager != address(0)) {\n\t\t\trequire(amount >= IBountyManager(bountyManager).minDLPBalance(), \"min stake amt not met\");\n\t\t}\n\t\trequire(typeIndex < lockPeriod.length, \"invalid index\");\n\n\t\tincentivesController.beforeLockUpdate(onBehalfOf);\n\n\t\t_updateReward(onBehalfOf);\n\n\t\tuint256 transferAmount = amount;\n\t\tif (onBehalfOf == msg.sender || msg.sender == lockZap) {\n\t\t\tuint256 withdrawnAmt;\n\t\t\tif (!autoRelockDisabled[onBehalfOf]) {\n\t\t\t\twithdrawnAmt = _withdrawExpiredLocksFor(onBehalfOf, true, false, userLocks[onBehalfOf].length);\n\t\t\t\tamount = amount.add(withdrawnAmt);\n\t\t\t} else {\n\t\t\t\t_withdrawExpiredLocksFor(onBehalfOf, true, true, userLocks[onBehalfOf].length);\n\t\t\t}\n\t\t}\n\n\t\tBalances storage bal = balances[onBehalfOf];\n\t\tbal.total = bal.total.add(amount);\n\n\t\tbal.locked = bal.locked.add(amount);\n\t\tlockedSupply = lockedSupply.add(amount);\n\n\t\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\n\t\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.add(amount.mul(rewardMultipliers[typeIndex]));\n\n\t\t_insertLock(\n\t\t\tonBehalfOf,\n\t\t\tLockedBalance({\n\t\t\t\tamount: amount,\n\t\t\t\tunlockTime: block.timestamp.add(lockPeriod[typeIndex]),\n\t\t\t\tmultiplier: rewardMultipliers[typeIndex],\n\t\t\t\tduration: lockPeriod[typeIndex]\n\t\t\t})\n\t\t);\n\n\t\tuserlist.addToList(onBehalfOf);\n\n\t\tif (!isRelock) {\n\t\t\tIERC20(stakingToken).safeTransferFrom(msg.sender, address(this), transferAmount);\n\t\t}\n\n\t\tincentivesController.afterLockUpdate(onBehalfOf);\n\n\t\t//emit Staked(onBehalfOf, amount, true);\n\t\temit Locked(onBehalfOf, amount, balances[onBehalfOf].locked, stakingToken != address(rdntToken));\n\t}\n\n\tfunction _insertLock(address _user, LockedBalance memory newLock) internal {\n\t\tLockedBalance[] storage locks = userLocks[_user];\n\t\tuint256 length = locks.length;\n\t\tuint256 i;\n\t\twhile (i < length && locks[i].unlockTime < newLock.unlockTime) {\n\t\t\ti = i + 1;\n\t\t}\n\t\tlocks.push(newLock);\n\t\tfor (uint256 j = length; j > i; j -= 1) {\n\t\t\tlocks[j] = locks[j - 1];\n\t\t}\n\t\tlocks[i] = newLock;\n\t}\n\n\t/**\n\t * @notice Add to earnings\n\t * @dev Minted tokens receive rewards normally but incur a 50% penalty when\n\t *  withdrawn before vestDuration has passed.\n\t */\n\tfunction mint(address user, uint256 amount, bool withPenalty) external override whenNotPaused {\n\t\trequire(minters[msg.sender], \"!minter\");\n\t\tif (amount == 0) return;\n\n\t\t_updateReward(user);\n\n\t\tif (user == address(this)) {\n\t\t\t// minting to this contract adds the new tokens as incentives for lockers\n\t\t\t_notifyReward(address(rdntToken), amount);\n\t\t\treturn;\n\t\t}\n\n\t\tBalances storage bal = balances[user];\n\t\tbal.total = bal.total.add(amount);\n\t\tif (withPenalty) {\n\t\t\tbal.earned = bal.earned.add(amount);\n\t\t\tLockedBalance[] storage earnings = userEarnings[user];\n\t\t\tuint256 unlockTime = block.timestamp.add(vestDuration);\n\t\t\tearnings.push(\n\t\t\t\tLockedBalance({amount: amount, unlockTime: unlockTime, multiplier: 1, duration: vestDuration})\n\t\t\t);\n\t\t} else {\n\t\t\tbal.unlocked = bal.unlocked.add(amount);\n\t\t}\n\t\t//emit Staked(user, amount, false);\n\t}\n\n\t/**\n\t * @notice Withdraw tokens from earnings and unlocked.\n\t * @dev First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\n\t *  incurs a 50% penalty which is distributed based on locked balances.\n\t */\n\tfunction withdraw(uint256 amount) external {\n\t\taddress _address = msg.sender;\n\t\trequire(amount != 0, \"amt cannot be 0\");\n\n\t\tuint256 penaltyAmount;\n\t\tuint256 burnAmount;\n\t\tBalances storage bal = balances[_address];\n\n\t\tif (amount <= bal.unlocked) {\n\t\t\tbal.unlocked = bal.unlocked.sub(amount);\n\t\t} else {\n\t\t\tuint256 remaining = amount.sub(bal.unlocked);\n\t\t\trequire(bal.earned >= remaining, \"invalid earned\");\n\t\t\tbal.unlocked = 0;\n\t\t\tuint256 sumEarned = bal.earned;\n\t\t\tuint256 i;\n\t\t\tfor (i = 0; ; i++) {\n\t\t\t\tuint256 earnedAmount = userEarnings[_address][i].amount;\n\t\t\t\tif (earnedAmount == 0) continue;\n\t\t\t\t(, uint256 penaltyFactor, , ) = _penaltyInfo(userEarnings[_address][i]);\n\n\t\t\t\t// Amount required from this lock, taking into account the penalty\n\t\t\t\tuint256 requiredAmount = remaining.mul(WHOLE).div(WHOLE.sub(penaltyFactor));\n\t\t\t\tif (requiredAmount >= earnedAmount) {\n\t\t\t\t\trequiredAmount = earnedAmount;\n\t\t\t\t\tremaining = remaining.sub(earnedAmount.mul(WHOLE.sub(penaltyFactor)).div(WHOLE)); // remaining -= earned * (1 - pentaltyFactor)\n\t\t\t\t\tif (remaining == 0) i++;\n\t\t\t\t} else {\n\t\t\t\t\tuserEarnings[_address][i].amount = earnedAmount.sub(requiredAmount);\n\t\t\t\t\tremaining = 0;\n\t\t\t\t}\n\t\t\t\tsumEarned = sumEarned.sub(requiredAmount);\n\n\t\t\t\tpenaltyAmount = penaltyAmount.add(requiredAmount.mul(penaltyFactor).div(WHOLE)); // penalty += amount * penaltyFactor\n\t\t\t\tburnAmount = burnAmount.add(penaltyAmount.mul(burn).div(WHOLE)); // burn += penalty * burnFactor\n\n\t\t\t\tif (remaining == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\trequire(sumEarned != 0, \"0 earned\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i > 0) {\n\t\t\t\tfor (uint256 j = i; j < userEarnings[_address].length; j++) {\n\t\t\t\t\tuserEarnings[_address][j - i] = userEarnings[_address][j];\n\t\t\t\t}\n\t\t\t\tfor (uint256 j = 0; j < i; j++) {\n\t\t\t\t\tuserEarnings[_address].pop();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbal.earned = sumEarned;\n\t\t}\n\n\t\t// Update values\n\t\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\n\n\t\t_withdrawTokens(_address, amount, penaltyAmount, burnAmount, false);\n\t}\n\n\tfunction ieeWithdrawableBalances(\n\t\taddress user,\n\t\tuint256 unlockTime\n\t) internal view returns (uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) {\n\t\tfor (uint256 i = 0; i < userEarnings[user].length; i++) {\n\t\t\tif (userEarnings[user][i].unlockTime == unlockTime) {\n\t\t\t\t(amount, , penaltyAmount, burnAmount) = _penaltyInfo(userEarnings[user][i]);\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Withdraw individual unlocked balance and earnings, optionally claim pending rewards.\n\t */\n\tfunction individualEarlyExit(bool claimRewards, uint256 unlockTime) external {\n\t\taddress onBehalfOf = msg.sender;\n\t\trequire(unlockTime > block.timestamp, \"!unlockTime\");\n\t\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount, uint256 index) = ieeWithdrawableBalances(\n\t\t\tonBehalfOf,\n\t\t\tunlockTime\n\t\t);\n\n\t\tif (index >= userEarnings[onBehalfOf].length) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (uint256 i = index + 1; i < userEarnings[onBehalfOf].length; i++) {\n\t\t\tuserEarnings[onBehalfOf][i - 1] = userEarnings[onBehalfOf][i];\n\t\t}\n\t\tuserEarnings[onBehalfOf].pop();\n\n\t\tBalances storage bal = balances[onBehalfOf];\n\t\tbal.total = bal.total.sub(amount).sub(penaltyAmount);\n\t\tbal.earned = bal.earned.sub(amount).sub(penaltyAmount);\n\n\t\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\n\t}\n\n\t/**\n\t * @notice Withdraw full unlocked balance and earnings, optionally claim pending rewards.\n\t */\n\tfunction exit(bool claimRewards) external override {\n\t\taddress onBehalfOf = msg.sender;\n\t\t(uint256 amount, uint256 penaltyAmount, uint256 burnAmount) = withdrawableBalance(onBehalfOf);\n\n\t\tdelete userEarnings[onBehalfOf];\n\n\t\tBalances storage bal = balances[onBehalfOf];\n\t\tbal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\n\t\tbal.unlocked = 0;\n\t\tbal.earned = 0;\n\n\t\t_withdrawTokens(onBehalfOf, amount, penaltyAmount, burnAmount, claimRewards);\n\t}\n\n\t/**\n\t * @notice Claim all pending staking rewards.\n\t */\n\tfunction getReward(address[] memory _rewardTokens) public {\n\t\t_updateReward(msg.sender);\n\t\t_getReward(msg.sender, _rewardTokens);\n\t\tlastClaimTime[msg.sender] = block.timestamp;\n\t}\n\n\t/**\n\t * @notice Claim all pending staking rewards.\n\t */\n\tfunction getAllRewards() external {\n\t\treturn getReward(rewardTokens);\n\t}\n\n\t/**\n\t * @notice Calculate earnings.\n\t */\n\tfunction _earned(\n\t\taddress _user,\n\t\taddress _rewardToken,\n\t\tuint256 _balance,\n\t\tuint256 _currentRewardPerToken\n\t) internal view returns (uint256 earnings) {\n\t\tearnings = rewards[_user][_rewardToken];\n\t\tuint256 realRPT = _currentRewardPerToken.sub(userRewardPerTokenPaid[_user][_rewardToken]);\n\t\tearnings = earnings.add(_balance.mul(realRPT).div(1e18));\n\t}\n\n\t/**\n\t * @notice Update user reward info.\n\t */\n\tfunction _updateReward(address account) internal {\n\t\tuint256 balance = balances[account].lockedWithMultiplier;\n\t\tuint256 length = rewardTokens.length;\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\taddress token = rewardTokens[i];\n\t\t\tuint256 rpt = rewardPerToken(token);\n\n\t\t\tReward storage r = rewardData[token];\n\t\t\tr.rewardPerTokenStored = rpt;\n\t\t\tr.lastUpdateTime = lastTimeRewardApplicable(token);\n\n\t\t\tif (account != address(this)) {\n\t\t\t\trewards[account][token] = _earned(account, token, balance, rpt);\n\t\t\t\tuserRewardPerTokenPaid[account][token] = rpt;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Add new reward.\n\t * @dev If prev reward period is not done, then it resets `rewardPerSecond` and restarts period\n\t */\n\tfunction _notifyReward(address _rewardToken, uint256 reward) internal {\n\t\tReward storage r = rewardData[_rewardToken];\n\t\tif (block.timestamp >= r.periodFinish) {\n\t\t\tr.rewardPerSecond = reward.mul(1e12).div(rewardsDuration);\n\t\t} else {\n\t\t\tuint256 remaining = r.periodFinish.sub(block.timestamp);\n\t\t\tuint256 leftover = remaining.mul(r.rewardPerSecond).div(1e12);\n\t\t\tr.rewardPerSecond = reward.add(leftover).mul(1e12).div(rewardsDuration);\n\t\t}\n\n\t\tr.lastUpdateTime = block.timestamp;\n\t\tr.periodFinish = block.timestamp.add(rewardsDuration);\n\t\tr.balance = r.balance.add(reward);\n\t}\n\n\t/**\n\t * @notice Notify unseen rewards.\n\t * @dev for rewards other than stakingToken, every 24 hours we check if new\n\t *  rewards were sent to the contract or accrued via aToken interest.\n\t */\n\tfunction _notifyUnseenReward(address token) internal {\n\t\trequire(token != address(0), \"Invalid Token\");\n\t\tif (token == address(rdntToken)) {\n\t\t\treturn;\n\t\t}\n\t\tReward storage r = rewardData[token];\n\t\tuint256 periodFinish = r.periodFinish;\n\t\trequire(periodFinish != 0, \"invalid period finish\");\n\t\tif (periodFinish < block.timestamp.add(rewardsDuration - rewardsLookback)) {\n\t\t\tuint256 unseen = IERC20(token).balanceOf(address(this)).sub(r.balance);\n\t\t\tif (unseen > 0) {\n\t\t\t\t_notifyReward(token, unseen);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice User gets reward\n\t */\n\tfunction _getReward(address _user, address[] memory _rewardTokens) internal whenNotPaused {\n\t\tmiddleFeeDistribution.forwardReward(_rewardTokens);\n\t\tuint256 length = _rewardTokens.length;\n\t\tfor (uint256 i; i < length; i++) {\n\t\t\taddress token = _rewardTokens[i];\n\t\t\t_notifyUnseenReward(token);\n\t\t\tuint256 reward = rewards[_user][token].div(1e12);\n\t\t\tif (reward > 0) {\n\t\t\t\trewards[_user][token] = 0;\n\t\t\t\trewardData[token].balance = rewardData[token].balance.sub(reward);\n\n\t\t\t\tIERC20(token).safeTransfer(_user, reward);\n\t\t\t\temit RewardPaid(_user, token, reward);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Withdraw tokens from MFD\n\t */\n\tfunction _withdrawTokens(\n\t\taddress onBehalfOf,\n\t\tuint256 amount,\n\t\tuint256 penaltyAmount,\n\t\tuint256 burnAmount,\n\t\tbool claimRewards\n\t) internal {\n\t\trequire(onBehalfOf == msg.sender, \"onBehalfOf != sender\");\n\t\t_updateReward(onBehalfOf);\n\n\t\trdntToken.safeTransfer(onBehalfOf, amount);\n\t\tif (penaltyAmount > 0) {\n\t\t\tif (burnAmount > 0) {\n\t\t\t\trdntToken.safeTransfer(startfleetTreasury, burnAmount);\n\t\t\t}\n\t\t\trdntToken.safeTransfer(daoTreasury, penaltyAmount.sub(burnAmount));\n\t\t}\n\n\t\tif (claimRewards) {\n\t\t\t_getReward(onBehalfOf, rewardTokens);\n\t\t\tlastClaimTime[onBehalfOf] = block.timestamp;\n\t\t}\n\t}\n\n\t/********************** Eligibility + Disqualification ***********************/\n\n\t/**\n\t * @notice Withdraw all lockings tokens where the unlock time has passed\n\t */\n\tfunction _cleanWithdrawableLocks(\n\t\taddress user,\n\t\tuint256 totalLock,\n\t\tuint256 totalLockWithMultiplier,\n\t\tuint256 limit\n\t) internal returns (uint256 lockAmount, uint256 lockAmountWithMultiplier) {\n\t\tLockedBalance[] storage locks = userLocks[user];\n\n\t\tif (locks.length != 0) {\n\t\t\tuint256 length = locks.length <= limit ? locks.length : limit;\n\t\t\tfor (uint256 i = 0; i < length; ) {\n\t\t\t\tif (locks[i].unlockTime <= block.timestamp) {\n\t\t\t\t\tlockAmount = lockAmount.add(locks[i].amount);\n\t\t\t\t\tlockAmountWithMultiplier = lockAmountWithMultiplier.add(locks[i].amount.mul(locks[i].multiplier));\n\t\t\t\t\tlocks[i] = locks[locks.length - 1];\n\t\t\t\t\tlocks.pop();\n\t\t\t\t\tlength = length.sub(1);\n\t\t\t\t} else {\n\t\t\t\t\ti = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (locks.length == 0) {\n\t\t\t\tlockAmount = totalLock;\n\t\t\t\tlockAmountWithMultiplier = totalLockWithMultiplier;\n\t\t\t\tdelete userLocks[user];\n\n\t\t\t\tuserlist.removeFromList(user);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\n\t * @param _address of the user.\n\t */\n\tfunction _withdrawExpiredLocksFor(\n\t\taddress _address,\n\t\tbool isRelockAction,\n\t\tbool doTransfer,\n\t\tuint256 limit\n\t) internal returns (uint256 amount) {\n\t\tincentivesController.beforeLockUpdate(_address);\n\t\t_updateReward(_address);\n\n\t\tuint256 amountWithMultiplier;\n\t\tBalances storage bal = balances[_address];\n\t\t(amount, amountWithMultiplier) = _cleanWithdrawableLocks(_address, bal.locked, bal.lockedWithMultiplier, limit);\n\t\tbal.locked = bal.locked.sub(amount);\n\t\tbal.lockedWithMultiplier = bal.lockedWithMultiplier.sub(amountWithMultiplier);\n\t\tbal.total = bal.total.sub(amount);\n\t\tlockedSupply = lockedSupply.sub(amount);\n\t\tlockedSupplyWithMultiplier = lockedSupplyWithMultiplier.sub(amountWithMultiplier);\n\t\tincentivesController.afterLockUpdate(_address);\n\n\t\tif (!isRelockAction && !autoRelockDisabled[_address]) {\n\t\t\t_stake(amount, _address, defaultLockIndex[_address], true);\n\t\t} else {\n\t\t\tif (doTransfer) {\n\t\t\t\tIERC20(stakingToken).safeTransfer(_address, amount);\n\t\t\t\temit Withdrawn(_address, amount, balances[_address].locked, 0, 0, stakingToken != address(rdntToken));\n\t\t\t}\n\t\t}\n\t\treturn amount;\n\t}\n\n\t/**\n\t * @notice Withdraw all currently locked tokens where the unlock time has passed.\n\t */\n\tfunction withdrawExpiredLocksFor(address _address) external override returns (uint256) {\n\t\treturn _withdrawExpiredLocksFor(_address, false, true, userLocks[_address].length);\n\t}\n\n\tfunction withdrawExpiredLocksForWithOptions(\n\t\taddress _address,\n\t\tuint256 _limit,\n\t\tbool _ignoreRelock\n\t) external returns (uint256) {\n\t\tif (_limit == 0) _limit = userLocks[_address].length;\n\n\t\treturn _withdrawExpiredLocksFor(_address, _ignoreRelock, true, _limit);\n\t}\n\n\tfunction zapVestingToLp(address _user) external override returns (uint256 zapped) {\n\t\trequire(msg.sender == lockZap, \"!lockZap\");\n\n\t\tLockedBalance[] storage earnings = userEarnings[_user];\n\t\tfor (uint256 i = earnings.length; i > 0; i -= 1) {\n\t\t\tif (earnings[i - 1].unlockTime > block.timestamp) {\n\t\t\t\tzapped = zapped.add(earnings[i - 1].amount);\n\t\t\t\tearnings.pop();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\trdntToken.safeTransfer(lockZap, zapped);\n\n\t\tBalances storage bal = balances[_user];\n\t\tbal.earned = bal.earned.sub(zapped);\n\t\tbal.total = bal.total.sub(zapped);\n\n\t\treturn zapped;\n\t}\n\n\tfunction getPriceProvider() external view override returns (address) {\n\t\treturn _priceProvider;\n\t}\n\n\t/**\n\t * @notice Claims bounty.\n\t * @dev Remove expired locks\n\t * @param _user address.\n\t */\n\tfunction claimBounty(address _user, bool _execute) public whenNotPaused returns (bool issueBaseBounty) {\n\t\trequire(msg.sender == address(bountyManager), \"!bountyManager\");\n\n\t\tif (_execute) {\n\t\t\t_updateReward(_user);\n\t\t}\n\n\t\t(, uint256 unlockable, , , ) = lockedBalances(_user);\n\t\tif (unlockable == 0) {\n\t\t\treturn (false);\n\t\t} else {\n\t\t\tissueBaseBounty = true;\n\t\t}\n\n\t\tif (!_execute) {\n\t\t\treturn (issueBaseBounty);\n\t\t}\n\t\t// Withdraw the user's expried locks\n\t\t_withdrawExpiredLocksFor(_user, false, true, userLocks[_user].length);\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/BalancerPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./DustRefunder.sol\";\nimport \"../../../dependencies/math/BNum.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\n\nimport \"../../../interfaces/ILiquidityZap.sol\";\nimport \"../../../interfaces/IPoolHelper.sol\";\nimport \"../../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../interfaces/ILendingPool.sol\";\nimport \"../../../interfaces/balancer/IWeightedPoolFactory.sol\";\n\n/// @title Balance Pool Helper Contract\n/// @author Radiant\ncontract BalancerPoolHelper is IBalancerPoolHelper, Initializable, OwnableUpgradeable, BNum, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\taddress public inTokenAddr;\n\taddress public outTokenAddr;\n\taddress public wethAddr;\n\taddress public override lpTokenAddr;\n\taddress public vaultAddr;\n\tbytes32 public poolId;\n\taddress public lockZap;\n\tIWeightedPoolFactory public poolFactory;\n\n\tfunction initialize(\n\t\taddress _inTokenAddr,\n\t\taddress _outTokenAddr,\n\t\taddress _wethAddr,\n\t\taddress _vault,\n\t\tIWeightedPoolFactory _poolFactory\n\t) external initializer {\n\t\t__Ownable_init();\n\t\tinTokenAddr = _inTokenAddr;\n\t\toutTokenAddr = _outTokenAddr;\n\t\twethAddr = _wethAddr;\n\t\tvaultAddr = _vault;\n\t\tpoolFactory = _poolFactory;\n\t}\n\n\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) public {\n\t\trequire(lpTokenAddr == address(0), \"Already initialized\");\n\n\t\t(address token0, address token1) = sortTokens(inTokenAddr, outTokenAddr);\n\n\t\tIERC20[] memory tokens = new IERC20[](2);\n\t\ttokens[0] = IERC20(token0);\n\t\ttokens[1] = IERC20(token1);\n\n\t\taddress[] memory rateProviders = new address[](2);\n\t\trateProviders[0] = 0x0000000000000000000000000000000000000000;\n\t\trateProviders[1] = 0x0000000000000000000000000000000000000000;\n\n\t\tuint256 swapFeePercentage = 1000000000000000;\n\n\t\tuint256[] memory weights = new uint256[](2);\n\n\t\tif (token0 == outTokenAddr) {\n\t\t\tweights[0] = 800000000000000000;\n\t\t\tweights[1] = 200000000000000000;\n\t\t} else {\n\t\t\tweights[0] = 200000000000000000;\n\t\t\tweights[1] = 800000000000000000;\n\t\t}\n\n\t\tlpTokenAddr = poolFactory.create(\n\t\t\t_tokenName,\n\t\t\t_tokenSymbol,\n\t\t\ttokens,\n\t\t\tweights,\n\t\t\trateProviders,\n\t\t\tswapFeePercentage,\n\t\t\taddress(this)\n\t\t);\n\n\t\tpoolId = IWeightedPool(lpTokenAddr).getPoolId();\n\n\t\tIERC20 outToken = IERC20(outTokenAddr);\n\t\tIERC20 inToken = IERC20(inTokenAddr);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tIERC20 weth = IERC20(wethAddr);\n\n\t\toutToken.safeApprove(vaultAddr, type(uint256).max);\n\t\tinToken.safeApprove(vaultAddr, type(uint256).max);\n\t\tweth.approve(vaultAddr, type(uint256).max);\n\n\t\tIAsset[] memory assets = new IAsset[](2);\n\t\tassets[0] = IAsset(token0);\n\t\tassets[1] = IAsset(token1);\n\n\t\tuint256 inTokenAmt = inToken.balanceOf(address(this));\n\t\tuint256 outTokenAmt = outToken.balanceOf(address(this));\n\n\t\tuint256[] memory maxAmountsIn = new uint256[](2);\n\t\tif (token0 == inTokenAddr) {\n\t\t\tmaxAmountsIn[0] = inTokenAmt;\n\t\t\tmaxAmountsIn[1] = outTokenAmt;\n\t\t} else {\n\t\t\tmaxAmountsIn[0] = outTokenAmt;\n\t\t\tmaxAmountsIn[1] = inTokenAmt;\n\t\t}\n\n\t\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(\n\t\t\tassets,\n\t\t\tmaxAmountsIn,\n\t\t\tabi.encode(0, maxAmountsIn),\n\t\t\tfalse\n\t\t);\n\t\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\n\t\tuint256 liquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t}\n\n\t/// @dev Return fair reserve amounts given spot reserves, weights, and fair prices.\n\t/// @param resA Reserve of the first asset\n\t/// @param resB Reserve of the second asset\n\t/// @param wA Weight of the first asset\n\t/// @param wB Weight of the second asset\n\t/// @param pxA Fair price of the first asset\n\t/// @param pxB Fair price of the second asset\n\tfunction computeFairReserves(\n\t\tuint256 resA,\n\t\tuint256 resB,\n\t\tuint256 wA,\n\t\tuint256 wB,\n\t\tuint256 pxA,\n\t\tuint256 pxB\n\t) internal pure returns (uint256 fairResA, uint256 fairResB) {\n\t\t// NOTE: wA + wB = 1 (normalize weights)\n\t\t// constant product = resA^wA * resB^wB\n\t\t// constraints:\n\t\t// - fairResA^wA * fairResB^wB = constant product\n\t\t// - fairResA * pxA / wA = fairResB * pxB / wB\n\t\t// Solving equations:\n\t\t// --> fairResA^wA * (fairResA * (pxA * wB) / (wA * pxB))^wB = constant product\n\t\t// --> fairResA / r1^wB = constant product\n\t\t// --> fairResA = resA^wA * resB^wB * r1^wB\n\t\t// --> fairResA = resA * (resB/resA)^wB * r1^wB = resA * (r1/r0)^wB\n\t\tuint256 r0 = bdiv(resA, resB);\n\t\tuint256 r1 = bdiv(bmul(wA, pxB), bmul(wB, pxA));\n\t\t// fairResA = resA * (r1 / r0) ^ wB\n\t\t// fairResB = resB * (r0 / r1) ^ wA\n\t\tif (r0 > r1) {\n\t\t\tuint256 ratio = bdiv(r1, r0);\n\t\t\tfairResA = bmul(resA, bpow(ratio, wB));\n\t\t\tfairResB = bdiv(resB, bpow(ratio, wA));\n\t\t} else {\n\t\t\tuint256 ratio = bdiv(r0, r1);\n\t\t\tfairResA = bdiv(resA, bpow(ratio, wB));\n\t\t\tfairResB = bmul(resB, bpow(ratio, wA));\n\t\t}\n\t}\n\n\tfunction getLpPrice(uint256 rdntPriceInEth) public view override returns (uint256 priceInEth) {\n\t\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\n\t\t(address token0, ) = sortTokens(inTokenAddr, outTokenAddr);\n\t\t(uint256 rdntBalance, uint256 wethBalance, ) = getReserves();\n\t\tuint256[] memory weights = pool.getNormalizedWeights();\n\n\t\tuint256 rdntWeight;\n\t\tuint256 wethWeight;\n\n\t\tif (token0 == outTokenAddr) {\n\t\t\trdntWeight = weights[0];\n\t\t\twethWeight = weights[1];\n\t\t} else {\n\t\t\trdntWeight = weights[1];\n\t\t\twethWeight = weights[0];\n\t\t}\n\n\t\t// RDNT in eth, 8 decis\n\t\tuint256 pxA = rdntPriceInEth;\n\t\t// ETH in eth, 8 decis\n\t\tuint256 pxB = 100000000;\n\n\t\t(uint256 fairResA, uint256 fairResB) = computeFairReserves(\n\t\t\trdntBalance,\n\t\t\twethBalance,\n\t\t\trdntWeight,\n\t\t\twethWeight,\n\t\t\tpxA,\n\t\t\tpxB\n\t\t);\n\t\t// use fairReserveA and fairReserveB to compute LP token price\n\t\t// LP price = (fairResA * pxA + fairResB * pxB) / totalLPSupply\n\t\tpriceInEth = fairResA.mul(pxA).add(fairResB.mul(pxB)).div(pool.totalSupply());\n\t}\n\n\tfunction getPrice() public view returns (uint256 priceInEth) {\n\t\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\n\t\tuint256 rdntBalance = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\n\t\tuint256 wethBalance = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\n\n\t\tuint256 poolWeight = 4;\n\n\t\treturn wethBalance.mul(1e8).div(rdntBalance.div(poolWeight));\n\t}\n\n\tfunction getReserves() public view override returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\n\t\tIERC20 lpToken = IERC20(lpTokenAddr);\n\n\t\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\n\n\t\trdnt = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\n\t\tweth = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\n\n\t\tlpTokenSupply = lpToken.totalSupply().div(1e18);\n\t}\n\n\tfunction joinPool(uint256 _wethAmt, uint256 _rdntAmt) internal returns (uint256 liquidity) {\n\t\t(address token0, address token1) = sortTokens(outTokenAddr, inTokenAddr);\n\t\tIAsset[] memory assets = new IAsset[](2);\n\t\tassets[0] = IAsset(token0);\n\t\tassets[1] = IAsset(token1);\n\n\t\tuint256[] memory maxAmountsIn = new uint256[](2);\n\t\tif (token0 == inTokenAddr) {\n\t\t\tmaxAmountsIn[0] = _wethAmt;\n\t\t\tmaxAmountsIn[1] = _rdntAmt;\n\t\t} else {\n\t\t\tmaxAmountsIn[0] = _rdntAmt;\n\t\t\tmaxAmountsIn[1] = _wethAmt;\n\t\t}\n\n\t\tbytes memory userDataEncoded = abi.encode(IWeightedPool.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, maxAmountsIn, 0);\n\t\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(assets, maxAmountsIn, userDataEncoded, false);\n\t\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\n\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tliquidity = lp.balanceOf(address(this));\n\t}\n\n\tfunction zapWETH(uint256 amount) public override returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap\");\n\t\tIWETH(wethAddr).transferFrom(msg.sender, address(this), amount);\n\t\tliquidity = joinPool(amount, 0);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(outTokenAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public override returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap\");\n\t\tIWETH(wethAddr).transferFrom(msg.sender, address(this), _wethAmt);\n\t\tIERC20(outTokenAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\n\t\tliquidity = joinPool(_wethAmt, _rdntAmt);\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\n\t\trefundDust(outTokenAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n\t\trequire(tokenA != tokenB, \"BalancerZap: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"BalancerZap: ZERO_ADDRESS\");\n\t}\n\n\tfunction quoteFromToken(uint256 tokenAmount) public view override returns (uint256 optimalWETHAmount) {\n\t\tuint256 rdntPriceInEth = getPrice();\n\t\tuint256 p1 = rdntPriceInEth.mul(1e10);\n\t\tuint256 ethRequiredBeforeWeight = tokenAmount.mul(p1).div(1e18);\n\t\toptimalWETHAmount = ethRequiredBeforeWeight.div(4);\n\t}\n\n\tfunction swap(\n\t\tuint256 _amount,\n\t\taddress _tokenInAddress,\n\t\taddress _tokenOutAddress,\n\t\taddress _lpAddr\n\t) internal returns (uint256 amountOut) {\n\t\tIAsset tokenInAddress = IAsset(_tokenInAddress);\n\t\tIAsset tokenOutAddress = IAsset(_tokenOutAddress);\n\n\t\tbytes32 _poolId = IWeightedPool(_lpAddr).getPoolId();\n\n\t\tbytes memory userDataEncoded = abi.encode(); //https://dev.balancer.fi/helpers/encoding\n\t\tIVault.SingleSwap memory singleSwapRequest = IVault.SingleSwap(\n\t\t\t_poolId,\n\t\t\tIVault.SwapKind.GIVEN_IN,\n\t\t\ttokenInAddress,\n\t\t\ttokenOutAddress,\n\t\t\t_amount,\n\t\t\tuserDataEncoded\n\t\t);\n\t\tIVault.FundManagement memory fundManagementRequest = IVault.FundManagement(\n\t\t\taddress(this),\n\t\t\tfalse,\n\t\t\tpayable(address(this)),\n\t\t\tfalse\n\t\t);\n\n\t\tuint256 limit = 0;\n\n\t\tamountOut = IVault(vaultAddr).swap(\n\t\t\tsingleSwapRequest,\n\t\t\tfundManagementRequest,\n\t\t\tlimit,\n\t\t\t(block.timestamp + 3 minutes)\n\t\t);\n\t}\n\n\tfunction setLockZap(address _lockZap) external onlyOwner {\n\t\tlockZap = _lockZap;\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/DustRefunder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../../interfaces/IWETH.sol\";\n\ncontract DustRefunder {\n\tusing SafeERC20 for IERC20;\n\n\tfunction refundDust(address _rdnt, address _weth, address _refundAddress) internal {\n\t\tIERC20 rdnt = IERC20(_rdnt);\n\t\tIWETH weth = IWETH(_weth);\n\n\t\tuint256 dustWETH = weth.balanceOf(address(this));\n\t\tif (dustWETH > 0) {\n\t\t\tweth.transfer(_refundAddress, dustWETH);\n\t\t}\n\t\tuint256 dustRdnt = rdnt.balanceOf(address(this));\n\t\tif (dustRdnt > 0) {\n\t\t\trdnt.safeTransfer(_refundAddress, dustRdnt);\n\t\t}\n\t}\n}\n"
    },
    "contracts/radiant/zap/helpers/UniswapPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./DustRefunder.sol\";\nimport \"@uniswap/lib/contracts/libraries/UniswapV2Library.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\nimport \"../../../dependencies/math/HomoraMath.sol\";\n\nimport \"../../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../../interfaces/ILiquidityZap.sol\";\nimport \"../../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../interfaces/ILendingPool.sol\";\nimport \"../../../interfaces/IPoolHelper.sol\";\n\ncontract UniswapPoolHelper is Initializable, OwnableUpgradeable, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing HomoraMath for uint;\n\n\taddress public lpTokenAddr;\n\taddress public rdntAddr;\n\taddress public wethAddr;\n\n\tIUniswapV2Router02 public router;\n\tILiquidityZap public liquidityZap;\n\taddress public lockZap;\n\n\tfunction initialize(\n\t\taddress _rdntAddr,\n\t\taddress _wethAddr,\n\t\taddress _routerAddr,\n\t\tILiquidityZap _liquidityZap\n\t) external initializer {\n\t\t__Ownable_init();\n\n\t\trdntAddr = _rdntAddr;\n\t\twethAddr = _wethAddr;\n\n\t\trouter = IUniswapV2Router02(_routerAddr);\n\t\tliquidityZap = _liquidityZap;\n\t}\n\n\treceive() external payable {}\n\n\tfunction initializePool() public {\n\t\tlpTokenAddr = IUniswapV2Factory(router.factory()).createPair(rdntAddr, wethAddr);\n\n\t\tIERC20 rdnt = IERC20(rdntAddr);\n\t\trdnt.safeApprove(address(router), type(uint256).max);\n\t\trdnt.safeApprove(address(liquidityZap), type(uint256).max);\n\t\tIERC20(wethAddr).approve(address(liquidityZap), type(uint256).max);\n\t\tIERC20(wethAddr).approve(address(router), type(uint256).max);\n\n\t\trouter.addLiquidity(\n\t\t\taddress(rdnt),\n\t\t\twethAddr,\n\t\t\trdnt.balanceOf(address(this)),\n\t\t\tIERC20(wethAddr).balanceOf(address(this)),\n\t\t\t0,\n\t\t\t0,\n\t\t\taddress(this),\n\t\t\tblock.timestamp\n\t\t);\n\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tlp.safeTransfer(msg.sender, lp.balanceOf(address(this)));\n\n\t\tliquidityZap.initLiquidityZap(rdntAddr, wethAddr, lpTokenAddr, address(this));\n\t}\n\n\tfunction zapWETH(uint256 amount) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap only\");\n\t\tIWETH weth = IWETH(wethAddr);\n\t\tweth.transferFrom(msg.sender, address(liquidityZap), amount);\n\t\tliquidity = liquidityZap.addLiquidityWETHOnly(amount, payable(address(this)));\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\n\t\tliquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(rdntAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction getReserves() public view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\n\t\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\n\t\tweth = lpToken.token0() != address(rdntAddr) ? reserve0 : reserve1;\n\t\trdnt = lpToken.token0() == address(rdntAddr) ? reserve0 : reserve1;\n\n\t\tlpTokenSupply = lpToken.totalSupply();\n\t}\n\n\t// UniV2 / SLP LP Token Price\n\t// Alpha Homora Fair LP Pricing Method (flash loan resistant)\n\t// https://cmichel.io/pricing-lp-tokens/\n\t// https://blog.alphafinance.io/fair-lp-token-pricing/\n\t// https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol\n\tfunction getLpPrice(uint rdntPriceInEth) public view returns (uint256 priceInEth) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\n\t\t(uint reserve0, uint reserve1, ) = lpToken.getReserves();\n\t\tuint wethReserve = lpToken.token0() != address(rdntAddr) ? reserve0 : reserve1;\n\t\tuint rdntReserve = lpToken.token0() == address(rdntAddr) ? reserve0 : reserve1;\n\n\t\tuint lpSupply = lpToken.totalSupply();\n\n\t\tuint sqrtK = HomoraMath.sqrt(rdntReserve.mul(wethReserve)).fdiv(lpSupply); // in 2**112\n\n\t\t// rdnt in eth, decis 8\n\t\tuint px0 = rdntPriceInEth.mul(2 ** 112); // in 2**112\n\t\t// eth in eth, decis 8\n\t\tuint px1 = uint256(100000000).mul(2 ** 112); // in 2**112\n\n\t\t// fair token0 amt: sqrtK * sqrt(px1/px0)\n\t\t// fair token1 amt: sqrtK * sqrt(px0/px1)\n\t\t// fair lp price = 2 * sqrt(px0 * px1)\n\t\t// split into 2 sqrts multiplication to prevent uint overflow (note the 2**112)\n\t\tuint result = sqrtK.mul(2).mul(HomoraMath.sqrt(px0)).div(2 ** 56).mul(HomoraMath.sqrt(px1)).div(2 ** 56);\n\t\tpriceInEth = result.div(2 ** 112);\n\t}\n\n\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public returns (uint256 liquidity) {\n\t\trequire(msg.sender == lockZap, \"!lockZap only\");\n\t\tIWETH weth = IWETH(wethAddr);\n\t\tweth.transferFrom(msg.sender, address(this), _wethAmt);\n\t\tIERC20(rdntAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\t\tliquidity = liquidityZap.standardAdd(_rdntAmt, _wethAmt, address(this));\n\t\tIERC20 lp = IERC20(lpTokenAddr);\n\t\tliquidity = lp.balanceOf(address(this));\n\t\tlp.safeTransfer(msg.sender, liquidity);\n\t\trefundDust(rdntAddr, wethAddr, msg.sender);\n\t}\n\n\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\n\t\treturn liquidityZap.quoteFromToken(tokenAmount);\n\t}\n\n\tfunction getLiquidityZap() public view returns (address) {\n\t\treturn address(liquidityZap);\n\t}\n\n\tfunction setLiquidityZap(address _liquidityZap) external onlyOwner {\n\t\tliquidityZap = ILiquidityZap(_liquidityZap);\n\t}\n\n\tfunction setLockZap(address _lockZap) external onlyOwner {\n\t\tlockZap = _lockZap;\n\t}\n\n\tfunction getPrice() public view returns (uint256 priceInEth) {\n\t\t// TODO: look at reserves\n\t\tpriceInEth = 7500;\n\t}\n}\n"
    },
    "contracts/radiant/zap/LockZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"./helpers/DustRefunder.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\";\nimport \"../../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\";\n\nimport \"../../interfaces/uniswap/IUniswapV2Router02.sol\";\nimport \"../../interfaces/ILiquidityZap.sol\";\nimport \"../../interfaces/IMultiFeeDistribution.sol\";\nimport \"../../interfaces/ILendingPool.sol\";\nimport \"../../interfaces/IPoolHelper.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\nimport \"../../interfaces/IChainlinkAggregator.sol\";\nimport \"../../interfaces/IWETH.sol\";\n\n/// @title Borrow gate via stargate\n/// @author Radiant\n/// @dev All function calls are currently implemented without side effects\ncontract LockZap is Initializable, OwnableUpgradeable, PausableUpgradeable, DustRefunder {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\t/// @notice RAITO Divisor\n\tuint256 public constant RATIO_DIVISOR = 10000;\n\n\t/// @notice Acceptable ratio\n\tuint256 public constant ACCEPTABLE_RATIO = 9500;\n\n\t/// @notice Wrapped ETH\n\tIWETH public weth;\n\n\t/// @notice RDNT token address\n\taddress public rdntAddr;\n\n\t/// @notice Multi Fee distribution contract\n\tIMultiFeeDistribution public mfd;\n\n\t/// @notice Lending Pool contract\n\tILendingPool public lendingPool;\n\n\t/// @notice Pool helper contract\n\tIPoolHelper public poolHelper;\n\n\t/// @notice Price provider contract\n\tIPriceProvider public priceProvider;\n\n\t/// @notice ETH oracle contract\n\tIChainlinkAggregator public ethOracle;\n\n\t/// @notice Emitted when zap is done\n\tevent Zapped(\n\t\tbool _borrow,\n\t\tuint256 _ethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress indexed _from,\n\t\taddress indexed _onBehalf,\n\t\tuint256 _lockTypeIndex\n\t);\n\n\tuint256 public ethLPRatio; // paramter to set the ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\n\n\t/**\n\t * @notice Initializer\n\t * @param _poolHelper Pool helper address\n\t * @param _lendingPool Lending pool\n\t * @param _weth weth address\n\t * @param _rdntAddr RDNT token address\n\t */\n\tfunction initialize(\n\t\tIPoolHelper _poolHelper,\n\t\tILendingPool _lendingPool,\n\t\tIWETH _weth,\n\t\taddress _rdntAddr,\n\t\tuint256 _ethLPRatio\n\t) external initializer {\n\t\trequire(_ethLPRatio > 0 && _ethLPRatio < 10_000, \"Invalid ethLPRatio\");\n\t\t__Ownable_init();\n\t\t__Pausable_init();\n\n\t\tlendingPool = _lendingPool;\n\t\tpoolHelper = _poolHelper;\n\t\tweth = _weth;\n\t\trdntAddr = _rdntAddr;\n\t\tethLPRatio = _ethLPRatio;\n\t}\n\n\treceive() external payable {}\n\n\t/**\n\t * @notice Set Price Provider.\n\t * @param _provider Price provider contract address.\n\t */\n\tfunction setPriceProvider(address _provider) external onlyOwner {\n\t\tpriceProvider = IPriceProvider(_provider);\n\t\tethOracle = IChainlinkAggregator(priceProvider.baseTokenPriceInUsdProxyAggregator());\n\t}\n\n\t/**\n\t * @notice Set Multi fee distribution contract.\n\t * @param _mfdAddr New contract address.\n\t */\n\tfunction setMfd(address _mfdAddr) external onlyOwner {\n\t\tmfd = IMultiFeeDistribution(_mfdAddr);\n\t}\n\n\t/**\n\t * @notice Set Pool Helper contract\n\t * @param _poolHelper New PoolHelper contract address.\n\t */\n\tfunction setPoolHelper(address _poolHelper) external onlyOwner {\n\t\tpoolHelper = IPoolHelper(_poolHelper);\n\t}\n\n\t/**\n\t * @notice Returns pool helper address\n\t */\n\tfunction getPoolHelper() public view returns (address) {\n\t\treturn address(poolHelper);\n\t}\n\n\t/**\n\t * @notice Get Variable debt token address\n\t * @param _asset underlying.\n\t */\n\tfunction getVDebtToken(address _asset) public view returns (address) {\n\t\tDataTypes.ReserveData memory reserveData = lendingPool.getReserveData(_asset);\n\t\treturn reserveData.variableDebtTokenAddress;\n\t}\n\n\t/**\n\t * @notice Get quote from the pool\n\t * @param _tokenAmount amount of tokens.\n\t */\n\tfunction quoteFromToken(uint256 _tokenAmount) public view returns (uint256 optimalWETHAmount) {\n\t\toptimalWETHAmount = poolHelper.quoteFromToken(_tokenAmount).mul(100).div(95);\n\t}\n\n\t/**\n\t * @notice Zap tokens to stake LP\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _lockTypeIndex lock length index.\n\t */\n\tfunction zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\tuint256 _lockTypeIndex\n\t) public payable returns (uint256 liquidity) {\n\t\treturn _zap(_borrow, _wethAmt, _rdntAmt, msg.sender, msg.sender, _lockTypeIndex, msg.sender);\n\t}\n\n\t/**\n\t * @notice Zap tokens to stake LP\n\t * @dev It will use default lock index\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _onBehalf user address to be zapped.\n\t */\n\tfunction zapOnBehalf(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _onBehalf\n\t) public payable returns (uint256 liquidity) {\n\t\tuint256 duration = mfd.defaultLockIndex(_onBehalf);\n\t\treturn _zap(_borrow, _wethAmt, _rdntAmt, msg.sender, _onBehalf, duration, _onBehalf);\n\t}\n\n\t/**\n\t * @notice Zap tokens from vesting\n\t * @param _borrow option to borrow ETH\n\t * @param _lockTypeIndex lock length index.\n\t */\n\tfunction zapFromVesting(bool _borrow, uint256 _lockTypeIndex) public payable returns (uint256 liquidity) {\n\t\tuint256 rdntAmt = mfd.zapVestingToLp(msg.sender);\n\t\tuint256 wethAmt = quoteFromToken(rdntAmt);\n\t\treturn _zap(_borrow, wethAmt, rdntAmt, address(this), msg.sender, _lockTypeIndex, msg.sender);\n\t}\n\n\t/**\n\t * @notice Borrow ETH\n\t * @param _amount of ETH\n\t */\n\tfunction _executeBorrow(uint256 _amount) internal {\n\t\t(, , uint256 availableBorrowsETH, , , ) = lendingPool.getUserAccountData(msg.sender);\n\t\tuint256 amountInETH = _amount.mul(10 ** 8).div(10 ** ERC20(address(weth)).decimals());\n\t\trequire(availableBorrowsETH > amountInETH, \"Not enough availableBorrowsETH\");\n\n\t\tuint16 referralCode = 0;\n\t\tlendingPool.borrow(address(weth), _amount, 2, referralCode, msg.sender);\n\t}\n\n\t/**\n\t * @notice Calculates slippage ratio from weth to LP\n\t * @param _ethAmt ETH amount\n\t * @param _liquidity LP token amount\n\t */\n\tfunction _calcSlippage(uint256 _ethAmt, uint256 _liquidity) internal returns (uint256 ratio) {\n\t\tpriceProvider.update();\n\t\tuint256 priceWETHamount = _ethAmt.mul(uint256(ethOracle.latestAnswer())).div(1E18);\n\t\tuint256 priceLPamount = _liquidity * priceProvider.getLpTokenPriceUsd();\n\t\tratio = priceLPamount.mul(RATIO_DIVISOR).div(priceWETHamount);\n\t\tratio = ratio.div(1E18);\n\t}\n\n\t/**\n\t * @notice Zap into LP\n\t * @param _borrow option to borrow ETH\n\t * @param _wethAmt amount of weth.\n\t * @param _rdntAmt amount of RDNT.\n\t * @param _from src address of RDNT\n\t * @param _onBehalf of the user.\n\t * @param _lockTypeIndex lock length index.\n\t * @param _refundAddress dust is refunded to this address.\n\t */\n\tfunction _zap(\n\t\tbool _borrow,\n\t\tuint256 _wethAmt,\n\t\tuint256 _rdntAmt,\n\t\taddress _from,\n\t\taddress _onBehalf,\n\t\tuint256 _lockTypeIndex,\n\t\taddress _refundAddress\n\t) internal returns (uint256 liquidity) {\n\t\trequire(_wethAmt != 0 || msg.value != 0, \"ETH required\");\n\t\tif (msg.value != 0) {\n\t\t\trequire(!_borrow, \"invalid zap ETH source\");\n\t\t\t_wethAmt = msg.value;\n\t\t\tweth.deposit{value: _wethAmt}();\n\t\t} else {\n\t\t\tif (_borrow) {\n\t\t\t\t_executeBorrow(_wethAmt);\n\t\t\t} else {\n\t\t\t\tweth.transferFrom(msg.sender, address(this), _wethAmt);\n\t\t\t}\n\t\t}\n\n\t\tweth.approve(address(poolHelper), _wethAmt);\n\t\t//case where rdnt is matched with borrowed ETH\n\t\tif (_rdntAmt != 0) {\n\t\t\trequire(_wethAmt >= poolHelper.quoteFromToken(_rdntAmt), \"ETH sent is not enough\");\n\n\t\t\t// _from == this when zapping from vesting\n\t\t\tif (_from != address(this)) {\n\t\t\t\tIERC20(rdntAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\n\t\t\t}\n\n\t\t\tIERC20(rdntAddr).safeApprove(address(poolHelper), _rdntAmt);\n\t\t\tliquidity = poolHelper.zapTokens(_wethAmt, _rdntAmt);\n\t\t\tif (address(priceProvider) != address(0)) {\n\t\t\t\tuint256 slippage = _calcSlippage(_wethAmt.mul(RATIO_DIVISOR).div(ethLPRatio), liquidity);\n\t\t\t\trequire(slippage >= ACCEPTABLE_RATIO, \"too much slippage\");\n\t\t\t}\n\t\t} else {\n\t\t\tliquidity = poolHelper.zapWETH(_wethAmt);\n\t\t\tif (address(priceProvider) != address(0)) {\n\t\t\t\tuint256 slippage = _calcSlippage(_wethAmt, liquidity);\n\t\t\t\trequire(slippage >= ACCEPTABLE_RATIO, \"too much slippage\");\n\t\t\t}\n\t\t}\n\n\t\tIERC20(poolHelper.lpTokenAddr()).safeApprove(address(mfd), liquidity);\n\t\tmfd.stake(liquidity, _onBehalf, _lockTypeIndex);\n\t\temit Zapped(_borrow, _wethAmt, _rdntAmt, _from, _onBehalf, _lockTypeIndex);\n\n\t\trefundDust(rdntAddr, address(weth), _refundAddress);\n\t}\n\n\tfunction pause() external onlyOwner {\n\t\t_pause();\n\t}\n\n\tfunction unpause() external onlyOwner {\n\t\t_unpause();\n\t}\n}\n"
    },
    "contracts/test/MockMFD.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/staking/MultiFeeDistribution.sol\";\n\ncontract MockMFD is MultiFeeDistribution {\n\tfunction relock() external override {\n\t\treturn;\n\t}\n\n\tfunction setRelock(bool _status) external override {\n\t\tautoRelockDisabled[msg.sender] = true;\n\t}\n}\n"
    },
    "contracts/test/MockNewChefIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/staking/ChefIncentivesController.sol\";\n\ncontract MockNewChefIncentivesController is ChefIncentivesController {\n\tfunction mockNewFunction() external pure returns (bool) {\n\t\treturn true;\n\t}\n}\n"
    },
    "contracts/test/MockNewMiddleFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/staking/MiddleFeeDistribution.sol\";\n\ncontract MockNewMiddleFeeDistribution is MiddleFeeDistribution {\n\tfunction mockNewFunction() external pure returns (bool) {\n\t\treturn true;\n\t}\n}\n"
    },
    "contracts/test/MockNewMultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/staking/MultiFeeDistribution.sol\";\n\ncontract MockNewMultiFeeDistribution is MultiFeeDistribution {\n\tfunction mockNewFunction() external pure returns (bool) {\n\t\treturn true;\n\t}\n}\n"
    },
    "contracts/test/MockOnwardIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/staking/ChefIncentivesController.sol\";\nimport \"../interfaces/IOnwardIncentivesController.sol\";\n\ncontract MockOnwardIncentivesController is IOnwardIncentivesController {\n\tfunction handleAction(address _token, address _user, uint256 _balance, uint256 _totalSupply) external override {}\n}\n"
    },
    "contracts/test/TestBalancerPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/zap/helpers/BalancerPoolHelper.sol\";\n\ncontract TestBalancerPoolHelper is BalancerPoolHelper {\n\t// outToken is RDNT\n\tfunction sell(uint256 _amount) public returns (uint256 amountOut) {\n\t\treturn\n\t\t\tswap(\n\t\t\t\t_amount,\n\t\t\t\toutTokenAddr,\n\t\t\t\tinTokenAddr,\n\t\t\t\tlpTokenAddr\n\t\t\t);\n\t}\n}\n"
    },
    "contracts/test/TestLockZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"../radiant/zap/LockZap.sol\";\nimport \"../interfaces/IPoolHelper.sol\";\n\ncontract TestnetLockZap is LockZap {\n\tfunction sell(uint256 _amount) public returns (uint256 ethOut) {\n\t\tIERC20(rdntAddr).transferFrom(msg.sender, address(poolHelper), _amount);\n\t\treturn ITestPoolHelper(address(poolHelper)).sell(_amount);\n\t}\n}\n"
    },
    "contracts/test/TestUniswapPoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../radiant/zap/helpers/UniswapPoolHelper.sol\";\n\ncontract TestUniswapPoolHelper is UniswapPoolHelper {\n\tusing SafeERC20 for IERC20;\n\n\tfunction swap(uint256 _amount, address, address, address) public returns (uint256 amountOut) {\n\t\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\n\t\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\n\n\t\t(address token0, address token1) = UniswapV2Library.sortTokens(address(wethAddr), rdntAddr);\n\n\t\tuint256 reserveWeth = token0 == address(wethAddr) ? reserve0 : reserve1;\n\t\tuint256 reserveTokens = token0 == address(wethAddr) ? reserve1 : reserve0;\n\n\t\tuint256 outETH = UniswapV2Library.getAmountOut(_amount, reserveTokens, reserveWeth);\n\n\t\tIERC20(rdntAddr).safeTransfer(lpTokenAddr, _amount);\n\n\t\tIUniswapV2Pair(lpTokenAddr).swap(\n\t\t\taddress(wethAddr) == token0 ? outETH : 0,\n\t\t\taddress(wethAddr) == token1 ? outETH : 0,\n\t\t\taddress(this),\n\t\t\t\"\"\n\t\t);\n\n\t\tamountOut = IERC20(address(wethAddr)).balanceOf(address(this));\n\t}\n\n\tfunction sell(uint256 _amount) public returns (uint256 amountOut) {\n\t\treturn\n\t\t\tswap(\n\t\t\t\t_amount,\n\t\t\t\t0x0000000000000000000000000000000000000000,\n\t\t\t\t0x0000000000000000000000000000000000000000,\n\t\t\t\t0x0000000000000000000000000000000000000000\n\t\t\t);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}