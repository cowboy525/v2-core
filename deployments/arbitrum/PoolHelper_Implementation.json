{
  "address": "0x0cc8BE53dF3A5d2f49379F6D8F1356B765C908CA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BPOW_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INIT_POOL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_IN_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OUT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BALANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rdntPriceInEth",
          "type": "uint256"
        }
      ],
      "name": "getLpPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rdnt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IWeightedPoolFactory",
          "name": "_poolFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "initializePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockZap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactory",
      "outputs": [
        {
          "internalType": "contract IWeightedPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalWETHAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        }
      ],
      "name": "setLockZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wethAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rdntAmt",
          "type": "uint256"
        }
      ],
      "name": "zapTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zapWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x453d76c018bbb6f60616dc1beb1a83c241b3fffb570e1d5e60f64498fd2cb8d1",
  "receipt": {
    "to": null,
    "from": "0x7759124915160E94C77EcE5B96E8a7fCec44Aa19",
    "contractAddress": "0x0cc8BE53dF3A5d2f49379F6D8F1356B765C908CA",
    "transactionIndex": 1,
    "gasUsed": "13415774",
    "logsBloom": "0x
    "blockHash": "0x6b08e32b265a9a80568aa792568c0cc5d5c5c7bfc1342fc52cf72045c935e047",
    "transactionHash": "0x453d76c018bbb6f60616dc1beb1a83c241b3fffb570e1d5e60f64498fd2cb8d1",
    "logs": [],
    "blockNumber": 71270375,
    "cumulativeGasUsed": "13415774",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4f873bff0d9e9bbcd6fdad61fd32e1ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPOW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_POOL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_IN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rdntPriceInEth\",\"type\":\"uint256\"}],\"name\":\"getLpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rdnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IWeightedPoolFactory\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IWeightedPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalWETHAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"}],\"name\":\"setLockZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rdntAmt\",\"type\":\"uint256\"}],\"name\":\"zapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Balance Pool Helper Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/zap/helpers/BalancerPoolHelper.sol\":\"BalancerPoolHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/dependencies/math/BConst.sol\":{\"content\":\"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n\\ncontract BConst {\\n\\tuint public constant BONE = 10 ** 18;\\n\\n\\tuint public constant MIN_BOUND_TOKENS = 2;\\n\\tuint public constant MAX_BOUND_TOKENS = 8;\\n\\n\\tuint public constant MIN_FEE = BONE / 10 ** 6;\\n\\tuint public constant MAX_FEE = BONE / 10;\\n\\tuint public constant EXIT_FEE = 0;\\n\\n\\tuint public constant MIN_WEIGHT = BONE;\\n\\tuint public constant MAX_WEIGHT = BONE * 50;\\n\\tuint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n\\tuint public constant MIN_BALANCE = BONE / 10 ** 12;\\n\\n\\tuint public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n\\tuint public constant MIN_BPOW_BASE = 1 wei;\\n\\tuint public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n\\tuint public constant BPOW_PRECISION = BONE / 10 ** 10;\\n\\n\\tuint public constant MAX_IN_RATIO = BONE / 2;\\n\\tuint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x4222f41b593d420914e1d99d5f19ff2b3276865c720eccf329fa4f31d9ec2923\"},\"contracts/dependencies/math/BNum.sol\":{\"content\":\"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n\\tfunction btoi(uint a) internal pure returns (uint) {\\n\\t\\treturn a / BONE;\\n\\t}\\n\\n\\tfunction bfloor(uint a) internal pure returns (uint) {\\n\\t\\treturn btoi(a) * BONE;\\n\\t}\\n\\n\\tfunction badd(uint a, uint b) internal pure returns (uint) {\\n\\t\\tuint c = a + b;\\n\\t\\trequire(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction bsub(uint a, uint b) internal pure returns (uint) {\\n\\t\\t(uint c, bool flag) = bsubSign(a, b);\\n\\t\\trequire(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n\\t\\tif (a >= b) {\\n\\t\\t\\treturn (a - b, false);\\n\\t\\t} else {\\n\\t\\t\\treturn (b - a, true);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction bmul(uint a, uint b) internal pure returns (uint) {\\n\\t\\tuint c0 = a * b;\\n\\t\\trequire(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\t\\tuint c1 = c0 + (BONE / 2);\\n\\t\\trequire(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n\\t\\tuint c2 = c1 / BONE;\\n\\t\\treturn c2;\\n\\t}\\n\\n\\tfunction bdiv(uint a, uint b) internal pure returns (uint) {\\n\\t\\trequire(b != 0, \\\"ERR_DIV_ZERO\\\");\\n\\t\\tuint c0 = a * BONE;\\n\\t\\trequire(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\t\\tuint c1 = c0 + (b / 2);\\n\\t\\trequire(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\t\\tuint c2 = c1 / b;\\n\\t\\treturn c2;\\n\\t}\\n\\n\\t// DSMath.wpow\\n\\tfunction bpowi(uint a, uint n) internal pure returns (uint) {\\n\\t\\tuint z = n % 2 != 0 ? a : BONE;\\n\\n\\t\\tfor (n /= 2; n != 0; n /= 2) {\\n\\t\\t\\ta = bmul(a, a);\\n\\n\\t\\t\\tif (n % 2 != 0) {\\n\\t\\t\\t\\tz = bmul(z, a);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn z;\\n\\t}\\n\\n\\t// Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n\\t// Use `bpowi` for `b^e` and `bpowK` for k iterations\\n\\t// of approximation of b^0.w\\n\\tfunction bpow(uint base, uint exp) internal pure returns (uint) {\\n\\t\\trequire(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n\\t\\trequire(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n\\t\\tuint whole = bfloor(exp);\\n\\t\\tuint remain = bsub(exp, whole);\\n\\n\\t\\tuint wholePow = bpowi(base, btoi(whole));\\n\\n\\t\\tif (remain == 0) {\\n\\t\\t\\treturn wholePow;\\n\\t\\t}\\n\\n\\t\\tuint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n\\t\\treturn bmul(wholePow, partialResult);\\n\\t}\\n\\n\\tfunction bpowApprox(uint base, uint exp, uint precision) internal pure returns (uint) {\\n\\t\\t// term 0:\\n\\t\\tuint a = exp;\\n\\t\\t(uint x, bool xneg) = bsubSign(base, BONE);\\n\\t\\tuint term = BONE;\\n\\t\\tuint sum = term;\\n\\t\\tbool negative = false;\\n\\n\\t\\t// term(k) = numer / denom\\n\\t\\t//         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n\\t\\t// each iteration, multiply previous term by (a-(k-1)) * x / k\\n\\t\\t// continue until term is less than precision\\n\\t\\tfor (uint i = 1; term >= precision; i++) {\\n\\t\\t\\tuint bigK = i * BONE;\\n\\t\\t\\t(uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n\\t\\t\\tterm = bmul(term, bmul(c, x));\\n\\t\\t\\tterm = bdiv(term, bigK);\\n\\t\\t\\tif (term == 0) break;\\n\\n\\t\\t\\tif (xneg) negative = !negative;\\n\\t\\t\\tif (cneg) negative = !negative;\\n\\t\\t\\tif (negative) {\\n\\t\\t\\t\\tsum = bsub(sum, term);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsum = badd(sum, term);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn sum;\\n\\t}\\n}\\n\",\"keccak256\":\"0x7dd6c1f0e57b04acd6bc6f090b9e9a87b057a1c365f0a458e4b5d15abd2e2a41\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n\\tfunction __Context_init() internal onlyInitializing {}\\n\\n\\tfunction __Context_init_unchained() internal onlyInitializing {}\\n\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis;\\n\\t\\treturn msg.data;\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x320bed7499f85b69a3406a7500006a1798f9b3dcf1807af3669bbb33eb3c4099\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private initialized;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\trequire(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tinitialized = true;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns true if and only if the function is running in the constructor\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\tmodifier onlyInitializing() {\\n\\t\\trequire(initializing, \\\"Initializable: contract is not initializing\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xd7107a791a9598ec939c22a977e324f3521367a7a447f2875ab48829317e4a07\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction __Ownable_init() internal onlyInitializing {\\n\\t\\t__Ownable_init_unchained();\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained() internal onlyInitializing {\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf4467e9c77539c1294e57ca516fc329ecad0489f2868730c54c6bcaeea5f588e\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\\n\",\"keccak256\":\"0xb83ef87aeba0312ab242ba35657ef0283aaf3070df5919c280879bc173638aba\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILiquidityZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface ILiquidityZap {\\n\\tfunction _WETH() external view returns (address);\\n\\n\\tfunction _token() external view returns (address);\\n\\n\\tfunction _tokenWETHPair() external view returns (address);\\n\\n\\tfunction addLiquidityETHOnly(address to) external returns (uint256 liquidity);\\n\\n\\tfunction addLiquidityTokensOnly(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external returns (uint256 liquidity);\\n\\n\\tfunction getLPTokenPerEthUnit(uint256 ethAmt) external view returns (uint256 liquidity);\\n\\n\\tfunction initLiquidityZap(\\n\\t\\taddress token,\\n\\t\\taddress WETH,\\n\\t\\taddress tokenWethPair,\\n\\t\\taddress helper\\n\\t) external;\\n\\n\\tfunction quote(uint256 wethAmount) external view returns (uint256 optimalTokenAmount);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction removeAllLiquidityETHOnly(address to) external returns (uint256 amount);\\n\\n\\tfunction removeAllLiquidityTokenOnly(address to) external returns (uint256 amount);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\taddress to\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHOnly(address to, uint256 liquidity) external returns (uint256 amountOut);\\n\\n\\tfunction removeLiquidityTokenOnly(address to, uint256 liquidity) external returns (uint256 amount);\\n\\n\\tfunction standardAdd(\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 _wethAmt,\\n\\t\\taddress to\\n\\t) external payable returns (uint256 liquidity);\\n\\n\\tfunction unzap() external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction unzapToETH() external returns (uint256 amount);\\n\\n\\tfunction unzapToTokens() external returns (uint256 amount);\\n\\n\\tfunction zapETH(address payable _onBehalf) external payable returns (uint256 liquidity);\\n\\n\\tfunction zapTokens(uint256 amount) external returns (uint256 liquidity);\\n\\n\\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x8b690c45840956e5d0b6d06d32401e8f5b8738b870053b670c3c2329edaad427\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdfddfa084983a65236cee7e6f939dfbf27e715f46e60b9e9dbccd5cd4e48ad10\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolHelper {\\n\\tfunction lpTokenAddr() external view returns (address);\\n\\n\\tfunction zapWETH(uint256 amount) external returns (uint256);\\n\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) external returns (uint256);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction getLpPrice(uint rdntPriceInEth) external view returns (uint256 priceInEth);\\n\\n\\tfunction getReserves() external view returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply);\\n\\n\\tfunction getPrice() external view returns (uint256 priceInEth);\\n}\\n\\ninterface IBalancerPoolHelper is IPoolHelper {\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\\n}\\n\\ninterface IUniswapPoolHelper is IPoolHelper {\\n\\tfunction initializePool() external;\\n}\\n\\ninterface ITestPoolHelper is IPoolHelper {\\n\\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x8c2f3f980629e9557fa914334031fe360f48d9033c20715b5df8e125b960421b\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf8ef095eddb7c4161021d27c10ca936cc2fe98685a0a7067bca1e10d89d82ba1\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IWeightedPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBasePool is IERC20 {\\n\\tfunction getSwapFeePercentage() external view returns (uint256);\\n\\n\\tfunction setSwapFeePercentage(uint256 swapFeePercentage) external;\\n\\n\\tfunction setAssetManagerPoolConfig(IERC20 token, IAssetManager.PoolConfig memory poolConfig) external;\\n\\n\\tfunction setPaused(bool paused) external;\\n\\n\\tfunction getVault() external view returns (IVault);\\n\\n\\tfunction getPoolId() external view returns (bytes32);\\n\\n\\tfunction getOwner() external view returns (address);\\n}\\n\\ninterface IWeightedPoolFactory {\\n\\tfunction create(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tIERC20[] memory tokens,\\n\\t\\tuint256[] memory weights,\\n\\t\\taddress[] memory rateProviders,\\n\\t\\tuint256 swapFeePercentage,\\n\\t\\taddress owner\\n\\t) external returns (address);\\n}\\n\\ninterface IWeightedPool is IBasePool {\\n\\tfunction getSwapEnabled() external view returns (bool);\\n\\n\\tfunction getNormalizedWeights() external view returns (uint256[] memory);\\n\\n\\tfunction getGradualWeightUpdateParams()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 startTime, uint256 endTime, uint256[] memory endWeights);\\n\\n\\tfunction setSwapEnabled(bool swapEnabled) external;\\n\\n\\tfunction updateWeightsGradually(uint256 startTime, uint256 endTime, uint256[] memory endWeights) external;\\n\\n\\tfunction withdrawCollectedManagementFees(address recipient) external;\\n\\n\\tenum JoinKind {\\n\\t\\tINIT,\\n\\t\\tEXACT_TOKENS_IN_FOR_BPT_OUT,\\n\\t\\tTOKEN_IN_FOR_EXACT_BPT_OUT\\n\\t}\\n\\tenum ExitKind {\\n\\t\\tEXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n\\t\\tEXACT_BPT_IN_FOR_TOKENS_OUT,\\n\\t\\tBPT_IN_FOR_EXACT_TOKENS_OUT\\n\\t}\\n}\\n\\ninterface IAssetManager {\\n\\tstruct PoolConfig {\\n\\t\\tuint64 targetPercentage;\\n\\t\\tuint64 criticalPercentage;\\n\\t\\tuint64 feePercentage;\\n\\t}\\n\\n\\tfunction setPoolConfig(bytes32 poolId, PoolConfig calldata config) external;\\n}\\n\\ninterface IAsset {}\\n\\ninterface IVault {\\n\\tfunction hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n\\tfunction setRelayerApproval(address sender, address relayer, bool approved) external;\\n\\n\\tevent RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n\\tfunction getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n\\tfunction manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n\\tstruct UserBalanceOp {\\n\\t\\tUserBalanceOpKind kind;\\n\\t\\tIAsset asset;\\n\\t\\tuint256 amount;\\n\\t\\taddress sender;\\n\\t\\taddress payable recipient;\\n\\t}\\n\\n\\tenum UserBalanceOpKind {\\n\\t\\tDEPOSIT_INTERNAL,\\n\\t\\tWITHDRAW_INTERNAL,\\n\\t\\tTRANSFER_INTERNAL,\\n\\t\\tTRANSFER_EXTERNAL\\n\\t}\\n\\tevent InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\tevent ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n\\tenum PoolSpecialization {\\n\\t\\tGENERAL,\\n\\t\\tMINIMAL_SWAP_INFO,\\n\\t\\tTWO_TOKEN\\n\\t}\\n\\n\\tfunction registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n\\tevent PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n\\tfunction getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n\\tfunction registerTokens(bytes32 poolId, IERC20[] memory tokens, address[] memory assetManagers) external;\\n\\n\\tevent TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n\\tfunction deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n\\tevent TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n\\tfunction getPoolTokenInfo(\\n\\t\\tbytes32 poolId,\\n\\t\\tIERC20 token\\n\\t) external view returns (uint256 cash, uint256 managed, uint256 lastChangeBlock, address assetManager);\\n\\n\\tfunction getPoolTokens(\\n\\t\\tbytes32 poolId\\n\\t) external view returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n\\tfunction joinPool(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tJoinPoolRequest memory request\\n\\t) external payable;\\n\\n\\tstruct JoinPoolRequest {\\n\\t\\tIAsset[] assets;\\n\\t\\tuint256[] maxAmountsIn;\\n\\t\\tbytes userData;\\n\\t\\tbool fromInternalBalance;\\n\\t}\\n\\n\\tfunction exitPool(\\n\\t\\tbytes32 poolId,\\n\\t\\taddress sender,\\n\\t\\taddress payable recipient,\\n\\t\\tExitPoolRequest memory request\\n\\t) external;\\n\\n\\tstruct ExitPoolRequest {\\n\\t\\tIAsset[] assets;\\n\\t\\tuint256[] minAmountsOut;\\n\\t\\tbytes userData;\\n\\t\\tbool toInternalBalance;\\n\\t}\\n\\n\\tevent PoolBalanceChanged(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\taddress indexed liquidityProvider,\\n\\t\\tIERC20[] tokens,\\n\\t\\tint256[] deltas,\\n\\t\\tuint256[] protocolFeeAmounts\\n\\t);\\n\\n\\tenum PoolBalanceChangeKind {\\n\\t\\tJOIN,\\n\\t\\tEXIT\\n\\t}\\n\\n\\tenum SwapKind {\\n\\t\\tGIVEN_IN,\\n\\t\\tGIVEN_OUT\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\tSingleSwap memory singleSwap,\\n\\t\\tFundManagement memory funds,\\n\\t\\tuint256 limit,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256);\\n\\n\\tstruct SingleSwap {\\n\\t\\tbytes32 poolId;\\n\\t\\tSwapKind kind;\\n\\t\\tIAsset assetIn;\\n\\t\\tIAsset assetOut;\\n\\t\\tuint256 amount;\\n\\t\\tbytes userData;\\n\\t}\\n\\n\\tfunction batchSwap(\\n\\t\\tSwapKind kind,\\n\\t\\tBatchSwapStep[] memory swaps,\\n\\t\\tIAsset[] memory assets,\\n\\t\\tFundManagement memory funds,\\n\\t\\tint256[] memory limits,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (int256[] memory);\\n\\n\\tstruct BatchSwapStep {\\n\\t\\tbytes32 poolId;\\n\\t\\tuint256 assetInIndex;\\n\\t\\tuint256 assetOutIndex;\\n\\t\\tuint256 amount;\\n\\t\\tbytes userData;\\n\\t}\\n\\n\\tevent Swap(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\tIERC20 indexed tokenIn,\\n\\t\\tIERC20 indexed tokenOut,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut\\n\\t);\\n\\tstruct FundManagement {\\n\\t\\taddress sender;\\n\\t\\tbool fromInternalBalance;\\n\\t\\taddress payable recipient;\\n\\t\\tbool toInternalBalance;\\n\\t}\\n\\n\\tfunction queryBatchSwap(\\n\\t\\tSwapKind kind,\\n\\t\\tBatchSwapStep[] memory swaps,\\n\\t\\tIAsset[] memory assets,\\n\\t\\tFundManagement memory funds\\n\\t) external returns (int256[] memory assetDeltas);\\n\\n\\tfunction managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n\\tstruct PoolBalanceOp {\\n\\t\\tPoolBalanceOpKind kind;\\n\\t\\tbytes32 poolId;\\n\\t\\tIERC20 token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tenum PoolBalanceOpKind {\\n\\t\\tWITHDRAW,\\n\\t\\tDEPOSIT,\\n\\t\\tUPDATE\\n\\t}\\n\\tevent PoolBalanceManaged(\\n\\t\\tbytes32 indexed poolId,\\n\\t\\taddress indexed assetManager,\\n\\t\\tIERC20 indexed token,\\n\\t\\tint256 cashDelta,\\n\\t\\tint256 managedDelta\\n\\t);\\n\\n\\tfunction setPaused(bool paused) external;\\n}\\n\",\"keccak256\":\"0xb1779fd958ac0135e6cb0804ff95bdaaae7dc156f4bb631adf2e986dbd07f49d\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/radiant/zap/helpers/BalancerPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./DustRefunder.sol\\\";\\nimport \\\"../../../dependencies/math/BNum.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../../../interfaces/ILiquidityZap.sol\\\";\\nimport \\\"../../../interfaces/IPoolHelper.sol\\\";\\nimport \\\"../../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../../../interfaces/IWETH.sol\\\";\\nimport \\\"../../../interfaces/ILendingPool.sol\\\";\\nimport \\\"../../../interfaces/balancer/IWeightedPoolFactory.sol\\\";\\n\\n/// @title Balance Pool Helper Contract\\n/// @author Radiant\\ncontract BalancerPoolHelper is IBalancerPoolHelper, Initializable, OwnableUpgradeable, BNum, DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\taddress public inTokenAddr;\\n\\taddress public outTokenAddr;\\n\\taddress public wethAddr;\\n\\taddress public override lpTokenAddr;\\n\\taddress public vaultAddr;\\n\\tbytes32 public poolId;\\n\\taddress public lockZap;\\n\\tIWeightedPoolFactory public poolFactory;\\n\\n\\tfunction initialize(\\n\\t\\taddress _inTokenAddr,\\n\\t\\taddress _outTokenAddr,\\n\\t\\taddress _wethAddr,\\n\\t\\taddress _vault,\\n\\t\\tIWeightedPoolFactory _poolFactory\\n\\t) external initializer {\\n\\t\\t__Ownable_init();\\n\\t\\tinTokenAddr = _inTokenAddr;\\n\\t\\toutTokenAddr = _outTokenAddr;\\n\\t\\twethAddr = _wethAddr;\\n\\t\\tvaultAddr = _vault;\\n\\t\\tpoolFactory = _poolFactory;\\n\\t}\\n\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) public {\\n\\t\\trequire(lpTokenAddr == address(0), \\\"Already initialized\\\");\\n\\n\\t\\t(address token0, address token1) = sortTokens(inTokenAddr, outTokenAddr);\\n\\n\\t\\tIERC20[] memory tokens = new IERC20[](2);\\n\\t\\ttokens[0] = IERC20(token0);\\n\\t\\ttokens[1] = IERC20(token1);\\n\\n\\t\\taddress[] memory rateProviders = new address[](2);\\n\\t\\trateProviders[0] = 0x0000000000000000000000000000000000000000;\\n\\t\\trateProviders[1] = 0x0000000000000000000000000000000000000000;\\n\\n\\t\\tuint256 swapFeePercentage = 1000000000000000;\\n\\n\\t\\tuint256[] memory weights = new uint256[](2);\\n\\n\\t\\tif (token0 == outTokenAddr) {\\n\\t\\t\\tweights[0] = 800000000000000000;\\n\\t\\t\\tweights[1] = 200000000000000000;\\n\\t\\t} else {\\n\\t\\t\\tweights[0] = 200000000000000000;\\n\\t\\t\\tweights[1] = 800000000000000000;\\n\\t\\t}\\n\\n\\t\\tlpTokenAddr = poolFactory.create(\\n\\t\\t\\t_tokenName,\\n\\t\\t\\t_tokenSymbol,\\n\\t\\t\\ttokens,\\n\\t\\t\\tweights,\\n\\t\\t\\trateProviders,\\n\\t\\t\\tswapFeePercentage,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\tpoolId = IWeightedPool(lpTokenAddr).getPoolId();\\n\\n\\t\\tIERC20 outToken = IERC20(outTokenAddr);\\n\\t\\tIERC20 inToken = IERC20(inTokenAddr);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tIERC20 weth = IERC20(wethAddr);\\n\\n\\t\\toutToken.safeApprove(vaultAddr, type(uint256).max);\\n\\t\\tinToken.safeApprove(vaultAddr, type(uint256).max);\\n\\t\\tweth.approve(vaultAddr, type(uint256).max);\\n\\n\\t\\tIAsset[] memory assets = new IAsset[](2);\\n\\t\\tassets[0] = IAsset(token0);\\n\\t\\tassets[1] = IAsset(token1);\\n\\n\\t\\tuint256 inTokenAmt = inToken.balanceOf(address(this));\\n\\t\\tuint256 outTokenAmt = outToken.balanceOf(address(this));\\n\\n\\t\\tuint256[] memory maxAmountsIn = new uint256[](2);\\n\\t\\tif (token0 == inTokenAddr) {\\n\\t\\t\\tmaxAmountsIn[0] = inTokenAmt;\\n\\t\\t\\tmaxAmountsIn[1] = outTokenAmt;\\n\\t\\t} else {\\n\\t\\t\\tmaxAmountsIn[0] = outTokenAmt;\\n\\t\\t\\tmaxAmountsIn[1] = inTokenAmt;\\n\\t\\t}\\n\\n\\t\\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(\\n\\t\\t\\tassets,\\n\\t\\t\\tmaxAmountsIn,\\n\\t\\t\\tabi.encode(0, maxAmountsIn),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t\\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\\n\\t\\tuint256 liquidity = lp.balanceOf(address(this));\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t}\\n\\n\\t/// @dev Return fair reserve amounts given spot reserves, weights, and fair prices.\\n\\t/// @param resA Reserve of the first asset\\n\\t/// @param resB Reserve of the second asset\\n\\t/// @param wA Weight of the first asset\\n\\t/// @param wB Weight of the second asset\\n\\t/// @param pxA Fair price of the first asset\\n\\t/// @param pxB Fair price of the second asset\\n\\tfunction computeFairReserves(\\n\\t\\tuint256 resA,\\n\\t\\tuint256 resB,\\n\\t\\tuint256 wA,\\n\\t\\tuint256 wB,\\n\\t\\tuint256 pxA,\\n\\t\\tuint256 pxB\\n\\t) internal pure returns (uint256 fairResA, uint256 fairResB) {\\n\\t\\t// NOTE: wA + wB = 1 (normalize weights)\\n\\t\\t// constant product = resA^wA * resB^wB\\n\\t\\t// constraints:\\n\\t\\t// - fairResA^wA * fairResB^wB = constant product\\n\\t\\t// - fairResA * pxA / wA = fairResB * pxB / wB\\n\\t\\t// Solving equations:\\n\\t\\t// --> fairResA^wA * (fairResA * (pxA * wB) / (wA * pxB))^wB = constant product\\n\\t\\t// --> fairResA / r1^wB = constant product\\n\\t\\t// --> fairResA = resA^wA * resB^wB * r1^wB\\n\\t\\t// --> fairResA = resA * (resB/resA)^wB * r1^wB = resA * (r1/r0)^wB\\n\\t\\tuint256 r0 = bdiv(resA, resB);\\n\\t\\tuint256 r1 = bdiv(bmul(wA, pxB), bmul(wB, pxA));\\n\\t\\t// fairResA = resA * (r1 / r0) ^ wB\\n\\t\\t// fairResB = resB * (r0 / r1) ^ wA\\n\\t\\tif (r0 > r1) {\\n\\t\\t\\tuint256 ratio = bdiv(r1, r0);\\n\\t\\t\\tfairResA = bmul(resA, bpow(ratio, wB));\\n\\t\\t\\tfairResB = bdiv(resB, bpow(ratio, wA));\\n\\t\\t} else {\\n\\t\\t\\tuint256 ratio = bdiv(r0, r1);\\n\\t\\t\\tfairResA = bdiv(resA, bpow(ratio, wB));\\n\\t\\t\\tfairResB = bmul(resB, bpow(ratio, wA));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getLpPrice(uint256 rdntPriceInEth) public view override returns (uint256 priceInEth) {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\t(address token0, ) = sortTokens(inTokenAddr, outTokenAddr);\\n\\t\\t(uint256 rdntBalance, uint256 wethBalance, ) = getReserves();\\n\\t\\tuint256[] memory weights = pool.getNormalizedWeights();\\n\\n\\t\\tuint256 rdntWeight;\\n\\t\\tuint256 wethWeight;\\n\\n\\t\\tif (token0 == outTokenAddr) {\\n\\t\\t\\trdntWeight = weights[0];\\n\\t\\t\\twethWeight = weights[1];\\n\\t\\t} else {\\n\\t\\t\\trdntWeight = weights[1];\\n\\t\\t\\twethWeight = weights[0];\\n\\t\\t}\\n\\n\\t\\t// RDNT in eth, 8 decis\\n\\t\\tuint256 pxA = rdntPriceInEth;\\n\\t\\t// ETH in eth, 8 decis\\n\\t\\tuint256 pxB = 100000000;\\n\\n\\t\\t(uint256 fairResA, uint256 fairResB) = computeFairReserves(\\n\\t\\t\\trdntBalance,\\n\\t\\t\\twethBalance,\\n\\t\\t\\trdntWeight,\\n\\t\\t\\twethWeight,\\n\\t\\t\\tpxA,\\n\\t\\t\\tpxB\\n\\t\\t);\\n\\t\\t// use fairReserveA and fairReserveB to compute LP token price\\n\\t\\t// LP price = (fairResA * pxA + fairResB * pxB) / totalLPSupply\\n\\t\\tpriceInEth = fairResA.mul(pxA).add(fairResB.mul(pxB)).div(pool.totalSupply());\\n\\t}\\n\\n\\tfunction getPrice() public view returns (uint256 priceInEth) {\\n\\t\\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\\n\\t\\tuint256 rdntBalance = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\\n\\t\\tuint256 wethBalance = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\\n\\n\\t\\tuint256 poolWeight = 4;\\n\\n\\t\\treturn wethBalance.mul(1e8).div(rdntBalance.div(poolWeight));\\n\\t}\\n\\n\\tfunction getReserves() public view override returns (uint256 rdnt, uint256 weth, uint256 lpTokenSupply) {\\n\\t\\tIERC20 lpToken = IERC20(lpTokenAddr);\\n\\n\\t\\t(IERC20[] memory tokens, uint256[] memory balances, ) = IVault(vaultAddr).getPoolTokens(poolId);\\n\\n\\t\\trdnt = address(tokens[0]) == outTokenAddr ? balances[0] : balances[1];\\n\\t\\tweth = address(tokens[0]) == outTokenAddr ? balances[1] : balances[0];\\n\\n\\t\\tlpTokenSupply = lpToken.totalSupply().div(1e18);\\n\\t}\\n\\n\\tfunction joinPool(uint256 _wethAmt, uint256 _rdntAmt) internal returns (uint256 liquidity) {\\n\\t\\t(address token0, address token1) = sortTokens(outTokenAddr, inTokenAddr);\\n\\t\\tIAsset[] memory assets = new IAsset[](2);\\n\\t\\tassets[0] = IAsset(token0);\\n\\t\\tassets[1] = IAsset(token1);\\n\\n\\t\\tuint256[] memory maxAmountsIn = new uint256[](2);\\n\\t\\tif (token0 == inTokenAddr) {\\n\\t\\t\\tmaxAmountsIn[0] = _wethAmt;\\n\\t\\t\\tmaxAmountsIn[1] = _rdntAmt;\\n\\t\\t} else {\\n\\t\\t\\tmaxAmountsIn[0] = _rdntAmt;\\n\\t\\t\\tmaxAmountsIn[1] = _wethAmt;\\n\\t\\t}\\n\\n\\t\\tbytes memory userDataEncoded = abi.encode(IWeightedPool.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, maxAmountsIn, 0);\\n\\t\\tIVault.JoinPoolRequest memory inRequest = IVault.JoinPoolRequest(assets, maxAmountsIn, userDataEncoded, false);\\n\\t\\tIVault(vaultAddr).joinPool(poolId, address(this), address(this), inRequest);\\n\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tliquidity = lp.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction zapWETH(uint256 amount) public override returns (uint256 liquidity) {\\n\\t\\trequire(msg.sender == lockZap, \\\"!lockZap\\\");\\n\\t\\tIWETH(wethAddr).transferFrom(msg.sender, address(this), amount);\\n\\t\\tliquidity = joinPool(amount, 0);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t\\trefundDust(outTokenAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _rdntAmt) public override returns (uint256 liquidity) {\\n\\t\\trequire(msg.sender == lockZap, \\\"!lockZap\\\");\\n\\t\\tIWETH(wethAddr).transferFrom(msg.sender, address(this), _wethAmt);\\n\\t\\tIERC20(outTokenAddr).safeTransferFrom(msg.sender, address(this), _rdntAmt);\\n\\n\\t\\tliquidity = joinPool(_wethAmt, _rdntAmt);\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\n\\t\\trefundDust(outTokenAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n\\t\\trequire(tokenA != tokenB, \\\"BalancerZap: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"BalancerZap: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) public view override returns (uint256 optimalWETHAmount) {\\n\\t\\tuint256 rdntPriceInEth = getPrice();\\n\\t\\tuint256 p1 = rdntPriceInEth.mul(1e10);\\n\\t\\tuint256 ethRequiredBeforeWeight = tokenAmount.mul(p1).div(1e18);\\n\\t\\toptimalWETHAmount = ethRequiredBeforeWeight.div(4);\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _tokenInAddress,\\n\\t\\taddress _tokenOutAddress,\\n\\t\\taddress _lpAddr\\n\\t) internal returns (uint256 amountOut) {\\n\\t\\tIAsset tokenInAddress = IAsset(_tokenInAddress);\\n\\t\\tIAsset tokenOutAddress = IAsset(_tokenOutAddress);\\n\\n\\t\\tbytes32 _poolId = IWeightedPool(_lpAddr).getPoolId();\\n\\n\\t\\tbytes memory userDataEncoded = abi.encode(); //https://dev.balancer.fi/helpers/encoding\\n\\t\\tIVault.SingleSwap memory singleSwapRequest = IVault.SingleSwap(\\n\\t\\t\\t_poolId,\\n\\t\\t\\tIVault.SwapKind.GIVEN_IN,\\n\\t\\t\\ttokenInAddress,\\n\\t\\t\\ttokenOutAddress,\\n\\t\\t\\t_amount,\\n\\t\\t\\tuserDataEncoded\\n\\t\\t);\\n\\t\\tIVault.FundManagement memory fundManagementRequest = IVault.FundManagement(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tfalse,\\n\\t\\t\\tpayable(address(this)),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\n\\t\\tuint256 limit = 0;\\n\\n\\t\\tamountOut = IVault(vaultAddr).swap(\\n\\t\\t\\tsingleSwapRequest,\\n\\t\\t\\tfundManagementRequest,\\n\\t\\t\\tlimit,\\n\\t\\t\\t(block.timestamp + 3 minutes)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setLockZap(address _lockZap) external onlyOwner {\\n\\t\\tlockZap = _lockZap;\\n\\t}\\n\\n\\tfunction getSwapFeePercentage() public onlyOwner returns (uint256 fee) {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\tfee = pool.getSwapFeePercentage();\\n\\t}\\n\\n\\tfunction setSwapFeePercentage(uint256 _fee) public onlyOwner {\\n\\t\\tIWeightedPool pool = IWeightedPool(lpTokenAddr);\\n\\t\\tpool.setSwapFeePercentage(_fee);\\n\\t}\\n}\\n\",\"keccak256\":\"0x17fb92f8b6138feef47f7e30e7b276e4ef6e45c63b4f2740f3a8a03ee4efae48\",\"license\":\"MIT\"},\"contracts/radiant/zap/helpers/DustRefunder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction refundDust(address _rdnt, address _weth, address _refundAddress) internal {\\n\\t\\tIERC20 rdnt = IERC20(_rdnt);\\n\\t\\tIWETH weth = IWETH(_weth);\\n\\n\\t\\tuint256 dustWETH = weth.balanceOf(address(this));\\n\\t\\tif (dustWETH > 0) {\\n\\t\\t\\tweth.transfer(_refundAddress, dustWETH);\\n\\t\\t}\\n\\t\\tuint256 dustRdnt = rdnt.balanceOf(address(this));\\n\\t\\tif (dustRdnt > 0) {\\n\\t\\t\\trdnt.safeTransfer(_refundAddress, dustRdnt);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc49f50d2c9d564a0f5b9aca998f6684d660a8f883c3a04c3c0e38a8f745c02b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061339d806100206000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80639381cd2b11610160578063c6580d12116100d8578063e4a28a521161008c578063ec09302111610071578063ec09302114610492578063f2fde38b1461049a578063fd706062146104ad57600080fd5b8063e4a28a52146102ea578063e640aedf1461047f57600080fd5b8063c98361c7116100bd578063c98361c714610446578063d27567f214610459578063e28861fa1461046c57600080fd5b8063c6580d121461042b578063c829bfda1461043357600080fd5b8063b7b800a41161012f578063bc063e1a11610114578063bc063e1a1461041b578063bc694ea214610423578063c36596a61461031d57600080fd5b8063b7b800a41461040b578063ba019dab1461041357600080fd5b80639381cd2b146103eb57806398d5fdca146103f3578063992e2a92146103fb578063b0e0d1361461040357600080fd5b80634219dc401161020e578063753983d6116101c25780637d5aa5f4116101a75780637d5aa5f4146103bf578063867378c5146103d25780638da5cb5b146103da57600080fd5b8063753983d6146103a457806376c7a3c7146103b757600080fd5b806355c67628116101f357806355c67628146103815780636fb2a1bf14610389578063715018a61461039c57600080fd5b80634219dc401461035b578063439e50161461036e57600080fd5b8063189d00ca1161026557806337211c3b1161024a57806337211c3b1461032c57806338e9922e1461033f5780633e0dc34e1461035257600080fd5b8063189d00ca14610315578063218b53821461031d57600080fd5b806306346c30146102975780630902f1ac146102c757806309a3bbe4146102ea5780631459457a14610300575b600080fd5b609d546102aa906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102cf6104c0565b604080519384526020840192909252908201526060016102be565b6102f26106b9565b6040519081526020016102be565b61031361030e366004612bf4565b6106cf565b005b6102f2610810565b6102f2670de0b6b3a764000081565b6098546102aa906001600160a01b031681565b61031361034d366004612c65565b610827565b6102f2609c5481565b609e546102aa906001600160a01b031681565b609a546102aa906001600160a01b031681565b6102f26108f6565b610313610397366004612c7e565b6109e1565b610313610a6a565b6102f26103b2366004612c9b565b610ad0565b6102f2610bf4565b6099546102aa906001600160a01b031681565b6102f2610c09565b6065546001600160a01b03166102aa565b6102f2610c20565b6102f2610c33565b6102f2610dcc565b6102f2600881565b6102f2600281565b6102f2600181565b6102f2610dea565b6102f2610dfd565b6102f2600081565b6102f2610441366004612c65565b610e1c565b6097546102aa906001600160a01b031681565b609b546102aa906001600160a01b031681565b6102f261047a366004612c65565b610f28565b61031361048d366004612cff565b611111565b6102f26118ea565b6103136104a8366004612c7e565b6118fd565b6102f26104bb366004612c65565b6119df565b609a54609b54609c54604051631f29a8cd60e31b8152600093849384936001600160a01b039283169385938493169163f94d466891610506919060040190815260200190565b600060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054b9190810190612e41565b5060985482519294509092506001600160a01b031690839060009061057257610572612f0f565b60200260200101516001600160a01b0316146105a8578060018151811061059b5761059b612f0f565b60200260200101516105c4565b806000815181106105bb576105bb612f0f565b60200260200101515b60985483519197506001600160a01b03169083906000906105e7576105e7612f0f565b60200260200101516001600160a01b03161461061d578060008151811061061057610610612f0f565b6020026020010151610639565b8060018151811061063057610630612f0f565b60200260200101515b94506106af670de0b6b3a7640000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190612f25565b90611a2d565b9350505050909192565b6106cc670de0b6b3a76400006032612f54565b81565b600054610100900460ff16806106e45750303b155b806106f2575060005460ff16155b6107695760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561078b576000805461ffff19166101011790555b610793611a42565b6097805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0389811691909117909255609880548216888416179055609980548216878416179055609b80548216868416179055609e80549091169184169190911790558015610808576000805461ff00191690555b505050505050565b6106cc6402540be400670de0b6b3a7640000612f89565b6065546001600160a01b031633146108815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609a546040517f38e9922e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169081906338e9922e90602401600060405180830381600087803b1580156108e257600080fd5b505af1158015610808573d6000803e3d6000fd5b6065546000906001600160a01b031633146109535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609a54604080517f55c6762800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169182916355c676289160048083019260209291908290030181865afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190612f25565b91505090565b6065546001600160a01b03163314610a3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b03163314610ac45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b610ace6000611ab5565b565b609d546000906001600160a01b03163314610b185760405162461bcd60e51b81526020600482015260086024820152670216c6f636b5a61760c41b6044820152606401610760565b6099546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190612f9d565b50609854610bac906001600160a01b0316333085611b14565b610bb68383611bb2565b609a549091506001600160a01b0316610bd0813384611e46565b609854609954610bed916001600160a01b03908116911633611e7b565b5092915050565b6106cc620f4240670de0b6b3a7640000612f89565b6106cc64e8d4a51000670de0b6b3a7640000612f89565b6106cc670de0b6b3a76400006064612f54565b609b54609c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d466890602401600060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cad9190810190612e41565b5060985482519294509092506000916001600160a01b039091169084908390610cd857610cd8612f0f565b60200260200101516001600160a01b031614610d0e5781600181518110610d0157610d01612f0f565b6020026020010151610d2a565b81600081518110610d2157610d21612f0f565b60200260200101515b60985484519192506000916001600160a01b039091169085908390610d5157610d51612f0f565b60200260200101516001600160a01b031614610d875782600081518110610d7a57610d7a612f0f565b6020026020010151610da3565b82600181518110610d9a57610d9a612f0f565b60200260200101515b90506004610dc2610db48483611a2d565b6106a9846305f5e100611ff9565b9550505050505090565b610ddf6003670de0b6b3a7640000612f89565b6106cc906001612fbf565b6106cc600a670de0b6b3a7640000612f89565b6001610e12670de0b6b3a76400006002612f54565b6106cc9190612fd7565b609d546000906001600160a01b03163314610e645760405162461bcd60e51b81526020600482015260086024820152670216c6f636b5a61760c41b6044820152606401610760565b6099546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190612f9d565b50610eeb826000611bb2565b609a549091506001600160a01b0316610f05813384611e46565b609854609954610f22916001600160a01b03908116911633611e7b565b50919050565b609a546097546098546000926001600160a01b03908116928492610f50929182169116612005565b509050600080610f5e6104c0565b50915091506000846001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcb9190810190612fee565b60985490915060009081906001600160a01b03878116911614156110285782600081518110610ffc57610ffc612f0f565b602002602001015191508260018151811061101957611019612f0f565b60200260200101519050611063565b8260018151811061103b5761103b612f0f565b602002602001015191508260008151811061105857611058612f0f565b602002602001015190505b886305f5e10060008061107a8989888888886120ef565b915091506111008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190612f25565b6106a96110f08487611ff9565b6110fa8689611ff9565b9061219e565b9d9c50505050505050505050505050565b609a546001600160a01b03161561116a5760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610760565b609754609854600091829161118b916001600160a01b039081169116612005565b6040805160028082526060820183529395509193506000929060208301908036833701905050905082816000815181106111c7576111c7612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106111fb576111fb612f0f565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905060008160008151811061124b5761124b612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505060008160018151811061128057611280612f0f565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835266038d7ea4c68000936000939083019080368337019050506098549091506001600160a01b038781169116141561132d57670b1a2bc2ec500000816000815181106112f4576112f4612f0f565b6020026020010181815250506702c68af0bb1400008160018151811061131c5761131c612f0f565b60200260200101818152505061137e565b6702c68af0bb1400008160008151811061134957611349612f0f565b602002602001018181525050670b1a2bc2ec5000008160018151811061137157611371612f0f565b6020026020010181815250505b609e546040517f80773a930000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906380773a93906113d7908d908d908d908d908b9089908c908c9030906004016130c0565b6020604051808303816000875af11580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a919061316e565b609a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169182179055604080517f38fff2d000000000000000000000000000000000000000000000000000000000815290516338fff2d0916004808201926020929091908290030181865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190612f25565b609c55609854609754609a54609954609b546001600160a01b03948516949384169392831692918216916114f7918691166000196121aa565b609b54611513906001600160a01b0385811691166000196121aa565b609b5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b9190612f9d565b506040805160028082526060820183526000926020830190803683370190505090508a816000815181106115c1576115c1612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505089816001815181106115f5576115f5612f0f565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918616906370a0823190602401602060405180830381865afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190612f25565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190612f25565b6040805160028082526060820183529293506000929091602083019080368337019050506097549091506001600160a01b038f81169116141561175e57828160008151811061172d5761172d612f0f565b602002602001018181525050818160018151811061174d5761174d612f0f565b60200260200101818152505061179f565b818160008151811061177257611772612f0f565b602002602001018181525050828160018151811061179257611792612f0f565b6020026020010181815250505b600060405180608001604052808681526020018381526020016000846040516020016117cc92919061318b565b60408051808303601f190181529181529082526000602090920191909152609b54609c54915163172b958560e31b81529293506001600160a01b03169163b95cac2891611821913090819087906004016131ff565b600060405180830381600087803b15801561183b57600080fd5b505af115801561184f573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a0823190602401602060405180830381865afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be9190612f25565b90506118d46001600160a01b0389163383611e46565b5050505050505050505050505050505050505050565b6106cc6002670de0b6b3a7640000612f89565b6065546001600160a01b031633146119575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b6001600160a01b0381166119d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610760565b6119dc81611ab5565b50565b6000806119ea610c33565b905060006119fd826402540be400611ff9565b90506000611a17670de0b6b3a76400006106a98785611ff9565b9050611a24816004611a2d565b95945050505050565b6000611a398284612f89565b90505b92915050565b600054610100900460ff16611aad5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610760565b610ace6122df565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611bac9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612353565b50505050565b60985460975460009182918291611bd5916001600160a01b039182169116612005565b604080516002808252606082018352939550919350600092906020830190803683370190505090508281600081518110611c1157611c11612f0f565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110611c4557611c45612f0f565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050506097549091506001600160a01b0385811691161415611cdc578681600081518110611cab57611cab612f0f565b6020026020010181815250508581600181518110611ccb57611ccb612f0f565b602002602001018181525050611d1d565b8581600081518110611cf057611cf0612f0f565b6020026020010181815250508681600181518110611d1057611d10612f0f565b6020026020010181815250505b60006001826000604051602001611d36939291906132bf565b60408051601f198184030181526080830182528583526020830185905282820181905260006060840152609b54609c54925163172b958560e31b81529194506001600160a01b03169163b95cac2891611d9891903090819087906004016131ff565b600060405180830381600087803b158015611db257600080fd5b505af1158015611dc6573d6000803e3d6000fd5b5050609a546040516370a0823160e01b81523060048201526001600160a01b0390911692508291506370a0823190602401602060405180830381865afa158015611e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e389190612f25565b9a9950505050505050505050565b6040516001600160a01b038316602482015260448101829052611e7690849063a9059cbb60e01b90606401611b48565b505050565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eec9190612f25565b90508015611f695760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612f9d565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd49190612f25565b90508015611ff057611ff06001600160a01b0385168683611e46565b50505050505050565b6000611a398284612f54565b600080826001600160a01b0316846001600160a01b0316141561206a5760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365725a61703a204944454e544943414c5f4144445245535345536044820152606401610760565b826001600160a01b0316846001600160a01b03161061208a57828461208d565b83835b90925090506001600160a01b0382166120e85760405162461bcd60e51b815260206004820152601960248201527f42616c616e6365725a61703a205a45524f5f41444452455353000000000000006044820152606401610760565b9250929050565b60008060006120fe8989612438565b9050600061211e61210f8987612585565b6121198989612585565b612438565b9050808211156121615760006121348284612438565b90506121498b612144838b61267a565b612585565b94506121598a612119838c61267a565b935050612191565b600061216d8383612438565b905061217d8b612119838b61267a565b945061218d8a612144838c61267a565b9350505b5050965096945050505050565b6000611a398284612fbf565b80158061223d57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b9190612f25565b155b6122af5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610760565b6040516001600160a01b038316602482015260448101829052611e7690849063095ea7b360e01b90606401611b48565b600054610100900460ff1661234a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610760565b610ace33611ab5565b60006123a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127b59092919063ffffffff16565b805190915015611e7657808060200190518101906123c69190612f9d565b611e765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610760565b6000816124875760405162461bcd60e51b815260206004820152600c60248201527f4552525f4449565f5a45524f00000000000000000000000000000000000000006044820152606401610760565b600061249b670de0b6b3a764000085612f54565b90508315806124ba5750670de0b6b3a76400006124b88583612f89565b145b6125065760405162461bcd60e51b815260206004820152601060248201527f4552525f4449565f494e5445524e414c000000000000000000000000000000006044820152606401610760565b6000612513600285612f89565b61251d9083612fbf565b90508181101561256f5760405162461bcd60e51b815260206004820152601060248201527f4552525f4449565f494e5445524e414c000000000000000000000000000000006044820152606401610760565b600061257b8583612f89565b9695505050505050565b6000806125928385612f54565b90508315806125a95750826125a78583612f89565b145b6125f55760405162461bcd60e51b815260206004820152601060248201527f4552525f4d554c5f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b600061260a6002670de0b6b3a7640000612f89565b6126149083612fbf565b9050818110156126665760405162461bcd60e51b815260206004820152601060248201527f4552525f4d554c5f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b600061257b670de0b6b3a764000083612f89565b600060018310156126cd5760405162461bcd60e51b815260206004820152601560248201527f4552525f42504f575f424153455f544f4f5f4c4f5700000000000000000000006044820152606401610760565b60016126e2670de0b6b3a76400006002612f54565b6126ec9190612fd7565b83111561273b5760405162461bcd60e51b815260206004820152601660248201527f4552525f42504f575f424153455f544f4f5f48494748000000000000000000006044820152606401610760565b6000612746836127cc565b9050600061275484836127ea565b9050600061276a8661276585612853565b612867565b90508161277b579250611a3c915050565b600061279e87846127996402540be400670de0b6b3a7640000612f89565b6128da565b90506127aa8282612585565b979650505050505050565b60606127c484846000856129ca565b949350505050565b6000670de0b6b3a76400006127e083612853565b611a3c9190612f54565b60008060006127f98585612ab1565b91509150801561284b5760405162461bcd60e51b815260206004820152601160248201527f4552525f5355425f554e444552464c4f570000000000000000000000000000006044820152606401610760565b509392505050565b6000611a3c670de0b6b3a764000083612f89565b600080612875600284613309565b61288757670de0b6b3a7640000612889565b835b9050612896600284612f89565b92505b8215611a39576128a98485612585565b93506128b6600284613309565b156128c8576128c58185612585565b90505b6128d3600284612f89565b9250612899565b60008281806128f187670de0b6b3a7640000612ab1565b9092509050670de0b6b3a764000080600060015b8884106129bb576000612920670de0b6b3a764000083612f54565b90506000806129408a61293b85670de0b6b3a76400006127ea565b612ab1565b9150915061295287612144848c612585565b965061295e8784612438565b96508661296d575050506129bb565b8715612977579315935b8015612981579315935b84156129985761299186886127ea565b95506129a5565b6129a28688612ae5565b95505b50505080806129b39061331d565b915050612905565b50909998505050505050505050565b606082471015612a425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610760565b600080866001600160a01b03168587604051612a5e9190613338565b60006040518083038185875af1925050503d8060008114612a9b576040519150601f19603f3d011682016040523d82523d6000602084013e612aa0565b606091505b50915091506127aa87838387612b44565b600080828410612ad057612ac58385612fd7565b6000915091506120e8565b612ada8484612fd7565b6001915091506120e8565b600080612af28385612fbf565b905083811015611a395760405162461bcd60e51b815260206004820152601060248201527f4552525f4144445f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b60608315612bb0578251612ba9576001600160a01b0385163b612ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610760565b50816127c4565b6127c48383815115612bc55781518083602001fd5b8060405162461bcd60e51b81526004016107609190613354565b6001600160a01b03811681146119dc57600080fd5b600080600080600060a08688031215612c0c57600080fd5b8535612c1781612bdf565b94506020860135612c2781612bdf565b93506040860135612c3781612bdf565b92506060860135612c4781612bdf565b91506080860135612c5781612bdf565b809150509295509295909350565b600060208284031215612c7757600080fd5b5035919050565b600060208284031215612c9057600080fd5b8135611a3981612bdf565b60008060408385031215612cae57600080fd5b50508035926020909101359150565b60008083601f840112612ccf57600080fd5b50813567ffffffffffffffff811115612ce757600080fd5b6020830191508360208285010111156120e857600080fd5b60008060008060408587031215612d1557600080fd5b843567ffffffffffffffff80821115612d2d57600080fd5b612d3988838901612cbd565b90965094506020870135915080821115612d5257600080fd5b50612d5f87828801612cbd565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612daa57612daa612d6b565b604052919050565b600067ffffffffffffffff821115612dcc57612dcc612d6b565b5060051b60200190565b600082601f830112612de757600080fd5b81516020612dfc612df783612db2565b612d81565b82815260059290921b84018101918181019086841115612e1b57600080fd5b8286015b84811015612e365780518352918301918301612e1f565b509695505050505050565b600080600060608486031215612e5657600080fd5b835167ffffffffffffffff80821115612e6e57600080fd5b818601915086601f830112612e8257600080fd5b81516020612e92612df783612db2565b82815260059290921b8401810191818101908a841115612eb157600080fd5b948201945b83861015612ed8578551612ec981612bdf565b82529482019490820190612eb6565b91890151919750909350505080821115612ef157600080fd5b50612efe86828701612dd6565b925050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612f3757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f6e57612f6e612f3e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612f9857612f98612f73565b500490565b600060208284031215612faf57600080fd5b81518015158114611a3957600080fd5b60008219821115612fd257612fd2612f3e565b500190565b600082821015612fe957612fe9612f3e565b500390565b60006020828403121561300057600080fd5b815167ffffffffffffffff81111561301757600080fd5b6127c484828501612dd6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526020808501945080840160005b8381101561307c57815187529582019590820190600101613060565b509495945050505050565b600081518084526020808501945080840160005b8381101561307c5781516001600160a01b03168752958201959082019060010161309b565b60e0815260006130d460e083018b8d613023565b6020838203818501526130e8828b8d613023565b84810360408601528951808252828b0193509082019060005b818110156131265784516001600160a01b031683529383019391830191600101613101565b5050848103606086015261313a818a61304c565b9250505082810360808401526131508187613087565b9150508360a0830152611e3860c08301846001600160a01b03169052565b60006020828403121561318057600080fd5b8151611a3981612bdf565b60ff831681526040602082015260006127c4604083018461304c565b60005b838110156131c25781810151838201526020016131aa565b83811115611bac5750506000910152565b600081518084526131eb8160208601602086016131a7565b601f01601f19169290920160200192915050565b848152600060206001600160a01b038087168285015280861660408501526080606085015261010084018551608080870152818151808452610120880191508583019350600092505b8083101561326a57835185168252928501926001929092019190850190613248565b50848801519450607f199350838782030160a088015261328a818661304c565b94505050506040850151818584030160c08601526132a883826131d3565b925050506060840151612e3660e085018215159052565b6000600385106132df57634e487b7160e01b600052602160045260246000fd5b848252606060208301526132f6606083018561304c565b905060ff83166040830152949350505050565b60008261331857613318612f73565b500690565b600060001982141561333157613331612f3e565b5060010190565b6000825161334a8184602087016131a7565b9190910192915050565b602081526000611a3960208301846131d356fea264697066735822122025fd526a136e19c98c99ec028b42eef8a2e387d52bd1843184cad28ae399442f64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c80639381cd2b11610160578063c6580d12116100d8578063e4a28a521161008c578063ec09302111610071578063ec09302114610492578063f2fde38b1461049a578063fd706062146104ad57600080fd5b8063e4a28a52146102ea578063e640aedf1461047f57600080fd5b8063c98361c7116100bd578063c98361c714610446578063d27567f214610459578063e28861fa1461046c57600080fd5b8063c6580d121461042b578063c829bfda1461043357600080fd5b8063b7b800a41161012f578063bc063e1a11610114578063bc063e1a1461041b578063bc694ea214610423578063c36596a61461031d57600080fd5b8063b7b800a41461040b578063ba019dab1461041357600080fd5b80639381cd2b146103eb57806398d5fdca146103f3578063992e2a92146103fb578063b0e0d1361461040357600080fd5b80634219dc401161020e578063753983d6116101c25780637d5aa5f4116101a75780637d5aa5f4146103bf578063867378c5146103d25780638da5cb5b146103da57600080fd5b8063753983d6146103a457806376c7a3c7146103b757600080fd5b806355c67628116101f357806355c67628146103815780636fb2a1bf14610389578063715018a61461039c57600080fd5b80634219dc401461035b578063439e50161461036e57600080fd5b8063189d00ca1161026557806337211c3b1161024a57806337211c3b1461032c57806338e9922e1461033f5780633e0dc34e1461035257600080fd5b8063189d00ca14610315578063218b53821461031d57600080fd5b806306346c30146102975780630902f1ac146102c757806309a3bbe4146102ea5780631459457a14610300575b600080fd5b609d546102aa906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102cf6104c0565b604080519384526020840192909252908201526060016102be565b6102f26106b9565b6040519081526020016102be565b61031361030e366004612bf4565b6106cf565b005b6102f2610810565b6102f2670de0b6b3a764000081565b6098546102aa906001600160a01b031681565b61031361034d366004612c65565b610827565b6102f2609c5481565b609e546102aa906001600160a01b031681565b609a546102aa906001600160a01b031681565b6102f26108f6565b610313610397366004612c7e565b6109e1565b610313610a6a565b6102f26103b2366004612c9b565b610ad0565b6102f2610bf4565b6099546102aa906001600160a01b031681565b6102f2610c09565b6065546001600160a01b03166102aa565b6102f2610c20565b6102f2610c33565b6102f2610dcc565b6102f2600881565b6102f2600281565b6102f2600181565b6102f2610dea565b6102f2610dfd565b6102f2600081565b6102f2610441366004612c65565b610e1c565b6097546102aa906001600160a01b031681565b609b546102aa906001600160a01b031681565b6102f261047a366004612c65565b610f28565b61031361048d366004612cff565b611111565b6102f26118ea565b6103136104a8366004612c7e565b6118fd565b6102f26104bb366004612c65565b6119df565b609a54609b54609c54604051631f29a8cd60e31b8152600093849384936001600160a01b039283169385938493169163f94d466891610506919060040190815260200190565b600060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054b9190810190612e41565b5060985482519294509092506001600160a01b031690839060009061057257610572612f0f565b60200260200101516001600160a01b0316146105a8578060018151811061059b5761059b612f0f565b60200260200101516105c4565b806000815181106105bb576105bb612f0f565b60200260200101515b60985483519197506001600160a01b03169083906000906105e7576105e7612f0f565b60200260200101516001600160a01b03161461061d578060008151811061061057610610612f0f565b6020026020010151610639565b8060018151811061063057610630612f0f565b60200260200101515b94506106af670de0b6b3a7640000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190612f25565b90611a2d565b9350505050909192565b6106cc670de0b6b3a76400006032612f54565b81565b600054610100900460ff16806106e45750303b155b806106f2575060005460ff16155b6107695760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561078b576000805461ffff19166101011790555b610793611a42565b6097805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0389811691909117909255609880548216888416179055609980548216878416179055609b80548216868416179055609e80549091169184169190911790558015610808576000805461ff00191690555b505050505050565b6106cc6402540be400670de0b6b3a7640000612f89565b6065546001600160a01b031633146108815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609a546040517f38e9922e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169081906338e9922e90602401600060405180830381600087803b1580156108e257600080fd5b505af1158015610808573d6000803e3d6000fd5b6065546000906001600160a01b031633146109535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609a54604080517f55c6762800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169182916355c676289160048083019260209291908290030181865afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190612f25565b91505090565b6065546001600160a01b03163314610a3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b609d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b03163314610ac45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b610ace6000611ab5565b565b609d546000906001600160a01b03163314610b185760405162461bcd60e51b81526020600482015260086024820152670216c6f636b5a61760c41b6044820152606401610760565b6099546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190612f9d565b50609854610bac906001600160a01b0316333085611b14565b610bb68383611bb2565b609a549091506001600160a01b0316610bd0813384611e46565b609854609954610bed916001600160a01b03908116911633611e7b565b5092915050565b6106cc620f4240670de0b6b3a7640000612f89565b6106cc64e8d4a51000670de0b6b3a7640000612f89565b6106cc670de0b6b3a76400006064612f54565b609b54609c54604051631f29a8cd60e31b81526004810191909152600091829182916001600160a01b03169063f94d466890602401600060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cad9190810190612e41565b5060985482519294509092506000916001600160a01b039091169084908390610cd857610cd8612f0f565b60200260200101516001600160a01b031614610d0e5781600181518110610d0157610d01612f0f565b6020026020010151610d2a565b81600081518110610d2157610d21612f0f565b60200260200101515b60985484519192506000916001600160a01b039091169085908390610d5157610d51612f0f565b60200260200101516001600160a01b031614610d875782600081518110610d7a57610d7a612f0f565b6020026020010151610da3565b82600181518110610d9a57610d9a612f0f565b60200260200101515b90506004610dc2610db48483611a2d565b6106a9846305f5e100611ff9565b9550505050505090565b610ddf6003670de0b6b3a7640000612f89565b6106cc906001612fbf565b6106cc600a670de0b6b3a7640000612f89565b6001610e12670de0b6b3a76400006002612f54565b6106cc9190612fd7565b609d546000906001600160a01b03163314610e645760405162461bcd60e51b81526020600482015260086024820152670216c6f636b5a61760c41b6044820152606401610760565b6099546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190612f9d565b50610eeb826000611bb2565b609a549091506001600160a01b0316610f05813384611e46565b609854609954610f22916001600160a01b03908116911633611e7b565b50919050565b609a546097546098546000926001600160a01b03908116928492610f50929182169116612005565b509050600080610f5e6104c0565b50915091506000846001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcb9190810190612fee565b60985490915060009081906001600160a01b03878116911614156110285782600081518110610ffc57610ffc612f0f565b602002602001015191508260018151811061101957611019612f0f565b60200260200101519050611063565b8260018151811061103b5761103b612f0f565b602002602001015191508260008151811061105857611058612f0f565b602002602001015190505b886305f5e10060008061107a8989888888886120ef565b915091506111008b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190612f25565b6106a96110f08487611ff9565b6110fa8689611ff9565b9061219e565b9d9c50505050505050505050505050565b609a546001600160a01b03161561116a5760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610760565b609754609854600091829161118b916001600160a01b039081169116612005565b6040805160028082526060820183529395509193506000929060208301908036833701905050905082816000815181106111c7576111c7612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106111fb576111fb612f0f565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905060008160008151811061124b5761124b612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505060008160018151811061128057611280612f0f565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835266038d7ea4c68000936000939083019080368337019050506098549091506001600160a01b038781169116141561132d57670b1a2bc2ec500000816000815181106112f4576112f4612f0f565b6020026020010181815250506702c68af0bb1400008160018151811061131c5761131c612f0f565b60200260200101818152505061137e565b6702c68af0bb1400008160008151811061134957611349612f0f565b602002602001018181525050670b1a2bc2ec5000008160018151811061137157611371612f0f565b6020026020010181815250505b609e546040517f80773a930000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906380773a93906113d7908d908d908d908d908b9089908c908c9030906004016130c0565b6020604051808303816000875af11580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a919061316e565b609a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169182179055604080517f38fff2d000000000000000000000000000000000000000000000000000000000815290516338fff2d0916004808201926020929091908290030181865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190612f25565b609c55609854609754609a54609954609b546001600160a01b03948516949384169392831692918216916114f7918691166000196121aa565b609b54611513906001600160a01b0385811691166000196121aa565b609b5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b9190612f9d565b506040805160028082526060820183526000926020830190803683370190505090508a816000815181106115c1576115c1612f0f565b60200260200101906001600160a01b031690816001600160a01b03168152505089816001815181106115f5576115f5612f0f565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918616906370a0823190602401602060405180830381865afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190612f25565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190612f25565b6040805160028082526060820183529293506000929091602083019080368337019050506097549091506001600160a01b038f81169116141561175e57828160008151811061172d5761172d612f0f565b602002602001018181525050818160018151811061174d5761174d612f0f565b60200260200101818152505061179f565b818160008151811061177257611772612f0f565b602002602001018181525050828160018151811061179257611792612f0f565b6020026020010181815250505b600060405180608001604052808681526020018381526020016000846040516020016117cc92919061318b565b60408051808303601f190181529181529082526000602090920191909152609b54609c54915163172b958560e31b81529293506001600160a01b03169163b95cac2891611821913090819087906004016131ff565b600060405180830381600087803b15801561183b57600080fd5b505af115801561184f573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a0823190602401602060405180830381865afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be9190612f25565b90506118d46001600160a01b0389163383611e46565b5050505050505050505050505050505050505050565b6106cc6002670de0b6b3a7640000612f89565b6065546001600160a01b031633146119575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610760565b6001600160a01b0381166119d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610760565b6119dc81611ab5565b50565b6000806119ea610c33565b905060006119fd826402540be400611ff9565b90506000611a17670de0b6b3a76400006106a98785611ff9565b9050611a24816004611a2d565b95945050505050565b6000611a398284612f89565b90505b92915050565b600054610100900460ff16611aad5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610760565b610ace6122df565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611bac9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612353565b50505050565b60985460975460009182918291611bd5916001600160a01b039182169116612005565b604080516002808252606082018352939550919350600092906020830190803683370190505090508281600081518110611c1157611c11612f0f565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110611c4557611c45612f0f565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050506097549091506001600160a01b0385811691161415611cdc578681600081518110611cab57611cab612f0f565b6020026020010181815250508581600181518110611ccb57611ccb612f0f565b602002602001018181525050611d1d565b8581600081518110611cf057611cf0612f0f565b6020026020010181815250508681600181518110611d1057611d10612f0f565b6020026020010181815250505b60006001826000604051602001611d36939291906132bf565b60408051601f198184030181526080830182528583526020830185905282820181905260006060840152609b54609c54925163172b958560e31b81529194506001600160a01b03169163b95cac2891611d9891903090819087906004016131ff565b600060405180830381600087803b158015611db257600080fd5b505af1158015611dc6573d6000803e3d6000fd5b5050609a546040516370a0823160e01b81523060048201526001600160a01b0390911692508291506370a0823190602401602060405180830381865afa158015611e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e389190612f25565b9a9950505050505050505050565b6040516001600160a01b038316602482015260448101829052611e7690849063a9059cbb60e01b90606401611b48565b505050565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eec9190612f25565b90508015611f695760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612f9d565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd49190612f25565b90508015611ff057611ff06001600160a01b0385168683611e46565b50505050505050565b6000611a398284612f54565b600080826001600160a01b0316846001600160a01b0316141561206a5760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365725a61703a204944454e544943414c5f4144445245535345536044820152606401610760565b826001600160a01b0316846001600160a01b03161061208a57828461208d565b83835b90925090506001600160a01b0382166120e85760405162461bcd60e51b815260206004820152601960248201527f42616c616e6365725a61703a205a45524f5f41444452455353000000000000006044820152606401610760565b9250929050565b60008060006120fe8989612438565b9050600061211e61210f8987612585565b6121198989612585565b612438565b9050808211156121615760006121348284612438565b90506121498b612144838b61267a565b612585565b94506121598a612119838c61267a565b935050612191565b600061216d8383612438565b905061217d8b612119838b61267a565b945061218d8a612144838c61267a565b9350505b5050965096945050505050565b6000611a398284612fbf565b80158061223d57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b9190612f25565b155b6122af5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610760565b6040516001600160a01b038316602482015260448101829052611e7690849063095ea7b360e01b90606401611b48565b600054610100900460ff1661234a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610760565b610ace33611ab5565b60006123a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127b59092919063ffffffff16565b805190915015611e7657808060200190518101906123c69190612f9d565b611e765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610760565b6000816124875760405162461bcd60e51b815260206004820152600c60248201527f4552525f4449565f5a45524f00000000000000000000000000000000000000006044820152606401610760565b600061249b670de0b6b3a764000085612f54565b90508315806124ba5750670de0b6b3a76400006124b88583612f89565b145b6125065760405162461bcd60e51b815260206004820152601060248201527f4552525f4449565f494e5445524e414c000000000000000000000000000000006044820152606401610760565b6000612513600285612f89565b61251d9083612fbf565b90508181101561256f5760405162461bcd60e51b815260206004820152601060248201527f4552525f4449565f494e5445524e414c000000000000000000000000000000006044820152606401610760565b600061257b8583612f89565b9695505050505050565b6000806125928385612f54565b90508315806125a95750826125a78583612f89565b145b6125f55760405162461bcd60e51b815260206004820152601060248201527f4552525f4d554c5f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b600061260a6002670de0b6b3a7640000612f89565b6126149083612fbf565b9050818110156126665760405162461bcd60e51b815260206004820152601060248201527f4552525f4d554c5f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b600061257b670de0b6b3a764000083612f89565b600060018310156126cd5760405162461bcd60e51b815260206004820152601560248201527f4552525f42504f575f424153455f544f4f5f4c4f5700000000000000000000006044820152606401610760565b60016126e2670de0b6b3a76400006002612f54565b6126ec9190612fd7565b83111561273b5760405162461bcd60e51b815260206004820152601660248201527f4552525f42504f575f424153455f544f4f5f48494748000000000000000000006044820152606401610760565b6000612746836127cc565b9050600061275484836127ea565b9050600061276a8661276585612853565b612867565b90508161277b579250611a3c915050565b600061279e87846127996402540be400670de0b6b3a7640000612f89565b6128da565b90506127aa8282612585565b979650505050505050565b60606127c484846000856129ca565b949350505050565b6000670de0b6b3a76400006127e083612853565b611a3c9190612f54565b60008060006127f98585612ab1565b91509150801561284b5760405162461bcd60e51b815260206004820152601160248201527f4552525f5355425f554e444552464c4f570000000000000000000000000000006044820152606401610760565b509392505050565b6000611a3c670de0b6b3a764000083612f89565b600080612875600284613309565b61288757670de0b6b3a7640000612889565b835b9050612896600284612f89565b92505b8215611a39576128a98485612585565b93506128b6600284613309565b156128c8576128c58185612585565b90505b6128d3600284612f89565b9250612899565b60008281806128f187670de0b6b3a7640000612ab1565b9092509050670de0b6b3a764000080600060015b8884106129bb576000612920670de0b6b3a764000083612f54565b90506000806129408a61293b85670de0b6b3a76400006127ea565b612ab1565b9150915061295287612144848c612585565b965061295e8784612438565b96508661296d575050506129bb565b8715612977579315935b8015612981579315935b84156129985761299186886127ea565b95506129a5565b6129a28688612ae5565b95505b50505080806129b39061331d565b915050612905565b50909998505050505050505050565b606082471015612a425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610760565b600080866001600160a01b03168587604051612a5e9190613338565b60006040518083038185875af1925050503d8060008114612a9b576040519150601f19603f3d011682016040523d82523d6000602084013e612aa0565b606091505b50915091506127aa87838387612b44565b600080828410612ad057612ac58385612fd7565b6000915091506120e8565b612ada8484612fd7565b6001915091506120e8565b600080612af28385612fbf565b905083811015611a395760405162461bcd60e51b815260206004820152601060248201527f4552525f4144445f4f564552464c4f57000000000000000000000000000000006044820152606401610760565b60608315612bb0578251612ba9576001600160a01b0385163b612ba95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610760565b50816127c4565b6127c48383815115612bc55781518083602001fd5b8060405162461bcd60e51b81526004016107609190613354565b6001600160a01b03811681146119dc57600080fd5b600080600080600060a08688031215612c0c57600080fd5b8535612c1781612bdf565b94506020860135612c2781612bdf565b93506040860135612c3781612bdf565b92506060860135612c4781612bdf565b91506080860135612c5781612bdf565b809150509295509295909350565b600060208284031215612c7757600080fd5b5035919050565b600060208284031215612c9057600080fd5b8135611a3981612bdf565b60008060408385031215612cae57600080fd5b50508035926020909101359150565b60008083601f840112612ccf57600080fd5b50813567ffffffffffffffff811115612ce757600080fd5b6020830191508360208285010111156120e857600080fd5b60008060008060408587031215612d1557600080fd5b843567ffffffffffffffff80821115612d2d57600080fd5b612d3988838901612cbd565b90965094506020870135915080821115612d5257600080fd5b50612d5f87828801612cbd565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612daa57612daa612d6b565b604052919050565b600067ffffffffffffffff821115612dcc57612dcc612d6b565b5060051b60200190565b600082601f830112612de757600080fd5b81516020612dfc612df783612db2565b612d81565b82815260059290921b84018101918181019086841115612e1b57600080fd5b8286015b84811015612e365780518352918301918301612e1f565b509695505050505050565b600080600060608486031215612e5657600080fd5b835167ffffffffffffffff80821115612e6e57600080fd5b818601915086601f830112612e8257600080fd5b81516020612e92612df783612db2565b82815260059290921b8401810191818101908a841115612eb157600080fd5b948201945b83861015612ed8578551612ec981612bdf565b82529482019490820190612eb6565b91890151919750909350505080821115612ef157600080fd5b50612efe86828701612dd6565b925050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612f3757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f6e57612f6e612f3e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612f9857612f98612f73565b500490565b600060208284031215612faf57600080fd5b81518015158114611a3957600080fd5b60008219821115612fd257612fd2612f3e565b500190565b600082821015612fe957612fe9612f3e565b500390565b60006020828403121561300057600080fd5b815167ffffffffffffffff81111561301757600080fd5b6127c484828501612dd6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526020808501945080840160005b8381101561307c57815187529582019590820190600101613060565b509495945050505050565b600081518084526020808501945080840160005b8381101561307c5781516001600160a01b03168752958201959082019060010161309b565b60e0815260006130d460e083018b8d613023565b6020838203818501526130e8828b8d613023565b84810360408601528951808252828b0193509082019060005b818110156131265784516001600160a01b031683529383019391830191600101613101565b5050848103606086015261313a818a61304c565b9250505082810360808401526131508187613087565b9150508360a0830152611e3860c08301846001600160a01b03169052565b60006020828403121561318057600080fd5b8151611a3981612bdf565b60ff831681526040602082015260006127c4604083018461304c565b60005b838110156131c25781810151838201526020016131aa565b83811115611bac5750506000910152565b600081518084526131eb8160208601602086016131a7565b601f01601f19169290920160200192915050565b848152600060206001600160a01b038087168285015280861660408501526080606085015261010084018551608080870152818151808452610120880191508583019350600092505b8083101561326a57835185168252928501926001929092019190850190613248565b50848801519450607f199350838782030160a088015261328a818661304c565b94505050506040850151818584030160c08601526132a883826131d3565b925050506060840151612e3660e085018215159052565b6000600385106132df57634e487b7160e01b600052602160045260246000fd5b848252606060208301526132f6606083018561304c565b905060ff83166040830152949350505050565b60008261331857613318612f73565b500690565b600060001982141561333157613331612f3e565b5060010190565b6000825161334a8184602087016131a7565b9190910192915050565b602081526000611a3960208301846131d356fea264697066735822122025fd526a136e19c98c99ec028b42eef8a2e387d52bd1843184cad28ae399442f64736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant",
    "kind": "dev",
    "methods": {},
    "title": "Balance Pool Helper Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1645,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1648,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1715,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1638,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1726,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1831,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3561,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "inTokenAddr",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3563,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "outTokenAddr",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3565,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "wethAddr",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3568,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "lpTokenAddr",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 3570,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "vaultAddr",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 3572,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "poolId",
        "offset": 0,
        "slot": "156",
        "type": "t_bytes32"
      },
      {
        "astId": 3574,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "lockZap",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 3577,
        "contract": "contracts/radiant/zap/helpers/BalancerPoolHelper.sol:BalancerPoolHelper",
        "label": "poolFactory",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IWeightedPoolFactory)3012"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IWeightedPoolFactory)3012": {
        "encoding": "inplace",
        "label": "contract IWeightedPoolFactory",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}