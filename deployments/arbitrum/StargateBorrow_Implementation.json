{
  "address": "0x2Da4D13b77EE58A28d546c2A81535c5E27E4246F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_daoTreasury",
          "type": "address"
        }
      ],
      "name": "DAOTreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        }
      ],
      "name": "PoolIDsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "XChainBorrowFeePercentUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getXChainBorrowFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStargateRouter",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IRouterETH",
          "name": "_routerETH",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_xChainBorrowFeePercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolIdPerChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_transferAndCallPayload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "quoteLayerZeroSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IStargateRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerETH",
      "outputs": [
        {
          "internalType": "contract IRouterETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoTreasury",
          "type": "address"
        }
      ],
      "name": "setDAOTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "poolIDs",
          "type": "uint256[]"
        }
      ],
      "name": "setPoolIDs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "setXChainBorrowFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xChainBorrowFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x72192f199e23e1e84d805d8c15bdd0a06d5d6642c0c7fb5ea36a83cc89ccf7ab",
  "receipt": {
    "to": null,
    "from": "0x7759124915160E94C77EcE5B96E8a7fCec44Aa19",
    "contractAddress": "0x2Da4D13b77EE58A28d546c2A81535c5E27E4246F",
    "transactionIndex": 1,
    "gasUsed": "9113440",
    "logsBloom": "0x
    "blockHash": "0xb5e2bcdc8834b697cf34a8ff601b159f3b76a75421da98c5d778a7837bb0a68b",
    "transactionHash": "0x72192f199e23e1e84d805d8c15bdd0a06d5d6642c0c7fb5ea36a83cc89ccf7ab",
    "logs": [],
    "blockNumber": 71246751,
    "cumulativeGasUsed": "9113440",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ed8517f072d3887f8d783037813f24b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_daoTreasury\",\"type\":\"address\"}],\"name\":\"DAOTreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"}],\"name\":\"PoolIDsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"XChainBorrowFeePercentUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getXChainBorrowFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IRouterETH\",\"name\":\"_routerETH\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_xChainBorrowFeePercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolIdPerChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transferAndCallPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerETH\",\"outputs\":[{\"internalType\":\"contract IRouterETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoTreasury\",\"type\":\"address\"}],\"name\":\"setDAOTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"}],\"name\":\"setPoolIDs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setXChainBorrowFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xChainBorrowFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Radiant\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256,uint256,uint16)\":{\"details\":\"Loop the deposit and borrow of an asset\",\"params\":{\"amount\":\"for the initial deposit\",\"asset\":\"for loop\",\"dstChainId\":\"Destination chain id*\",\"interestRateMode\":\"stable or variable borrow mode\"}},\"getXChainBorrowFeeAmount(uint256)\":{\"params\":{\"amount\":\"Fee cost.\"}},\"initialize(address,address,address,address,address,uint256)\":{\"params\":{\"_lendingPool\":\"Lending pool\",\"_router\":\"Stargate Router address\",\"_routerETH\":\"Stargate Router for ETH\",\"_treasury\":\"Treasury address\",\"_weth\":\"WETH address\",\"_xChainBorrowFeePercent\":\"Cross chain borrow fee ratio\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteLayerZeroSwapFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))\":{\"details\":\"Call Router.sol method to get the value for swap()\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDAOTreasury(address)\":{\"params\":{\"_daoTreasury\":\"DAO Treasury address.\"}},\"setPoolIDs(address[],uint256[])\":{\"params\":{\"assets\":\"array.\",\"poolIDs\":\"array.\"}},\"setXChainBorrowFeePercent(uint256)\":{\"params\":{\"percent\":\"Fee ratio.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Borrow gate via stargate\",\"version\":1},\"userdoc\":{\"events\":{\"DAOTreasuryUpdated(address)\":{\"notice\":\"Emitted when DAO address is updated\"},\"PoolIDsUpdated(address[],uint256[])\":{\"notice\":\"Emited when pool ids of assets are updated\"},\"XChainBorrowFeePercentUpdated(uint256)\":{\"notice\":\"Emitted when fee info is updated\"}},\"kind\":\"user\",\"methods\":{\"FEE_PERCENT_DIVISOR()\":{\"notice\":\"FEE ratio DIVISOR\"},\"daoTreasury()\":{\"notice\":\"DAO wallet\"},\"getXChainBorrowFeeAmount(uint256)\":{\"notice\":\"Get Cross Chain Borrow Fee amount.\"},\"initialize(address,address,address,address,address,uint256)\":{\"notice\":\"Constructor\"},\"lendingPool()\":{\"notice\":\"Lending Pool address\"},\"poolIdPerChain(address)\":{\"notice\":\"asset => poolId; at the moment, pool IDs for USDC and USDT are the same accross all chains\"},\"quoteLayerZeroSwapFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))\":{\"notice\":\"Quote LZ swap fee\"},\"router()\":{\"notice\":\"Stargate Router\"},\"routerETH()\":{\"notice\":\"Stargate Router ETH\"},\"setDAOTreasury(address)\":{\"notice\":\"Set DAO Treasury.\"},\"setPoolIDs(address[],uint256[])\":{\"notice\":\"Set pool ids of assets.\"},\"setXChainBorrowFeePercent(uint256)\":{\"notice\":\"Set Cross Chain Borrow Fee Percent.\"},\"xChainBorrowFeePercent()\":{\"notice\":\"Cross chain borrow fee ratio\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/accessories/StargateBorrow.sol\":\"StargateBorrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IRouterETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\ninterface IRouterETH {\\n\\tfunction swapETH(\\n\\t\\tuint16 _dstChainId, // destination Stargate chainId\\n\\t\\taddress payable _refundAddress, // refund additional messageFee to this address\\n\\t\\tbytes calldata _toAddress, // the receiver of the destination ETH\\n\\t\\tuint256 _amountLD, // the amount, in Local Decimals, to be swapped\\n\\t\\tuint256 _minAmountLD // the minimum amount accepted out on destination\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x5439c595f4e47f6d08015b7b95eb6db8f701450ef74fd666348c3408114cf005\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n\\tstruct lzTxObj {\\n\\t\\tuint256 dstGasForCall;\\n\\t\\tuint256 dstNativeAmount;\\n\\t\\tbytes dstNativeAddr;\\n\\t}\\n\\n\\tfunction addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n\\tfunction swap(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint256 _srcPoolId,\\n\\t\\tuint256 _dstPoolId,\\n\\t\\taddress payable _refundAddress,\\n\\t\\tuint256 _amountLD,\\n\\t\\tuint256 _minAmountLD,\\n\\t\\tlzTxObj memory _lzTxParams,\\n\\t\\tbytes calldata _to,\\n\\t\\tbytes calldata _payload\\n\\t) external payable;\\n\\n\\tfunction redeemRemote(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint256 _srcPoolId,\\n\\t\\tuint256 _dstPoolId,\\n\\t\\taddress payable _refundAddress,\\n\\t\\tuint256 _amountLP,\\n\\t\\tuint256 _minAmountLD,\\n\\t\\tbytes calldata _to,\\n\\t\\tlzTxObj memory _lzTxParams\\n\\t) external payable;\\n\\n\\tfunction instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n\\tfunction redeemLocal(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint256 _srcPoolId,\\n\\t\\tuint256 _dstPoolId,\\n\\t\\taddress payable _refundAddress,\\n\\t\\tuint256 _amountLP,\\n\\t\\tbytes calldata _to,\\n\\t\\tlzTxObj memory _lzTxParams\\n\\t) external payable;\\n\\n\\tfunction sendCredits(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint256 _srcPoolId,\\n\\t\\tuint256 _dstPoolId,\\n\\t\\taddress payable _refundAddress\\n\\t) external payable;\\n\\n\\tfunction quoteLayerZeroFee(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint8 _functionType,\\n\\t\\tbytes calldata _toAddress,\\n\\t\\tbytes calldata _transferAndCallPayload,\\n\\t\\tlzTxObj memory _lzTxParams\\n\\t) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x094a5c5f352f7243d15600487e4a04823c64deac313cf4073b36a3fab3c02320\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf8ef095eddb7c4161021d27c10ca936cc2fe98685a0a7067bca1e10d89d82ba1\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/radiant/accessories/StargateBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IStargateRouter.sol\\\";\\nimport \\\"../../interfaces/IRouterETH.sol\\\";\\nimport \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\n\\n/*\\n    Chain Ids\\n        Ethereum: 101\\n        BSC: 102\\n        Avalanche: 106\\n        Polygon: 109\\n        Arbitrum: 110\\n        Optimism: 111\\n        Fantom: 112\\n        Swimmer: 114\\n        DFK: 115\\n        Harmony: 116\\n        Moonbeam: 126\\n\\n    Pool Ids\\n        Ethereum\\n            USDC: 1\\n            USDT: 2\\n            ETH: 13\\n        BSC\\n            USDT: 2\\n            BUSD: 5\\n        Avalanche\\n            USDC: 1\\n            USDT: 2\\n        Polygon\\n            USDC: 1\\n            USDT: 2\\n        Arbitrum\\n            USDC: 1\\n            USDT: 2\\n            ETH: 13\\n        Optimism\\n            USDC: 1\\n            ETH: 13\\n        Fantom\\n            USDC: 1\\n */\\n\\n/// @title Borrow gate via stargate\\n/// @author Radiant\\n/// @dev All function calls are currently implemented without side effects\\ncontract StargateBorrow is OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice FEE ratio DIVISOR\\n\\tuint256 public constant FEE_PERCENT_DIVISOR = 10000;\\n\\n\\t// ETH pool Id\\n\\tuint256 private constant POOL_ID_ETH = 13;\\n\\n\\t// ETH address\\n\\taddress private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\t/// @notice Stargate Router\\n\\tIStargateRouter public router;\\n\\n\\t/// @notice Stargate Router ETH\\n\\tIRouterETH public routerETH;\\n\\n\\t/// @notice Lending Pool address\\n\\tILendingPool public lendingPool;\\n\\n\\t// Weth address\\n\\tIWETH internal weth;\\n\\n\\t/// @notice asset => poolId; at the moment, pool IDs for USDC and USDT are the same accross all chains\\n\\tmapping(address => uint256) public poolIdPerChain;\\n\\n\\t/// @notice DAO wallet\\n\\taddress public daoTreasury;\\n\\n\\t/// @notice Cross chain borrow fee ratio\\n\\tuint256 public xChainBorrowFeePercent;\\n\\n\\t/// @notice Emitted when DAO address is updated\\n\\tevent DAOTreasuryUpdated(address indexed _daoTreasury);\\n\\n\\t/// @notice Emitted when fee info is updated\\n\\tevent XChainBorrowFeePercentUpdated(uint256 percent);\\n\\n\\t/// @notice Emited when pool ids of assets are updated\\n\\tevent PoolIDsUpdated(address[] assets, uint256[] poolIDs);\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _router Stargate Router address\\n\\t * @param _routerETH Stargate Router for ETH\\n\\t * @param _lendingPool Lending pool\\n\\t * @param _weth WETH address\\n\\t * @param _treasury Treasury address\\n\\t * @param _xChainBorrowFeePercent Cross chain borrow fee ratio\\n\\t */\\n\\tfunction initialize(\\n\\t\\tIStargateRouter _router,\\n\\t\\tIRouterETH _routerETH,\\n\\t\\tILendingPool _lendingPool,\\n\\t\\tIWETH _weth,\\n\\t\\taddress _treasury,\\n\\t\\tuint256 _xChainBorrowFeePercent\\n\\t) public initializer {\\n\\t\\trequire(address(_router) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_routerETH) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_lendingPool) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_weth) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(_treasury != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_xChainBorrowFeePercent <= uint256(1e4), \\\"Not a valid number\\\");\\n\\n\\t\\trouter = _router;\\n\\t\\trouterETH = _routerETH;\\n\\t\\tlendingPool = _lendingPool;\\n\\t\\tdaoTreasury = _treasury;\\n\\t\\txChainBorrowFeePercent = _xChainBorrowFeePercent;\\n\\t\\tweth = _weth;\\n\\t\\t__Ownable_init();\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t/**\\n\\t * @notice Set DAO Treasury.\\n\\t * @param _daoTreasury DAO Treasury address.\\n\\t */\\n\\tfunction setDAOTreasury(address _daoTreasury) external onlyOwner {\\n\\t\\tdaoTreasury = _daoTreasury;\\n\\t\\temit DAOTreasuryUpdated(_daoTreasury);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Cross Chain Borrow Fee Percent.\\n\\t * @param percent Fee ratio.\\n\\t */\\n\\tfunction setXChainBorrowFeePercent(uint256 percent) external onlyOwner {\\n\\t\\trequire(percent <= 1e4, \\\"Invalid ratio\\\");\\n\\t\\txChainBorrowFeePercent = percent;\\n\\t\\temit XChainBorrowFeePercentUpdated(percent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set pool ids of assets.\\n\\t * @param assets array.\\n\\t * @param poolIDs array.\\n\\t */\\n\\tfunction setPoolIDs(address[] memory assets, uint256[] memory poolIDs) external onlyOwner {\\n\\t\\trequire(assets.length == poolIDs.length, \\\"length mismatch\\\");\\n\\t\\tfor (uint256 i = 0; i < assets.length; i += 1) {\\n\\t\\t\\tpoolIdPerChain[assets[i]] = poolIDs[i];\\n\\t\\t}\\n\\t\\temit PoolIDsUpdated(assets, poolIDs);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get Cross Chain Borrow Fee amount.\\n\\t * @param amount Fee cost.\\n\\t */\\n\\tfunction getXChainBorrowFeeAmount(uint256 amount) public view returns (uint256) {\\n\\t\\tuint256 feeAmount = amount.mul(xChainBorrowFeePercent).div(FEE_PERCENT_DIVISOR);\\n\\t\\treturn feeAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quote LZ swap fee\\n\\t * @dev Call Router.sol method to get the value for swap()\\n\\t */\\n\\tfunction quoteLayerZeroSwapFee(\\n\\t\\tuint16 _dstChainId,\\n\\t\\tuint8 _functionType,\\n\\t\\tbytes calldata _toAddress,\\n\\t\\tbytes calldata _transferAndCallPayload,\\n\\t\\tIStargateRouter.lzTxObj memory _lzTxParams\\n\\t) external view returns (uint256, uint256) {\\n\\t\\treturn router.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Loop the deposit and borrow of an asset\\n\\t * @param asset for loop\\n\\t * @param amount for the initial deposit\\n\\t * @param interestRateMode stable or variable borrow mode\\n\\t * @param dstChainId Destination chain id\\n\\t **/\\n\\tfunction borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 dstChainId) external payable {\\n\\t\\tif (address(asset) == ETH_ADDRESS) {\\n\\t\\t\\tborrowETH(amount, interestRateMode, dstChainId);\\n\\t\\t} else {\\n\\t\\t\\tlendingPool.borrow(asset, amount, interestRateMode, 0, msg.sender);\\n\\t\\t\\tuint256 feeAmount = getXChainBorrowFeeAmount(amount);\\n\\t\\t\\tIERC20(asset).safeTransfer(daoTreasury, feeAmount);\\n\\t\\t\\tamount = amount.sub(feeAmount);\\n\\t\\t\\tIERC20(asset).safeApprove(address(router), 0);\\n\\t\\t\\tIERC20(asset).safeApprove(address(router), amount);\\n\\t\\t\\trouter.swap{value: msg.value}(\\n\\t\\t\\t\\tdstChainId, // dest chain id\\n\\t\\t\\t\\tpoolIdPerChain[asset], // src chain pool id\\n\\t\\t\\t\\tpoolIdPerChain[asset], // dst chain pool id\\n\\t\\t\\t\\tpayable(msg.sender), // receive address\\n\\t\\t\\t\\tamount, // transfer amount\\n\\t\\t\\t\\tamount.mul(99).div(100), // max slippage: 1%\\n\\t\\t\\t\\tIStargateRouter.lzTxObj(0, 0, \\\"0x\\\"),\\n\\t\\t\\t\\tabi.encodePacked(msg.sender),\\n\\t\\t\\t\\tbytes(\\\"\\\")\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Borrow ETH\\n\\t * @param amount for the initial deposit\\n\\t * @param interestRateMode stable or variable borrow mode\\n\\t * @param dstChainId Destination chain id\\n\\t **/\\n\\tfunction borrowETH(uint256 amount, uint256 interestRateMode, uint16 dstChainId) internal {\\n\\t\\tlendingPool.borrow(address(weth), amount, interestRateMode, 0, msg.sender);\\n\\t\\tweth.withdraw(amount);\\n\\t\\tuint256 feeAmount = getXChainBorrowFeeAmount(amount);\\n\\t\\t_safeTransferETH(daoTreasury, feeAmount);\\n\\t\\tamount = amount.sub(feeAmount);\\n\\n\\t\\trouterETH.swapETH{value: amount.add(msg.value)}(\\n\\t\\t\\tdstChainId, // dest chain id\\n\\t\\t\\tpayable(msg.sender), // receive address\\n\\t\\t\\tabi.encodePacked(msg.sender),\\n\\t\\t\\tamount, // transfer amount\\n\\t\\t\\tamount.mul(99).div(100) // max slippage: 1%\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev transfer ETH to an address, revert if it fails.\\n\\t * @param to recipient of the transfer\\n\\t * @param value the amount to send\\n\\t */\\n\\tfunction _safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\trequire(success, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x52a3e406964253c55c3e2e1b1afaacf56cc300999cf8a2d2839b80d69042f7c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611dad806100206000396000f3fe6080604052600436106101125760003560e01c806390e9faee116100a5578063c858f5f911610074578063dd2eaeaf11610059578063dd2eaeaf146102ff578063f2fde38b1461031f578063f887ea401461033f57600080fd5b8063c858f5f9146102cc578063da329855146102df57600080fd5b806390e9faee1461025657806395b6ef0c1461026c578063a59a99731461028c578063bcf8699f146102ac57600080fd5b80635e4b63da116100e15780635e4b63da146101be578063715018a6146101eb57806379022a9f146102005780638da5cb5b1461023857600080fd5b80632978dc3c1461011e57806334ec9478146101405780633ac91f7114610169578063501187b11461018957600080fd5b3661011957005b600080fd5b34801561012a57600080fd5b5061013e610139366004611598565b61035f565b005b34801561014c57600080fd5b5061015661271081565b6040519081526020015b60405180910390f35b34801561017557600080fd5b5061013e6101843660046115b5565b6103be565b34801561019557600080fd5b506101a96101a436600461169e565b610458565b60408051928352602083019190915201610160565b3480156101ca57600080fd5b506101566101d9366004611598565b60696020526000908152604090205481565b3480156101f757600080fd5b5061013e610502565b34801561020c57600080fd5b50606a54610220906001600160a01b031681565b6040516001600160a01b039091168152602001610160565b34801561024457600080fd5b506033546001600160a01b0316610220565b34801561026257600080fd5b50610156606b5481565b34801561027857600080fd5b5061013e6102873660046117f3565b610516565b34801561029857600080fd5b50606754610220906001600160a01b031681565b3480156102b857600080fd5b50606654610220906001600160a01b031681565b61013e6102da36600461186c565b610872565b3480156102eb57600080fd5b506101566102fa3660046115b5565b610ad9565b34801561030b57600080fd5b5061013e61031a366004611943565b610afe565b34801561032b57600080fd5b5061013e61033a366004611598565b610c07565b34801561034b57600080fd5b50606554610220906001600160a01b031681565b610367610c97565b606a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f20ab20a4fc6952498a339faf75f34c09619cdbef8368cdc88411a2edf1a9838590600090a250565b6103c6610c97565b61271081111561041d5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420726174696f0000000000000000000000000000000000000060448201526064015b60405180910390fd5b606b8190556040518181527ff1893cfdf38a1f92aee04d52d4636a2fc6da1d3c670076d2471339a161fbe91b9060200160405180910390a150565b6065546040517f0a51236900000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690630a512369906104b2908c908c908c908c908c908c908c90600401611aaf565b6040805180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190611b0b565b9150915097509795505050505050565b61050a610c97565b6105146000610cf1565b565b600054610100900460ff16158080156105365750600054600160ff909116105b806105505750303b158015610550575060005460ff166001145b6105c25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610414565b6000805460ff1916600117905580156105e5576000805461ff0019166101001790555b6001600160a01b0387166106315760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b03861661067d5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0385166106c95760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0384166107155760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0383166107615760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6127108211156107b35760405162461bcd60e51b815260206004820152601260248201527f4e6f7420612076616c6964206e756d62657200000000000000000000000000006044820152606401610414565b6065805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a811691909117909255606680548216898416179055606780548216888416179055606a80548216868416179055606b84905560688054909116918616919091179055610823610d50565b8015610869576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156108a7576108a2838383610dc3565b610ad3565b60675460405163a415bcad60e01b81526001600160a01b0386811660048301526024820186905260448201859052600060648301523360848301529091169063a415bcad9060a401600060405180830381600087803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b50505050600061092c84610ad9565b606a54909150610949906001600160a01b03878116911683610f9d565b610953848261104b565b606554909450610971906001600160a01b0387811691166000611057565b60655461098b906001600160a01b03878116911686611057565b6065546001600160a01b03868116600090815260696020526040902054911690639fbf10fc903490859080338a6109ce60646109c88360636111a5565b906111b1565b604051806060016040528060008152602001600081526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081525033604051602001610a49919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f198184030181526020830182526000835290517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b168152610a9f999897969594939290600401611b2f565b6000604051808303818588803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b5050505050505b50505050565b600080610af76127106109c8606b54866111a590919063ffffffff16565b9392505050565b610b06610c97565b8051825114610b575760405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606401610414565b60005b8251811015610bc957818181518110610b7557610b75611bad565b602002602001015160696000858481518110610b9357610b93611bad565b6020908102919091018101516001600160a01b0316825281019190915260400160002055610bc2600182611bd9565b9050610b5a565b507fdef067bfb4e27bcfac9e0863dca43835925102effa188879dc69f98d4f33a47b8282604051610bfb929190611bf1565b60405180910390a15050565b610c0f610c97565b6001600160a01b038116610c8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610414565b610c9481610cf1565b50565b6033546001600160a01b031633146105145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610414565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610dbb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610414565b6105146111bd565b60675460685460405163a415bcad60e01b81526001600160a01b03918216600482015260248101869052604481018590526000606482015233608482015291169063a415bcad9060a401600060405180830381600087803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b50506068546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506000610ec184610ad9565b606a54909150610eda906001600160a01b031682611231565b610ee4848261104b565b6066549094506001600160a01b0316631114cd2a610f0286346112ee565b60405133606081901b6bffffffffffffffffffffffff19166020830152869160340160408051601f1981840301815291905289610f4560646109c88360636111a5565b6040518763ffffffff1660e01b8152600401610f65959493929190611c75565b6000604051808303818588803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b505050505050505050565b6040516001600160a01b0383166024820152604481018290526110469084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112fa565b505050565b6000610af78284611cb5565b8015806110ea57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190611ccc565b155b61115c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610414565b6040516001600160a01b0383166024820152604481018290526110469084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610fe2565b6000610af78284611ce5565b6000610af78284611d04565b600054610100900460ff166112285760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610414565b61051433610cf1565b604080516000808252602082019092526001600160a01b03841690839060405161125b9190611d26565b60006040518083038185875af1925050503d8060008114611298576040519150601f19603f3d011682016040523d82523d6000602084013e61129d565b606091505b50509050806110465760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610414565b6000610af78284611bd9565b600061134f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113df9092919063ffffffff16565b805190915015611046578080602001905181019061136d9190611d42565b6110465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610414565b60606113ee84846000856113f6565b949350505050565b60608247101561146e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610414565b600080866001600160a01b0316858760405161148a9190611d26565b60006040518083038185875af1925050503d80600081146114c7576040519150601f19603f3d011682016040523d82523d6000602084013e6114cc565b606091505b50915091506114dd878383876114e8565b979650505050505050565b6060831561155457825161154d576001600160a01b0385163b61154d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610414565b50816113ee565b6113ee83838151156115695781518083602001fd5b8060405162461bcd60e51b81526004016104149190611d64565b6001600160a01b0381168114610c9457600080fd5b6000602082840312156115aa57600080fd5b8135610af781611583565b6000602082840312156115c757600080fd5b5035919050565b803561ffff811681146115e057600080fd5b919050565b60008083601f8401126115f757600080fd5b50813567ffffffffffffffff81111561160f57600080fd5b60208301915083602082850101111561162757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156116675761166761162e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116965761169661162e565b604052919050565b600080600080600080600060a0888a0312156116b957600080fd5b6116c2886115ce565b965060208089013560ff811681146116d957600080fd5b9650604089013567ffffffffffffffff808211156116f657600080fd5b6117028c838d016115e5565b909850965060608b013591508082111561171b57600080fd5b6117278c838d016115e5565b909650945060808b013591508082111561174057600080fd5b908a01906060828d03121561175457600080fd5b61175c611644565b82358152838301358482015260408301358281111561177a57600080fd5b8084019350508c601f84011261178f57600080fd5b8235828111156117a1576117a161162e565b6117b3601f8201601f1916860161166d565b92508083528d858286010111156117c957600080fd5b80858501868501376000858285010152508160408201528094505050505092959891949750929550565b60008060008060008060c0878903121561180c57600080fd5b863561181781611583565b9550602087013561182781611583565b9450604087013561183781611583565b9350606087013561184781611583565b9250608087013561185781611583565b8092505060a087013590509295509295509295565b6000806000806080858703121561188257600080fd5b843561188d81611583565b935060208501359250604085013591506118a9606086016115ce565b905092959194509250565b600067ffffffffffffffff8211156118ce576118ce61162e565b5060051b60200190565b600082601f8301126118e957600080fd5b813560206118fe6118f9836118b4565b61166d565b82815260059290921b8401810191818101908684111561191d57600080fd5b8286015b848110156119385780358352918301918301611921565b509695505050505050565b6000806040838503121561195657600080fd5b823567ffffffffffffffff8082111561196e57600080fd5b818501915085601f83011261198257600080fd5b813560206119926118f9836118b4565b82815260059290921b840181019181810190898411156119b157600080fd5b948201945b838610156119d85785356119c981611583565b825294820194908201906119b6565b965050860135925050808211156119ee57600080fd5b506119fb858286016118d8565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60005b83811015611a49578181015183820152602001611a31565b83811115610ad35750506000910152565b60008151808452611a72816020860160208601611a2e565b601f01601f19169290920160200192915050565b805182526020810151602083015260006040820151606060408501526113ee6060850182611a5a565b61ffff8816815260ff8716602082015260a060408201526000611ad660a083018789611a05565b8281036060840152611ae9818688611a05565b90508281036080840152611afd8185611a86565b9a9950505050505050505050565b60008060408385031215611b1e57600080fd5b505080516020909101519092909150565b600061012061ffff8c1683528a60208401528960408401526001600160a01b03891660608401528760808401528660a08401528060c0840152611b7481840187611a86565b905082810360e0840152611b888186611a5a565b9050828103610100840152611b9d8185611a5a565b9c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611bec57611bec611bc3565b500190565b604080825283519082018190526000906020906060840190828701845b82811015611c335781516001600160a01b031684529284019290840190600101611c0e565b5050508381038285015284518082528583019183019060005b81811015611c6857835183529284019291840191600101611c4c565b5090979650505050505050565b61ffff861681526001600160a01b038516602082015260a060408201526000611ca160a0830186611a5a565b606083019490945250608001529392505050565b600082821015611cc757611cc7611bc3565b500390565b600060208284031215611cde57600080fd5b5051919050565b6000816000190483118215151615611cff57611cff611bc3565b500290565b600082611d2157634e487b7160e01b600052601260045260246000fd5b500490565b60008251611d38818460208701611a2e565b9190910192915050565b600060208284031215611d5457600080fd5b81518015158114610af757600080fd5b602081526000610af76020830184611a5a56fea2646970667358221220f9a82ef854035fa962222fab0306742c3d40d4e9b87c732089c5d83c5ec75eef64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101125760003560e01c806390e9faee116100a5578063c858f5f911610074578063dd2eaeaf11610059578063dd2eaeaf146102ff578063f2fde38b1461031f578063f887ea401461033f57600080fd5b8063c858f5f9146102cc578063da329855146102df57600080fd5b806390e9faee1461025657806395b6ef0c1461026c578063a59a99731461028c578063bcf8699f146102ac57600080fd5b80635e4b63da116100e15780635e4b63da146101be578063715018a6146101eb57806379022a9f146102005780638da5cb5b1461023857600080fd5b80632978dc3c1461011e57806334ec9478146101405780633ac91f7114610169578063501187b11461018957600080fd5b3661011957005b600080fd5b34801561012a57600080fd5b5061013e610139366004611598565b61035f565b005b34801561014c57600080fd5b5061015661271081565b6040519081526020015b60405180910390f35b34801561017557600080fd5b5061013e6101843660046115b5565b6103be565b34801561019557600080fd5b506101a96101a436600461169e565b610458565b60408051928352602083019190915201610160565b3480156101ca57600080fd5b506101566101d9366004611598565b60696020526000908152604090205481565b3480156101f757600080fd5b5061013e610502565b34801561020c57600080fd5b50606a54610220906001600160a01b031681565b6040516001600160a01b039091168152602001610160565b34801561024457600080fd5b506033546001600160a01b0316610220565b34801561026257600080fd5b50610156606b5481565b34801561027857600080fd5b5061013e6102873660046117f3565b610516565b34801561029857600080fd5b50606754610220906001600160a01b031681565b3480156102b857600080fd5b50606654610220906001600160a01b031681565b61013e6102da36600461186c565b610872565b3480156102eb57600080fd5b506101566102fa3660046115b5565b610ad9565b34801561030b57600080fd5b5061013e61031a366004611943565b610afe565b34801561032b57600080fd5b5061013e61033a366004611598565b610c07565b34801561034b57600080fd5b50606554610220906001600160a01b031681565b610367610c97565b606a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f20ab20a4fc6952498a339faf75f34c09619cdbef8368cdc88411a2edf1a9838590600090a250565b6103c6610c97565b61271081111561041d5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420726174696f0000000000000000000000000000000000000060448201526064015b60405180910390fd5b606b8190556040518181527ff1893cfdf38a1f92aee04d52d4636a2fc6da1d3c670076d2471339a161fbe91b9060200160405180910390a150565b6065546040517f0a51236900000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690630a512369906104b2908c908c908c908c908c908c908c90600401611aaf565b6040805180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190611b0b565b9150915097509795505050505050565b61050a610c97565b6105146000610cf1565b565b600054610100900460ff16158080156105365750600054600160ff909116105b806105505750303b158015610550575060005460ff166001145b6105c25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610414565b6000805460ff1916600117905580156105e5576000805461ff0019166101001790555b6001600160a01b0387166106315760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b03861661067d5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0385166106c95760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0384166107155760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6001600160a01b0383166107615760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610414565b6127108211156107b35760405162461bcd60e51b815260206004820152601260248201527f4e6f7420612076616c6964206e756d62657200000000000000000000000000006044820152606401610414565b6065805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a811691909117909255606680548216898416179055606780548216888416179055606a80548216868416179055606b84905560688054909116918616919091179055610823610d50565b8015610869576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156108a7576108a2838383610dc3565b610ad3565b60675460405163a415bcad60e01b81526001600160a01b0386811660048301526024820186905260448201859052600060648301523360848301529091169063a415bcad9060a401600060405180830381600087803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b50505050600061092c84610ad9565b606a54909150610949906001600160a01b03878116911683610f9d565b610953848261104b565b606554909450610971906001600160a01b0387811691166000611057565b60655461098b906001600160a01b03878116911686611057565b6065546001600160a01b03868116600090815260696020526040902054911690639fbf10fc903490859080338a6109ce60646109c88360636111a5565b906111b1565b604051806060016040528060008152602001600081526020016040518060400160405280600281526020017f307800000000000000000000000000000000000000000000000000000000000081525081525033604051602001610a49919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f198184030181526020830182526000835290517fffffffff0000000000000000000000000000000000000000000000000000000060e08d901b168152610a9f999897969594939290600401611b2f565b6000604051808303818588803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b5050505050505b50505050565b600080610af76127106109c8606b54866111a590919063ffffffff16565b9392505050565b610b06610c97565b8051825114610b575760405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606401610414565b60005b8251811015610bc957818181518110610b7557610b75611bad565b602002602001015160696000858481518110610b9357610b93611bad565b6020908102919091018101516001600160a01b0316825281019190915260400160002055610bc2600182611bd9565b9050610b5a565b507fdef067bfb4e27bcfac9e0863dca43835925102effa188879dc69f98d4f33a47b8282604051610bfb929190611bf1565b60405180910390a15050565b610c0f610c97565b6001600160a01b038116610c8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610414565b610c9481610cf1565b50565b6033546001600160a01b031633146105145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610414565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610dbb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610414565b6105146111bd565b60675460685460405163a415bcad60e01b81526001600160a01b03918216600482015260248101869052604481018590526000606482015233608482015291169063a415bcad9060a401600060405180830381600087803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b50506068546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506000610ec184610ad9565b606a54909150610eda906001600160a01b031682611231565b610ee4848261104b565b6066549094506001600160a01b0316631114cd2a610f0286346112ee565b60405133606081901b6bffffffffffffffffffffffff19166020830152869160340160408051601f1981840301815291905289610f4560646109c88360636111a5565b6040518763ffffffff1660e01b8152600401610f65959493929190611c75565b6000604051808303818588803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b505050505050505050565b6040516001600160a01b0383166024820152604481018290526110469084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112fa565b505050565b6000610af78284611cb5565b8015806110ea57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e89190611ccc565b155b61115c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610414565b6040516001600160a01b0383166024820152604481018290526110469084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610fe2565b6000610af78284611ce5565b6000610af78284611d04565b600054610100900460ff166112285760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610414565b61051433610cf1565b604080516000808252602082019092526001600160a01b03841690839060405161125b9190611d26565b60006040518083038185875af1925050503d8060008114611298576040519150601f19603f3d011682016040523d82523d6000602084013e61129d565b606091505b50509050806110465760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610414565b6000610af78284611bd9565b600061134f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113df9092919063ffffffff16565b805190915015611046578080602001905181019061136d9190611d42565b6110465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610414565b60606113ee84846000856113f6565b949350505050565b60608247101561146e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610414565b600080866001600160a01b0316858760405161148a9190611d26565b60006040518083038185875af1925050503d80600081146114c7576040519150601f19603f3d011682016040523d82523d6000602084013e6114cc565b606091505b50915091506114dd878383876114e8565b979650505050505050565b6060831561155457825161154d576001600160a01b0385163b61154d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610414565b50816113ee565b6113ee83838151156115695781518083602001fd5b8060405162461bcd60e51b81526004016104149190611d64565b6001600160a01b0381168114610c9457600080fd5b6000602082840312156115aa57600080fd5b8135610af781611583565b6000602082840312156115c757600080fd5b5035919050565b803561ffff811681146115e057600080fd5b919050565b60008083601f8401126115f757600080fd5b50813567ffffffffffffffff81111561160f57600080fd5b60208301915083602082850101111561162757600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156116675761166761162e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116965761169661162e565b604052919050565b600080600080600080600060a0888a0312156116b957600080fd5b6116c2886115ce565b965060208089013560ff811681146116d957600080fd5b9650604089013567ffffffffffffffff808211156116f657600080fd5b6117028c838d016115e5565b909850965060608b013591508082111561171b57600080fd5b6117278c838d016115e5565b909650945060808b013591508082111561174057600080fd5b908a01906060828d03121561175457600080fd5b61175c611644565b82358152838301358482015260408301358281111561177a57600080fd5b8084019350508c601f84011261178f57600080fd5b8235828111156117a1576117a161162e565b6117b3601f8201601f1916860161166d565b92508083528d858286010111156117c957600080fd5b80858501868501376000858285010152508160408201528094505050505092959891949750929550565b60008060008060008060c0878903121561180c57600080fd5b863561181781611583565b9550602087013561182781611583565b9450604087013561183781611583565b9350606087013561184781611583565b9250608087013561185781611583565b8092505060a087013590509295509295509295565b6000806000806080858703121561188257600080fd5b843561188d81611583565b935060208501359250604085013591506118a9606086016115ce565b905092959194509250565b600067ffffffffffffffff8211156118ce576118ce61162e565b5060051b60200190565b600082601f8301126118e957600080fd5b813560206118fe6118f9836118b4565b61166d565b82815260059290921b8401810191818101908684111561191d57600080fd5b8286015b848110156119385780358352918301918301611921565b509695505050505050565b6000806040838503121561195657600080fd5b823567ffffffffffffffff8082111561196e57600080fd5b818501915085601f83011261198257600080fd5b813560206119926118f9836118b4565b82815260059290921b840181019181810190898411156119b157600080fd5b948201945b838610156119d85785356119c981611583565b825294820194908201906119b6565b965050860135925050808211156119ee57600080fd5b506119fb858286016118d8565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60005b83811015611a49578181015183820152602001611a31565b83811115610ad35750506000910152565b60008151808452611a72816020860160208601611a2e565b601f01601f19169290920160200192915050565b805182526020810151602083015260006040820151606060408501526113ee6060850182611a5a565b61ffff8816815260ff8716602082015260a060408201526000611ad660a083018789611a05565b8281036060840152611ae9818688611a05565b90508281036080840152611afd8185611a86565b9a9950505050505050505050565b60008060408385031215611b1e57600080fd5b505080516020909101519092909150565b600061012061ffff8c1683528a60208401528960408401526001600160a01b03891660608401528760808401528660a08401528060c0840152611b7481840187611a86565b905082810360e0840152611b888186611a5a565b9050828103610100840152611b9d8185611a5a565b9c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611bec57611bec611bc3565b500190565b604080825283519082018190526000906020906060840190828701845b82811015611c335781516001600160a01b031684529284019290840190600101611c0e565b5050508381038285015284518082528583019183019060005b81811015611c6857835183529284019291840191600101611c4c565b5090979650505050505050565b61ffff861681526001600160a01b038516602082015260a060408201526000611ca160a0830186611a5a565b606083019490945250608001529392505050565b600082821015611cc757611cc7611bc3565b500390565b600060208284031215611cde57600080fd5b5051919050565b6000816000190483118215151615611cff57611cff611bc3565b500290565b600082611d2157634e487b7160e01b600052601260045260246000fd5b500490565b60008251611d38818460208701611a2e565b9190910192915050565b600060208284031215611d5457600080fd5b81518015158114610af757600080fd5b602081526000610af76020830184611a5a56fea2646970667358221220f9a82ef854035fa962222fab0306742c3d40d4e9b87c732089c5d83c5ec75eef64736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "borrow(address,uint256,uint256,uint16)": {
        "details": "Loop the deposit and borrow of an asset",
        "params": {
          "amount": "for the initial deposit",
          "asset": "for loop",
          "dstChainId": "Destination chain id*",
          "interestRateMode": "stable or variable borrow mode"
        }
      },
      "getXChainBorrowFeeAmount(uint256)": {
        "params": {
          "amount": "Fee cost."
        }
      },
      "initialize(address,address,address,address,address,uint256)": {
        "params": {
          "_lendingPool": "Lending pool",
          "_router": "Stargate Router address",
          "_routerETH": "Stargate Router for ETH",
          "_treasury": "Treasury address",
          "_weth": "WETH address",
          "_xChainBorrowFeePercent": "Cross chain borrow fee ratio"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteLayerZeroSwapFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))": {
        "details": "Call Router.sol method to get the value for swap()"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDAOTreasury(address)": {
        "params": {
          "_daoTreasury": "DAO Treasury address."
        }
      },
      "setPoolIDs(address[],uint256[])": {
        "params": {
          "assets": "array.",
          "poolIDs": "array."
        }
      },
      "setXChainBorrowFeePercent(uint256)": {
        "params": {
          "percent": "Fee ratio."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Borrow gate via stargate",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DAOTreasuryUpdated(address)": {
        "notice": "Emitted when DAO address is updated"
      },
      "PoolIDsUpdated(address[],uint256[])": {
        "notice": "Emited when pool ids of assets are updated"
      },
      "XChainBorrowFeePercentUpdated(uint256)": {
        "notice": "Emitted when fee info is updated"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_PERCENT_DIVISOR()": {
        "notice": "FEE ratio DIVISOR"
      },
      "daoTreasury()": {
        "notice": "DAO wallet"
      },
      "getXChainBorrowFeeAmount(uint256)": {
        "notice": "Get Cross Chain Borrow Fee amount."
      },
      "initialize(address,address,address,address,address,uint256)": {
        "notice": "Constructor"
      },
      "lendingPool()": {
        "notice": "Lending Pool address"
      },
      "poolIdPerChain(address)": {
        "notice": "asset => poolId; at the moment, pool IDs for USDC and USDT are the same accross all chains"
      },
      "quoteLayerZeroSwapFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))": {
        "notice": "Quote LZ swap fee"
      },
      "router()": {
        "notice": "Stargate Router"
      },
      "routerETH()": {
        "notice": "Stargate Router ETH"
      },
      "setDAOTreasury(address)": {
        "notice": "Set DAO Treasury."
      },
      "setPoolIDs(address[],uint256[])": {
        "notice": "Set pool ids of assets."
      },
      "setXChainBorrowFeePercent(uint256)": {
        "notice": "Set Cross Chain Borrow Fee Percent."
      },
      "xChainBorrowFeePercent()": {
        "notice": "Cross chain borrow fee ratio"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5154,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IStargateRouter)3033"
      },
      {
        "astId": 5158,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "routerETH",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IRouterETH)2913"
      },
      {
        "astId": 5162,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "lendingPool",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(ILendingPool)2435"
      },
      {
        "astId": 5165,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "weth",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IWETH)3080"
      },
      {
        "astId": 5170,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "poolIdPerChain",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5173,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "daoTreasury",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 5176,
        "contract": "contracts/radiant/accessories/StargateBorrow.sol:StargateBorrow",
        "label": "xChainBorrowFeePercent",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILendingPool)2435": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IRouterETH)2913": {
        "encoding": "inplace",
        "label": "contract IRouterETH",
        "numberOfBytes": "20"
      },
      "t_contract(IStargateRouter)3033": {
        "encoding": "inplace",
        "label": "contract IStargateRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)3080": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}