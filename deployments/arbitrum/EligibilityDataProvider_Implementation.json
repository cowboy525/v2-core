{
  "address": "0x99AaF3C391527e84D6e5c305991c601c06208D93",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IChefIncentivesController",
          "name": "_chef",
          "type": "address"
        }
      ],
      "name": "ChefIncentivesControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "DqTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceToleranceRatio",
          "type": "uint256"
        }
      ],
      "name": "PriceToleranceRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredDepositRatio",
          "type": "uint256"
        }
      ],
      "name": "RequiredDepositRatioUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disqualifiedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDqTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_middleFeeDistribution",
          "type": "address"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isEligibleForRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEligible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isMarketDisqualified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastEligibleStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lastEligibleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastEligibleTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedUsdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "middleFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceToleranceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "refresh",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredDepositRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "requiredUsdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChefIncentivesController",
          "name": "_chef",
          "type": "address"
        }
      ],
      "name": "setChefIncentivesController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setDqTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "setLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceToleranceRatio",
          "type": "uint256"
        }
      ],
      "name": "setPriceToleranceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requiredDepositRatio",
          "type": "uint256"
        }
      ],
      "name": "setRequiredDepositRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd805894895d20ad348f7456a9ea209a61391645e0c52933b38f4fbea8a749b3c",
  "receipt": {
    "to": null,
    "from": "0x7759124915160E94C77EcE5B96E8a7fCec44Aa19",
    "contractAddress": "0x99AaF3C391527e84D6e5c305991c601c06208D93",
    "transactionIndex": 2,
    "gasUsed": "6845696",
    "logsBloom": "0x
    "blockHash": "0x11fddcb201d926f9b2bf24dcc73e905727325b611b095a8164c2466acc8ed939",
    "transactionHash": "0xd805894895d20ad348f7456a9ea209a61391645e0c52933b38f4fbea8a749b3c",
    "logs": [],
    "blockNumber": 71246477,
    "cumulativeGasUsed": "7491821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ed8517f072d3887f8d783037813f24b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_chef\",\"type\":\"address\"}],\"name\":\"ChefIncentivesControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DqTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceToleranceRatio\",\"type\":\"uint256\"}],\"name\":\"PriceToleranceRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredDepositRatio\",\"type\":\"uint256\"}],\"name\":\"RequiredDepositRatioUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disqualifiedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDqTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_middleFeeDistribution\",\"type\":\"address\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isEligibleForRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMarketDisqualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEligibleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lastEligibleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastEligibleTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceToleranceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredDepositRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"requiredUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_chef\",\"type\":\"address\"}],\"name\":\"setChefIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setDqTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceToleranceRatio\",\"type\":\"uint256\"}],\"name\":\"setPriceToleranceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredDepositRatio\",\"type\":\"uint256\"}],\"name\":\"setRequiredDepositRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Radiant Labs\",\"details\":\"All function calls are currently implemented without side effects\",\"kind\":\"dev\",\"methods\":{\"getDqTime(address)\":{\"params\":{\"_user\":\"'s address\"}},\"initialize(address,address,address)\":{\"params\":{\"_lendingPool\":\"Address of lending pool.\",\"_middleFeeDistribution\":\"MiddleFeeDistribution address.\",\"_priceProvider\":\"PriceProvider address.\"}},\"isEligibleForRewards(address)\":{\"params\":{\"_user\":\"'s address\"}},\"isMarketDisqualified(address)\":{\"params\":{\"_user\":\"'s address\"}},\"lastEligibleTime(address)\":{\"details\":\"If user is still eligible, it will return future time  CAUTION: this function only works perfect when the array  is ordered by lock time. This is assured when _stake happens.\",\"params\":{\"user\":\"'s address\"}},\"lockedUsdValue(address)\":{\"params\":{\"user\":\"'s address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refresh(address)\":{\"params\":{\"user\":\"'s address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredUsdValue(address)\":{\"params\":{\"user\":\"'s address\"},\"returns\":{\"required\":\"USD value.\"}},\"setChefIncentivesController(address)\":{\"params\":{\"_chef\":\"address.\"}},\"setDqTime(address,uint256)\":{\"details\":\"Only callable by CIC\",\"params\":{\"_time\":\"for DQ\",\"_user\":\"'s address\"}},\"setPriceToleranceRatio(uint256)\":{\"params\":{\"_priceToleranceRatio\":\"Ratio in bips.\"}},\"setRequiredDepositRatio(uint256)\":{\"params\":{\"_requiredDepositRatio\":\"Ratio in bips.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Eligible Deposit Provider\",\"version\":1},\"userdoc\":{\"events\":{\"AddToken(address)\":{\"notice\":\"Emitted when a new token is added\"},\"ChefIncentivesControllerUpdated(address)\":{\"notice\":\"Emitted when CIC is set\"},\"DqTimeUpdated(address,uint256)\":{\"notice\":\"Emitted when DQ time is set\"},\"LPTokenUpdated(address)\":{\"notice\":\"Emitted when LP token is set\"},\"PriceToleranceRatioUpdated(uint256)\":{\"notice\":\"Emitted when price tolerance ratio is updated\"},\"RequiredDepositRatioUpdated(uint256)\":{\"notice\":\"Emitted when required TVL ratio is updated\"}},\"kind\":\"user\",\"methods\":{\"RATIO_DIVISOR()\":{\"notice\":\"RATIO BASE equal to 100%\"},\"chef()\":{\"notice\":\"Address of CIC\"},\"disqualifiedTime(address)\":{\"notice\":\"Disqualified time of the user\"},\"getDqTime(address)\":{\"notice\":\"Returns DQ time of the user\"},\"initialize(address,address,address)\":{\"notice\":\"Constructor\"},\"isEligibleForRewards(address)\":{\"notice\":\"Returns if the user is eligible to receive rewards\"},\"isMarketDisqualified(address)\":{\"notice\":\"Is user DQed due to lock expire or price update\"},\"lastEligibleStatus(address)\":{\"notice\":\"Last eligible status of the user\"},\"lastEligibleTime(address)\":{\"notice\":\"Returns last eligible time of the user\"},\"lendingPool()\":{\"notice\":\"Address of Lending Pool\"},\"lockedUsdValue(address)\":{\"notice\":\"Returns locked RDNT and LP token value in eth\"},\"lpToken()\":{\"notice\":\"RDNT-ETH LP token\"},\"middleFeeDistribution()\":{\"notice\":\"Address of Middle fee distribution\"},\"priceProvider()\":{\"notice\":\"RDNT + LP price provider\"},\"priceToleranceRatio()\":{\"notice\":\"Ratio of the required price to still allow without disqualification; in bips\"},\"refresh(address)\":{\"notice\":\"Refresh token amount for eligibility\"},\"requiredDepositRatio()\":{\"notice\":\"Required ratio of TVL to get reward; in bips\"},\"requiredUsdValue(address)\":{\"notice\":\"Returns USD value required to be locked\"},\"setChefIncentivesController(address)\":{\"notice\":\"Set CIC\"},\"setDqTime(address,uint256)\":{\"notice\":\"Sets DQ time of the user\"},\"setLPToken(address)\":{\"notice\":\"Set LP token\"},\"setPriceToleranceRatio(uint256)\":{\"notice\":\"Sets price tolerance ratio. Can only be called by the owner.\"},\"setRequiredDepositRatio(uint256)\":{\"notice\":\"Sets required tvl ratio. Can only be called by the owner.\"},\"updatePrice()\":{\"notice\":\"Update token price\"},\"userDeposits(address,address)\":{\"notice\":\"User's deposits per rToken; rToken => user => amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/eligibility/EligibilityDataProvider.sol\":\"EligibilityDataProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n}\\n\",\"keccak256\":\"0xa9405538ab159ea1558f50083c46b97bef614b1255808970807d01f69e8731b8\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\\n\",\"keccak256\":\"0xb83ef87aeba0312ab242ba35657ef0283aaf3070df5919c280879bc173638aba\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getRdntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b3a8c0804f5004639275ac1928dbf8f277ab956be5b8af0dec28b2d08d54c3e\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdfddfa084983a65236cee7e6f939dfbf27e715f46e60b9e9dbccd5cd4e48ad10\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x06101420297ac4c13dd8b0436e1ff6098e2c21243927d7e762f15929f5a780e1\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xa75f6e8aff3a0f493af06290c34cb3c57e0e151cced52418ff42f02be3e7287c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint);\\n\\n\\tfunction approve(address spender, uint value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint);\\n\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\n\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves() external view returns (uint256 reserve0, uint256 reserve1, uint256 blockTimestampLast);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint);\\n\\n\\tfunction kLast() external view returns (uint);\\n\\n\\tfunction mint(address to) external returns (uint liquidity);\\n\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\n\\n\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x21816a9ec39bd0afe768e25e8bec4b52d085677635c6c278d1e632ba1e290da1\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountToken, uint amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint amountA, uint amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint amountToken, uint amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint[] memory amounts);\\n\\n\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x6283fe763cbc2fad9ab3b2203ce1c331bd6606d155b3c63c2e6e6afc93502e5f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint liquidity,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xbb3e93183e29ffbb91129f332eb453829d3c5ff35d78a318274bfafb653f20a3\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/radiant/eligibility/EligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../../interfaces/ILendingPool.sol\\\";\\nimport \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/LockedBalance.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\n\\n/// @title Eligible Deposit Provider\\n/// @author Radiant Labs\\n/// @dev All function calls are currently implemented without side effects\\ncontract EligibilityDataProvider is OwnableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\n\\t/********************** Common Info ***********************/\\n\\n\\t/// @notice RATIO BASE equal to 100%\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\t/// @notice Address of Lending Pool\\n\\tILendingPool public lendingPool;\\n\\n\\t/// @notice Address of CIC\\n\\tIChefIncentivesController public chef;\\n\\n\\t/// @notice Address of Middle fee distribution\\n\\tIMiddleFeeDistribution public middleFeeDistribution;\\n\\n\\t/// @notice RDNT + LP price provider\\n\\tIPriceProvider public priceProvider;\\n\\n\\t/// @notice Required ratio of TVL to get reward; in bips\\n\\tuint256 public requiredDepositRatio;\\n\\n\\t/// @notice Ratio of the required price to still allow without disqualification; in bips\\n\\tuint256 public priceToleranceRatio;\\n\\n\\t/// @notice RDNT-ETH LP token\\n\\taddress public lpToken;\\n\\n\\t/********************** Eligible info ***********************/\\n\\n\\t/// @notice Last eligible status of the user\\n\\tmapping(address => bool) public lastEligibleStatus;\\n\\n\\t/// @notice Disqualified time of the user\\n\\tmapping(address => uint256) public disqualifiedTime;\\n\\n\\t// Elgible deposits per rToken\\n\\tmapping(address => uint256) private eligibleDeposits;\\n\\n\\t/// @notice User's deposits per rToken; rToken => user => amount\\n\\tmapping(address => mapping(address => uint256)) public userDeposits;\\n\\n\\t/********************** Events ***********************/\\n\\n\\t/// @notice Emitted when CIC is set\\n\\tevent ChefIncentivesControllerUpdated(IChefIncentivesController _chef);\\n\\n\\t/// @notice Emitted when LP token is set\\n\\tevent LPTokenUpdated(address _lpToken);\\n\\n\\t/// @notice Emitted when required TVL ratio is updated\\n\\tevent RequiredDepositRatioUpdated(uint256 requiredDepositRatio);\\n\\n\\t/// @notice Emitted when price tolerance ratio is updated\\n\\tevent PriceToleranceRatioUpdated(uint256 priceToleranceRatio);\\n\\n\\t/// @notice Emitted when DQ time is set\\n\\tevent DqTimeUpdated(address _user, uint256 _time);\\n\\n\\t/// @notice Emitted when a new token is added\\n\\tevent AddToken(address indexed token);\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _lendingPool Address of lending pool.\\n\\t * @param _middleFeeDistribution MiddleFeeDistribution address.\\n\\t * @param _priceProvider PriceProvider address.\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool _lendingPool,\\n\\t\\tIMiddleFeeDistribution _middleFeeDistribution,\\n\\t\\tIPriceProvider _priceProvider\\n\\t) public initializer {\\n\\t\\trequire(address(_lendingPool) != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_middleFeeDistribution) != (address(0)), \\\"Not a valid address\\\");\\n\\t\\trequire(address(_priceProvider) != (address(0)), \\\"Not a valid address\\\");\\n\\n\\t\\tlendingPool = _lendingPool;\\n\\t\\tmiddleFeeDistribution = _middleFeeDistribution;\\n\\t\\tpriceProvider = _priceProvider;\\n\\t\\trequiredDepositRatio = 500;\\n\\t\\tpriceToleranceRatio = 9000;\\n\\t\\t__Ownable_init();\\n\\n\\t}\\n\\n\\t/********************** Setters ***********************/\\n\\n\\t/**\\n\\t * @notice Set CIC\\n\\t * @param _chef address.\\n\\t */\\n\\tfunction setChefIncentivesController(IChefIncentivesController _chef) external onlyOwner {\\n\\t\\tchef = _chef;\\n\\t\\temit ChefIncentivesControllerUpdated(_chef);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set LP token\\n\\t */\\n\\tfunction setLPToken(address _lpToken) external onlyOwner {\\n\\t\\trequire(lpToken == address(0), \\\"LP token already set\\\");\\n\\t\\tlpToken = _lpToken;\\n\\n\\t\\temit LPTokenUpdated(_lpToken);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets required tvl ratio. Can only be called by the owner.\\n\\t * @param _requiredDepositRatio Ratio in bips.\\n\\t */\\n\\tfunction setRequiredDepositRatio(uint256 _requiredDepositRatio) external onlyOwner {\\n\\t\\trequire(_requiredDepositRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n\\t\\trequiredDepositRatio = _requiredDepositRatio;\\n\\n\\t\\temit RequiredDepositRatioUpdated(_requiredDepositRatio);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets price tolerance ratio. Can only be called by the owner.\\n\\t * @param _priceToleranceRatio Ratio in bips.\\n\\t */\\n\\tfunction setPriceToleranceRatio(uint256 _priceToleranceRatio) external onlyOwner {\\n\\t\\trequire(_priceToleranceRatio >= 8000 && _priceToleranceRatio <= RATIO_DIVISOR, \\\"Invalid ratio\\\");\\n\\t\\tpriceToleranceRatio = _priceToleranceRatio;\\n\\n\\t\\temit PriceToleranceRatioUpdated(_priceToleranceRatio);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets DQ time of the user\\n\\t * @dev Only callable by CIC\\n\\t * @param _user's address\\n\\t * @param _time for DQ\\n\\t */\\n\\tfunction setDqTime(address _user, uint256 _time) external {\\n\\t\\trequire(msg.sender == address(chef), \\\"Only CIC\\\");\\n\\t\\tdisqualifiedTime[_user] = _time;\\n\\n\\t\\temit DqTimeUpdated(_user, _time);\\n\\t}\\n\\n\\t/********************** View functions ***********************/\\n\\n\\t/**\\n\\t * @notice Returns locked RDNT and LP token value in eth\\n\\t * @param user's address\\n\\t */\\n\\tfunction lockedUsdValue(address user) public view returns (uint256) {\\n\\t\\tIMultiFeeDistribution multiFeeDistribution = IMultiFeeDistribution(\\n\\t\\t\\tmiddleFeeDistribution.getMultiFeeDistributionAddress()\\n\\t\\t);\\n\\t\\t(, , uint256 lockedLP, , ) = multiFeeDistribution.lockedBalances(user);\\n\\t\\treturn _lockedUsdValue(lockedLP, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns USD value required to be locked\\n\\t * @param user's address\\n\\t * @return required USD value.\\n\\t */\\n\\tfunction requiredUsdValue(address user) public view returns (uint256 required) {\\n\\t\\t(uint256 totalCollateralUSD, , , , , ) = lendingPool.getUserAccountData(user);\\n\\t\\trequired = totalCollateralUSD.mul(requiredDepositRatio).div(RATIO_DIVISOR);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Is user DQed due to lock expire or price update\\n\\t * @param _user's address\\n\\t */\\n\\tfunction isMarketDisqualified(address _user) public view returns (bool) {\\n\\t\\treturn requiredUsdValue(_user) > 0 && !isEligibleForRewards(_user) && lastEligibleTime(_user) > block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the user is eligible to receive rewards\\n\\t * @param _user's address\\n\\t */\\n\\tfunction isEligibleForRewards(address _user) public view returns (bool isEligible) {\\n\\t\\tuint256 lockedValue = lockedUsdValue(_user);\\n\\t\\tuint256 requiredValue = requiredUsdValue(_user).mul(priceToleranceRatio).div(RATIO_DIVISOR);\\n\\t\\treturn requiredValue != 0 && lockedValue >= requiredValue;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns DQ time of the user\\n\\t * @param _user's address\\n\\t */\\n\\tfunction getDqTime(address _user) public view returns (uint256) {\\n\\t\\treturn disqualifiedTime[_user];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns last eligible time of the user\\n\\t * @dev If user is still eligible, it will return future time\\n\\t *  CAUTION: this function only works perfect when the array\\n\\t *  is ordered by lock time. This is assured when _stake happens.\\n\\t * @param user's address\\n\\t */\\n\\tfunction lastEligibleTime(address user) public view returns (uint256 lastEligibleTimestamp) {\\n\\t\\tuint256 requiredValue = requiredUsdValue(user);\\n\\n\\t\\tIMultiFeeDistribution multiFeeDistribution = IMultiFeeDistribution(\\n\\t\\t\\tmiddleFeeDistribution.getMultiFeeDistributionAddress()\\n\\t\\t);\\n\\t\\tLockedBalance[] memory lpLockData = multiFeeDistribution.lockInfo(user);\\n\\n\\t\\tuint256 lockedLP;\\n\\t\\tuint256 i = lpLockData.length;\\n\\t\\twhile (i > 0) {\\n\\t\\t\\ti = i - 1;\\n\\t\\t\\tlastEligibleTimestamp = lpLockData[i].unlockTime;\\n\\t\\t\\tlockedLP = lockedLP + lpLockData[i].amount;\\n\\n\\t\\t\\tif (_lockedUsdValue(lockedLP, 0) >= requiredValue) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/********************** Operate functions ***********************/\\n\\n\\t/**\\n\\t * @notice Update token price\\n\\t */\\n\\tfunction updatePrice() public {\\n\\t\\tpriceProvider.update();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Refresh token amount for eligibility\\n\\t * @param user's address\\n\\t */\\n\\tfunction refresh(address user) external {\\n\\t\\trequire(msg.sender == address(chef), \\\"Can only be called by CIC\\\");\\n\\t\\tassert(user != address(0));\\n\\n\\t\\tupdatePrice();\\n\\n\\t\\tbool currentEligble = isEligibleForRewards(user);\\n\\t\\tif (currentEligble && disqualifiedTime[user] != 0) {\\n\\t\\t\\tdisqualifiedTime[user] = 0;\\n\\t\\t}\\n\\t\\tlastEligibleStatus[user] = currentEligble;\\n\\t}\\n\\n\\t/********************** Internal functions ***********************/\\n\\n\\t/**\\n\\t * @notice Returns locked RDNT and LP token value in eth\\n\\t * @param lockedLP is locked lp amount\\n\\t * @param lockedRdnt is locked RDNT amount\\n\\t */\\n\\tfunction _lockedUsdValue(uint256 lockedLP, uint256 lockedRdnt) internal view returns (uint256) {\\n\\t\\tuint256 rdntPrice = priceProvider.getTokenPriceUsd();\\n\\t\\tuint256 lpPrice = priceProvider.getLpTokenPriceUsd();\\n\\n\\t\\tuint256 userRdntValueUsd = lockedRdnt.mul(rdntPrice).div(10 ** 18);\\n\\t\\tuint256 userLpValueUsd = lockedLP.mul(lpPrice).div(10 ** 18);\\n\\n\\t\\tuint256 usdLockedVal = userRdntValueUsd.add(userLpValueUsd);\\n\\t\\treturn usdLockedVal;\\n\\t}\\n}\\n\",\"keccak256\":\"0x41b0368f9e6c4d72bf15ddf36ed4ef1dd2b159d74d02804fc839c2753c6c2505\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063d52874da11610097578063e38fdc3611610071578063e38fdc36146103ed578063f2fde38b14610400578063f4640c9314610413578063ff408ae01461042657600080fd5b8063d52874da146103be578063dbbbbc63146103c7578063e2c75ca0146103da57600080fd5b8063a59a9973116100d3578063a59a997314610372578063b888879e14610385578063bae1b24c14610398578063c0c53b8b146103ab57600080fd5b8063715018a6146103395780638da5cb5b14610341578063a0cfb9ff1461035257600080fd5b8063660186e6116101665780636a678a9c116101405780636a678a9c146102e15780636a7e9f33146102f45780636d9077cb146102fd5780636f21a1791461031057600080fd5b8063660186e6146102b3578063673a7e28146102c6578063696c9a7f146102ce57600080fd5b8063436d8039116101a2578063436d803914610221578063563014e51461025a5780635de20b421461026d5780635fcbd285146102a057600080fd5b80630afb0409146101c95780631fc8bc5d146101de57806321cc01c91461020e575b600080fd5b6101dc6101d736600461129d565b61042f565b005b6066546101f1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6067546101f1906001600160a01b031681565b61024c61022f3660046112ba565b606f60209081526000928352604080842090915290825290205481565b604051908152602001610205565b61024c61026836600461129d565b610527565b61029061027b36600461129d565b606c6020526000908152604090205460ff1681565b6040519015158152602001610205565b606b546101f1906001600160a01b031681565b6102906102c136600461129d565b6106c7565b6101dc610711565b6102906102dc36600461129d565b61077b565b6101dc6102ef36600461129d565b6107b3565b61024c61271081565b61024c61030b36600461129d565b610876565b61024c61031e36600461129d565b6001600160a01b03166000908152606d602052604090205490565b6101dc61098e565b6033546001600160a01b03166101f1565b61024c61036036600461129d565b606d6020526000908152604090205481565b6065546101f1906001600160a01b031681565b6068546101f1906001600160a01b031681565b6101dc6103a63660046112f3565b6109a2565b6101dc6103b936600461130c565b610a2f565b61024c60695481565b6101dc6103d536600461129d565b610ca9565b6101dc6103e8366004611357565b610d0c565b61024c6103fb36600461129d565b610dbe565b6101dc61040e36600461129d565b610e72565b6101dc6104213660046112f3565b610f02565b61024c606a5481565b6066546001600160a01b0316331461048e5760405162461bcd60e51b815260206004820152601960248201527f43616e206f6e6c792062652063616c6c6564206279204349430000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166104a4576104a4611383565b6104ac610711565b60006104b7826106c7565b90508080156104dd57506001600160a01b0382166000908152606d602052604090205415155b156104fc576001600160a01b0382166000908152606d60205260408120555b6001600160a01b03919091166000908152606c60205260409020805460ff1916911515919091179055565b60008061053383610dbe565b90506000606760009054906101000a90046001600160a01b03166001600160a01b031663cd57ed6c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190611399565b6040517f6bd3b87c0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152919250600091831690636bd3b87c90602401600060405180830381865afa158015610613573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261063b91908101906114de565b80519091506000905b80156106bd57610655600182611529565b905082818151811061066957610669611540565b602002602001015160200151955082818151811061068957610689611540565b602002602001015160000151826106a09190611556565b9150846106ae836000610f81565b106106b8576106bd565b610644565b5050505050919050565b6000806106d383610876565b905060006106f86127106106f2606a546106ec88610dbe565b906110c4565b906110d0565b905080158015906107095750808210155b949350505050565b606860009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b50505050565b60008061078783610dbe565b11801561079a5750610798826106c7565b155b80156107ad5750426107ab83610527565b115b92915050565b6107bb6110dc565b606b546001600160a01b0316156108145760405162461bcd60e51b815260206004820152601460248201527f4c5020746f6b656e20616c7265616479207365740000000000000000000000006044820152606401610485565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527ff9d1c90c609623055381582a51735b38df3243eb09629a9170b15c2ab6bc0739906020015b60405180910390a150565b600080606760009054906101000a90046001600160a01b03166001600160a01b031663cd57ed6c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611399565b6040517f0483a7f60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919250600091831690630483a7f690602401600060405180830381865afa158015610955573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097d919081019061156e565b505092505050610709816000610f81565b6109966110dc565b6109a06000611136565b565b6109aa6110dc565b611f4081101580156109be57506127108111155b6109fa5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b6044820152606401610485565b606a8190556040518181527f05ace3111616a9d7bc7b769e0162c37e277aa5cdcd34699f9a0e3d7577d0db549060200161086b565b600054610100900460ff1615808015610a4f5750600054600160ff909116105b80610a695750303b158015610a69575060005460ff166001145b610adb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610485565b6000805460ff191660011790558015610afe576000805461ff0019166101001790555b6001600160a01b038416610b545760405162461bcd60e51b815260206004820152601360248201527f4e6f7420612076616c69642061646472657373000000000000000000000000006044820152606401610485565b6001600160a01b038316610baa5760405162461bcd60e51b815260206004820152601360248201527f4e6f7420612076616c69642061646472657373000000000000000000000000006044820152606401610485565b6001600160a01b038216610c005760405162461bcd60e51b815260206004820152601360248201527f4e6f7420612076616c69642061646472657373000000000000000000000000006044820152606401610485565b606580546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff19928316179092556067805486841690831617905560688054928516929091169190911790556101f4606955612328606a55610c5e611195565b8015610775576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b610cb16110dc565b6066805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f3edc4c109bdc9b34f00f24744f770e8de831fd903d0fc75d4d990d5d81b75b989060200161086b565b6066546001600160a01b03163314610d665760405162461bcd60e51b815260206004820152600860248201527f4f6e6c79204349430000000000000000000000000000000000000000000000006044820152606401610485565b6001600160a01b0382166000818152606d6020908152604091829020849055815192835282018390527f1e85ba2a5b06819d522e519e6ebf963f35ad4a709dc2a541ed39ad80f4b3a3be910160405180910390a15050565b6065546040517fbf92857c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092839291169063bf92857c9060240160c060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4991906115d2565b50505050509050610e6b6127106106f2606954846110c490919063ffffffff16565b9392505050565b610e7a6110dc565b6001600160a01b038116610ef65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610485565b610eff81611136565b50565b610f0a6110dc565b612710811115610f4c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420726174696f60981b6044820152606401610485565b60698190556040518181527f063aaf80a21dd5cad9d8adcdc5a53acaa3c2de05dc44c7e2f68783a87460d7fe9060200161086b565b600080606860009054906101000a90046001600160a01b03166001600160a01b0316636d2ed1846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb919061161c565b90506000606860009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611076919061161c565b90506000611090670de0b6b3a76400006106f287866110c4565b905060006110aa670de0b6b3a76400006106f289866110c4565b905060006110b88383611208565b98975050505050505050565b6000610e6b8284611635565b6000610e6b8284611654565b6033546001600160a01b031633146109a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610485565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112005760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610485565b6109a0611214565b6000610e6b8284611556565b600054610100900460ff1661127f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610485565b6109a033611136565b6001600160a01b0381168114610eff57600080fd5b6000602082840312156112af57600080fd5b8135610e6b81611288565b600080604083850312156112cd57600080fd5b82356112d881611288565b915060208301356112e881611288565b809150509250929050565b60006020828403121561130557600080fd5b5035919050565b60008060006060848603121561132157600080fd5b833561132c81611288565b9250602084013561133c81611288565b9150604084013561134c81611288565b809150509250925092565b6000806040838503121561136a57600080fd5b823561137581611288565b946020939093013593505050565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156113ab57600080fd5b8151610e6b81611288565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156113ef576113ef6113b6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561141e5761141e6113b6565b604052919050565b600082601f83011261143757600080fd5b8151602067ffffffffffffffff821115611453576114536113b6565b611461818360051b016113f5565b82815260079290921b8401810191818101908684111561148057600080fd5b8286015b848110156114d3576080818903121561149d5760008081fd5b6114a56113cc565b8151815284820151858201526040808301519082015260608083015190820152835291830191608001611484565b509695505050505050565b6000602082840312156114f057600080fd5b815167ffffffffffffffff81111561150757600080fd5b61070984828501611426565b634e487b7160e01b600052601160045260246000fd5b60008282101561153b5761153b611513565b500390565b634e487b7160e01b600052603260045260246000fd5b6000821982111561156957611569611513565b500190565b600080600080600060a0868803121561158657600080fd5b85519450602086015193506040860151925060608601519150608086015167ffffffffffffffff8111156115b957600080fd5b6115c588828901611426565b9150509295509295909350565b60008060008060008060c087890312156115eb57600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b60006020828403121561162e57600080fd5b5051919050565b600081600019048311821515161561164f5761164f611513565b500290565b60008261167157634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cc5243636841efbd25175019df7a20822d8039054e3de4b677d4ec7f4e71431264736f6c634300080c0033",
  "devdoc": {
    "author": "Radiant Labs",
    "details": "All function calls are currently implemented without side effects",
    "kind": "dev",
    "methods": {
      "getDqTime(address)": {
        "params": {
          "_user": "'s address"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_lendingPool": "Address of lending pool.",
          "_middleFeeDistribution": "MiddleFeeDistribution address.",
          "_priceProvider": "PriceProvider address."
        }
      },
      "isEligibleForRewards(address)": {
        "params": {
          "_user": "'s address"
        }
      },
      "isMarketDisqualified(address)": {
        "params": {
          "_user": "'s address"
        }
      },
      "lastEligibleTime(address)": {
        "details": "If user is still eligible, it will return future time  CAUTION: this function only works perfect when the array  is ordered by lock time. This is assured when _stake happens.",
        "params": {
          "user": "'s address"
        }
      },
      "lockedUsdValue(address)": {
        "params": {
          "user": "'s address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "refresh(address)": {
        "params": {
          "user": "'s address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredUsdValue(address)": {
        "params": {
          "user": "'s address"
        },
        "returns": {
          "required": "USD value."
        }
      },
      "setChefIncentivesController(address)": {
        "params": {
          "_chef": "address."
        }
      },
      "setDqTime(address,uint256)": {
        "details": "Only callable by CIC",
        "params": {
          "_time": "for DQ",
          "_user": "'s address"
        }
      },
      "setPriceToleranceRatio(uint256)": {
        "params": {
          "_priceToleranceRatio": "Ratio in bips."
        }
      },
      "setRequiredDepositRatio(uint256)": {
        "params": {
          "_requiredDepositRatio": "Ratio in bips."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Eligible Deposit Provider",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddToken(address)": {
        "notice": "Emitted when a new token is added"
      },
      "ChefIncentivesControllerUpdated(address)": {
        "notice": "Emitted when CIC is set"
      },
      "DqTimeUpdated(address,uint256)": {
        "notice": "Emitted when DQ time is set"
      },
      "LPTokenUpdated(address)": {
        "notice": "Emitted when LP token is set"
      },
      "PriceToleranceRatioUpdated(uint256)": {
        "notice": "Emitted when price tolerance ratio is updated"
      },
      "RequiredDepositRatioUpdated(uint256)": {
        "notice": "Emitted when required TVL ratio is updated"
      }
    },
    "kind": "user",
    "methods": {
      "RATIO_DIVISOR()": {
        "notice": "RATIO BASE equal to 100%"
      },
      "chef()": {
        "notice": "Address of CIC"
      },
      "disqualifiedTime(address)": {
        "notice": "Disqualified time of the user"
      },
      "getDqTime(address)": {
        "notice": "Returns DQ time of the user"
      },
      "initialize(address,address,address)": {
        "notice": "Constructor"
      },
      "isEligibleForRewards(address)": {
        "notice": "Returns if the user is eligible to receive rewards"
      },
      "isMarketDisqualified(address)": {
        "notice": "Is user DQed due to lock expire or price update"
      },
      "lastEligibleStatus(address)": {
        "notice": "Last eligible status of the user"
      },
      "lastEligibleTime(address)": {
        "notice": "Returns last eligible time of the user"
      },
      "lendingPool()": {
        "notice": "Address of Lending Pool"
      },
      "lockedUsdValue(address)": {
        "notice": "Returns locked RDNT and LP token value in eth"
      },
      "lpToken()": {
        "notice": "RDNT-ETH LP token"
      },
      "middleFeeDistribution()": {
        "notice": "Address of Middle fee distribution"
      },
      "priceProvider()": {
        "notice": "RDNT + LP price provider"
      },
      "priceToleranceRatio()": {
        "notice": "Ratio of the required price to still allow without disqualification; in bips"
      },
      "refresh(address)": {
        "notice": "Refresh token amount for eligibility"
      },
      "requiredDepositRatio()": {
        "notice": "Required ratio of TVL to get reward; in bips"
      },
      "requiredUsdValue(address)": {
        "notice": "Returns USD value required to be locked"
      },
      "setChefIncentivesController(address)": {
        "notice": "Set CIC"
      },
      "setDqTime(address,uint256)": {
        "notice": "Sets DQ time of the user"
      },
      "setLPToken(address)": {
        "notice": "Set LP token"
      },
      "setPriceToleranceRatio(uint256)": {
        "notice": "Sets price tolerance ratio. Can only be called by the owner."
      },
      "setRequiredDepositRatio(uint256)": {
        "notice": "Sets required tvl ratio. Can only be called by the owner."
      },
      "updatePrice()": {
        "notice": "Update token price"
      },
      "userDeposits(address,address)": {
        "notice": "User's deposits per rToken; rToken => user => amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5727,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "lendingPool",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ILendingPool)2435"
      },
      {
        "astId": 5731,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "chef",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IChefIncentivesController)1916"
      },
      {
        "astId": 5735,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "middleFeeDistribution",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IMiddleFeeDistribution)2668"
      },
      {
        "astId": 5739,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "priceProvider",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IPriceProvider)2896"
      },
      {
        "astId": 5742,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "requiredDepositRatio",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 5745,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "priceToleranceRatio",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 5748,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "lpToken",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 5753,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "lastEligibleStatus",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5758,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "disqualifiedTime",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5762,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "eligibleDeposits",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5769,
        "contract": "contracts/radiant/eligibility/EligibilityDataProvider.sol:EligibilityDataProvider",
        "label": "userDeposits",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChefIncentivesController)1916": {
        "encoding": "inplace",
        "label": "contract IChefIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)2435": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)2668": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)2896": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}