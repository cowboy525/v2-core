{
  "address": "0xa06EDfcdc1fc42a9d47A5A10097430747cdF86E9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "BaseBountyUsdTargetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "BountyBoosterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bal",
          "type": "uint256"
        }
      ],
      "name": "BountyReserveEmpty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IChefIncentivesController",
          "name": "_chef",
          "type": "address"
        }
      ],
      "name": "ChefIncentivesControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Disqualified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "HunterShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "MaxBaseBountyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "SlippageLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "addAddressToWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBountyUsdTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyBooster",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "changeWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compounder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityDataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "executeBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hunterShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rdnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mfd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eligibilityDataProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_compounder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hunterShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseBountyUsdTarget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBaseBounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bountyBooster",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mfd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdnt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setBaseBountyUsdTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBounties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setBountyBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setHunterShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setMaxBaseBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setSlippageLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3976bf268f962acee6bbddec53ccf37a7eac8158d3b3194067a5f9fa9275399",
  "receipt": {
    "to": null,
    "from": "0x7759124915160E94C77EcE5B96E8a7fCec44Aa19",
    "contractAddress": "0xa06EDfcdc1fc42a9d47A5A10097430747cdF86E9",
    "transactionIndex": 2,
    "gasUsed": "10798653",
    "logsBloom": "0x
    "blockHash": "0x26e19dedf5b522280e50d9dbfc744c894c9d1d7cd8dbf4ddb33355a37c2fc61b",
    "transactionHash": "0xf3976bf268f962acee6bbddec53ccf37a7eac8158d3b3194067a5f9fa9275399",
    "logs": [],
    "blockNumber": 71246691,
    "cumulativeGasUsed": "11462032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "404520f445277fe3090b6134aff24300",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"BaseBountyUsdTargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"BountyBoosterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"BountyReserveEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IChefIncentivesController\",\"name\":\"_chef\",\"type\":\"address\"}],\"name\":\"ChefIncentivesControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Disqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"HunterShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"MaxBaseBountyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"SlippageLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addAddressToWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBountyUsdTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyBooster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"executeBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hunterShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mfd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eligibilityDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compounder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hunterShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBountyUsdTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBaseBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountyBooster\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdnt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setBaseBountyUsdTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBounties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setBountyBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setHunterShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxBaseBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setSlippageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run.\",\"_user\":\"address can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\"},\"returns\":{\"actionType\":\"which bounty ran\",\"bounty\":\"in RDNT to be paid to Hunter (via vesting)\"}},\"executeBounty(address,bool,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run.\",\"_execute\":\"whether to execute this txn, or just quote what its execution would return can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\",\"_user\":\"address\"},\"returns\":{\"actionType\":\"which bounty ran\",\"bounty\":\"in RDNT to be paid to Hunter (via vesting)\"}},\"getBaseBounty()\":{\"returns\":{\"bounty\":\"in RDNT\"}},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_baseBountyUsdTarget\":\"Base Bounty is paid in RDNT, will scale to match this USD target value\",\"_bountyBooster\":\"when bounties need boosting to clear queue, add this amount (in RDNT)\",\"_chef\":\"CIC, to query bounties for ineligible emissions\",\"_hunterShare\":\"% of reclaimed rewards to send to Hunter\",\"_maxBaseBounty\":\"cap the scaling above\",\"_mfd\":\"MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)\",\"_priceProvider\":\"PriceProvider service, to get RDNT price for bounty quotes\",\"_rdnt\":\"RDNT address\",\"_weth\":\"WETH address\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quote(address)\":{\"params\":{\"_user\":\"address\"},\"returns\":{\"actionType\":\"which of the 3 bounty types (above) to run. getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\",\"bounty\":\"amount of RDNT Hunter will recieve. can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Execute a bounty.\"},\"executeBounty(address,bool,uint256)\":{\"notice\":\"Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\"},\"getBaseBounty()\":{\"notice\":\"Return RDNT amount for Base Bounty. Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter.\"},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize\"},\"quote(address)\":{\"notice\":\"Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/radiant/eligibility/BountyManager.sol\":\"BountyManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7891c7cb47db84da3c58182c8d274fe18eef0e131044608f332e26008337d71e\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/lib/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\n//solhint-disable func-name-mixedcase\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x585cf457b6e8cdba9d212899d36d7ed0fe90cf98310fd8bff067008aca994ba8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/openzeppelin/upgradeability/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract ContextUpgradeable is Initializable {\\n\\tfunction __Context_init() internal onlyInitializing {}\\n\\n\\tfunction __Context_init_unchained() internal onlyInitializing {}\\n\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis;\\n\\t\\treturn msg.data;\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x320bed7499f85b69a3406a7500006a1798f9b3dcf1807af3669bbb33eb3c4099\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private initialized;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\trequire(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tinitialized = true;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns true if and only if the function is running in the constructor\\n\\tfunction isConstructor() private view returns (bool) {\\n\\t\\t// extcodesize checks the size of the code stored in an address, and\\n\\t\\t// address returns the current address. Since the code is still not\\n\\t\\t// deployed when running a constructor, any checks on its code size will\\n\\t\\t// yield zero, making it an effective way to detect if a contract is\\n\\t\\t// under construction or not.\\n\\t\\tuint256 cs;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tcs := extcodesize(address())\\n\\t\\t}\\n\\t\\treturn cs == 0;\\n\\t}\\n\\n\\tmodifier onlyInitializing() {\\n\\t\\trequire(initializing, \\\"Initializable: contract is not initializing\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xd7107a791a9598ec939c22a977e324f3521367a7a447f2875ab48829317e4a07\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tfunction __Ownable_init() internal onlyInitializing {\\n\\t\\t__Ownable_init_unchained();\\n\\t}\\n\\n\\tfunction __Ownable_init_unchained() internal onlyInitializing {\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf4467e9c77539c1294e57ca516fc329ecad0489f2868730c54c6bcaeea5f588e\",\"license\":\"agpl-3.0\"},\"contracts/dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered by `account`.\\n\\t */\\n\\tevent Paused(address account);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted by `account`.\\n\\t */\\n\\tevent Unpaused(address account);\\n\\n\\tbool private _paused;\\n\\n\\t/**\\n\\t * @dev Initializes the contract in unpaused state.\\n\\t */\\n\\tfunction __Pausable_init() internal onlyInitializing {\\n\\t\\t__Pausable_init_unchained();\\n\\t}\\n\\n\\tfunction __Pausable_init_unchained() internal onlyInitializing {\\n\\t\\t_paused = false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is not paused.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must not be paused.\\n\\t */\\n\\tmodifier whenNotPaused() {\\n\\t\\t_requireNotPaused();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier to make a function callable only when the contract is paused.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must be paused.\\n\\t */\\n\\tmodifier whenPaused() {\\n\\t\\t_requirePaused();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns true if the contract is paused, and false otherwise.\\n\\t */\\n\\tfunction paused() public view virtual returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the contract is paused.\\n\\t */\\n\\tfunction _requireNotPaused() internal view virtual {\\n\\t\\trequire(!paused(), \\\"Pausable: paused\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the contract is not paused.\\n\\t */\\n\\tfunction _requirePaused() internal view virtual {\\n\\t\\trequire(paused(), \\\"Pausable: not paused\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Triggers stopped state.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must not be paused.\\n\\t */\\n\\tfunction _pause() internal virtual whenNotPaused {\\n\\t\\t_paused = true;\\n\\t\\temit Paused(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns to normal state.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The contract must be paused.\\n\\t */\\n\\tfunction _unpause() internal virtual whenPaused {\\n\\t\\t_paused = false;\\n\\t\\temit Unpaused(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xed1a2ed066c6dafbfb5830ccf1a015da9d15be91fe5f284ddb80abaaca1f207b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d1f63164155227cf652eb565cda7320d95c1a1b17ee91d1ca4ee7cc8e389538\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n}\\n\",\"keccak256\":\"0xa9405538ab159ea1558f50083c46b97bef614b1255808970807d01f69e8731b8\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ICompounder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface ICompounder {\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 tokensOut);\\n\\n\\tfunction viewPendingRewards(address user) external view returns (address[] memory tokens, uint256[] memory amts);\\n\\n\\tfunction estimateReturns(address _in, address _out, uint256 amtIn) external view returns (uint256 amtOut);\\n}\\n\",\"keccak256\":\"0x357f2a7ef83ea0f75b63beef621ecd01573043d85b44a7a1ee53b64eab0ee0cb\",\"license\":\"MIT\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external;\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction isMarketDisqualified(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2d1b34c70760edccaee3dd3f3814a0fb97d00982411d363b7c6df1454f9e3226\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\\n\",\"keccak256\":\"0xb83ef87aeba0312ab242ba35657ef0283aaf3070df5919c280879bc173638aba\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3046a798837eab90a8a5a144d127825b20474c7a0e6117bcf4b3981f97b92909\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n\\tfunction zap(\\n\\t\\tbool _borrow,\\n\\t\\tuint256 _wethAmt,\\n\\t\\tuint256 _rdntAmt,\\n\\t\\tuint256 _lockTypeIndex\\n\\t) external returns (uint256 liquidity);\\n\\n\\tfunction zapOnBehalf(\\n\\t\\tbool _borrow,\\n\\t\\tuint256 _wethAmt,\\n\\t\\tuint256 _rdntAmt,\\n\\t\\taddress _onBehalf\\n\\t) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x793f8c776c176c851226a1045fb260d6c7202c3ac5b6a10f61cccab69114f767\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2a05517173d141c6d4227a12d8abbc715307ca387acf9444aa3114a09137c495\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdfddfa084983a65236cee7e6f939dfbf27e715f46e60b9e9dbccd5cd4e48ad10\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseTokenPriceInUsdProxyAggregator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x06101420297ac4c13dd8b0436e1ff6098e2c21243927d7e762f15929f5a780e1\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\",\"keccak256\":\"0x613ef57c9ecf4b7a16fe34c64183ec6552483b21f9ffbdee392a0e5ad2c23bf6\",\"license\":\"MIT\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/radiant/eligibility/BountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/lib/contracts/interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/upgradeability/PausableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IAToken.sol\\\";\\nimport \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"../../interfaces/ILendingPool.sol\\\";\\nimport \\\"../../interfaces/ILockZap.sol\\\";\\nimport \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport \\\"../../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../../interfaces/IEligibilityDataProvider.sol\\\";\\nimport \\\"../../interfaces/ICompounder.sol\\\";\\n\\ncontract BountyManager is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\taddress public rdnt;\\n\\taddress public weth;\\n\\taddress public mfd;\\n\\taddress public chef;\\n\\taddress public priceProvider;\\n\\taddress public eligibilityDataProvider;\\n\\taddress public compounder;\\n\\tuint256 public hunterShare;\\n\\tuint256 public baseBountyUsdTarget; // decimals 18\\n\\tuint256 public maxBaseBounty;\\n\\tuint256 public bountyBooster;\\n\\tuint256 public bountyCount;\\n\\tuint256 public minStakeAmount;\\n\\tuint256 public slippageLimit;\\n\\n\\t// Array of available Bounty functions to run. See getMfdBounty, getChefBounty, etc.\\n\\tmapping(uint256 => function(address, bool) returns (address, uint256, bool)) private bounties;\\n\\n\\tmapping(address => bool) public whitelist;\\n\\tbool public whitelistActive;\\n\\n\\tmodifier isWhitelisted() {\\n\\t\\tif (whitelistActive) {\\n\\t\\t\\trequire(whitelist[msg.sender] || msg.sender == address(this), \\\"!whiteliested\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tevent Disqualified(address user);\\n\\tevent ChefIncentivesControllerUpdated(IChefIncentivesController _chef);\\n\\tevent BaseBountyUsdTargetUpdated(uint256 _newVal);\\n\\tevent HunterShareUpdated(uint256 _newVal);\\n\\tevent MaxBaseBountyUpdated(uint256 _newVal);\\n\\tevent BountyBoosterUpdated(uint256 _newVal);\\n\\tevent SlippageLimitUpdated(uint256 _newVal);\\n\\tevent BountyReserveEmpty(uint256 _bal);\\n\\n\\t/**\\n\\t * @notice Initialize\\n\\t * @param _rdnt RDNT address\\n\\t * @param _weth WETH address\\n\\t * @param _mfd MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)\\n\\t * @param _chef CIC, to query bounties for ineligible emissions\\n\\t * @param _priceProvider PriceProvider service, to get RDNT price for bounty quotes\\n\\t * @param _hunterShare % of reclaimed rewards to send to Hunter\\n\\t * @param _baseBountyUsdTarget Base Bounty is paid in RDNT, will scale to match this USD target value\\n\\t * @param _maxBaseBounty cap the scaling above\\n\\t * @param _bountyBooster when bounties need boosting to clear queue, add this amount (in RDNT)\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _rdnt,\\n\\t\\taddress _weth,\\n\\t\\taddress _mfd,\\n\\t\\taddress _chef,\\n\\t\\taddress _priceProvider,\\n\\t\\taddress _eligibilityDataProvider,\\n\\t\\taddress _compounder,\\n\\t\\tuint256 _hunterShare,\\n\\t\\tuint256 _baseBountyUsdTarget,\\n\\t\\tuint256 _maxBaseBounty,\\n\\t\\tuint256 _bountyBooster\\n\\t) external initializer {\\n\\t\\trequire(_rdnt != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_weth != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_mfd != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_chef != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_priceProvider != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_eligibilityDataProvider != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_compounder != address(0), \\\"Not a valid address\\\");\\n\\t\\trequire(_hunterShare <= 10000, \\\"Not a valid number\\\");\\n\\t\\trequire(_baseBountyUsdTarget != 0, \\\"Not a valid number\\\");\\n\\t\\trequire(_maxBaseBounty != 0, \\\"Not a valid number\\\");\\n\\n\\t\\trdnt = _rdnt;\\n\\t\\tweth = _weth;\\n\\t\\tmfd = _mfd;\\n\\t\\tchef = _chef;\\n\\t\\tpriceProvider = _priceProvider;\\n\\t\\teligibilityDataProvider = _eligibilityDataProvider;\\n\\t\\tcompounder = _compounder;\\n\\n\\t\\thunterShare = _hunterShare;\\n\\t\\tbaseBountyUsdTarget = _baseBountyUsdTarget;\\n\\t\\tbountyBooster = _bountyBooster;\\n\\t\\tmaxBaseBounty = _maxBaseBounty;\\n\\n\\t\\tbounties[1] = getMfdBounty;\\n\\t\\tbounties[2] = getChefBounty;\\n\\t\\tbounties[3] = getAutoCompoundBounty;\\n\\t\\tbountyCount = 3;\\n\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\\n\\t * @param _user address\\n\\t * @return bounty amount of RDNT Hunter will recieve.\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @return actionType which of the 3 bounty types (above) to run.\\n\\t * getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\\n\\t */\\n\\tfunction quote(address _user) public view whenNotPaused returns (uint256 bounty, uint256 actionType) {\\n\\t\\t(bool success, bytes memory data) = address(this).staticcall(\\n\\t\\t\\tabi.encodeWithSignature(\\\"executeBounty(address,bool,uint256)\\\", _user, false, 0)\\n\\t\\t);\\n\\t\\trequire(success, \\\"quote fail\\\");\\n\\n\\t\\t(bounty, actionType) = abi.decode(data, (uint256, uint256));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Execute a bounty.\\n\\t * @param _user address\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @param _actionType which of the 3 bounty types (above) to run.\\n\\t * @return bounty in RDNT to be paid to Hunter (via vesting)\\n\\t * @return actionType which bounty ran\\n\\t */\\n\\tfunction claim(\\n\\t\\taddress _user,\\n\\t\\tuint256 _actionType\\n\\t) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\\n\\t\\treturn executeBounty(_user, true, _actionType);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @param _actionType which of the 3 bounty types (above) to run.\\n\\t * @return bounty in RDNT to be paid to Hunter (via vesting)\\n\\t * @return actionType which bounty ran\\n\\t */\\n\\tfunction executeBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionType\\n\\t) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\\n\\t\\tif (_execute && msg.sender != address(this)) {\\n\\t\\t\\trequire(_canBountyHunt(msg.sender), \\\"inelig for bounties\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 totalBounty;\\n\\t\\tbool issueBaseBounty;\\n\\t\\taddress incentivizer;\\n\\t\\tuint256 bb = getBaseBounty();\\n\\n\\t\\t(incentivizer, totalBounty, issueBaseBounty, actionType) = getBestBounty(_user, _execute, _actionType);\\n\\n\\t\\tif (issueBaseBounty) {\\n\\t\\t\\tbounty = bb;\\n\\t\\t} else {\\n\\t\\t\\tif (totalBounty != 0) {\\n\\t\\t\\t\\tbounty = totalBounty.mul(hunterShare).div(10000);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (_execute && bounty != 0) {\\n\\t\\t\\tif (!issueBaseBounty) {\\n\\t\\t\\t\\tIERC20(rdnt).safeTransferFrom(incentivizer, address(this), totalBounty);\\n\\t\\t\\t}\\n\\t\\t\\t_sendBounty(msg.sender, bounty);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _canBountyHunt(address _user) internal view returns (bool) {\\n\\t\\t(, , uint256 lockedLP, , ) = IMFDPlus(mfd).lockedBalances(_user);\\n\\t\\tbool isEmissionsEligible = IEligibilityDataProvider(eligibilityDataProvider).isEligibleForRewards(_user);\\n\\t\\treturn lockedLP >= minDLPBalance() && isEmissionsEligible;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Given a user and actionType, execute that bounty on either CIC or MFD.\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @param _actionTypeIndex, which of the 3 bounty types (above) to run.\\n\\t * @return incentivizer the contract that had a bounty operation performed for it.\\n\\t * Either CIC (to remove ineligible user from emission pool, or MFD to remove expired locks)\\n\\t * @return totalBounty raw amount of RDNT returned from Incentivizer. Hunter % will be deducted from this.\\n\\t * @return issueBaseBounty whether Incentivizer will pay bounty from its own RDNT reserve, or from this contracts RDNT reserve\\n\\t * @return actionType the action type index executed\\n\\t */\\n\\tfunction getBestBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionTypeIndex\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty, uint256 actionType) {\\n\\t\\tif (_actionTypeIndex != 0) {\\n\\t\\t\\t// execute bounty w/ given params\\n\\t\\t\\t(incentivizer, totalBounty, issueBaseBounty) = bounties[_actionTypeIndex](_user, _execute);\\n\\t\\t\\tactionType = _actionTypeIndex;\\n\\t\\t} else {\\n\\t\\t\\tfor (uint256 i = 1; i <= bountyCount; i++) {\\n\\t\\t\\t\\t(incentivizer, totalBounty, issueBaseBounty) = bounties[i](_user, _execute);\\n\\t\\t\\t\\tif (totalBounty != 0 || issueBaseBounty) {\\n\\t\\t\\t\\t\\tactionType = i;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice call MFDPlus.claimBounty()\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer in this case MFD\\n\\t * @return totalBounty RDNT to pay for this _user's bounty execution\\n\\t * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\\n\\t */\\n\\tfunction getMfdBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\\n\\t\\tissueBaseBounty = IMFDPlus(mfd).claimBounty(_user, _execute);\\n\\t\\tincentivizer = mfd;\\n\\t}\\n\\n\\t/**\\n\\t * @notice call CIC.claimBounty()\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer in this case CIC\\n\\t * @return totalBounty RDNT to pay for this _user's bounty execution\\n\\t * false when !autorelock because they will have rewards removed from their ineligible time after locks expired\\n\\t */\\n\\tfunction getChefBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\\n\\t\\tissueBaseBounty = IChefIncentivesController(chef).claimBounty(_user, _execute);\\n\\t\\tincentivizer = chef;\\n\\t}\\n\\n\\t/**\\n\\t * @notice call MFDPlus.claimCompound(). compound pending rewards for _user into locked LP\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer in this case MFDPlus\\n\\t * @return totalBounty RDNT to pay for this _user's bounty execution. paid from Autocompound fee\\n\\t */\\n\\tfunction getAutoCompoundBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\\n\\t\\t(totalBounty) = ICompounder(compounder).claimCompound(_user, _execute);\\n\\t\\tissueBaseBounty = false;\\n\\t\\tincentivizer = compounder;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Vest a bounty in MFD for successful bounty by Hunter\\n\\t * @param _to Hunter address\\n\\t * @param _amount of RDNT\\n\\t * @return amt added to vesting\\n\\t */\\n\\tfunction _sendBounty(address _to, uint256 _amount) internal returns (uint256) {\\n\\t\\tif (_amount == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 bountyReserve = IERC20(rdnt).balanceOf(address(this));\\n\\t\\tif (_amount > bountyReserve) {\\n\\t\\t\\tIERC20(rdnt).safeTransfer(address(mfd), bountyReserve);\\n\\t\\t\\tIMFDPlus(mfd).mint(_to, bountyReserve, true);\\n\\t\\t\\temit BountyReserveEmpty(bountyReserve);\\n\\t\\t\\t_pause();\\n\\t\\t\\treturn bountyReserve;\\n\\t\\t} else {\\n\\t\\t\\tIERC20(rdnt).safeTransfer(address(mfd), _amount);\\n\\t\\t\\tIMFDPlus(mfd).mint(_to, _amount, true);\\n\\t\\t\\treturn _amount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return RDNT amount for Base Bounty.\\n\\t * Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter.\\n\\t * @return bounty in RDNT\\n\\t */\\n\\tfunction getBaseBounty() public view whenNotPaused returns (uint256 bounty) {\\n\\t\\tuint256 rdntPrice = IPriceProvider(priceProvider).getTokenPriceUsd();\\n\\t\\tbounty = baseBountyUsdTarget.mul(1e8).div(rdntPrice);\\n\\t\\tif (bounty > maxBaseBounty) {\\n\\t\\t\\tbounty = maxBaseBounty;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction minDLPBalance() public view returns (uint256 min) {\\n\\t\\tuint256 lpTokenPrice = IPriceProvider(priceProvider).getLpTokenPriceUsd();\\n\\t\\tmin = minStakeAmount.mul(1e8).div(lpTokenPrice);\\n\\t}\\n\\n\\tfunction setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\\n\\t\\tminStakeAmount = _minStakeAmount;\\n\\t}\\n\\n\\tfunction setBaseBountyUsdTarget(uint256 _newVal) external onlyOwner {\\n\\t\\tbaseBountyUsdTarget = _newVal;\\n\\t\\temit BaseBountyUsdTargetUpdated(_newVal);\\n\\t}\\n\\n\\tfunction setHunterShare(uint256 _newVal) external onlyOwner {\\n\\t\\trequire(_newVal <= 10000, \\\"override\\\");\\n\\t\\thunterShare = _newVal;\\n\\t\\temit HunterShareUpdated(_newVal);\\n\\t}\\n\\n\\tfunction setMaxBaseBounty(uint256 _newVal) external onlyOwner {\\n\\t\\tmaxBaseBounty = _newVal;\\n\\t\\temit MaxBaseBountyUpdated(_newVal);\\n\\t}\\n\\n\\tfunction setBountyBooster(uint256 _newVal) external onlyOwner {\\n\\t\\tbountyBooster = _newVal;\\n\\t\\temit BountyBoosterUpdated(_newVal);\\n\\t}\\n\\n\\tfunction setSlippageLimit(uint256 _newVal) external onlyOwner {\\n\\t\\tslippageLimit = _newVal;\\n\\t\\temit SlippageLimitUpdated(_newVal);\\n\\t}\\n\\n\\tfunction setBounties() external onlyOwner {\\n\\t\\tbounties[1] = getMfdBounty;\\n\\t\\tbounties[2] = getChefBounty;\\n\\t\\tbounties[3] = getAutoCompoundBounty;\\n\\t}\\n\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\tIERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n\\t}\\n\\n\\tfunction addAddressToWL(address user, bool status) external onlyOwner {\\n\\t\\twhitelist[user] = status;\\n\\t}\\n\\n\\tfunction changeWL(bool status) external onlyOwner {\\n\\t\\twhitelistActive = status;\\n\\t}\\n\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n}\\n\",\"keccak256\":\"0x6a9bb825654350285f593e81ec0066cbd9f6d41464f790b8150ca5ea02b29bf9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612764806100206000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c80638456cb5911610160578063c0d02c51116100d8578063e011b2891161008c578063f188768411610071578063f188768414610504578063f2fde38b1461050d578063fa2cc3c01461052057600080fd5b8063e011b289146104de578063eb4af045146104f157600080fd5b8063d4743bae116100bd578063d4743bae146104ba578063d8c0e253146104cd578063d9cdd513146104d657600080fd5b8063c0d02c51146104a9578063d1025c0c146104b157600080fd5b8063aad3ec961161012f578063b200e2c811610114578063b200e2c814610470578063b736ca8214610483578063b888879e1461049657600080fd5b8063aad3ec961461044a578063b0c634ee1461045d57600080fd5b80638456cb59146103fb5780638980f11f146104035780638da5cb5b146104165780639b19251a1461042757600080fd5b80633e362c961161020e5780635c975abb116101c25780635ebd4f9f116101a75780635ebd4f9f146103cd578063715018a6146103e057806376e82e8b146103e857600080fd5b80635c975abb146103af5780635d0f5396146103ba57600080fd5b80633fc8cef3116101f35780633fc8cef314610380578063464cea3d146103935780635b07871a146103a657600080fd5b80633e362c961461036f5780633f4ba83a1461037857600080fd5b80631fc8bc5d116102655780632a0233871161024a5780632a0233871461034a5780632a50ddd2146103535780632d54f8231461036657600080fd5b80631fc8bc5d1461030c5780631fe4ba171461033757600080fd5b8063015d87611461029757806302ce5813146102ac5780630b39ed47146102ce5780631a2baad6146102f6575b600080fd5b6102aa6102a5366004612266565b610533565b005b60d9546102b99060ff1681565b60405190151581526020015b60405180910390f35b6102e16102dc36600461229b565b6105bc565b604080519283526020830191909152016102c5565b6102fe610706565b6040519081526020016102c5565b60cc5461031f906001600160a01b031681565b6040516001600160a01b0390911681526020016102c5565b6102aa610345366004612266565b6107d2565b6102fe60d05481565b6102aa610361366004612266565b61084f565b6102fe60d35481565b6102fe60d45481565b6102aa6108cc565b60ca5461031f906001600160a01b031681565b6102aa6103a13660046122c4565b61091e565b6102fe60d65481565b60975460ff166102b9565b60c95461031f906001600160a01b031681565b6102aa6103db366004612266565b610991565b6102aa610a60565b60ce5461031f906001600160a01b031681565b6102aa610ab2565b6102aa6104113660046122fb565b610b02565b6065546001600160a01b031661031f565b6102b961043536600461229b565b60d86020526000908152604090205460ff1681565b6102e16104583660046122fb565b610b74565b60cb5461031f906001600160a01b031681565b6102aa61047e366004612266565b610bfa565b6102aa610491366004612325565b610c77565b60cd5461031f906001600160a01b031681565b6102aa611180565b6102fe60d15481565b6102aa6104c83660046123d5565b611277565b6102fe60d25481565b6102fe6112d2565b6102e16104ec3660046123f9565b611371565b6102aa6104ff366004612266565b6114e3565b6102fe60d55481565b6102aa61051b36600461229b565b611530565b60cf5461031f906001600160a01b031681565b6065546001600160a01b031633146105805760405162461bcd60e51b8152602060048201819052602482015260008051602061270f83398151915260448201526064015b60405180910390fd5b60d28190556040518181527fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e2296906020015b60405180910390a150565b6000806105c7611600565b6040516001600160a01b038416602482015260006044820181905260648201819052908190309060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe011b28900000000000000000000000000000000000000000000000000000000179052516106549190612464565b600060405180830381855afa9150503d806000811461068f576040519150601f19603f3d011682016040523d82523d6000602084013e610694565b606091505b5091509150816106e65760405162461bcd60e51b815260206004820152600a60248201527f71756f7465206661696c000000000000000000000000000000000000000000006044820152606401610577565b808060200190518101906106fa9190612480565b90969095509350505050565b6000610710611600565b60cd54604080517f6d2ed18400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636d2ed1849160048083019260209291908290030181865afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906124a4565b90506107bc816107b66305f5e10060d15461165390919063ffffffff16565b90611668565b915060d2548211156107ce5760d25491505b5090565b6065546001600160a01b0316331461081a5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d68190556040518181527fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d299304906020016105b1565b6065546001600160a01b031633146108975760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d38190556040518181527f36a68bf905dcbd4092d259543b986b02346ebd9663aaacc168ba581b44d63f6c906020016105b1565b6065546001600160a01b031633146109145760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c611674565b565b6065546001600160a01b031633146109665760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b6065546001600160a01b031633146109d95760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b612710811115610a2b5760405162461bcd60e51b815260206004820152600860248201527f6f766572726964650000000000000000000000000000000000000000000000006044820152606401610577565b60d08190556040518181527fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf906020016105b1565b6065546001600160a01b03163314610aa85760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c60006116c6565b6065546001600160a01b03163314610afa5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c611725565b6065546001600160a01b03163314610b4a5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b610b70610b5f6065546001600160a01b031690565b6001600160a01b0384169083611762565b5050565b600080610b7f611600565b60d95460ff1615610be35733600090815260d8602052604090205460ff1680610ba757503330145b610be35760405162461bcd60e51b815260206004820152600d60248201526c085dda1a5d195b1a595cdd1959609a1b6044820152606401610577565b610bef84600185611371565b915091509250929050565b6065546001600160a01b03163314610c425760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d18190556040518181527f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e906020016105b1565b600054610100900460ff1680610c8c5750303b155b80610c9a575060005460ff16155b610d0c5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610577565b600054610100900460ff16158015610d2e576000805461ffff19166101011790555b6001600160a01b038c16610d7a5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038b16610dc65760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038a16610e125760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038916610e5e5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038816610eaa5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038716610ef65760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038616610f425760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b612710851115610f895760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b83610fcb5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b8261100d5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b60c9805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038f81169190911790925560ca805482168e841617905560cb805482168d841617905560cc805482168c841617905560cd805482168b841617905560ce805482168a841617905560cf805490911691881691909117905560d085905560d184905560d382905560d283905560d76020527fa51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4805467ffffffffffffffff1990811661181067ffffffffffffffff908116919091179092557faf10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea75805482166118a78416179055600360008190527f22b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9805490921661193e90931692909217905560d4556111586119f0565b611160611a63565b8015611172576000805461ff00191690555b505050505050505050505050565b6065546001600160a01b031633146111c85760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d76020527fa51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4805467ffffffffffffffff611810811667ffffffffffffffff19928316179092557faf10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea7580546118a7841690831617905560036000527f22b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9805461193e90931692909116919091179055565b6065546001600160a01b031633146112bf5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d9805460ff1916911515919091179055565b60008060cd60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906124a4565b905061136b816107b66305f5e10060d55461165390919063ffffffff16565b91505090565b60008061137c611600565b60d95460ff16156113e05733600090815260d8602052604090205460ff16806113a457503330145b6113e05760405162461bcd60e51b815260206004820152600d60248201526c085dda1a5d195b1a595cdd1959609a1b6044820152606401610577565b8380156113ed5750333014155b15611447576113fb33611ad6565b6114475760405162461bcd60e51b815260206004820152601360248201527f696e656c696720666f7220626f756e74696573000000000000000000000000006044820152606401610577565b600080600080611455610706565b9050611462898989611c13565b97509095509350915082156114795780955061149d565b831561149d5761149a6127106107b660d0548761165390919063ffffffff16565b95505b8780156114a957508515155b156114d757826114cb5760c9546114cb906001600160a01b0316833087611cc1565b6114d53387611d18565b505b50505050935093915050565b6065546001600160a01b0316331461152b5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d555565b6065546001600160a01b031633146115785760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b6001600160a01b0381166115f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610577565b6115fd816116c6565b50565b60975460ff161561091c5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610577565b600061165f82846124d3565b90505b92915050565b600061165f82846124f2565b61167c611f1c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61172d611600565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116a93390565b6040516001600160a01b03831660248201526044810182905261180b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f6e565b505050565b60cb54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af115801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f9190612514565b60cb546001600160a01b031696929550935090915050565b60cc54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af1158015611902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119269190612514565b60cc546001600160a01b031696929550935090915050565b60cf546040517f8f4320740000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015283151560248301526000928392839290911690638f432074906044016020604051808303816000875af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d691906124a4565b60cf546001600160a01b0316969095506000945092505050565b600054610100900460ff16611a5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c612053565b600054610100900460ff16611ace5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c6120c7565b60cb546040517f0483a7f60000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690630483a7f690602401600060405180830381865afa158015611b3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6591908101906125a1565b505060ce546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152929550600094509116915063660186e690602401602060405180830381865afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190612514565b9050611bff6112d2565b8210158015611c0b5750805b949350505050565b60008080808415611c5357600085815260d76020526040902054611c449088908890801561225e021763ffffffff16565b91955093509150849050611cb8565b60015b60d4548111611cb657600081815260d76020526040902054611c859089908990801561225e021763ffffffff16565b9196509450925083151580611c975750825b15611ca457809150611cb6565b80611cae816126aa565b915050611c56565b505b93509350935093565b6040516001600160a01b0380851660248301528316604482015260648101829052611d129085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117a7565b50505050565b600081611d2757506000611662565b60c9546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad91906124a4565b905080831115611e895760cb5460c954611dd4916001600160a01b03918216911683611762565b60cb546040516334686fad60e21b81526001600160a01b03868116600483015260248201849052600160448301529091169063d1a1beb490606401600060405180830381600087803b158015611e2957600080fd5b505af1158015611e3d573d6000803e3d6000fd5b505050507fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b2281604051611e7291815260200190565b60405180910390a1611e82611725565b9050611662565b60cb5460c954611ea6916001600160a01b03918216911685611762565b60cb546040516334686fad60e21b81526001600160a01b03868116600483015260248201869052600160448301529091169063d1a1beb490606401600060405180830381600087803b158015611efb57600080fd5b505af1158015611f0f573d6000803e3d6000fd5b5050505082915050611662565b60975460ff1661091c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610577565b6000611fc3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661213e9092919063ffffffff16565b80519091501561180b5780806020019051810190611fe19190612514565b61180b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610577565b600054610100900460ff166120be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c336116c6565b600054610100900460ff166121325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b6097805460ff19169055565b6060611c0b848460008585600080866001600160a01b031685876040516121659190612464565b60006040518083038185875af1925050503d80600081146121a2576040519150601f19603f3d011682016040523d82523d6000602084013e6121a7565b606091505b50915091506121b8878383876121c3565b979650505050505050565b6060831561222f578251612228576001600160a01b0385163b6122285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610577565b5081611c0b565b611c0b83838151156122445781518083602001fd5b8060405162461bcd60e51b815260040161057791906126c5565b61091c6126f8565b60006020828403121561227857600080fd5b5035919050565b80356001600160a01b038116811461229657600080fd5b919050565b6000602082840312156122ad57600080fd5b61165f8261227f565b80151581146115fd57600080fd5b600080604083850312156122d757600080fd5b6122e08361227f565b915060208301356122f0816122b6565b809150509250929050565b6000806040838503121561230e57600080fd5b6123178361227f565b946020939093013593505050565b60008060008060008060008060008060006101608c8e03121561234757600080fd5b6123508c61227f565b9a5061235e60208d0161227f565b995061236c60408d0161227f565b985061237a60608d0161227f565b975061238860808d0161227f565b965061239660a08d0161227f565b95506123a460c08d0161227f565b945060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b6000602082840312156123e757600080fd5b81356123f2816122b6565b9392505050565b60008060006060848603121561240e57600080fd5b6124178461227f565b92506020840135612427816122b6565b929592945050506040919091013590565b60005b8381101561245357818101518382015260200161243b565b83811115611d125750506000910152565b60008251612476818460208701612438565b9190910192915050565b6000806040838503121561249357600080fd5b505080516020909101519092909150565b6000602082840312156124b657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124ed576124ed6124bd565b500290565b60008261250f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561252657600080fd5b81516123f2816122b6565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561256a5761256a612531565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561259957612599612531565b604052919050565b600080600080600060a086880312156125b957600080fd5b85519450602080870151945060408701519350606080880151935060808089015167ffffffffffffffff808211156125f057600080fd5b818b0191508b601f83011261260457600080fd5b81518181111561261657612616612531565b612624868260051b01612570565b818152868101925060079190911b83018601908d82111561264457600080fd5b928601925b818410156126965784848f0312156126615760008081fd5b612669612547565b84518152878501518882015260408086015190820152868501518782015283529284019291860191612649565b809750505050505050509295509295909350565b60006000198214156126be576126be6124bd565b5060010190565b60208152600082518060208401526126e4816040850160208701612438565b601f01601f19169190910160400192915050565b634e487b7160e01b600052605160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122097f5771ea587cb0718660b5863f5bf7db88ad71424ef8cfa9a3566fbf72b987664736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c80638456cb5911610160578063c0d02c51116100d8578063e011b2891161008c578063f188768411610071578063f188768414610504578063f2fde38b1461050d578063fa2cc3c01461052057600080fd5b8063e011b289146104de578063eb4af045146104f157600080fd5b8063d4743bae116100bd578063d4743bae146104ba578063d8c0e253146104cd578063d9cdd513146104d657600080fd5b8063c0d02c51146104a9578063d1025c0c146104b157600080fd5b8063aad3ec961161012f578063b200e2c811610114578063b200e2c814610470578063b736ca8214610483578063b888879e1461049657600080fd5b8063aad3ec961461044a578063b0c634ee1461045d57600080fd5b80638456cb59146103fb5780638980f11f146104035780638da5cb5b146104165780639b19251a1461042757600080fd5b80633e362c961161020e5780635c975abb116101c25780635ebd4f9f116101a75780635ebd4f9f146103cd578063715018a6146103e057806376e82e8b146103e857600080fd5b80635c975abb146103af5780635d0f5396146103ba57600080fd5b80633fc8cef3116101f35780633fc8cef314610380578063464cea3d146103935780635b07871a146103a657600080fd5b80633e362c961461036f5780633f4ba83a1461037857600080fd5b80631fc8bc5d116102655780632a0233871161024a5780632a0233871461034a5780632a50ddd2146103535780632d54f8231461036657600080fd5b80631fc8bc5d1461030c5780631fe4ba171461033757600080fd5b8063015d87611461029757806302ce5813146102ac5780630b39ed47146102ce5780631a2baad6146102f6575b600080fd5b6102aa6102a5366004612266565b610533565b005b60d9546102b99060ff1681565b60405190151581526020015b60405180910390f35b6102e16102dc36600461229b565b6105bc565b604080519283526020830191909152016102c5565b6102fe610706565b6040519081526020016102c5565b60cc5461031f906001600160a01b031681565b6040516001600160a01b0390911681526020016102c5565b6102aa610345366004612266565b6107d2565b6102fe60d05481565b6102aa610361366004612266565b61084f565b6102fe60d35481565b6102fe60d45481565b6102aa6108cc565b60ca5461031f906001600160a01b031681565b6102aa6103a13660046122c4565b61091e565b6102fe60d65481565b60975460ff166102b9565b60c95461031f906001600160a01b031681565b6102aa6103db366004612266565b610991565b6102aa610a60565b60ce5461031f906001600160a01b031681565b6102aa610ab2565b6102aa6104113660046122fb565b610b02565b6065546001600160a01b031661031f565b6102b961043536600461229b565b60d86020526000908152604090205460ff1681565b6102e16104583660046122fb565b610b74565b60cb5461031f906001600160a01b031681565b6102aa61047e366004612266565b610bfa565b6102aa610491366004612325565b610c77565b60cd5461031f906001600160a01b031681565b6102aa611180565b6102fe60d15481565b6102aa6104c83660046123d5565b611277565b6102fe60d25481565b6102fe6112d2565b6102e16104ec3660046123f9565b611371565b6102aa6104ff366004612266565b6114e3565b6102fe60d55481565b6102aa61051b36600461229b565b611530565b60cf5461031f906001600160a01b031681565b6065546001600160a01b031633146105805760405162461bcd60e51b8152602060048201819052602482015260008051602061270f83398151915260448201526064015b60405180910390fd5b60d28190556040518181527fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e2296906020015b60405180910390a150565b6000806105c7611600565b6040516001600160a01b038416602482015260006044820181905260648201819052908190309060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe011b28900000000000000000000000000000000000000000000000000000000179052516106549190612464565b600060405180830381855afa9150503d806000811461068f576040519150601f19603f3d011682016040523d82523d6000602084013e610694565b606091505b5091509150816106e65760405162461bcd60e51b815260206004820152600a60248201527f71756f7465206661696c000000000000000000000000000000000000000000006044820152606401610577565b808060200190518101906106fa9190612480565b90969095509350505050565b6000610710611600565b60cd54604080517f6d2ed18400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636d2ed1849160048083019260209291908290030181865afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906124a4565b90506107bc816107b66305f5e10060d15461165390919063ffffffff16565b90611668565b915060d2548211156107ce5760d25491505b5090565b6065546001600160a01b0316331461081a5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d68190556040518181527fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d299304906020016105b1565b6065546001600160a01b031633146108975760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d38190556040518181527f36a68bf905dcbd4092d259543b986b02346ebd9663aaacc168ba581b44d63f6c906020016105b1565b6065546001600160a01b031633146109145760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c611674565b565b6065546001600160a01b031633146109665760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b6065546001600160a01b031633146109d95760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b612710811115610a2b5760405162461bcd60e51b815260206004820152600860248201527f6f766572726964650000000000000000000000000000000000000000000000006044820152606401610577565b60d08190556040518181527fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf906020016105b1565b6065546001600160a01b03163314610aa85760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c60006116c6565b6065546001600160a01b03163314610afa5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b61091c611725565b6065546001600160a01b03163314610b4a5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b610b70610b5f6065546001600160a01b031690565b6001600160a01b0384169083611762565b5050565b600080610b7f611600565b60d95460ff1615610be35733600090815260d8602052604090205460ff1680610ba757503330145b610be35760405162461bcd60e51b815260206004820152600d60248201526c085dda1a5d195b1a595cdd1959609a1b6044820152606401610577565b610bef84600185611371565b915091509250929050565b6065546001600160a01b03163314610c425760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d18190556040518181527f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e906020016105b1565b600054610100900460ff1680610c8c5750303b155b80610c9a575060005460ff16155b610d0c5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610577565b600054610100900460ff16158015610d2e576000805461ffff19166101011790555b6001600160a01b038c16610d7a5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038b16610dc65760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038a16610e125760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038916610e5e5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038816610eaa5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038716610ef65760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b6001600160a01b038616610f425760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610577565b612710851115610f895760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b83610fcb5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b8261100d5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903b30b634b210373ab6b132b960711b6044820152606401610577565b60c9805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038f81169190911790925560ca805482168e841617905560cb805482168d841617905560cc805482168c841617905560cd805482168b841617905560ce805482168a841617905560cf805490911691881691909117905560d085905560d184905560d382905560d283905560d76020527fa51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4805467ffffffffffffffff1990811661181067ffffffffffffffff908116919091179092557faf10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea75805482166118a78416179055600360008190527f22b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9805490921661193e90931692909217905560d4556111586119f0565b611160611a63565b8015611172576000805461ff00191690555b505050505050505050505050565b6065546001600160a01b031633146111c85760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d76020527fa51546995d065b44a0663f742232ea3f69c2e6e2f799ed388e1fe3b148a95ee4805467ffffffffffffffff611810811667ffffffffffffffff19928316179092557faf10985cb874cd725a16cb5769c92fd785332faac9dbd01b251e0a7221cbea7580546118a7841690831617905560036000527f22b9767c687db4fc60e8fd58df05805b96575c40fcf136626932ccd5579486f9805461193e90931692909116919091179055565b6065546001600160a01b031633146112bf5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d9805460ff1916911515919091179055565b60008060cd60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906124a4565b905061136b816107b66305f5e10060d55461165390919063ffffffff16565b91505090565b60008061137c611600565b60d95460ff16156113e05733600090815260d8602052604090205460ff16806113a457503330145b6113e05760405162461bcd60e51b815260206004820152600d60248201526c085dda1a5d195b1a595cdd1959609a1b6044820152606401610577565b8380156113ed5750333014155b15611447576113fb33611ad6565b6114475760405162461bcd60e51b815260206004820152601360248201527f696e656c696720666f7220626f756e74696573000000000000000000000000006044820152606401610577565b600080600080611455610706565b9050611462898989611c13565b97509095509350915082156114795780955061149d565b831561149d5761149a6127106107b660d0548761165390919063ffffffff16565b95505b8780156114a957508515155b156114d757826114cb5760c9546114cb906001600160a01b0316833087611cc1565b6114d53387611d18565b505b50505050935093915050565b6065546001600160a01b0316331461152b5760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b60d555565b6065546001600160a01b031633146115785760405162461bcd60e51b8152602060048201819052602482015260008051602061270f8339815191526044820152606401610577565b6001600160a01b0381166115f45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610577565b6115fd816116c6565b50565b60975460ff161561091c5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610577565b600061165f82846124d3565b90505b92915050565b600061165f82846124f2565b61167c611f1c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61172d611600565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116a93390565b6040516001600160a01b03831660248201526044810182905261180b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f6e565b505050565b60cb54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af115801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f9190612514565b60cb546001600160a01b031696929550935090915050565b60cc54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af1158015611902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119269190612514565b60cc546001600160a01b031696929550935090915050565b60cf546040517f8f4320740000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015283151560248301526000928392839290911690638f432074906044016020604051808303816000875af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d691906124a4565b60cf546001600160a01b0316969095506000945092505050565b600054610100900460ff16611a5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c612053565b600054610100900460ff16611ace5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c6120c7565b60cb546040517f0483a7f60000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690630483a7f690602401600060405180830381865afa158015611b3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6591908101906125a1565b505060ce546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152929550600094509116915063660186e690602401602060405180830381865afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf59190612514565b9050611bff6112d2565b8210158015611c0b5750805b949350505050565b60008080808415611c5357600085815260d76020526040902054611c449088908890801561225e021763ffffffff16565b91955093509150849050611cb8565b60015b60d4548111611cb657600081815260d76020526040902054611c859089908990801561225e021763ffffffff16565b9196509450925083151580611c975750825b15611ca457809150611cb6565b80611cae816126aa565b915050611c56565b505b93509350935093565b6040516001600160a01b0380851660248301528316604482015260648101829052611d129085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117a7565b50505050565b600081611d2757506000611662565b60c9546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad91906124a4565b905080831115611e895760cb5460c954611dd4916001600160a01b03918216911683611762565b60cb546040516334686fad60e21b81526001600160a01b03868116600483015260248201849052600160448301529091169063d1a1beb490606401600060405180830381600087803b158015611e2957600080fd5b505af1158015611e3d573d6000803e3d6000fd5b505050507fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b2281604051611e7291815260200190565b60405180910390a1611e82611725565b9050611662565b60cb5460c954611ea6916001600160a01b03918216911685611762565b60cb546040516334686fad60e21b81526001600160a01b03868116600483015260248201869052600160448301529091169063d1a1beb490606401600060405180830381600087803b158015611efb57600080fd5b505af1158015611f0f573d6000803e3d6000fd5b5050505082915050611662565b60975460ff1661091c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610577565b6000611fc3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661213e9092919063ffffffff16565b80519091501561180b5780806020019051810190611fe19190612514565b61180b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610577565b600054610100900460ff166120be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b61091c336116c6565b600054610100900460ff166121325760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610577565b6097805460ff19169055565b6060611c0b848460008585600080866001600160a01b031685876040516121659190612464565b60006040518083038185875af1925050503d80600081146121a2576040519150601f19603f3d011682016040523d82523d6000602084013e6121a7565b606091505b50915091506121b8878383876121c3565b979650505050505050565b6060831561222f578251612228576001600160a01b0385163b6122285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610577565b5081611c0b565b611c0b83838151156122445781518083602001fd5b8060405162461bcd60e51b815260040161057791906126c5565b61091c6126f8565b60006020828403121561227857600080fd5b5035919050565b80356001600160a01b038116811461229657600080fd5b919050565b6000602082840312156122ad57600080fd5b61165f8261227f565b80151581146115fd57600080fd5b600080604083850312156122d757600080fd5b6122e08361227f565b915060208301356122f0816122b6565b809150509250929050565b6000806040838503121561230e57600080fd5b6123178361227f565b946020939093013593505050565b60008060008060008060008060008060006101608c8e03121561234757600080fd5b6123508c61227f565b9a5061235e60208d0161227f565b995061236c60408d0161227f565b985061237a60608d0161227f565b975061238860808d0161227f565b965061239660a08d0161227f565b95506123a460c08d0161227f565b945060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b6000602082840312156123e757600080fd5b81356123f2816122b6565b9392505050565b60008060006060848603121561240e57600080fd5b6124178461227f565b92506020840135612427816122b6565b929592945050506040919091013590565b60005b8381101561245357818101518382015260200161243b565b83811115611d125750506000910152565b60008251612476818460208701612438565b9190910192915050565b6000806040838503121561249357600080fd5b505080516020909101519092909150565b6000602082840312156124b657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124ed576124ed6124bd565b500290565b60008261250f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561252657600080fd5b81516123f2816122b6565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561256a5761256a612531565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561259957612599612531565b604052919050565b600080600080600060a086880312156125b957600080fd5b85519450602080870151945060408701519350606080880151935060808089015167ffffffffffffffff808211156125f057600080fd5b818b0191508b601f83011261260457600080fd5b81518181111561261657612616612531565b612624868260051b01612570565b818152868101925060079190911b83018601908d82111561264457600080fd5b928601925b818410156126965784848f0312156126615760008081fd5b612669612547565b84518152878501518882015260408086015190820152868501518782015283529284019291860191612649565b809750505050505050509295509295909350565b60006000198214156126be576126be6124bd565b5060010190565b60208152600082518060208401526126e4816040850160208701612438565b601f01601f19169190910160400192915050565b634e487b7160e01b600052605160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122097f5771ea587cb0718660b5863f5bf7db88ad71424ef8cfa9a3566fbf72b987664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run.",
          "_user": "address can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)"
        },
        "returns": {
          "actionType": "which bounty ran",
          "bounty": "in RDNT to be paid to Hunter (via vesting)"
        }
      },
      "executeBounty(address,bool,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run.",
          "_execute": "whether to execute this txn, or just quote what its execution would return can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)",
          "_user": "address"
        },
        "returns": {
          "actionType": "which bounty ran",
          "bounty": "in RDNT to be paid to Hunter (via vesting)"
        }
      },
      "getBaseBounty()": {
        "returns": {
          "bounty": "in RDNT"
        }
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_baseBountyUsdTarget": "Base Bounty is paid in RDNT, will scale to match this USD target value",
          "_bountyBooster": "when bounties need boosting to clear queue, add this amount (in RDNT)",
          "_chef": "CIC, to query bounties for ineligible emissions",
          "_hunterShare": "% of reclaimed rewards to send to Hunter",
          "_maxBaseBounty": "cap the scaling above",
          "_mfd": "MFD, to send bounties as vesting RDNT to Hunter (user calling bounty)",
          "_priceProvider": "PriceProvider service, to get RDNT price for bounty quotes",
          "_rdnt": "RDNT address",
          "_weth": "WETH address"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quote(address)": {
        "params": {
          "_user": "address"
        },
        "returns": {
          "actionType": "which of the 3 bounty types (above) to run. getBestBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)",
          "bounty": "amount of RDNT Hunter will recieve. can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256)": {
        "notice": "Execute a bounty."
      },
      "executeBounty(address,bool,uint256)": {
        "notice": "Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting."
      },
      "getBaseBounty()": {
        "notice": "Return RDNT amount for Base Bounty. Base Bounty used to incentivize operations that dont generate their own reward to pay to Hunter."
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize"
      },
      "quote(address)": {
        "notice": "Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2237,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2240,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2307,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2230,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2318,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2423,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2445,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2550,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5376,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "rdnt",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 5378,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "weth",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 5380,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "mfd",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 5382,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "chef",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 5384,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "priceProvider",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 5386,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "eligibilityDataProvider",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 5388,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "compounder",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 5390,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "hunterShare",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 5392,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "baseBountyUsdTarget",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 5394,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "maxBaseBounty",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 5396,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "bountyBooster",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 5398,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "bountyCount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 5400,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 5402,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "slippageLimit",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 5418,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "bounties",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))"
      },
      {
        "astId": 5422,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5424,
        "contract": "contracts/radiant/eligibility/BountyManager.sol:BountyManager",
        "label": "whitelistActive",
        "offset": 0,
        "slot": "217",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)": {
        "encoding": "inplace",
        "label": "function (address,bool) returns (address,uint256,bool)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => function (address,bool) returns (address,uint256,bool))",
        "numberOfBytes": "32",
        "value": "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}